{"version":3,"file":"static/js/7653.9311d391.chunk.js","mappings":"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","sources":["constants.js","utils/common.js","utils/firebaseUtils.js"],"sourcesContent":["import { FaSnowflake, FaWifi, FaTint, FaToilet, FaPlug, FaFireExtinguisher, FaFirstAid, FaVideo, FaCreditCard, FaParking  } from 'react-icons/fa';\n\nexport const STATUSES = {\n    SUBMITTED: \"Submitted\",\n    UNDER_REVIEW: \"Under Review\",\n    REVIEWED: \"Reviewed\",\n    VERIFIED: \"Verified\",\n    VERIFICATION_FAILED: \"Verification Failed\",\n};\n\nexport const DRAFT_COLLECTIONS = {\n    DRAFT_STUDIOS: 'DraftStudios',\n    DRAFT_WORKSHOPS: 'DraftWorkshops',\n    DRAFT_OPEN_CLASSES: 'DraftOpenClasses',\n    DRAFT_COURSES: 'DraftCourses'\n};\n\nexport const LEVELS = {\n    ALL : \"All\",\n    BEGINNERS : \"Beginner\", \n    INTERMEDIATE :\"Intermediate\", \n    ADVANCED :\"Advanced\"\n}\nexport const ENTITY_FLAG = {\n    INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR : 30,\n    WORKSHOPS_BOOKING_LIMIT : 10,\n    OPEN_CLASSES_BOOKING_LIMIT : 2,\n    COURSES_BOOKING_LIMIT : 10,\n}\n\n\nexport const SERVER_URLS = {\n    CLOUD : process.env.REACT_APP_BACKEND_URL,\n    LOCAL : 'http://127.0.0.1:8000/'\n}\n\nexport const COLORS = {\n    GREEN: { backgroundColor: \"#28a745\", color: \"#fff\" },     // Green background, white text\n    BLUE: { backgroundColor: \"#007bff\", color: \"#fff\" },      // Blue background, white text\n    YELLOW: { backgroundColor: \"#ffc107\", color: \"#000\" },    // Yellow background, black text\n    RED: { backgroundColor: \"#dc3545\", color: \"#fff\" },       // Red background, white text\n    PURPLE: { backgroundColor: \"#6f42c1\", color: \"#fff\" },    // Purple background, white text\n    ORANGE: { backgroundColor: \"#fd7e14\", color: \"#fff\" },    // Orange background, white text\n    TEAL: { backgroundColor: \"#20c997\", color: \"#fff\" },      // Teal background, white text\n    PINK: { backgroundColor: \"#e83e8c\", color: \"#fff\" },      // Pink background, white text\n    GRAY: { backgroundColor: \"#6c757d\", color: \"#fff\" },       // Gray background, white text\n\n    LIGHTBLUE: { backgroundColor: \"#17a2b8\", color: \"#fff\" }, // Light blue background, white text\n    DARKBLUE: { backgroundColor: \"#343a40\", color: \"#fff\" },  // Dark blue background, white text\n    CYAN: { backgroundColor: \"#00bcd4\", color: \"#fff\" },      // Cyan background, white text\n    INDIGO: { backgroundColor: \"#6610f2\", color: \"#fff\" },    // Indigo background, white text\n    LIME: { backgroundColor: \"#cddc39\", color: \"#000\" },      // Lime background, black text\n    AMBER: { backgroundColor: \"#ffca28\", color: \"#000\" },     // Amber background, black text\n    BROWN: { backgroundColor: \"#795548\", color: \"#fff\" },     // Brown background, white text\n    LIGHTGREEN: { backgroundColor: \"#8bc34a\", color: \"#000\" },// Light green background, black text\n    DEEPPURPLE: { backgroundColor: \"#673ab7\", color: \"#fff\" },// Deep purple background, white text\n    DEEPORANGE: { backgroundColor: \"#ff5722\", color: \"#fff\" },// Deep orange background, white text\n    BLACK: { backgroundColor: \"#000000\", color: \"#fff\" },     // Black background, white text\n    WHITE: { backgroundColor: \"#ffffff\", color: \"#000\" },     // White background, black text\n    SILVER: { backgroundColor: \"#c0c0c0\", color: \"#000\" },    // Silver background, black text\n    GOLD: { backgroundColor: \"#ffd700\", color: \"#000\" },      // Gold background, black text\n    NAVY: { backgroundColor: \"#001f3f\", color: \"#fff\" },      // Navy background, white text\n    OLIVE: { backgroundColor: \"#3d9970\", color: \"#fff\" },     // Olive background, white text\n\n  };\n\nexport const CHIP_LEVELS_DESIGN = {\n    [LEVELS.ALL]: COLORS.GREEN,           // Green background, white text\n    [LEVELS.BEGINNERS]: COLORS.BLUE,     // Blue background, white text\n    [LEVELS.INTERMEDIATE]: COLORS.YELLOW,  // Yellow background, black text\n    [LEVELS.ADVANCED]: COLORS.RED      // Red background, white text\n  };\n  \n\n  \nexport const danceStylesColorChips = [COLORS.PURPLE,COLORS.ORANGE,COLORS.TEAL,COLORS.LIME]\n\nexport const COLLECTIONS = {\n    USER: \"User\",\n    USER_KYC:\"UserKyc\",\n    ADMIN:\"Admin\",\n    REVIEWS: \"Reviews\",\n    TRANSACTIONS: \"Transactions\",\n    STUDIO: \"Studio\",\n    INSTRUCTORS: \"Instructors\",\n    FREE_TRIAL_BOOKINGS:\"FreeTrialBookings\",\n    WORKSHOPS: 'Workshops',\n    OPEN_CLASSES: 'OpenClasses',\n    COURSES: 'Courses',\n    BOOKINGS: 'Bookings',\n}\n\nexport const STORAGES ={\n    STUDIOIMAGES:'StudioImages',\n    STUDIOICON:'StudioIcon',\n    STUDIOANNOUNCEMENTS :'StudioAnnouncements',\n    USERIMAGE:'UserImage',\n    INSTRUCTORIMAGES: 'InstructorImages',\n    WORKSHOPICON :\"WorkshopIcon\",\n    WORKSHOPIMAGES :\"WorkshopImages\",\n    OPENCLASSICON :\"OpenClassIcon\",\n    COURSEICON :\"CourseIcon\",\n    CREATORS_KYC_DOCUMENTS :\"CreatorKycDocuments\"\n}\n\nexport const SEARCH_FILTERS ={\n    DANCEFORMS:'danceforms',\n    DISTANCES:'distances',\n}\n\nexport const BASEURL_DEV = \"http://0.0.0.0:8000/\"\nexport const BASEURL_PROD= process.env.REACT_APP_BACKEND_URL\n\nexport const AMENITIES_ICONS = {\n    \"AC\": <FaSnowflake />,\n    \"Free Wifi\": <FaWifi />,\n    \"RO Water\": <FaTint />,\n    \"Toilet\": <FaToilet />,\n    \"Power Backup\": <FaPlug />,\n    \"Fire Extinguisher\": <FaFireExtinguisher />,\n    \"First Aid Kit\": <FaFirstAid />,\n    \"CCTV Camera\": <FaVideo />,\n    \"Card Payment\": <FaCreditCard />,\n    \"Parking Space\": <FaParking />,\n};\n\n","import { COLORS, SERVER_URLS,BASEURL_DEV,BASEURL_PROD } from \"../constants\";\n\nexport async function postData(dbPayload, collection_name, notify, metadata) {\n  const BASEURL = BASEURL_PROD;\n  const endpoint = 'crud/newEntity/'; // Define your endpoint here\n  const authToken = localStorage.getItem(\"authToken\");\n  try {\n    const response = await fetch(BASEURL + endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        data: dbPayload,\n        collection_name: collection_name,\n        notify: notify,\n        metadata : metadata,\n      }),\n    });\n\n    if (!response.ok) {\n      console.log('Error in postData:', response);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response;\n  } catch (error) {\n    console.error('Error in postData:', error);\n    throw error;\n  }\n}\n\nexport async function putData(dbPayload, collection_name, entity_id, notify = null, metadata = null) {\n  const BASEURL = BASEURL_PROD;\n  const endpoint = `crud/updateEntity/${entity_id}`;\n  const authToken = localStorage.getItem(\"authToken\");\n  try {\n    const response = await fetch(BASEURL + endpoint, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        data: dbPayload,\n        collection_name: collection_name,\n        notify: notify,\n        metadata : metadata,\n      }),\n    });\n\n    if (!response.ok) {\n      console.log('Error in postData:', response);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response;\n  } catch (error) {\n    console.error('Error in postData:', error);\n    throw error;\n  }\n}\n\nexport const getRandomColor = () => {\n  const colorKeys = Object.keys(COLORS);\n  const randomKey = colorKeys[Math.floor(Math.random() * colorKeys.length)];\n  return COLORS[randomKey];\n};\n\nexport const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const bookEntity = async (bookingData) => {\n  const url = `${SERVER_URLS.CLOUD}bookings/bookEntity/`; \n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        userId: bookingData.userId,\n        entityType: bookingData.entityType,\n        entityId: bookingData.entityId,\n        associatedStudioId: bookingData.associatedStudioId,\n        emailLearner: bookingData.emailLearner,\n        personsAllowed: bookingData.personsAllowed,\n        pricePerPerson: bookingData.pricePerPerson,\n      })\n    });\n\n    const result = await response.json();\n    \n    if (response.ok) {\n      console.log('Booking successful:', result);\n      return result;  // Return the successful result\n    } else {\n      console.error('Booking failed:', result);\n      return result;  // Return null or an error message\n    }\n    \n  } catch (error) {\n    console.error('Error occurred while booking:', error);\n    return null;  // Return null or an error message\n  }\n};\n\n\n// Function to decode a Unicode (UTF-8) encoded string back to the original text\nexport const decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nexport const convertToHtmlEntities= (text) =>{\n  return text.replace(/[\\u00A0-\\u9999<>\\&]/gim, function(i) {\n      return '&#' + i.charCodeAt(0) + ';';\n  });\n}\n\nexport const getYoutubeVideoId = (link)=> {\n  console.log(\"MediaDisplay\", link)\n  if (!link){\n    return null\n  }\n  const text = link.trim();\n  const youtubeRegExp = /(?:https?:\\/\\/)?(?:www\\.|m\\.)?(?:youtube\\.com\\/(?:watch\\?v=|embed\\/|v\\/|shorts\\/)|youtu\\.be\\/)([\\w\\-]+)/;\n  const match = text.match(youtubeRegExp);\n  let videoId = null;\n\n  if (match) {\n    videoId = match[1];\n  }\n  console.log(\"MediaDisplay\", videoId)\n  return videoId\n}\n\nexport const formatDateString = (dateString = \"\") => {\n  // Split the input date string\n  const [year, month, day] = dateString.split('-');\n\n  // Create an array of month names\n  const monthNames = [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n  ];\n\n  // Determine the ordinal suffix for the day\n  const daySuffix = (day) => {\n      const lastDigit = day % 10;\n      const suffix = (lastDigit === 1 && day !== '11') ? 'st' :\n                     (lastDigit === 2 && day !== '12') ? 'nd' :\n                     (lastDigit === 3 && day !== '13') ? 'rd' : 'th';\n      return `${day}${suffix}`;\n  };\n\n  // Format and return the final date string\n  return `${daySuffix(day)} ${monthNames[parseInt(month) - 1]}, ${year}`;\n}\n\nexport const gradientStyles = [\n  { background: 'linear-gradient(to bottom right, #FFD700, #FFA500)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #00BFFF, #1E90FF)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #32CD32, #008000)', color: 'white' },\n  { background: 'linear-gradient(to bottom right, #FFA500, #FF4500)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #DC143C, #8B0000)', color: 'white' },\n  { background: 'linear-gradient(to bottom right, #000000, #2F4F4F)', color: 'white' },\n];","import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, query, getDocs, where, getCountFromServer } from 'firebase/firestore';\nimport { db } from '../config';\nimport {ref,listAll,getDownloadURL,uploadBytes, deleteObject, uploadBytesResumable  } from \"firebase/storage\";\nimport { storage } from '../config';\nimport { BASEURL_DEV, BASEURL_PROD } from '../constants';\nimport secureLocalStorage from 'react-secure-storage';\n\nexport const setCreatorMode = async (uid) => {\n  const BASEURL = BASEURL_PROD;\n  const url = `${BASEURL}crud/getUserMode/${uid}`;\n  //console.log(\"creatorMode uid\", uid, url);\n  \n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.success) {\n      let mode = false;\n      if (data.data === true) {\n        mode = true;\n      }\n      //console.log(\"setCreatorMode: Is User a creator?\", mode);\n      secureLocalStorage.setItem('CreatorMode', mode);\n    } else {\n      console.log(\"Error: \", data.message || \"Unknown error\");\n      //secureLocalStorage.setItem('CreatorMode', false);\n    }\n    \n  } catch (error) {\n    console.log(\"Error fetching user mode: \", error);\n    secureLocalStorage.setItem('CreatorMode', false);\n  }\n}\n\nexport const fetchStudioEntities = async (studioId, entityType, setState) => {\n  const BASE_URL = BASEURL_PROD;\n  try {\n    const url = `${BASE_URL}crud/${studioId}/${entityType}/`;\n    console.log(url)\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.success) {\n      setState(data.data);\n    } else {\n      console.error(`Error fetching ${entityType}:`, data.error);\n    }\n  } catch (error) {\n    console.error(`Error fetching ${entityType}:`, error);\n  }\n};\n\n\nexport const getCreatorMode = async () => {\n  try{\n    const mode = secureLocalStorage.getItem('CreatorMode');\n    console.log(\"getCreatorMode \",mode)\n    if (mode){\n      return mode\n    }else{\n      return false\n    }\n  } \n  catch(error){\n    console.log(\" error\");\n    return false\n  }\n}\n\nexport const setGetCreatorModeOnMount = async (uid) => {\n  await setCreatorMode(uid);\n  return await getCreatorMode();\n};\n\n\n// Read operation with image URL\nexport const readDocumentWithImageUrl = async (collectionName, productId) => {\n    console.log(\"Debug \",`${collectionName}/${productId}`)\n    const storagePath = `${collectionName}/${productId}`;\n    const folderRef = ref(storage,storagePath);\n    try {\n        const result = await listAll(folderRef);\n        if (result.items.length > 0) {\n            const firstFileRef = result.items[0];\n            const url = await getDownloadURL(firstFileRef);\n            console.log('Debug URL:', url);\n            return url;\n          } else {\n            console.log('Debug No files found in the folder.');\n            return null;\n          }\n    } catch (error) {\n      console.error('Error getting image URL:', error);\n      return null;\n    }\n  };\n\n// Read operation\nexport const readDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    const docSnapshot = await getDoc(docRef);\n    return docSnapshot.exists() ? docSnapshot.data() : null;\n};\n\n// Create or Update operation\nexport const saveDocument = async (collectionName, documentId, data) => {\n    const docRef = doc(db, collectionName, documentId);\n    await setDoc(docRef, data, { merge: true });\n    return data;\n};\n\n\nexport const handleSavePostOTPSuccess = async (collectionName, documentId, phoneNumber) => {\n  const docRef = doc(db, collectionName, documentId);\n  await updateDoc(docRef, {isPhoneNumberVerified:true,phoneNumber});\n  return true;\n};\n\n// Update specific fields in a document\nexport const updateDocumentFields = async (collectionName, documentId, fields) => {\n    const docRef = doc(db, collectionName, documentId);\n    await updateDoc(docRef, fields);\n    return { id: documentId, ...fields };\n};\n\n// Delete operation\nexport const deleteDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    await deleteDoc(docRef);\n    return { id: documentId };\n};\n\n// Query operation\nexport const queryDocuments = async (collectionName, conditions) => {\n    const q = query(collection(db, collectionName, conditions));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const queryDocumentsCount = async (collectionName,field,operation,value) => {\n    console.log(\"Hiii \",collectionName,field,operation,value)\n    const q = query(collection(db, collectionName), where(field,operation,value));\n    const snapshot = await getCountFromServer(q);\n    return snapshot.data().count;\n};\n\n\n  // Function to delete all images in a folder\nexport  const deleteAllImagesInFolder = async (storageFolder, entityId) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n    // Function to delete all images in a folder\n  export  const deleteAllImagesInFolder2 = async (storageFolder, entityId,subfolder) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}/${subfolder}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n  // Function to delete images\nexport const deleteImages = async (storageFolder,imagesToDelete,entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Deletes specific images associated with the given entityId.\n\n    Args:\n      imagesToDelete <array>: An array of image objects to be deleted.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n    const total = imagesToDelete.length;\n    let done = 0;\n    await Promise.all(imagesToDelete.map(async (file) => {\n      let folderPath = `${storageFolder}/${entityId}/${file.filename}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}/${file.filename}`;\n      }\n      const fileRefToDelete = ref(storage, folderPath);\n      await deleteObject(fileRefToDelete);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  // Function to upload new images\nexport const uploadImages = async (storageFolder, newImages, entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n\n    Args:\n      newImages <array>: An array of new image objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n   console.log(storageFolder,entityId)\n   const total = newImages.length;\n    let done = 0;\n    await Promise.all(newImages.map(async (newFileData) => {\n      let folderPath = `${storageFolder}/${entityId}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n      }\n      const fileRef = ref(storage, `${folderPath}/${newFileData.file.name}`);\n      await uploadBytes(fileRef, newFileData.file);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  export const uploadImages2 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    uploadBytesResumable(storageRef, newImages).then((snapshot) => {\n      console.log('Uploaded a blob or file!');\n    });\n  };\n\n  export const uploadImages3 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n        });\n      }\n    );\n    \n  };\n\n\n  export const uploadImages4 = async (storageFolder, newImages, entityId, thirdFolder = null, onProgress, onComplete) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages,newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const totalBytes = snapshot.totalBytes;\n        const bytesTransferred = snapshot.bytesTransferred;\n        const progress = totalBytes > 0 ? ((bytesTransferred / totalBytes) * 100).toFixed(2) : -1;\n        onProgress(progress);\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n          onComplete(downloadURL);\n        });\n\n      }\n    );\n    \n  };\n\n\n export const uploadOneImageAndGetURL = async (storageFolder, file, entityId) => {\n    try {\n      const folderPath = `${storageFolder}/${entityId}/${file.name}`;\n      console.log(folderPath)\n      const fileRef = ref(storage, folderPath);\n      \n      await uploadBytes(fileRef, file);\n  \n      const imageUrl = await getDownloadURL(fileRef);\n      console.log(imageUrl)\n      return imageUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error; \n    }\n  };\n  \n  export const getAllFilesFromFolder = async (storageFolder) => {\n    const folderPath = `${storageFolder}`;\n    const folderRef = ref(storage, folderPath);\n    \n    try {\n        const fileList = await listAll(folderRef);\n\n        const imageUrlsComprehensive = await Promise.all(\n          fileList.items.map(async (fileRef) => {\n            const downloadURL = await getDownloadURL(fileRef);\n  \n            return {\n              id: fileRef.name,\n              filename: fileRef.name,\n              fileURL: downloadURL,\n            };\n          })\n        );\n\n        // return imageUrls;\n        return imageUrlsComprehensive\n    } catch (error) {\n        console.error('Error retrieving images:', error);\n        throw error;\n    }\n};\n\n"],"names":["STATUSES","SUBMITTED","UNDER_REVIEW","REVIEWED","VERIFIED","VERIFICATION_FAILED","DRAFT_COLLECTIONS","DRAFT_STUDIOS","DRAFT_WORKSHOPS","DRAFT_OPEN_CLASSES","DRAFT_COURSES","LEVELS","ALL","BEGINNERS","INTERMEDIATE","ADVANCED","ENTITY_FLAG","INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR","WORKSHOPS_BOOKING_LIMIT","OPEN_CLASSES_BOOKING_LIMIT","COURSES_BOOKING_LIMIT","SERVER_URLS","CLOUD","process","LOCAL","COLORS","GREEN","backgroundColor","color","BLUE","YELLOW","RED","PURPLE","ORANGE","TEAL","PINK","GRAY","LIGHTBLUE","DARKBLUE","CYAN","INDIGO","LIME","AMBER","BROWN","LIGHTGREEN","DEEPPURPLE","DEEPORANGE","BLACK","WHITE","SILVER","GOLD","NAVY","OLIVE","CHIP_LEVELS_DESIGN","danceStylesColorChips","COLLECTIONS","USER","USER_KYC","ADMIN","REVIEWS","TRANSACTIONS","STUDIO","INSTRUCTORS","FREE_TRIAL_BOOKINGS","WORKSHOPS","OPEN_CLASSES","COURSES","BOOKINGS","STORAGES","STUDIOIMAGES","STUDIOICON","STUDIOANNOUNCEMENTS","USERIMAGE","INSTRUCTORIMAGES","WORKSHOPICON","WORKSHOPIMAGES","OPENCLASSICON","COURSEICON","CREATORS_KYC_DOCUMENTS","BASEURL_PROD","AMENITIES_ICONS","_jsx","FaSnowflake","FaWifi","FaTint","FaToilet","FaPlug","FaFireExtinguisher","FaFirstAid","FaVideo","FaCreditCard","FaParking","async","postData","dbPayload","collection_name","notify","metadata","BASEURL","authToken","localStorage","getItem","response","fetch","method","headers","concat","body","JSON","stringify","data","ok","console","log","Error","status","error","putData","entity_id","arguments","length","undefined","endpoint","bookEntity","url","userId","bookingData","entityType","entityId","associatedStudioId","emailLearner","personsAllowed","pricePerPerson","result","json","getYoutubeVideoId","link","match","trim","videoId","formatDateString","dateString","year","month","day","split","lastDigit","suffix","daySuffix","parseInt","setCreatorMode","uid","success","mode","secureLocalStorage","setItem","message","fetchStudioEntities","studioId","setState","BASE_URL","setGetCreatorModeOnMount","getCreatorMode","readDocumentWithImageUrl","collectionName","productId","storagePath","folderRef","ref","storage","listAll","items","firstFileRef","getDownloadURL","readDocument","documentId","docRef","doc","db","docSnapshot","getDoc","exists","saveDocument","setDoc","merge","handleSavePostOTPSuccess","phoneNumber","updateDoc","isPhoneNumberVerified","updateDocumentFields","fields","_objectSpread","id","queryDocumentsCount","field","operation","value","q","query","collection","where","getCountFromServer","count","deleteAllImagesInFolder","storageFolder","folderPath","fileList","Promise","all","map","deleteObject","fileRef","deleteAllImagesInFolder2","subfolder","deleteImages","imagesToDelete","setProgress","thirdFolder","total","done","file","filename","fileRefToDelete","uploadImages","newImages","newFileData","name","uploadBytes","uploadImages4","onProgress","onComplete","storageRef","uploadTask","uploadBytesResumable","on","snapshot","totalBytes","bytesTransferred","progress","toFixed","state","code","then","downloadURL","getAllFilesFromFolder","fileURL"],"sourceRoot":""}