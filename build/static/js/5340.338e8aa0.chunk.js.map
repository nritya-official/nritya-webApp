{"version":3,"file":"static/js/5340.338e8aa0.chunk.js","mappings":"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","sources":["Components/ImageUpload.js","Components/TimeRangePicker.js","Components/StudioTable.js","Components/MapsInput.js","Components/SucessPage.js","Components/StudioAdd.js","Components/AlertPopup.js","Components/StudioUpdate.js","Screens/CreatorStudio.js","utils/common.js"],"sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport shortid from \"shortid\";\nimport { ref, getDownloadURL, listAll } from 'firebase/storage';\nimport { storage } from '../config';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { deleteAllImagesInFolder,deleteImages,uploadImages} from '../utils/firebaseUtils'\nimport { Card, CardContent, IconButton } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useSnackbar } from \"../context/SnackbarContext\";\nimport { STORAGES } from \"../constants\";\n\n\nconst ImageUpload = ({entityId,storageFolder,title, maxImageCount=10, updateMode, disable }) => {\n  const showSnackbar = useSnackbar();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [newFiles, setNewFiles] = useState([]); // Track new files to be added\n  const [deletedFiles, setDeletedFiles] = useState([]); // Track deleted files\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  //console.log(\"Received props=> entityId:\", entityId, \"|storageFolder:\", storageFolder);\n  const [progressDelete, setProgressDelete] = useState(-1);\n  const [progressUpdate, setProgressUpdate] = useState(-1);\n\n  console.log(\"Kyc enitity id \",entityId, disable)\n  const filesizes = (bytes, decimals = 2) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n  };\n\n  useEffect(() => {\n   // console.log(\"Fetching image for\",entityId)\n    if(entityId){\n      fetchStudioImages(entityId); // Fetch images when component mounts\n    }\n  }, [entityId]);\n\n  useEffect(() => {\n   // console.log(\"Selected files:\", selectedFiles);\n    if (maxImageCount && selectedFiles.length > maxImageCount) {\n      const truncatedFiles = selectedFiles.slice(0, maxImageCount);\n      alert(`Exceeded maxImageCount, keeping first ${maxImageCount} files.`);\n      setSelectedFiles(truncatedFiles);\n    }\n  }, [selectedFiles, maxImageCount]);\n  \n\n  const handleInputChange = (e) => {\n    // console.log(\"handleInputChange\")\n    const files = Array.from(e.target.files);\n    const updatedFiles = [];\n    // console.log(\"file array \",files.length)\n    files.forEach((file) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        updatedFiles.push({\n          id: shortid.generate(),\n          filename: file.name,\n          filetype: file.type,\n          fileimage: reader.result,\n          datetime: file.lastModifiedDate.toLocaleString(\"en-IN\"),\n          filesize: filesizes(file.size),\n          file: file, // Store the actual file object\n        });\n\n        if (updatedFiles.length === files.length) {\n          setSelectedFiles((prevFiles) => [...prevFiles, ...updatedFiles]);\n          setNewFiles(updatedFiles);\n          // console.log(\"New files in total\",setNewFiles.length)\n        }\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleDeleteSelectedFile = (id) => {\n    if (window.confirm(\"Are you sure you want to delete this image?\")) {\n      const fileToDelete = selectedFiles.find((file) => file.id === id);\n      setDeletedFiles((prevDeletedFiles) => [...prevDeletedFiles, fileToDelete]);\n      setSelectedFiles((prevFiles) =>\n        prevFiles.filter((file) => file.id !== id)\n      );\n    }\n  };\n\n  const handleUploadSubmit = async () => {\n    if (!entityId) {\n      alert(\"No studio selected\");\n      return;\n    }\n\n    try {\n      if (maxImageCount === 1) {\n        // Delete all previous images in the folder\n        await deleteAllImagesInFolder(storageFolder, entityId);\n        await uploadImages(storageFolder,newFiles, entityId);\n      } else {\n        // Calculate images to delete and add\n        const { imagesToDelete, newImages } = calculateDelta(selectedFiles, uploadedFiles);\n\n        // Delete images if there are any\n        if (imagesToDelete.length > 0) {\n          await deleteImages(storageFolder, imagesToDelete, entityId, setProgressDelete);\n        }\n\n        // Upload new images if there are any\n        if (newImages.length > 0) {\n          await uploadImages(storageFolder, newImages, entityId, setProgressUpdate);\n        }\n\n      }\n\n      // alert(\"Images Uploaded/Deleted\");\n      //showSnackbar(\"Images Uploaded/Deleted\", \"success\");\n    } catch (error) {\n      console.error(\"Error uploading/deleting images:\", error);\n    }\n  };\n\n  // Function to calculate images to delete and new images to upload\n  const calculateDelta = (selectedFiles, uploadedFiles) => {\n    const selectedFileIds = selectedFiles.map(file => file.id);\n    const uploadedFileIds = uploadedFiles.map(file => file.id);\n\n    const imagesToDelete = uploadedFiles.filter(file => !selectedFileIds.includes(file.id));\n    const newImages = selectedFiles.filter(file => !uploadedFileIds.includes(file.id));\n\n    return { imagesToDelete, newImages };\n  };\n\n\n  const fetchStudioImages = async (entityId) => {\n    setSelectedFiles([]);\n    setNewFiles([]);\n    setDeletedFiles([]);\n    try {\n      const folderPath = `${storageFolder}/${entityId}`;\n      console.log(folderPath)\n      const folderRef = ref(storage, folderPath);\n      const fileList = await listAll(folderRef);\n\n      const files = await Promise.all(\n        fileList.items.map(async (fileRef) => {\n          const downloadURL = await getDownloadURL(fileRef);\n\n          return {\n            id: fileRef.name,\n            filename: fileRef.name,\n            fileURL: downloadURL,\n          };\n        })\n      );\n      // console.log('File fetching',files);\n      setUploadedFiles(files); // Update the uploadedFiles state with fetched data\n      setSelectedFiles(files);\n    } catch (error) {\n      console.error('Error fetching user images:', error);\n    }\n  };\n\n  return (\n    <div className=\"fileupload-view\" style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\n      <div className=\"row justify-content-center m-0\" style={{ flex: '1',justifyContent: 'center' }}>\n        <div className=\"col-md-6\" style={{ flex: '1' ,justifyContent: 'center'}}>\n          <div className=\"card mt-5\">\n            <div className=\"card-body\" style={{ backgroundColor: isDarkModeOn ? '#333333' : 'white' }}>\n              <div className=\"kb-data-box\">\n                <div className=\"kb-modal-data-title\">\n                  <div className=\"kb-data-title\" style={{justifyContent:'center',flex: '1'}}>\n                    <h4>{title}</h4>\n                    <p>Max no of image(s):{maxImageCount} {storageFolder === STORAGES.STUDIOIMAGES && <p>Add at least 5 images</p>}</p>\n                  </div>\n                </div>\n                <form style={{  backgroundColor: isDarkModeOn ? '#333333' : 'white'}}>\n                  <div className=\"kb-file-upload\">\n                    <div className=\"file-upload-box\">\n                      <input\n                        type=\"file\"\n                        id=\"fileupload\"\n                        className=\"file-upload-input\"\n                        onChange={handleInputChange}\n                        multiple\n                      />\n\n                    </div>\n                  </div>\n                  <br></br>\n                  <div className=\"kb-attach-box mb-3\">\n                  <div className=\"row\">\n                    {entityId && selectedFiles.length > 0 ? (\n                      selectedFiles.map((file) => (\n                        \n                        <div key={file.id} className=\"col-6 col-md-3 mb-3\" style={{ position: 'relative' }}>\n                          \n                          <Card sx={{ maxWidth: 345 }}>\n                            {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                              <div style={{ position: 'relative' }}>\n                                <img\n                                  src={file.fileimage ? file.fileimage : file.fileURL}\n                                  alt={file.filename}\n                                  className=\"card-img-top\"\n                                  style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                                />\n                                <IconButton\n                                  aria-label=\"delete\"\n                                  disabled={disable}\n                                  onClick={() => handleDeleteSelectedFile(file.id)}\n                                  style={{ position: 'absolute', top: 0, right: 0, backgroundColor: 'rgba(255, 255, 255, 0.5)' }}\n                                >\n                                  <DeleteIcon style={{color:\"ff0000\"}}/>\n                                </IconButton>\n                              </div>\n                            ) : (\n                              <CardContent>\n                                <i className=\"far fa-file-alt\"></i>\n                              </CardContent>\n                            )}\n                          </Card>\n                        </div>\n                        \n                      ))\n                    ) : (\n                      <div className=\"col-12 text-center\">\n                        <p>No images selected</p>\n                      </div>\n                    )}\n                  </div>\n\n                  </div>\n\n                  \n                  <div className=\"kb-buttons-box\">\n                    <button\n                      type=\"button\"\n                      className=\"btn form-submit\"\n                      style={{ backgroundColor: isDarkModeOn ? '#892CDC' : 'black', color:'white'  }}\n                      onClick={handleUploadSubmit}\n                      disabled={disable}\n                    >\n                      Image Upload\n                    </button>\n                  </div>\n                </form>\n                {selectedFiles.length > 0 && (\n                  <div className=\"kb-attach-box\" hidden>\n                    <div className=\"row\">\n                    <hr />\n                    {selectedFiles.map((file) => (\n                      <div key={file.id} className=\"col-6 col-md-3 mb-3\">\n                      <div className=\"card\">\n                        {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                          <img\n                            src={file.fileimage}\n                            alt={file.filename}\n                            className=\"card-img-top\"\n                            style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                          />\n                        ) : (\n                          <div className=\"card-body\">\n                            <i className=\"far fa-file-alt\"></i>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n              { progressDelete >= 0 && (\n                    <div>\n                        <p style={{ color: isDarkModeOn ? '#fff' : '#000' }}>\n                            Deleting images... {progressDelete.toFixed(2)}%\n                        </p>\n                        <progress \n                            value={progressDelete} \n                            max=\"100\" \n                            style={{\n                                color: isDarkModeOn ? '#fff' : '#000'\n                            }}\n                        >\n                            {progressDelete.toFixed(2)}%\n                        </progress>\n                    </div>\n                )}\n\n                { progressUpdate >= 0 && (\n                    <div>\n                        <p style={{ color: isDarkModeOn ? '#fff' : '#000' }}>\n                            Uploading images... {progressUpdate.toFixed(2)}%\n                        </p>\n                        <progress \n                            value={progressUpdate} \n                            max=\"100\" \n                            style={{\n                                color: isDarkModeOn ? '#fff' : '#000'\n                            }}\n                        >\n                            {progressUpdate.toFixed(2)}%\n                        </progress>\n                    </div>\n                )}\n\n                            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Set default prop values\nImageUpload.defaultProps = {\n  maxImageCount: 5, // Default maximum image count\n  updateMode: false,\n  disable:false,\n};\n\nexport default ImageUpload;","import React from 'react';\nimport { Modal, Form, Row, Col, Button } from 'react-bootstrap';\n\nconst TimeRangePicker = ({ show, handleClose, handleSelect, defaultTime }) => {\n  //console.log(\"TimeRangePicker\",defaultTime)\n  const startTime_i = defaultTime.split('-')[0].trim();\n  const endTime_i = defaultTime.split('-')[1]?.trim();\n\n  //console.log(startTime_i,endTime_i,defaultTime)\n\n  const generateTimeOptions = () => {\n    const options = [];\n    let option_AM = [];\n    let option_PM = [];\n    for (let hours = 0; hours < 24; hours++) {\n      for (let minutes = 0; minutes < 60; minutes += 15) {\n        const formattedHours = hours.toString().padStart(2, '0');\n        const formattedMinutes = minutes.toString().padStart(2, '0');\n        const timeString = `${formattedHours}:${formattedMinutes}`;\n  \n        if (hours < 12) {\n          option_AM.push(`${timeString} AM`);\n        } else {\n          const formattedHours12 = (hours - 12).toString().padStart(2, '0');\n          option_PM.push(`${formattedHours12}:${formattedMinutes} PM`);\n        }\n      }\n    }\n\n    for (let i = 0; i < option_AM.length || i < option_PM.length; i++) {\n      if (i < option_AM.length) {\n        options.push(option_AM[i]);\n      }\n      if (i < option_PM.length) {\n        options.push(option_PM[i]);\n      }\n    }\n    \n\n  \n    return options;\n  };\n  \n\n  const renderTimeOptions = (defaultValue) => {\n    console.log(defaultValue);\n    const timeOptions = generateTimeOptions();\n  \n    return (\n      <>\n        <option value={defaultValue}>{defaultValue}</option>\n        {timeOptions.map((option) => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </>\n    );\n  };\n  \n  \n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Select Time</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col>\n          <Form.Group >\n          <Form.Label >\n            Start Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(e.target.value, null)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(startTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n          <Col>\n          <Form.Group>\n          <Form.Label >\n            End Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(null, e.target.value)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(endTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={handleClose}>Save</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default TimeRangePicker;\n","import React, { useState } from 'react';\nimport { Form, Table, Button } from 'react-bootstrap';\nimport { FaPlus, FaMinus } from 'react-icons/fa';\nimport './StudioTable.css'; // Import the CSS file for styling\nimport  TimeRangePicker from './TimeRangePicker';\nimport danceStyles from '../danceStyles.json';\nimport { Autocomplete, TextField } from '@mui/material';\n\nimport { MultiSelect } from 'primereact/multiselect';\nimport \"primereact/resources/primereact.css\";\nimport \"primereact/resources/themes/saga-blue/theme.css\";\n\nconst daysOfWeek = ['M','T','W','Th','F','St','Sn'];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\"\n};\n\nfunction StudioTable({ tableData = [], setTableData, instructorNamesWithIds }) {\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const danceStylesOptions = danceStyles.danceStyles;\n  const [defaultTime, setDefaultTime] =  useState('12:00 PM - 01:00 PM')\n\n  const handleAddRow = () => {\n    setTableData((prevData) => [...prevData, { className: '', danceForms: '', days: '', time: '12:00 PM - 01:00 PM', instructors: [], fee:'',level:'' ,status: '',freeTrial: false, classCategory: []  }]);\n  };\n\n  const handleRemoveRow = (index) => {\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      newData.splice(index, 1);\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if(field===\"days\"){\n        value = Array.isArray(value) ? value.join(',') : value; \n      }\n      console.log(tableData)\n      const newData = [...prevData];\n      newData[index][field] = value;\n      return newData;\n    });\n  };\n\n  const handleTimePickerOpen = (index,time) => {\n    setDefaultTime(time)\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null); // Reset selected row index when closing time picker\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      \n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n    \n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(' - ');\n    \n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n      \n      return newData;\n    });\n  \n    setSelectedRow(selectedRowIndex);\n\n  };\n\n  return (\n    <>\n      <Table bordered variant=\"light\">\n        <thead>\n          <tr style={{border: '1px solid black'}}>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Name</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Dance Form</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Days</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Time</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'20rem', border: '1px solid black'}}>Instructors</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Fee (₹)</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Level</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Free Trial</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Category</th>\n            <th style={{padding:'0rem'}}>\n              <Button variant=\"primary\" onClick={handleAddRow}>\n                <FaPlus />\n              </Button>\n            </th>\n          </tr>\n        </thead>\n        <tbody style={{border: '1px solid black'}}>\n          {tableData.map((row, index) => (\n            <tr key={index} className={selectedRow === index ? 'selected-row' : ''}>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  type=\"text\"\n                  value={row.className}\n                  onChange={(e) => handleTableChange(index, 'className', e.target.value)}\n                  \n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n              < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.danceForms}\n                  onChange={(e) => handleTableChange(index, 'danceForms', e.target.value)}\n                >\n                  <option value=\"\">Select a dance form</option>\n                  {danceStylesOptions.map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </Form.Control>\n\n              </td>\n              \n              <td style={{ padding:'0rem',minWidth:'15rem', border: '1px solid black'}} className=\"m-0 p-0\">\n                <MultiSelect value={row.days && row.days.split(',').filter(day => day !== '') } \n                    onChange={(event) => handleTableChange(index, 'days', event.target.value)}\n                    options={daysOfWeek}\n                    placeholder=\"class days\" maxSelectedLabels={7} className=\"w-full md:w-20rem\"\n                  />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.time}\n                  //onClick={() => handleTimePickerOpen(index,row.time)}\n                  onClick={() => handleTimePickerOpen(index,row.time)}\n                  \n                />\n                {showTimePicker && (\n                <TimeRangePicker\n                  show={showTimePicker}\n                  handleClose={handleTimePickerClose}\n                  handleSelect={handleTimeSelect}\n                  defaultTime={tableData[selectedRowIndex]?.time || \"00:00-00:00\"}\n                />\n              )}\n\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black', width:'20rem'}}>\n                <Autocomplete\n                  multiple\n                  id=\"tags-standard\"\n                  options={instructorNamesWithIds}\n                  value={row.instructors}\n                  onChange={(_, values) => handleTableChange(index, 'instructors', values)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Instructors\"\n                    />\n                  )}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.fee}\n                  onChange={(e) => handleTableChange(index, 'fee', e.target.value)}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.level}\n                  onChange={(e) => handleTableChange(index, 'level', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value=\"Beginner\">Beginner</option>\n                      <option value=\"Intermediate\">Intermediate</option>\n                      <option value=\"Advanced\">Advanced</option>\n                      <option value=\"Misc\">Misc</option>\n\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.level}\n                  onChange={(e) => handleTableChange(index, 'level', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value={true}>Yes</option>\n                      <option value={false}>No</option>\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem', width:'20rem'}}>\n                <Autocomplete\n                  multiple\n                  id=\"tags-standard\"\n                  options={Object.values(categoryMap)} \n                  value={row.classCategory.map(key => categoryMap[key])} \n                  onChange={(_, values) => {\n\n                    const selectedKeys = values.map(value => \n                      Object.keys(categoryMap).find(key => categoryMap[key] === value)\n                    );\n                    handleTableChange(index, 'classCategory', selectedKeys);\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Class Category\"\n                    />\n                  )}\n                />\n              </td>\n              <td style={{padding:'0rem'}}>\n                <Button variant=\"danger\" onClick={() => handleRemoveRow(index)}>\n                  <FaMinus />\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>      \n    </>\n  );\n}\n\nexport default StudioTable;\n\n/*\n                <Autocomplete\n                  multiple\n                  id={`days-autocomplete-${index}`}\n                  options={daysOfWeekOptions}\n                  getOptionLabel={(option) => option.value}\n                  value={row.days.split(',').filter(day => day !== '').map(day => daysOfWeekOptions.find(option => option.value === day))}\n                  onChange={(event, newValue) => handleTableChange(index, 'days', newValue.map(option => option.value).join(','))}\n                  renderInput={(params) => <TextField sx={{color:\"black\",backgroundColor:\"white\",width:\"100%\"}} {...params} />}\n                />\n              */","import React, { useState, useEffect }from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { LoadScript } from '@react-google-maps/api';\nimport { FaMapMarkerAlt } from 'react-icons/fa';\n\nconst libraries = ['places'];\n\nfunction MapsInput({selectedLocation, setSelectedLocation}) {\n    const [center, setCenter] = useState(selectedLocation? selectedLocation:{ lat: 0, lng: 0 });\n    const [address, setAddress] = useState('');\n  \n    const apiKey = \"AIzaSyAAPq5IMotbu90TZAEtyj8qgYyVJoROzsQ\"; // Replace with your API Key\n   //console.log(\"selectedLocation got in MapsInput\",selectedLocation,\"----\",center)\n    const handleSelect = async (selectedAddress) => {\n      const results = await geocodeByAddress(selectedAddress);\n      const latLng = await getLatLng(results[0]);\n  \n      setAddress(selectedAddress);\n      setCenter(latLng);\n      setSelectedLocation(latLng);\n      //console.log(latLng,\"---\",selectedLocation,'---',center,'---',address)\n    };\n\n    useEffect(() => {\n      // Check if selectedLocation is null and set it to Delhi's coordinates\n      //console.log(selectedLocation)\n      if (!selectedLocation) {\n        //console.log(\"Location changing !selectedLocation\",selectedLocation)\n      }else{\n        //console.log(\"Location changing\",selectedLocation)\n        setCenter(selectedLocation)\n        //setSelectedLocation()\n      }\n      //console.log(center,address,selectedLocation)\n    }, [selectedLocation]);\n  \n    return (\n        <LoadScript\n            googleMapsApiKey={apiKey}\n            libraries={libraries}\n            >\n      <div>\n        <div>\n        <br></br>\n        \n        <PlacesAutocomplete\n          value={address}\n          onChange={(newAddress) => setAddress(newAddress)}\n          onSelect={handleSelect}\n          >\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n            <div>\n              <input\n                {...getInputProps({\n                  placeholder: 'Enter address...',\n                  className: 'location-search-input',\n                  style: { // Add inline styles for the input element\n                    height: '40px', // Adjust the height as needed\n                    fontSize: '16px', // Adjust the font size as needed\n                    width: '100%',\n                  },\n                })}\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {loading && <div>Loading...</div>}\n                {suggestions.map((suggestion) => {\n                  const className = suggestion.active\n                    ? 'suggestion-item--active'\n                    : 'suggestion-item';\n                  return (\n                    <div\n                      {...getSuggestionItemProps(suggestion, {\n                        className,\n                      })}\n                    >\n                      <span>{suggestion.description}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </PlacesAutocomplete>\n          <br></br>\n        </div>\n        <div style={{ height: '400px', width: '100%' }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{ key: apiKey }}\n            defaultCenter={center}\n            center={center}\n            defaultZoom={16}\n            onClick={({ lat, lng }) => {\n              setSelectedLocation({ lat, lng });\n            }}\n          >\n            { (\n              <PinMarker\n              lat={selectedLocation && selectedLocation.lat ? selectedLocation.lat: 0}\n              lng={selectedLocation && selectedLocation.lng ? selectedLocation.lng: 0}\n              text=\"Selected Location\"\n            />\n            )}\n          </GoogleMapReact>\n        </div>\n      </div>\n      </LoadScript>\n    );\n}\n\nconst PinMarker = () => (\n    <div style={{ position: 'relative', textAlign: 'center' }}>\n      <FaMapMarkerAlt style={{ color: 'green', fontSize: '24px' }} />\n    </div>\n  );\n\nexport default MapsInput\n","import React from 'react';\n\nconst SuccessMessage = ({ StudioId }) => {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-12\"> {/* Change col-md-5 to col-md-12 */}\n          <div className=\"_success message-box\">\n            <i className=\"fa fa-check-circle\" aria-hidden=\"true\"></i>\n            <h3>Your Studio registration was successful</h3>\n            <p>{StudioId} is now registered 🎉</p>\n          </div>\n        </div>\n      </div>\n      <hr />\n\n      <style jsx>{`\n        ._success {\n          padding: 45px;\n          width: 100%;\n          text-align: center;\n          margin: 30px auto;\n        }\n\n        ._success i {\n          font-size: 55px;\n          color: #28a745;\n        }\n\n        ._success h2 {\n          margin-bottom: 12px;\n          font-size: 30px;\n          font-weight: 300;\n          line-height: 1.2;\n          margin-top: 10px;\n        }\n\n        ._success p {\n          margin-bottom: 0px;\n          font-size: 18px;\n          color: #495057;\n          font-weight: 100;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SuccessMessage;\n","import React from 'react'\nimport { Row, Col , Form } from 'react-bootstrap';\nimport {LinearProgress, Button as MuiButton} from '@mui/material';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,addDoc,updateDoc,collection,where,getDocs,query, deleteDoc } from \"firebase/firestore\";\nimport { COLLECTIONS, DRAFT_COLLECTIONS } from '../constants';\nimport StudioTable from './StudioTable';\nimport ImageUpload from './ImageUpload';\nimport { STORAGES } from '../constants';\nimport MapsInput from './MapsInput';\nimport { useSelector} from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport indianCities from '../cities.json';\nimport indianStates from '../states.json';\nimport danceStyles from '../danceStyles.json';\nimport { AMENITIES_ICONS } from '../constants';\nimport {Autocomplete,TextField} from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport {Stepper,Step,StepLabel} from '@mui/material';\nimport SuccessMessage from './SucessPage';\nimport { postData } from '../utils/common';\nimport { isEqual } from 'lodash';\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nconst DRAFT_INTERVAL_TIME = 1000 * 10;\n\nfunction StudioAdd({instructors}) {\n    const [newStudioId, setNewStudioId] = useState(\"\")\n    const [tableData, setTableData] = useState(\n      [{ className: '', danceForms: '', days: '', time: '', instructors: [], fee:'',level:'' ,status: '' ,freeTrial:false ,classCategory: []}],\n    );\n    const [selectedLocation, setSelectedLocation] = useState(null);\n    const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n    const [selectedInstructors, setSelectedInstructors] = useState([]);\n    const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n    const [selectedAmenities, setSelectedAmenities] = useState([]);\n    const instructorNamesWithIds = instructors.map((instructor) => `${instructor.name} - ${instructor.id}`);\n    const [isReady, setIsReady] = useState(false);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    //const [dropdownVisible, setDropdownVisible] = useState(false);\n    const locationOptions = indianCities.cities;\n    const stateOptions = indianStates.states;\n    const danceStylesOptions = danceStyles.danceStyles;\n    const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n    const [activeStep, setActiveStep] = useState(0);\n\n    const handleNext = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n\n    const darkTheme = createTheme({\n      palette: {\n        mode: isDarkModeOn?'dark':'light',\n      },\n    });\n\n    const handleDanceStylesChange = (event, value) => {\n      setSelectedDanceStyles(value);\n    };  \n\n    const handleAmentiesChange = (event, value) => {\n      setSelectedAmenities(value);\n    };\n\n    const handleInstructorChange = (event, value) => {\n      setSelectedInstructors(value);\n    };\n\n    const resetDraft = async () => {\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n\n          await deleteDoc(studioRef);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n      const handleAddStudio = async (event) => {\n        event.preventDefault();\n        const title = event.target.studioName.value;\n        if (!title) {\n          return;\n        }\n        let isPremium=true\n        const newData = tableData.reduce((accumulator, current, index) => {\n          accumulator[index] = current;\n          return accumulator;\n        }, {});\n\n        try {\n          const currentUserEmail = JSON.parse(localStorage.getItem(\"userInfo\"))?.email;\n          const studioData = {\n              studioName: event.target.studioName.value,\n              aboutStudio: event.target.aboutStudio.value,\n              founderName: event.target.founderName.value,\n              aboutFounder: event.target.aboutFounder.value,\n              mobileNumber: event.target.mobileNumber.value,\n              whatsappNumber: event.target.whatsappNumber.value,\n              mailAddress: event.target.mailAddress.value,\n              danceStyles: selectedDanceStyles.join(\",\"),\n              numberOfHalls: event.target.numberOfHalls.value,\n              maximumOccupancy: event.target.maximumOccupancy.value,\n              instructorsNames: selectedInstructors,\n              status: 'OPEN',\n              tableData: newData,\n              buildingName: event.target.buildingName.value,\n              street: event.target.street.value,\n              city: event.target.city.value,\n              landmark: event.target.landmark.value,\n              pincode: event.target.pincode.value,\n              state: event.target.state.value,\n              country: \"India\",\n              geolocation : selectedLocation,\n              gstNumber: event.target.gstNumber.value,\n              enrolledId:[],\n              reviews:[],\n              author: JSON.parse(localStorage.getItem('userInfo')).displayName,\n              UserId: JSON.parse(localStorage.getItem('userInfo')).UserId,\n              isPremium: isPremium,\n              addAmenities: selectedAmenities.join(\",\"),\n              enrollmentProcess: encodeToUnicode(event.target.enrollmentProcess.value),\n              creatorEmail: currentUserEmail,\n              instagram: event.target.instagram.value,\n              facebook: event.target.facebook.value,\n              youtube: event.target.youtube.value,\n              twitter: event.target.twitter.value,\n              visibilty:1,\n          };\n            setIsSubmitting(true);\n            const notifyEmails = currentUserEmail\n            const metaData = {\n              entity_name: studioData.studioName,\n              city: studioData.city ,\n            }\n            const response = await postData(studioData,COLLECTIONS.STUDIO, notifyEmails, metaData) ;\n            if (response.ok) {\n              const result = await response.json();\n              setNewStudioId(result.id)\n              resetDraft();\n              handleNext();\n            }\n        } catch (error) {\n          console.error(\"Error adding studio: \", error);\n        } finally {\n          setIsSubmitting(false);\n        }\n      };\n\n  useEffect(() => {\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          form.studioName.value = foundStudio.studioName;\n          form.aboutStudio.value = foundStudio.aboutStudio;\n          form.founderName.value = foundStudio.founderName;\n          form.aboutFounder.value = foundStudio.aboutFounder;\n          form.mobileNumber.value = foundStudio.mobileNumber;\n          form.whatsappNumber.value = foundStudio.whatsappNumber;\n          form.mailAddress.value = foundStudio.mailAddress;\n          setSelectedDanceStyles(\n            foundStudio.danceStyles.length\n              ? foundStudio.danceStyles.split(\",\")\n              : []\n          );\n          form.numberOfHalls.value = foundStudio.numberOfHalls;\n          form.maximumOccupancy.value = foundStudio.maximumOccupancy;\n          setSelectedInstructors(foundStudio.instructorsNames);\n          form.buildingName.value = foundStudio.buildingName;\n          form.street.value = foundStudio.street;\n          form.city.value = foundStudio.city;\n          form.landmark.value = foundStudio.landmark;\n          form.pincode.value = foundStudio.pincode;\n          form.state.value = foundStudio.state;\n          setSelectedLocation(foundStudio.geolocation);\n          form.aadharNumber.value = foundStudio.aadharNumber;\n          form.gstNumber.value = foundStudio.gstNumber;\n          setTableData(Object.values(foundStudio.tableData));\n          setSelectedAmenities(\n            foundStudio.addAmenities.length\n              ? foundStudio.addAmenities.split(\",\")\n              : []\n          );\n          form.enrollmentProcess.value = decodeUnicode(\n            foundStudio.enrollmentProcess\n          );\n          form.instagram.value = foundStudio.instagram;\n          form.facebook.value = foundStudio.facebook;\n          form.youtube.value = foundStudio.youtube;\n          form.twitter.value = foundStudio.twitter;\n        } else {\n          await addDoc(collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS), {\n            studioName: form.studioName.value,\n            aboutStudio: form.aboutStudio.value,\n            founderName: form.founderName.value,\n            aboutFounder: form.aboutFounder.value,\n            mobileNumber: form.mobileNumber.value,\n            whatsappNumber: form.whatsappNumber.value,\n            mailAddress: form.mailAddress.value,\n            danceStyles: selectedDanceStyles.join(\",\"),\n            numberOfHalls: form.numberOfHalls.value,\n            maximumOccupancy: form.maximumOccupancy.value,\n            instructorsNames: selectedInstructors,\n            status: \"OPEN\",\n            tableData: {\n              0: {\n                className: \"\",\n                danceForms: \"\",\n                days: \"\",\n                time: \"\",\n                instructors: [],\n                fee: \"\",\n                level: \"\",freeTrial:false, \n                classCategory: []\n              },\n            },\n            buildingName: form.buildingName.value,\n            street: form.street.value,\n            city: form.city.value,\n            landmark: form.landmark.value,\n            pincode: form.pincode.value,\n            state: form.state.value,\n            country: \"India\",\n            geolocation: selectedLocation,\n            \n            gstNumber: form.gstNumber.value,\n            enrolledId: [],\n            reviews: [],\n            author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n            UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n            isPremium: true,\n            addAmenities: selectedAmenities.join(\",\"),\n            enrollmentProcess: encodeToUnicode(form.enrollmentProcess.value),\n            creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\")).email,\n            instagram: form.instagram.value,\n            facebook: form.facebook.value,\n            youtube: form.youtube.value,\n            twitter: form.twitter.value,\n            visibilty: 1,\n          });\n        }\n\n        setIsReady(true);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    main();\n  }, []);\n\n  useEffect(() => {\n    let intervalId = null;\n    let previousState = null; \n\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n          \n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n          \n          intervalId = setInterval(async () => {\n            \n            try {\n              const newData = tableData.reduce((accumulator, current, index) => {\n                accumulator[index] = current;\n                return accumulator;\n              }, {});\n              const currentState = { \n                studioName: form.studioName.value,\n                aboutStudio: form.aboutStudio.value,\n                founderName: form.founderName.value,\n                aboutFounder: form.aboutFounder.value,\n                mobileNumber: form.mobileNumber.value,\n                whatsappNumber: form.whatsappNumber.value,\n                mailAddress: form.mailAddress.value,\n                danceStyles: selectedDanceStyles.join(\",\"),\n                numberOfHalls: form.numberOfHalls.value,\n                maximumOccupancy: form.maximumOccupancy.value,\n                instructorsNames: selectedInstructors,\n                status: \"OPEN\",\n                tableData: newData,\n                buildingName: form.buildingName.value,\n                street: form.street.value,\n                city: form.city.value,\n                landmark: form.landmark.value,\n                pincode: form.pincode.value,\n                state: form.state.value,\n                country: \"India\",\n                geolocation: selectedLocation,\n                \n                gstNumber: form.gstNumber.value,\n                enrolledId: [],\n                reviews: [],\n                author: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .displayName,\n                UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n                isPremium: true,\n                addAmenities: selectedAmenities.join(\",\"),\n                enrollmentProcess: encodeToUnicode(\n                  form.enrollmentProcess.value\n                ),\n                creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .email,\n                instagram: form.instagram.value,\n                facebook: form.facebook.value,\n                youtube: form.youtube.value,\n                twitter: form.twitter.value,\n                visibilty: 1,}\n              \n              // Check if the current state is different from the previous state\n              if (!isEqual(previousState, currentState)) {\n                try {\n                  await updateDoc(studioRef, currentState);\n                  previousState = currentState; // Update previous state after successful save\n                  console.log(\"Next AutoSave in\",DRAFT_INTERVAL_TIME)\n                } catch (error) {\n                  console.error(error);\n                }\n              }else{\n                console.log(\"Nothing for Autosave to save\")\n            }\n\n            } catch (error) {\n              console.error(error);\n            }\n          }, DRAFT_INTERVAL_TIME);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    if (isReady) main();\n\n    return () => clearInterval(intervalId);\n  }, [\n    isReady,\n    selectedDanceStyles,\n    selectedInstructors,\n    tableData,\n    selectedLocation,\n    selectedAmenities,\n  ]);\n\n  return (\n    <div >\n          <Stepper activeStep={activeStep} alternativeLabel>\n            {['Basic Studio & Owner details', 'Instructors, Classes & Social Media', 'Address & Registration', 'Studio Icon', 'Studio & Class Images'].map((label) => (\n              <Step key={label}>\n                <StepLabel ><p style={{color:isDarkModeOn?\"white\":\"black\"}}>{label}</p></StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          \n            < div hidden={activeStep > 2} >\n            <Form id=\"addStudioForm\" onSubmit={handleAddStudio} style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n              <Form.Group controlId=\"formBasicAdd\">\n             \n                  <div hidden={activeStep !== 0}>\n                  <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Basic Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Studio Name</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"studioName\" />\n                \n                <Form.Label>About Studio</Form.Label>\n                <Form.Control rows={6} style={{  minHeight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio's details\" name=\"aboutStudio\" />\n                \n                </Col>\n                <Col md={6}>\n                <Form.Label>Founder's Name</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter founder name\" name=\"founderName\" />\n                \n                <Form.Label>About Founder</Form.Label>\n                <Form.Control rows={6} style={{  minheight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter founder's details\" name=\"aboutFounder\" />\n                \n                </Col>\n                </Row>\n                <hr></hr>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Contact Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Mobile Number</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter mobile number\" name=\"mobileNumber\" type=\"number\"  />\n\n                <Form.Label>WhatsApp Number</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter whatsapp number\" name=\"whatsappNumber\" type=\"number\"  />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Mail Address</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"email\" rows={1} placeholder=\"Enter mail address\" name=\"mailAddress\" />\n                \n                  </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Details</h3>\n                <Row>\n                  <Col md={6}>\n                <Form.Label >Dance Styles</Form.Label>\n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                <Form.Label>Number of Hall(s)</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Number of Hall(s)\" name=\"numberOfHalls\" type=\"number\" />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Maximum Occupancy</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}  rows={1} placeholder=\"Maximum Occupancy\" name=\"maximumOccupancy\" type=\"number\"   />\n                </Col>\n                </Row>\n                <br></br>\n                <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}} disabled >\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                  \n                  </div>\n\n\n               \n              \n                <div hidden={activeStep !== 1}>\n\n\n                \n            <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Instructor Details</h3>\n                <Form.Label>Names of Instructors</Form.Label>\n                <Row>\n                  <ThemeProvider theme={darkTheme}>\n                    <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={instructorNamesWithIds}\n                      value={selectedInstructors}\n                      onChange={handleInstructorChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Instructors\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                  </ThemeProvider>\n                </Row> \n                <a href=\"#/modifyInstructors\" rel=\"noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', color: isDarkModeOn ? 'cyan' : 'blue' }}>\n                      Go to Instrcutors' Add/update Page? \n                    </a>\n                <hr></hr>   \n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Class Schedule</h3>\n                  <span>Time Table Of dance classes</span>\n                    <div style={{ overflowX: 'auto', whiteSpace: 'nowrap', scrollbarColor: isDarkModeOn ? '#888 #333' : '#ccc #fff', }}>\n                      <StudioTable\n                        tableData={tableData}\n                        setTableData={setTableData}\n                        instructorNamesWithIds={instructorNamesWithIds}\n                      />\n                    </div>\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Additional Details</h3>\n                <Row>\n                <Col md={4}>\n                  <Form.Label>GST Number</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"GST Number\" name=\"gstNumber\" />\n                  \n                  \n                </Col>\n                <Col md={8}>\n                <Form.Label>Add Amenities</Form.Label>\n                  \n                  <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={amenityKeys}\n                  value={selectedAmenities}\n                  onChange={handleAmentiesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Amenities\"\n                      style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                </Col>\n                </Row>\n                <Row>\n                <Form.Label>Enrollment Process</Form.Label>\n                  <Form.Control rows={12} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enrollment Process\" name=\"enrollmentProcess\" />\n          \n                </Row>\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Social Media Links</h3>\n               <Row>\n               <Col md={4}>\n                  <Form.Label>Instagram</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Instagram Link\" name=\"instagram\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Facebook</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Facebook Link\" name=\"facebook\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>YouTube</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"YouTube Link\" name=\"youtube\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Twitter</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Twitter Link\" name=\"twitter\" />\n                </Col>\n\n               </Row>\n\n               <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n              </div>\n\n               \n                <div hidden={activeStep !== 2}>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Address Details</h3>\n                <Row>\n                  <Col md={6}>\n                  <Form.Label>Building Name</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter building name\" name=\"buildingName\" />\n\n                <Form.Label>Street</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter street\" name=\"street\" />\n                <Form.Label>City</Form.Label>\n                <Form.Control as=\"select\" style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black', height: 'auto', // Let it adjust to content\n                    lineHeight: '1.5em', // Mimics rows={1}\n                    padding: '8px', }} name=\"city\">\n                    <option value=\"\">Select a city</option>\n                    {locationOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n\n                </Col>\n                <Col md={6}>\n                  <Form.Label>Landmark</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter landmark\" name=\"landmark\" />\n\n                <Form.Label>Pincode</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter pincode\" name=\"pincode\" type=\"number\"  />\n               \n                <Form.Label>State</Form.Label>\n                <Form.Control as=\"select\" style={{ padding: \"0 1.5rem\", backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter state\" name=\"state\">\n                <option value=\"\">Select a State</option>\n                    {stateOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n               \n                </Col>\n\n                <Form.Label>Save exact Address</Form.Label>\n                <MapsInput selectedLocation={selectedLocation} setSelectedLocation={setSelectedLocation}></MapsInput>\n                \n                </Row>\n                \n\n                \n              <br></br>\n\n              <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end\">\n                    \n                    <MuiButton variant=\"contained\" disabled={isSubmitting} style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\", color:'white'}} type=\"submit\">\n                      Add Studio & Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                \n                </div>\n\n                \n                </Form.Group>\n            </Form>\n            {isSubmitting && <LinearProgress />}\n            {\n              newStudioId === \"\"?(\"\"):(<p>New Studio Created with id {newStudioId}. Now u can upload images regarding them</p>)\n            }\n            \n            </div>\n          \n             \n             \n            <div hidden={activeStep !== 3}>\n              \n              <ImageUpload entityId={newStudioId} title={\"Studio Icon\"} storageFolder={STORAGES.STUDIOICON} maxImageCount={1}></ImageUpload>\n              <Row>\n                \n                <Col xs={12} className=\"d-flex justify-content-end\">\n                  <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                    Next\n                  </MuiButton>\n                </Col>\n              </Row>\n\n              </div>\n             \n            \n             <div hidden={activeStep !== 4}>\n              <ImageUpload entityId={newStudioId} title={\"Studio Images\"}  storageFolder={STORAGES.STUDIOIMAGES} ></ImageUpload>\n              <Row>\n                \n                <Col xs={12} className=\"d-flex justify-content-end\">\n                  <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                    Next\n                  </MuiButton>\n                </Col>\n              </Row>\n            </div>\n\n            <div  hidden={activeStep !== 5} style={{ display: 'flex',  alignItems: 'center', height: 'auto'}}>\n          \n                <SuccessMessage StudioId={newStudioId} />\n                <br></br>\n              \n            </div>\n        \n      <br></br>\n      \n    </div>\n  )\n}\n\n\nexport default StudioAdd\n","import React, { useState, useEffect } from 'react';\nimport { Alert, Container } from 'react-bootstrap';\n\nconst AlertPopup = ({\n  type = 'info',\n  message = 'Default message',\n  timeOfDisplay = 5000,\n  fontSize = '16px',\n  fontWeight = 'normal',\n  fontStyle = 'normal',\n}) => {\n  const [showAlert, setShowAlert] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowAlert(false);\n    }, timeOfDisplay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [timeOfDisplay]);\n\n  return (\n    <Container>\n      {showAlert && (\n        <Alert\n          variant={type}\n          style={{\n            fontSize,\n            fontWeight,\n            fontStyle,\n            textAlign: 'center',\n            marginTop: '10px',\n            marginBottom: '0',\n          }}\n          onClose={() => setShowAlert(false)}\n          dismissible\n        >\n          {message}\n        </Alert>\n      )}\n    </Container>\n  );\n};\n\nexport default AlertPopup;\n","import React, { useState, useEffect } from 'react';\nimport {Button, Row, Col, Form, Table} from 'react-bootstrap';\nimport { db } from '../config';\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { COLLECTIONS } from '../constants';\nimport AlertPopup from './AlertPopup';\nimport ImageUpload from './ImageUpload';\nimport { STORAGES } from '../constants';\nimport MapsInput from './MapsInput';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport TimeRangePicker from './TimeRangePicker';\nimport indianCities from '../cities.json';\nimport indianStates from '../states.json';\nimport danceStyles from '../danceStyles.json';\nimport { AMENITIES_ICONS } from '../constants';\nimport {Autocomplete,LinearProgress,TextField} from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { FaMinus, FaPlus } from 'react-icons/fa';\nimport { MultiSelect } from 'primereact/multiselect';\nimport { putData } from '../utils/common';\n\nconst daysOfWeek = ['M','T','W','Th','F','St','Sn'];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\"\n};\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nfunction StudioUpdate({ studio, setStudio, studioId, setStudioId, instructors }) {\n  const [selectedStudio, setSelectedStudio] = useState(null);\n  const [selectedStudioId, setSelectedStudioId] = useState(null);\n  const [selectedInstructors, setSelectedInstructors] = useState([]);\n  const [selectedStudioFrozenClassRows, setSelectedStudioFrozenClassRows] = useState(-1);\n  const [selectedAmenities,setSelectedAmenities] = useState([]);\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [defaultTime, setDefaultTime] =  useState(\"00:00-00:00\");\n\n  const locationOptions = indianCities.cities;\n  const stateOptions = indianStates.states;\n  const danceStylesOptions = danceStyles.danceStyles;\n  const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n  const [showUpdateSuccessAlert, setShowUpdateSuccessAlert] = useState(false);\n  const [showUpdateErrorAlert, setShowUpdateErrorAlert] = useState(false);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n\n  const instructorNamesWithIds = instructors.map((instructor) => `${instructor.name} - ${instructor.id}`);\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: isDarkModeOn?'dark':'light',\n    },\n  });\n\n  const handleDanceStylesChange = (event, value) => {\n    setSelectedDanceStyles(value);\n  };\n  \n  \n  const handleAmenitiesChange = (event, value) => {\n    setSelectedAmenities(value);\n  };\n\n  const [tableData, setTableData] = useState({\n    0:{\n      className: '',\n      danceForms: '',\n      days: '',\n      time: '',\n      instructors: [],\n      fee:'',\n      level:'',\n      freeTrial: false,\n      classCategory: []\n    }\n});\n\n  const handleTimePickerOpen = (index,time) => {\n    //console.log(\"handleTimePickerOpen\",time,index)\n    setDefaultTime(time)\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null); \n    //console.log(\"---------\")\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n  \n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n  \n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(' - ');\n  \n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n  \n      return newData;\n    });\n  \n    setSelectedRow(selectedRowIndex);\n  };\n  \n  useEffect(() => {\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser = JSON.parse(localStorage.getItem('StudioCreated')) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map((studio) => `${studio.studioName} : ${studio.id}`);\n    setStudioId(studioIdList);\n\n    //console.log(\"studio:\", studio);\n    //console.log(\"studioId\", studioId);\n  }, []);\n\n  useEffect(() => {\n    // Fetch data for the selected studio when studioId changes\n    if (selectedStudio) {\n      //console.log(\"Studio Instructors Names\",selectedStudio.instructorsNames)\n      setSelectedInstructors((selectedStudio.instructorsNames));\n      if (selectedStudio && selectedStudio.danceStyles) {\n        setSelectedDanceStyles(selectedStudio.danceStyles.split(','));\n      }\n      if (selectedStudio && selectedStudio.addAmenities) {\n        setSelectedAmenities(selectedStudio.addAmenities.split(','));\n      }    \n      if(selectedStudio && selectedStudio.tableData){\n        const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n        setSelectedStudioFrozenClassRows(maxIndex);\n      }\n    }\n  }, [selectedStudio]);\n\n  const handleSelectStudio = async (event) => {\n    event.preventDefault();\n    const selected = event.target.value;\n    const selectedId = selected.split(\":\").pop().trim();\n    setSelectedStudioId(selectedId);\n    try {\n      const studioDoc = await getDoc(doc(db, COLLECTIONS.STUDIO, selectedId));\n      if (studioDoc.exists) {\n        setSelectedStudio(studioDoc.data());\n        if(studioDoc.data().geolocation){\n          const  loc = studioDoc.data().geolocation;\n          setSelectedLocation(loc);\n          //console.log(\"StudioUpdate Selected location\",selectedLocation,loc)\n        }\n        \n        if (studioDoc.data().tableData) {\n          setTableData(studioDoc.data().tableData);\n          //selectedStudioFrozenClassRows()\n          const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n          selectedStudioFrozenClassRows(maxIndex)\n          //console.log(\"Yo We got...\",tableData,Array.isArray(tableData),isMapOfMaps(tableData),maxIndex)\n\n        } else {\n          setTableData({\n            0:{\n              className: '',\n              danceForms: '',\n              days: '',\n              time: '',\n              instructors: [],\n              fee: '',\n              level:'',\n              freeTrial: false,\n              classCategory: []\n            }\n        });\n        }\n      } else {\n        setSelectedStudio(null); // No matching studio found\n      }\n    } catch (error) {\n      console.error(\"Error fetching studio data:\", error, selectedId);\n    }\n  };\n\n\n  const handleInstructorChange = (event, value) => {\n    setSelectedInstructors(value);\n  };\n\n\n  const handleUpdateStudio = async (event) => {\n    event.preventDefault();\n    setIsSubmitting(true);\n    const nameIdLocal = event.target.nameId.value;\n    const indexOfColon = nameIdLocal.lastIndexOf(\":\");\n    const studioId = nameIdLocal.substring(indexOfColon + 1).trim();\n    //console.log(studioId)\n\n    if (!studioId) {\n      //console.log(\"Invalid or empty studio id\")\n      return;\n    }\n\n    //const description = encodeToUnicode(event.target.description.value);\n    //const geolocation = selectedLocation;\n\n    try {\n      // Update the studio document with the new values\n      ////console.log(description,geolocation)\n        const dbPayload ={\n          studioName: event.target.studioName.value,\n          aboutStudio: event.target.aboutStudio.value,\n          founderName: event.target.founderName.value,\n          aboutFounder: event.target.aboutFounder.value,\n          mobileNumber: event.target.mobileNumber.value,\n          whatsappNumber: event.target.whatsappNumber.value,\n          mailAddress: event.target.mailAddress.value,\n          danceStyles: selectedDanceStyles.join(\",\"),\n          numberOfHalls: event.target.numberOfHalls.value,\n          maximumOccupancy: event.target.maximumOccupancy.value,\n          instructorsNames: selectedInstructors,\n          status: 'OPEN',\n          tableData: tableData,\n          buildingName: event.target.buildingName.value,\n          street: event.target.street.value,\n          city: event.target.city.value,\n          landmark: event.target.landmark.value,\n          pincode: event.target.pincode.value,\n          state: event.target.state.value,\n          country: \"India\",\n          geolocation : selectedLocation,\n          gstNumber: event.target.gstNumber.value,\n          enrolledId:[],\n          reviews:[],\n          author: JSON.parse(localStorage.getItem('userInfo')).displayName,\n          UserId: JSON.parse(localStorage.getItem('userInfo')).UserId,\n          addAmenities: selectedAmenities.join(\",\"),\n          enrollmentProcess: encodeToUnicode(event.target.enrollmentProcess.value),\n          instagram: event.target.instagram.value,\n          facebook: event.target.facebook.value,\n          youtube: event.target.youtube.value,\n          twitter: event.target.twitter.value,\n      }\n      \n      const response = await putData(dbPayload, COLLECTIONS.STUDIO, studioId) \n      if (response.ok) {\n        //console.log(\"Studio updated successfully\");\n        alert(\"Studio Update successfully\")\n        setShowUpdateSuccessAlert(true);\n        setShowUpdateErrorAlert(false);\n      }else{\n        setShowUpdateSuccessAlert(false);\n        setShowUpdateErrorAlert(true);\n      }\n    } catch (error) {\n      console.error(\"Error updating studio: \", error);\n      setShowUpdateSuccessAlert(false);\n      setShowUpdateErrorAlert(true);\n    } finally{\n      setIsSubmitting(false);\n    }\n    // Reset input fields to their initial values when a new studio is selected\n    document.getElementById(\"updateStudioForm\").reset();\n  };\n\n  const handleAddColumn = () => {\n    setTableData((prevData) => {\n      const newData = prevData.map((row) => ({\n        ...row,\n        [Object.keys(row).length]: ''\n      }));\n      return newData;\n    });\n  };\n\n  const handleAddRow = () => {\n    setTableData((prevData) => {\n      const newRowKey = Object.keys(prevData).length; // Use the current number of rows as the new row key\n      return { ...prevData, [newRowKey]: { ...tableData[0] } };\n    });\n  };\n\n  const handleRemoveRow = (index) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n      delete newData[index];\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if(field===\"days\"){\n        value = Array.isArray(value) ? value.join(',') : value; \n      }\n\n      return {\n        ...prevData,\n        [index]: {\n          ...prevData[index],\n          [field]: value\n        }\n      };\n    });\n  };\n\n  return (\n    <div style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n      <br></br>\n            <Form id=\"updateStudioForm\" onSubmit={handleUpdateStudio}>\n              <Form.Group controlId=\"formBasicUpdate\">\n                <Form.Label>Id</Form.Label>\n                <Form.Control as=\"select\" name=\"nameId\" style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black', height: 'auto', // Let it adjust to content\n                                                        lineHeight: '1.5em', \n                                                        padding: '8px' }}  \n                  onChange={handleSelectStudio}>\n                  <option value=\"\">Select a studio...</option>\n                  {studioId && studioId.length > 0 ? (\n                    studioId.map((studioItem) => (\n                      <option key={studioItem} value={studioItem}>\n                        {studioItem}\n                      </option>\n                    ))\n                  ) : (\n                    <option value=\"\">No studio yet!</option>\n                  )}\n                </Form.Control>\n              </Form.Group>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Basic Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Studio Name</Form.Label>\n                <Form.Control rows={1} defaultValue={selectedStudio ? selectedStudio.studioName : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"studioName\" />\n                \n                <Form.Label>About Studio</Form.Label>\n                <Form.Control rows={6} defaultValue={selectedStudio ? selectedStudio.aboutStudio : ''} style={{  minHeight: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio details\" name=\"aboutStudio\" />\n                \n                </Col>\n                <Col md={6}>\n                <Form.Label>Founder's Name</Form.Label>\n                <Form.Control rows={1} defaultValue={selectedStudio ? selectedStudio.founderName : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"founderName\" />\n                \n                <Form.Label>About Founder</Form.Label>\n                <Form.Control rows={6} defaultValue={selectedStudio ? selectedStudio.aboutFounder : ''} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio details\" name=\"aboutFounder\" />\n                \n                </Col>\n                </Row>\n                <hr></hr>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Contact Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Mobile Number</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.mobileNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter studio details\" name=\"mobileNumber\" type=\"number\"  />\n\n                <Form.Label>WhatsApp Number</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.whatsappNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter studio details\" name=\"whatsappNumber\" type=\"number\"  />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Mail Address</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.mailAddress : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" rows={1} placeholder=\"Enter studio details\" name=\"mailAddress\" />\n                \n                  </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Details</h3>\n                <Row>\n                  <Col md={6}>\n                <Form.Label>Dance Styles</Form.Label>\n                \n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>      \n                \n                <Form.Label>Number of Hall(s)</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.numberOfHalls : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Number of Hall(s)\" name=\"numberOfHalls\" type=\"number\" />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Maximum Occupancy</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.maximumOccupancy : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}  rows={1} placeholder=\"Maximum Occupancy\" name=\"maximumOccupancy\" type=\"number\"   />\n                </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Instructor Details</h3>\n                <Form.Label>Names of Instructors</Form.Label>\n                <Row >\n      \n                  <Col xs={6}>\n                  <div style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n                  <Row>\n                  <ThemeProvider theme={darkTheme}>\n                    <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={instructorNamesWithIds}\n                      value={selectedInstructors}\n                      onChange={handleInstructorChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Dance Styles\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                  </ThemeProvider>\n                  <a href=\"#/modifyInstructors\" rel=\"noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', color: isDarkModeOn ? 'cyan' : 'blue' }}>\n                      Go to Instrcutors' Add/update Page? \n                    </a>\n                </Row> \n                  </div>\n                  </Col>\n                </Row>  \n                <hr></hr>\n                   \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Address Details</h3>\n                <Row>\n                  <Col md={6}>\n                  <Form.Label>Building Name</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.buildingName : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter building name\" name=\"buildingName\" />\n\n                <Form.Label>Street</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.street : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter street\" name=\"street\" />\n                <Form.Label>City</Form.Label>\n                  <Form.Control\n                      as=\"select\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black',height: 'auto', // Let it adjust to content\n                        lineHeight: '1.5em', // Mimics rows={1}\n                        padding: '8px', }}\n                      name=\"city\"\n                      value={selectedStudio ? selectedStudio.city : ''}\n                      onChange={(e) => {\n                          const newCity = e.target.value;\n                          setSelectedStudio(prevState => ({\n                              ...prevState,\n                              city: newCity\n                          }));\n                      }}\n                  >\n                      <option value=\"\">Select a city</option>\n                      {locationOptions.map((city, index) => (\n                          <option key={index} value={city}>\n                              {city}\n                          </option>\n                      ))}\n                  </Form.Control>\n                  \n\n                </Col>\n                <Col md={6}>\n                  <Form.Label>Landmark</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.landmark : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter landmark\" name=\"landmark\" />\n\n                <Form.Label>Pincode</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.pincode : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter pincode\" name=\"pincode\" type=\"number\"  />\n               \n                <Form.Label>State</Form.Label>\n                <Form.Control as=\"select\" style={{ padding: \"0 1.5rem\", backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter state\" name=\"state\">\n                <option value=\"\">Select a State</option>\n                    {stateOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n               \n                </Col>\n                \n                <Form.Label>Save exact Address</Form.Label>\n                <MapsInput selectedLocation={selectedStudio && selectedStudio.geolocation ? selectedStudio.geolocation : selectedLocation}\n                            setSelectedLocation={setSelectedLocation} />\n\n                </Row>\n                <hr></hr>\n\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : 'white', color: isDarkModeOn ? 'white' : 'black' }}>Additional Details</h3>\n                <Row>\n                  <Col md={4}>\n                      <Form.Label>GST Number</Form.Label>\n                      <Form.Control defaultValue={selectedStudio ? selectedStudio.gstNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"number\" rows={1} placeholder=\"GST Number\" name=\"gstNumber\" />\n                  </Col>\n                  <Col md={8}>\n                      <Form.Label>Add Amenities</Form.Label>\n                  \n                      <ThemeProvider theme={darkTheme}>\n                      <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={amenityKeys}\n                      value={selectedAmenities}\n                      onChange={handleAmenitiesChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Amenities\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                      </ThemeProvider>\n                </Col>\n                </Row>\n                <Row>\n                  \n                  <Col>\n                    <Form.Label>Enrollment Process</Form.Label>\n                    <Form.Control defaultValue={selectedStudio ? decodeUnicode(selectedStudio.enrollmentProcess) : ''} rows={6} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enrollment Process\" name=\"enrollmentProcess\" />\n              \n                  </Col>\n                </Row>\n\n              <br></br>\n            <span>Time Table Of dance classes</span>\n            <div style={{ overflowX: 'auto', whiteSpace: 'nowrap', scrollbarColor: isDarkModeOn ? '#888 #333' : '#ccc #fff', }}>\n              <Table bordered variant=\"light\">\n                <thead>\n                  <tr>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Name</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Dance Form</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Days</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Time</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'20rem', border: '1px solid black'}}>Instructors</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Fee (₹)</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Level</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Free Trial</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Category</th>\n                    <th style={{padding: 0 }}>\n                      <Button variant=\"primary\" onClick={handleAddRow}>\n                        <FaPlus/>\n                      </Button>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Object.keys(tableData).map((rowKey, index) => (\n                    <tr key={rowKey}\n                    >\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          type=\"text\"\n                          value={tableData[rowKey].className}\n                          onChange={(e) => handleTableChange(rowKey, 'className', e.target.value)}\n                          style={{height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          as=\"select\"\n                          value={tableData[rowKey].danceForms}\n                          onChange={(e) => handleTableChange(rowKey, 'danceForms', e.target.value)}\n                          style={{height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                        >\n                          <option value=\"\">Select a dance form</option>\n                          {danceStylesOptions.map((option) => (\n                      <option key={option} value={option}>\n                        {option}\n                      </option>\n                    ))}\n                          </Form.Control>\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <MultiSelect value={tableData[rowKey] && tableData[rowKey].days && tableData[rowKey].days.split(',').filter(day => day !== '')}\n                          onChange={(event) => handleTableChange(rowKey, 'days', event.target.value)}\n                          options={daysOfWeek}\n                          placeholder=\"class days\" maxSelectedLabels={7} className=\"w-full md:w-20rem\"\n                          style={{color: '#000', width: '100%'}}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          type=\"text\"\n                          value={tableData[rowKey].time}\n                          //onChange={(e) => handleTableChange(rowKey, 'time', e.target.value)}\n                          onClick={() => handleTimePickerOpen(rowKey,tableData[rowKey].time)}\n                        />\n                        {showTimePicker && (\n                        <TimeRangePicker\n                          show={showTimePicker}\n                          handleClose={handleTimePickerClose}\n                          handleSelect={handleTimeSelect}\n                          defaultTime={tableData[selectedRowIndex]?.time || \"00:00-00:00\"} // selectedRowIndex\n                        />\n                      )}\n                      </td>\n                      <td style={{padding:'0rem', width:'20rem'}}>\n                        <Autocomplete\n                          multiple\n                          options={instructorNamesWithIds}\n                          value={tableData[rowKey] && tableData[rowKey].instructors ? tableData[rowKey].instructors : []}\n                          onChange={(_, values) => handleTableChange(rowKey, 'instructors', values)}\n                          renderInput={(params) => (\n                            <TextField\n                              {...params}\n                              variant=\"standard\"\n                              placeholder=\"Select Instructors\"\n                            />\n                          )}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          type=\"text\"\n                          value={tableData[rowKey].fee?tableData[rowKey].fee:\"\"}\n                          onChange={(e) => handleTableChange(rowKey, 'fee', e.target.value)}\n                          style={{height: 'auto',lineHeight: '1.5em',padding: '8px'}}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          as=\"select\"\n                          value={tableData[rowKey].level?tableData[rowKey].level:\"\"}\n                          onChange={(e) => handleTableChange(rowKey, 'level', e.target.value)}\n                          style={{height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                        >\n                          <option value=\"\">Select a Level</option>\n                          <option value=\"Beginner\">Beginner</option>\n                        <option value=\"Intermediate\">Intermediate</option>\n                        <option value=\"Advanced\">Advanced</option>\n                        <option value=\"Misc\">Misc</option>\n\n                          </Form.Control>\n                      </td>\n                      <td style={{ padding: '0rem', border: '1px solid black' }}>\n                        <Form.Control\n                          style={{ backgroundColor: \"white\", height: 'auto', lineHeight: '1.5em', padding: '8px' }}\n                          as=\"select\"\n                          value={tableData[index]?.freeTrial ? tableData[index].freeTrial : \"\"}\n                          onChange={(e) => handleTableChange(index, 'freeTrial', e.target.value)}\n                        >\n                          <option value=\"\">Select a value</option>\n                          <option value={true}>Yes</option>\n                          <option value={false}>No</option>\n                        </Form.Control>\n                      </td>\n                      <td style={{ padding: '0rem', width: '20rem' }}>\n                        <Autocomplete\n                          multiple\n                          id=\"tags-standard\"\n                          options={Object.values(categoryMap)}\n                          value={tableData[index]?.classCategory && tableData[index].classCategory.length > 0 \n                            ? tableData[index].classCategory.map(key => categoryMap[key]) \n                            : []}\n                          onChange={(_, values) => {\n                            const selectedKeys = values.map(value =>\n                              Object.keys(categoryMap).find(key => categoryMap[key] === value)\n                            );\n                            handleTableChange(index, 'classCategory', selectedKeys);\n                          }}\n                          renderInput={(params) => (\n                            <TextField\n                              {...params}\n                              variant=\"standard\"\n                              placeholder=\"Select Class Category\"\n                            />\n                          )}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Button variant=\"danger\" onClick={() => handleRemoveRow(rowKey)}>\n                          <FaMinus/>\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n\n              </Table>\n            </div>\n            <br></br>\n            <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Social Media Links</h3>\n               <Row>\n            <Col md={4}>\n                          <Form.Label>Instagram</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.instagram : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Instagram Link\" name=\"instagram\" />\n                        </Col>\n                        <Col md={4}>\n                          <Form.Label>Facebook</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.facebook : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Facebook Link\" name=\"facebook\" />\n                        </Col>\n                        <Col md={4}>\n                          <Form.Label>YouTube</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.youtube : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"YouTube Link\" name=\"youtube\" />\n                        </Col>\n                        <Col md={4}>\n                          <Form.Label>Twitter</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.twitter : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Twitter Link\" name=\"twitter\" />\n                        </Col>\n                        </Row>\n\n            <br></br>\n            <Button style={{ backgroundColor: isDarkModeOn ? '#892CDC' : 'black', color:'white'  }} type=\"submit\" disabled={isSubmitting}>\n              Update Studio\n            </Button>\n            {isSubmitting && <LinearProgress />}\n            </Form>\n            {studioId && studioId.length > 0 && selectedStudioId && (\n              <>\n                <div>\n                  <ImageUpload entityId={selectedStudioId} title={\"Studio Images\"} storageFolder={STORAGES.STUDIOIMAGES} maxImageCount={10} />\n                </div>\n                <br />\n                <div>\n                  <ImageUpload entityId={selectedStudioId} title={\"Studio Icon\"} storageFolder={STORAGES.STUDIOICON} maxImageCount={1} />\n                </div>\n                <div>\n                  <ImageUpload entityId={selectedStudioId} title={\"Studio Announcement Images\"} storageFolder={STORAGES.STUDIOANNOUNCEMENTS} maxImageCount={10}/>\n                </div>\n                <br />\n              </>\n            )}\n      {showUpdateSuccessAlert && (\n        <AlertPopup\n          type=\"info\"\n          message=\"Studio Updated successfully\"\n          timeOfDisplay={3000}\n          fontSize=\"10px\"\n          fontWeight=\"bold\"\n        />\n      )}\n      {showUpdateErrorAlert && (\n        <AlertPopup\n          type=\"warning\"\n          message=\"Studio Update failed\"\n          timeOfDisplay={3000}\n          fontSize=\"10px\"\n          fontWeight=\"bold\"\n        />\n      )}\n    </div>\n  );\n}\n\nexport default StudioUpdate;\n","import React from 'react';\nimport { Row, Col  } from 'react-bootstrap';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,collection,where,getDocs,query } from \"firebase/firestore\";\nimport { COLLECTIONS } from '../constants';\nimport StudioAdd from '../Components/StudioAdd';\nimport StudioUpdate from '../Components/StudioUpdate';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { useAuth } from '../context/AuthContext';\nimport CardSliderCard from '../Components/CardSliderCard';\nimport Tab from '@mui/material/Tab';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\nimport { Box } from '@mui/material';\n\n\n\nfunction CreatorStudio() {\n  const [studio, setStudio] = useState([]);\n  const [studioId, setStudioId] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  const [instructors, setInstructors] = useState([]);\n  const [isCreator, setIsCreator] = useState(false);\n  const [premiumTill, setPremiumTill] = useState(-1);\n  const { currentUser } = useAuth();\n  const [value, setValue] = React.useState('1');\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n\n  useEffect(() => {\n    console.log(\"Creator Studio getCreatorMode\")\n    const getCreatorMode = async (event) => {\n      try{\n      const userRef = doc(db, \"User\", currentUser.uid);\n      const userSnap = await getDoc(userRef);\n      if (userSnap.exists()) {\n        console.log(\"User there\",userSnap.data(),userSnap.data().CreatorMode,JSON.parse(localStorage.getItem('userInfoFull')));\n        if(userSnap.data() != null){\n          \n          setIsCreator(userSnap.data().CreatorMode)\n          setPremiumTill(userSnap.data().isPremium)\n          console.log(\"Premium Till\",premiumTill,userSnap.data())\n        }else{\n          console.log(\"userSnap.data() null\")\n        }\n      } else {\n        console.log(\"User not found but workshop created... error\");\n      }\n      }catch(error){\n        console.log(\" error\");\n      }\n    }\n  \n    getCreatorMode();\n  }, [isCreator]); // Run once on mount\n\n    // Fetch instructors for the current user\n  useEffect(() => {\n    console.log(\"Creator Studio fetchInstructors\")\n  const fetchInstructors = async () => {\n    let userId = null;\n    if (\n      JSON.parse(localStorage.getItem('userInfo')) &&\n      JSON.parse(localStorage.getItem('userInfo')).UserId\n    ) {\n      userId = JSON.parse(localStorage.getItem('userInfo')).UserId;\n    }\n    if (!userId) {\n      console.log('User not found');\n      alert('User not found');\n      return;\n    }\n\n    const instructorRef = collection(db, COLLECTIONS.INSTRUCTORS);\n    const q = query(instructorRef, where('createdBy', '==', userId));\n    const querySnapshot = await getDocs(q);\n    \n    const instructorsList = [];\n    querySnapshot.forEach((doc) => {\n      instructorsList.push({\n        id: doc.id,\n        name: doc.data().name,      \n      });\n    });\n    console.log(\"Hiii\", instructorsList)\n    setInstructors(instructorsList);\n  };\n\n  fetchInstructors();\n  }, []);\n\n \n  useEffect(() => {\n    console.log(\"Creator Studio getStudioCreated\")\n    const getStudioCreated = async ()=>{\n      const q = query(collection(db, COLLECTIONS.STUDIO), where(\"UserId\", \"==\", JSON.parse(localStorage.getItem('userInfo')).UserId)    );\n      console.log(\"Hiiii\",JSON.parse(localStorage.getItem('userInfo')).UserId)\n      const querySnapshot = await getDocs(q);\n      console.log(\"Studios : \",querySnapshot)\n      const studiosOfUser = querySnapshot.docs.filter(doc => doc.data().studioName).map(doc => \n        { const data = doc.data();\n          return {\n            id: doc.id, // Include the document ID in the data\n            ...data\n          };\n      });\n      localStorage.setItem(\"StudioCreated\", JSON.stringify(studiosOfUser));\n      setStudio(studiosOfUser);\n      setStudioId(studiosOfUser.map((studio) => (String(studio.studioName) + \" :\" + String(studio.id))));\n      console.log(studio)\n      console.log(\"studioId\",studioId)\n    };\n      \n      getStudioCreated();\n    },[setStudio]);\n \n  useEffect(() => {\n    console.log(\"Creator Studio setStudioId\")\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser = JSON.parse(localStorage.getItem('StudioCreated')) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map((studio) => `${studio.studioName} : ${studio.id}`);\n    setStudioId(studioIdList);\n\n    console.log(\"studio:\", studio);\n    console.log(\"studioId\", studioId);\n  }, [setStudioId]);\n\n  console.log(\"studio :\",studio)\n  return (\n    <div>\n      <br></br>\n      {isCreator?(\n        \n       <>\n       <Box sx={{ width: '100%', typography: 'body1' }}>\n      <TabContext value={value}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <TabList style={{color: isDarkModeOn ? 'white' : 'black'}} onChange={handleChange} aria-label=\"lab API tabs example\">\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Add Studio\" value=\"1\" />\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Update Studio\" value=\"2\" />\n          \n          </TabList>\n        </Box>\n        <TabPanel value=\"1\">\n\n        <StudioAdd instructors={instructors} />\n        </TabPanel>\n        <TabPanel value=\"2\">\n        <>\n        <StudioUpdate\n                  studio={studio}\n                  setStudio={setStudio}\n                  instructors={instructors}\n                  studioId={studioId}\n                  setStudioId={setStudioId}\n                />\n        </>\n    \n        </TabPanel>\n        \n      </TabContext>\n    </Box>\n      </>\n      ):\"\"}\n \n      <h3 style={{color: isDarkModeOn ? 'white' : 'black'}}>Your Studios:</h3>\n       <ul>\n      <Row xs={1} md={3} lg={4} className=\"g-4\">\n        {studio.length > 0 ? (\n          studio.map((studio, index) => (\n            <Col key={index}>\n              <a href={`#/studio/${studio.studioId}`} style={{ textDecoration: \"none\" }}>\n                <CardSliderCard studio={studio}/>\n              </a>\n          </Col>\n          ))\n        ) : (\n          <p style={{color: isDarkModeOn ? 'white' : 'black'}}>No studio yet!</p>\n        )}\n      </Row>\n      <br/>\n      </ul>\n    </div>\n  )\n}\nexport default CreatorStudio","import { COLORS, SERVER_URLS,BASEURL_DEV,BASEURL_PROD } from \"../constants\";\n\nexport async function postData(dbPayload, collection_name, notify, metadata) {\n  const BASEURL = BASEURL_PROD;\n  const endpoint = 'crud/newEntity/'; // Define your endpoint here\n  const authToken = localStorage.getItem(\"authToken\");\n  try {\n    const response = await fetch(BASEURL + endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        data: dbPayload,\n        collection_name: collection_name,\n        notify: notify,\n        metadata : metadata,\n      }),\n    });\n\n    if (!response.ok) {\n      console.log('Error in postData:', response);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response;\n  } catch (error) {\n    console.error('Error in postData:', error);\n    throw error;\n  }\n}\n\nexport async function putData(dbPayload, collection_name, entity_id, notify = null, metadata = null) {\n  const BASEURL = BASEURL_PROD;\n  const endpoint = `crud/updateEntity/${entity_id}`;\n  const authToken = localStorage.getItem(\"authToken\");\n  try {\n    const response = await fetch(BASEURL + endpoint, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        data: dbPayload,\n        collection_name: collection_name,\n        notify: notify,\n        metadata : metadata,\n      }),\n    });\n\n    if (!response.ok) {\n      console.log('Error in postData:', response);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response;\n  } catch (error) {\n    console.error('Error in postData:', error);\n    throw error;\n  }\n}\n\nexport const getRandomColor = () => {\n  const colorKeys = Object.keys(COLORS);\n  const randomKey = colorKeys[Math.floor(Math.random() * colorKeys.length)];\n  return COLORS[randomKey];\n};\n\nexport const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const bookEntity = async (bookingData) => {\n  const url = `${SERVER_URLS.CLOUD}bookings/bookEntity/`; \n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        userId: bookingData.userId,\n        entityType: bookingData.entityType,\n        entityId: bookingData.entityId,\n        associatedStudioId: bookingData.associatedStudioId,\n        emailLearner: bookingData.emailLearner,\n        personsAllowed: bookingData.personsAllowed,\n        pricePerPerson: bookingData.pricePerPerson,\n      })\n    });\n\n    const result = await response.json();\n    \n    if (response.ok) {\n      console.log('Booking successful:', result);\n      return result;  // Return the successful result\n    } else {\n      console.error('Booking failed:', result);\n      return result;  // Return null or an error message\n    }\n    \n  } catch (error) {\n    console.error('Error occurred while booking:', error);\n    return null;  // Return null or an error message\n  }\n};\n\n\n// Function to decode a Unicode (UTF-8) encoded string back to the original text\nexport const decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nexport const convertToHtmlEntities= (text) =>{\n  return text.replace(/[\\u00A0-\\u9999<>\\&]/gim, function(i) {\n      return '&#' + i.charCodeAt(0) + ';';\n  });\n}\n\nexport const getYoutubeVideoId = (link)=> {\n  console.log(\"MediaDisplay\", link)\n  if (!link){\n    return null\n  }\n  const text = link.trim();\n  const youtubeRegExp = /(?:https?:\\/\\/)?(?:www\\.|m\\.)?(?:youtube\\.com\\/(?:watch\\?v=|embed\\/|v\\/|shorts\\/)|youtu\\.be\\/)([\\w\\-]+)/;\n  const match = text.match(youtubeRegExp);\n  let videoId = null;\n\n  if (match) {\n    videoId = match[1];\n  }\n  console.log(\"MediaDisplay\", videoId)\n  return videoId\n}\n\nexport const gradientStyles = [\n  { background: 'linear-gradient(to bottom right, #FFD700, #FFA500)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #00BFFF, #1E90FF)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #32CD32, #008000)', color: 'white' },\n  { background: 'linear-gradient(to bottom right, #FFA500, #FF4500)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #DC143C, #8B0000)', color: 'white' },\n  { background: 'linear-gradient(to bottom right, #000000, #2F4F4F)', color: 'white' },\n];"],"names":["ImageUpload","_ref","entityId","storageFolder","title","maxImageCount","updateMode","disable","useSnackbar","selectedFiles","setSelectedFiles","useState","uploadedFiles","setUploadedFiles","newFiles","setNewFiles","deletedFiles","setDeletedFiles","isDarkModeOn","useSelector","selectDarkModeStatus","progressDelete","setProgressDelete","progressUpdate","setProgressUpdate","console","log","filesizes","bytes","decimals","arguments","length","undefined","dm","i","Math","floor","parseFloat","pow","toFixed","useEffect","fetchStudioImages","truncatedFiles","slice","alert","concat","calculateDelta","selectedFileIds","map","file","id","uploadedFileIds","imagesToDelete","filter","includes","newImages","async","folderPath","folderRef","ref","storage","fileList","listAll","files","Promise","all","items","downloadURL","getDownloadURL","fileRef","name","filename","fileURL","error","_jsx","className","style","display","width","justifyContent","children","flex","_jsxs","backgroundColor","STORAGES","STUDIOIMAGES","type","onChange","e","Array","from","target","updatedFiles","forEach","reader","FileReader","onloadend","push","shortid","filetype","fileimage","result","datetime","lastModifiedDate","toLocaleString","filesize","size","prevFiles","readAsDataURL","multiple","position","Card","sx","maxWidth","match","src","alt","maxHeight","objectFit","IconButton","disabled","onClick","window","confirm","fileToDelete","find","prevDeletedFiles","handleDeleteSelectedFile","top","right","DeleteIcon","color","CardContent","deleteAllImagesInFolder","uploadImages","deleteImages","hidden","value","max","defaultProps","_defaultTime$split$","show","handleClose","handleSelect","defaultTime","startTime_i","split","trim","endTime_i","renderTimeOptions","defaultValue","timeOptions","generateTimeOptions","options","option_AM","option_PM","hours","minutes","formattedHours","toString","padStart","formattedMinutes","timeString","formattedHours12","_Fragment","option","Modal","onHide","Header","closeButton","Title","Body","Row","Col","Form","Group","Label","Control","as","height","lineHeight","padding","Footer","Button","daysOfWeek","categoryMap","Kids","Adults","Women_Only","Men_Only","Seniors","All","Couples","Families","tableData","setTableData","instructorNamesWithIds","showTimePicker","setShowTimePicker","selectedRowIndex","setSelectedRowIndex","selectedRow","setSelectedRow","danceStylesOptions","danceStyles","setDefaultTime","handleTableChange","index","field","prevData","isArray","join","newData","handleTimePickerClose","handleTimeSelect","startTime","endTime","currentTime","time","currentStartTime","currentEndTime","Table","bordered","variant","border","textAlign","minWidth","handleAddRow","danceForms","days","instructors","fee","level","status","freeTrial","classCategory","FaPlus","row","_tableData$selectedRo","MultiSelect","day","event","placeholder","maxSelectedLabels","handleTimePickerOpen","TimeRangePicker","Autocomplete","_","values","renderInput","params","TextField","Object","key","selectedKeys","keys","splice","handleRemoveRow","FaMinus","libraries","PinMarker","FaMapMarkerAlt","fontSize","selectedLocation","setSelectedLocation","center","setCenter","lat","lng","address","setAddress","apiKey","LoadScript","googleMapsApiKey","PlacesAutocomplete","newAddress","onSelect","results","geocodeByAddress","selectedAddress","latLng","getLatLng","_ref2","getInputProps","suggestions","getSuggestionItemProps","loading","suggestion","active","description","GoogleMapReact","bootstrapURLKeys","defaultCenter","defaultZoom","_ref3","text","StudioId","jsx","encodeToUnicode","utf8Encoded","TextEncoder","encode","String","fromCharCode","newStudioId","setNewStudioId","selectedInstructors","setSelectedInstructors","selectedDanceStyles","setSelectedDanceStyles","selectedAmenities","setSelectedAmenities","instructor","isReady","setIsReady","isSubmitting","setIsSubmitting","locationOptions","indianCities","stateOptions","indianStates","amenityKeys","AMENITIES_ICONS","activeStep","setActiveStep","handleNext","prevActiveStep","handleBack","darkTheme","createTheme","palette","mode","form","document","getElementById","q","query","collection","db","DRAFT_COLLECTIONS","DRAFT_STUDIOS","where","JSON","parse","localStorage","getItem","UserId","querySnapshot","getDocs","empty","addDoc","studioName","aboutStudio","founderName","aboutFounder","mobileNumber","whatsappNumber","mailAddress","numberOfHalls","maximumOccupancy","instructorsNames","buildingName","street","city","landmark","pincode","state","country","geolocation","gstNumber","enrolledId","reviews","author","displayName","isPremium","addAmenities","enrollmentProcess","creatorEmail","email","instagram","facebook","youtube","twitter","visibilty","studios","doc","data","foundStudio","aadharNumber","unicodeString","c","charCodeAt","TextDecoder","decode","Uint8Array","decodeUnicode","main","intervalId","previousState","studioRef","setInterval","reduce","accumulator","current","currentState","isEqual","updateDoc","err","clearInterval","Stepper","alternativeLabel","label","Step","StepLabel","onSubmit","preventDefault","_JSON$parse","currentUserEmail","studioData","notifyEmails","metaData","entity_name","response","postData","COLLECTIONS","STUDIO","ok","json","deleteDoc","resetDraft","controlId","md","rows","minHeight","minheight","ThemeProvider","theme","CssBaseline","handleDanceStylesChange","xs","MuiButton","handleInstructorChange","href","rel","textDecoration","overflowX","whiteSpace","scrollbarColor","StudioTable","handleAmentiesChange","MapsInput","LinearProgress","STUDIOICON","alignItems","SuccessMessage","message","timeOfDisplay","fontWeight","fontStyle","showAlert","setShowAlert","timer","setTimeout","clearTimeout","Container","Alert","marginTop","marginBottom","onClose","dismissible","studio","setStudio","studioId","setStudioId","selectedStudio","setSelectedStudio","selectedStudioId","setSelectedStudioId","selectedStudioFrozenClassRows","setSelectedStudioFrozenClassRows","showUpdateSuccessAlert","setShowUpdateSuccessAlert","showUpdateErrorAlert","setShowUpdateErrorAlert","studiosOfUser","studioIdList","maxIndex","Number","nameIdLocal","nameId","indexOfColon","lastIndexOf","substring","dbPayload","putData","reset","selectedId","pop","studioDoc","getDoc","exists","loc","studioItem","newCity","prevState","handleAmenitiesChange","newRowKey","rowKey","_tableData$index","_tableData$index2","STUDIOANNOUNCEMENTS","AlertPopup","setInstructors","isCreator","setIsCreator","premiumTill","setPremiumTill","currentUser","useAuth","setValue","React","userRef","uid","userSnap","CreatorMode","getCreatorMode","userId","instructorRef","INSTRUCTORS","instructorsList","fetchInstructors","docs","setItem","stringify","getStudioCreated","Box","typography","TabContext","borderBottom","borderColor","TabList","handleChange","newValue","Tab","TabPanel","StudioAdd","StudioUpdate","lg","CardSliderCard","collection_name","notify","metadata","BASEURL","BASEURL_PROD","authToken","fetch","method","headers","body","Error","entity_id","endpoint","bookEntity","url","SERVER_URLS","CLOUD","bookingData","entityType","associatedStudioId","emailLearner","personsAllowed","pricePerPerson","getYoutubeVideoId","link","videoId"],"sourceRoot":""}