{"version":3,"file":"static/js/2467.3407abe6.chunk.js","mappings":"oRAQA,MAsHA,EAtHgCA,KAC9B,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,OAAe,GAC7BC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IACxCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,MACvCG,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,IACjCC,EAAAA,EAAAA,YAAU,KACRJ,EAAcK,EAAS,GACtB,KAEHD,EAAAA,EAAAA,YAAU,KACR,MAAME,EAAmBC,SAASb,IAAa,EAE7CG,EADES,GAAoB,GAAKA,GAAoB,EAChCA,EAEA,EACjB,GACC,CAACZ,IAGJ,MAIMc,EAAc,CAChBC,MAAOR,EAAe,QAAU,SAuEpC,OACES,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,MAAO,QAASC,SAAA,EACzBC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHC,MAAOrB,EACPsB,SAhFkBC,CAACC,EAAOC,KAC9BxB,EAAewB,EAAS,EAgFpBC,QAAQ,aACRC,UAAQ,EACR,aAAW,8BACXX,GAAI,CACA,CAAC,MAADY,OAAOC,EAAAA,EAAYC,gBAAkB,CACnC,iBAAkB,CAAEC,QAAS,MAE/Bb,UAEJC,EAAAA,EAAAA,KAACa,EAAAA,EAAG,CAACC,MAAOrB,EAAasB,MAAM,kEAEjCf,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACC,GAAI,CAAEmB,EAAG,GAAIjB,SArFMkB,MAC1B,IAAKjC,EAAY,OAAO,KAExB,MAcMkC,EAZO,IADDrC,EACWG,EAAWmC,8BAA8BD,cACxC,GAYlBE,EANO,IADDvC,EACWG,EAAWmC,8BAA8BE,QACxC,GAOxB,OACI1B,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAG,SAAA,EACAJ,EAAAA,EAAAA,MAAC2B,EAAAA,EAAU,CAACf,QAAQ,YAAYO,OAAKS,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAO9B,GAAW,IAAE+B,UAAW,SAAUC,cAAe,SAAS1B,SAAA,CAAC,mBAClFmB,KAGpBE,EAAcM,KAAI,CAACC,EAAWC,KAE3B,MAAMC,EAAWF,EAAUG,MAAM,MAEjC,OACI9B,EAAAA,EAAAA,KAAA,OAAiBc,OAAKS,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAO9B,GAAW,IAAEsC,WAAY,WAAYC,UAAW,SAASjC,SACjF8B,EAASH,KAAI,CAACO,EAASC,KAEpB,MAAMC,EAAiB,WAAWC,KAAKH,GACjCI,EAAiB,gBAAgBD,KAAKH,GAE5C,IAAIK,EAAW,UACXC,EAAa,SAUjB,OARIJ,GACAG,EAAW,SACXC,EAAa,QACNF,IACPC,EAAW,SACXC,EAAa,SAIbvC,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAEPf,QAAQ,QACRO,MAAO,CACHwB,WACAC,cACFxC,SAEDkC,GAPIC,EAQI,KA3BfN,EA8BJ,MAGZ,EAsBLX,OAEC,C","sources":["Screens/NrityaStudioPolicyPages.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Tabs, Tab, Box, Typography,tabsClasses } from '@mui/material';\nimport policies from '../policies.json'; // Importing the policies JSON\nimport { useSelector} from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\n\nconst NrityaStudioPolicyPages = () => {\n  const { selected } = useParams() || 0; \n  const [selectedTab, setSelectedTab] = useState(0);\n  const [policyData, setPolicyData] = useState(null);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); \n  useEffect(() => {\n    setPolicyData(policies);\n  }, []);\n\n  useEffect(() => {\n    const selectedTabValue = parseInt(selected) || 0; // Convert selected to an integer, default to 0 if NaN or undefined\n    if (selectedTabValue >= 0 && selectedTabValue <= 3) {\n      setSelectedTab(selectedTabValue); // Only allow valid values between 0 and 3\n    } else {\n      setSelectedTab(0); // Default to 0 if the value is out of range\n    }\n  }, [selected]);\n\n\n  const handleTabChange = (event, newValue) => {\n    setSelectedTab(newValue);\n  };\n\n  const colorstyles = {\n      color: isDarkModeOn ? 'white' : 'black',\n  };\n  const renderPolicyContent = () => {\n    if (!policyData) return null;\n\n    const getEffectiveDate = () => {\n        switch (selectedTab) {\n            case 0: return policyData.danceStudioTermsAndConditions.effectiveDate;\n            default: return '';\n        }\n    };\n\n    const getPolicyContent = () => {\n        switch (selectedTab) {\n            case 0: return policyData.danceStudioTermsAndConditions.content;\n            default: return [];\n        }\n    };\n\n    const effectiveDate = getEffectiveDate();\n    const policyContent = getPolicyContent();\n\n    return (\n        <Box>\n            <Typography variant=\"subtitle1\" style={{ ...colorstyles, fontStyle: 'italic', textTransform: 'none' }}>\n                Effective Date: {effectiveDate}\n            </Typography>\n\n            {policyContent.map((paragraph, index) => {\n                // Split the paragraph by newline characters\n                const segments = paragraph.split('\\n');\n\n                return (\n                    <div key={index} style={{ ...colorstyles, whiteSpace: 'pre-wrap', marginTop: '16px' }}>\n                        {segments.map((segment, segmentIndex) => {\n                            // Check if the segment starts with a number or a letter\n                            const isNumberedList = /^\\d+\\.\\s/.test(segment); // Matches segments like \"1. \"\n                            const isLetteredList = /^\\s*[a-z]\\.\\s/.test(segment); // Matches segments like \"a. \"\n\n                            let fontSize = 'inherit'; // Default font size\n                            let fontWeight = 'normal'; // Default font weight\n\n                            if (isNumberedList) {\n                                fontSize = '1.2rem'; // Larger size for numbered lists\n                                fontWeight = 'bold';\n                            } else if (isLetteredList) {\n                                fontSize = '1.1rem'; // Slightly larger size for lettered lists\n                                fontWeight = 'bold';\n                            }\n\n                            return (\n                                <Typography\n                                    key={segmentIndex}\n                                    variant=\"body1\"\n                                    style={{\n                                        fontSize,\n                                        fontWeight,\n                                    }}\n                                >\n                                    {segment}\n                                </Typography>\n                            );\n                        })}\n                    </div>\n                );\n            })}\n        </Box>\n    );\n};\n\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Tabs\n        value={selectedTab}\n        onChange={handleTabChange}\n        variant=\"scrollable\"\n        centered\n        aria-label=\"visible arrows tabs example\"\n        sx={{\n            [`& .${tabsClasses.scrollButtons}`]: {\n              '&.Mui-disabled': { opacity: 0.3 },\n            },\n          }}\n      >\n        <Tab style={colorstyles} label=\"Terms & Conditions for Dance Studio Registration on Nritya\" />\n      </Tabs>\n      <Box sx={{ p: 3 }}>\n        {renderPolicyContent()}\n      </Box>\n    </Box>\n  );\n};\n\nexport default NrityaStudioPolicyPages;\n"],"names":["NrityaStudioPolicyPages","selected","useParams","selectedTab","setSelectedTab","useState","policyData","setPolicyData","isDarkModeOn","useSelector","selectDarkModeStatus","useEffect","policies","selectedTabValue","parseInt","colorstyles","color","_jsxs","Box","sx","width","children","_jsx","Tabs","value","onChange","handleTabChange","event","newValue","variant","centered","concat","tabsClasses","scrollButtons","opacity","Tab","style","label","p","renderPolicyContent","effectiveDate","danceStudioTermsAndConditions","policyContent","content","Typography","_objectSpread","fontStyle","textTransform","map","paragraph","index","segments","split","whiteSpace","marginTop","segment","segmentIndex","isNumberedList","test","isLetteredList","fontSize","fontWeight"],"sourceRoot":""}