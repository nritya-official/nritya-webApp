{"version":3,"file":"static/js/9445.625c7c26.chunk.js","mappings":"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","sources":["Components/ShareButton.js","constants.js","utils/firebaseUtils.js"],"sourcesContent":["import React, { useState } from 'react'\n\nimport { Modal, Button, Form, InputGroup } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport {\n    FacebookShareButton,\n    FacebookIcon,\n    TwitterShareButton,\n    TwitterIcon,\n    WhatsappShareButton,\n    WhatsappIcon,\n    EmailShareButton,\n    LinkedinShareButton,\n    RedditShareButton,\n    TelegramShareButton,\n    EmailIcon,\n    LinkedinIcon,\n    RedditIcon,\n    TelegramIcon,\n    XIcon\n} from 'react-share';\nimport ShareIcon from '@mui/icons-material/Share';\nimport {Button as MuiButton} from '@mui/material';\n\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\n\nconst ShareButton = ({ shareUrl }) => {\n    const isDarkModeOn = useSelector(selectDarkModeStatus);\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const copyToClipboard = () => {\n        navigator.clipboard.writeText(shareUrl);\n        alert('Link copied to clipboard!');\n    };\n\n    return (\n        <>\n\n            {/* Share Button */}\n            <ShareIcon\n                variant=\"filled\" \n                onClick={handleShow}\n                sx={{\n                    color: isDarkModeOn ? \"white\" : \"black\",\n                    '&:hover': {\n                        color: isDarkModeOn ? \"grey.400\" : \"grey.700\",\n                    },\n                }}\n            />\n\n    \n            {/* Share Popup Modal */}\n            <Modal show={show} onHide={handleClose} backdrop={false} centered style={{zIndex:50}}>\n                <Modal.Header closeButton>\n                    <Modal.Title style={{textTransform: 'none' }}>Share with your friends</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n\n                    <div className=\"d-flex justify-content-around mb-3 \">\n                        <FacebookShareButton url={shareUrl} quote=\"Check out this video!\">\n                            <FacebookIcon size={35} round />\n                        </FacebookShareButton>\n\n                        <TwitterShareButton url={shareUrl} title=\"Check out this video!\">\n                            <XIcon size={35} round />\n                        </TwitterShareButton>\n\n                        <WhatsappShareButton url={shareUrl}>\n                            <WhatsappIcon size={35} round />\n                        </WhatsappShareButton>\n\n                        <EmailShareButton url={shareUrl}>\n                            <EmailIcon size={35} round />\n                        </EmailShareButton>\n\n                        <LinkedinShareButton url={shareUrl}>\n                            <LinkedinIcon size={35} round />\n                        </LinkedinShareButton>\n\n                        <RedditShareButton url={shareUrl}>\n                            <RedditIcon size={35} round />\n                        </RedditShareButton>\n\n                        <TelegramShareButton url={shareUrl}>\n                            <TelegramIcon size={35} round />\n                        </TelegramShareButton>\n                    </div>\n                    <InputGroup className=\"mb-3\">\n                        <Form.Control type=\"text\" value={shareUrl} readOnly />\n                        <button variant=\"outline-dark\" onClick={copyToClipboard}>\n                            Copy Link\n                        </button>\n                    </InputGroup>\n                </Modal.Body>\n            </Modal>\n        </>\n    )\n}\n\nexport default ShareButton\n","import { FaSnowflake, FaWifi, FaTint, FaToilet, FaPlug, FaFireExtinguisher, FaFirstAid, FaVideo, FaCreditCard, FaParking  } from 'react-icons/fa';\n\nexport const STATUSES = {\n    SUBMITTED: \"Submitted\",\n    UNDER_REVIEW: \"Under Review\",\n    REVIEWED: \"Reviewed\",\n    VERIFIED: \"Verified\",\n    VERIFICATION_FAILED: \"Verification Failed\",\n};\n\nexport const DRAFT_COLLECTIONS = {\n    DRAFT_STUDIOS: 'DraftStudios',\n    DRAFT_WORKSHOPS: 'DraftWorkshops',\n    DRAFT_OPEN_CLASSES: 'DraftOpenClasses',\n    DRAFT_COURSES: 'DraftCourses'\n};\n\nexport const LEVELS = {\n    ALL : \"All\",\n    BEGINNERS : \"Beginner\", \n    INTERMEDIATE :\"Intermediate\", \n    ADVANCED :\"Advanced\"\n}\nexport const ENTITY_FLAG = {\n    INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR : 30,\n    WORKSHOPS_BOOKING_LIMIT : 10,\n    OPEN_CLASSES_BOOKING_LIMIT : 2,\n    COURSES_BOOKING_LIMIT : 10,\n}\n\n\nexport const SERVER_URLS = {\n    CLOUD : process.env.REACT_APP_BACKEND_URL,\n    LOCAL : 'http://127.0.0.1:8000/'\n}\n\nexport const COLORS = {\n    GREEN: { backgroundColor: \"#28a745\", color: \"#fff\" },     // Green background, white text\n    BLUE: { backgroundColor: \"#007bff\", color: \"#fff\" },      // Blue background, white text\n    YELLOW: { backgroundColor: \"#ffc107\", color: \"#000\" },    // Yellow background, black text\n    RED: { backgroundColor: \"#dc3545\", color: \"#fff\" },       // Red background, white text\n    PURPLE: { backgroundColor: \"#6f42c1\", color: \"#fff\" },    // Purple background, white text\n    ORANGE: { backgroundColor: \"#fd7e14\", color: \"#fff\" },    // Orange background, white text\n    TEAL: { backgroundColor: \"#20c997\", color: \"#fff\" },      // Teal background, white text\n    PINK: { backgroundColor: \"#e83e8c\", color: \"#fff\" },      // Pink background, white text\n    GRAY: { backgroundColor: \"#6c757d\", color: \"#fff\" },       // Gray background, white text\n\n    LIGHTBLUE: { backgroundColor: \"#17a2b8\", color: \"#fff\" }, // Light blue background, white text\n    DARKBLUE: { backgroundColor: \"#343a40\", color: \"#fff\" },  // Dark blue background, white text\n    CYAN: { backgroundColor: \"#00bcd4\", color: \"#fff\" },      // Cyan background, white text\n    INDIGO: { backgroundColor: \"#6610f2\", color: \"#fff\" },    // Indigo background, white text\n    LIME: { backgroundColor: \"#cddc39\", color: \"#000\" },      // Lime background, black text\n    AMBER: { backgroundColor: \"#ffca28\", color: \"#000\" },     // Amber background, black text\n    BROWN: { backgroundColor: \"#795548\", color: \"#fff\" },     // Brown background, white text\n    LIGHTGREEN: { backgroundColor: \"#8bc34a\", color: \"#000\" },// Light green background, black text\n    DEEPPURPLE: { backgroundColor: \"#673ab7\", color: \"#fff\" },// Deep purple background, white text\n    DEEPORANGE: { backgroundColor: \"#ff5722\", color: \"#fff\" },// Deep orange background, white text\n    BLACK: { backgroundColor: \"#000000\", color: \"#fff\" },     // Black background, white text\n    WHITE: { backgroundColor: \"#ffffff\", color: \"#000\" },     // White background, black text\n    SILVER: { backgroundColor: \"#c0c0c0\", color: \"#000\" },    // Silver background, black text\n    GOLD: { backgroundColor: \"#ffd700\", color: \"#000\" },      // Gold background, black text\n    NAVY: { backgroundColor: \"#001f3f\", color: \"#fff\" },      // Navy background, white text\n    OLIVE: { backgroundColor: \"#3d9970\", color: \"#fff\" },     // Olive background, white text\n\n  };\n\nexport const CHIP_LEVELS_DESIGN = {\n    [LEVELS.ALL]: COLORS.GREEN,           // Green background, white text\n    [LEVELS.BEGINNERS]: COLORS.BLUE,     // Blue background, white text\n    [LEVELS.INTERMEDIATE]: COLORS.YELLOW,  // Yellow background, black text\n    [LEVELS.ADVANCED]: COLORS.RED      // Red background, white text\n  };\n  \n\n  \nexport const danceStylesColorChips = [COLORS.PURPLE,COLORS.ORANGE,COLORS.TEAL,COLORS.LIME]\n\nexport const COLLECTIONS = {\n    USER: \"User\",\n    USER_KYC:\"UserKyc\",\n    ADMIN:\"Admin\",\n    REVIEWS: \"Reviews\",\n    TRANSACTIONS: \"Transactions\",\n    STUDIO: \"Studio\",\n    INSTRUCTORS: \"Instructors\",\n    FREE_TRIAL_BOOKINGS:\"FreeTrialBookings\",\n    WORKSHOPS: 'Workshops',\n    OPEN_CLASSES: 'OpenClasses',\n    COURSES: 'Courses',\n    BOOKINGS: 'Bookings',\n}\n\nexport const STORAGES ={\n    STUDIOIMAGES:'StudioImages',\n    STUDIOICON:'StudioIcon',\n    STUDIOANNOUNCEMENTS :'StudioAnnouncements',\n    USERIMAGE:'UserImage',\n    INSTRUCTORIMAGES: 'InstructorImages',\n    WORKSHOPICON :\"WorkshopIcon\",\n    WORKSHOPIMAGES :\"WorkshopImages\",\n    OPENCLASSICON :\"OpenClassIcon\",\n    COURSEICON :\"CourseIcon\",\n    CREATORS_KYC_DOCUMENTS :\"CreatorKycDocuments\"\n}\n\nexport const SEARCH_FILTERS ={\n    DANCEFORMS:'danceforms',\n    DISTANCES:'distances',\n}\n\nexport const BASEURL_DEV = \"http://0.0.0.0:8000/\"\nexport const BASEURL_PROD= process.env.REACT_APP_BACKEND_URL\nexport const STUDIO_ICON_DEFAULT = \"https://firebasestorage.googleapis.com/v0/b/nritya-7e526.appspot.com/o/RichEmailImages%2FDance3.jpg?alt=media&token=d7d41929-39c1-40d1-ad6a-1b2281769e84\"\n\nexport const AMENITIES_ICONS = {\n    \"AC\": <FaSnowflake />,\n    \"Free Wifi\": <FaWifi />,\n    \"RO Water\": <FaTint />,\n    \"Toilet\": <FaToilet />,\n    \"Power Backup\": <FaPlug />,\n    \"Fire Extinguisher\": <FaFireExtinguisher />,\n    \"First Aid Kit\": <FaFirstAid />,\n    \"CCTV Camera\": <FaVideo />,\n    \"Card Payment\": <FaCreditCard />,\n    \"Parking Space\": <FaParking />,\n};\n\n","import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, query, getDocs, where, getCountFromServer } from 'firebase/firestore';\nimport { db } from '../config';\nimport {ref,listAll,getDownloadURL,uploadBytes, deleteObject, uploadBytesResumable  } from \"firebase/storage\";\nimport { storage } from '../config';\nimport { BASEURL_DEV, BASEURL_PROD } from '../constants';\nimport secureLocalStorage from 'react-secure-storage';\n\nexport const setCreatorMode = async (uid) => {\n  const BASEURL = BASEURL_PROD;\n  const url = `${BASEURL}crud/getUserMode/${uid}`;\n  //console.log(\"creatorMode uid\", uid, url);\n  \n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.success) {\n      let mode = false;\n      if (data.data === true) {\n        mode = true;\n      }\n      //console.log(\"setCreatorMode: Is User a creator?\", mode);\n      secureLocalStorage.setItem('CreatorMode', mode);\n    } else {\n      console.log(\"Error: \", data.message || \"Unknown error\");\n      //secureLocalStorage.setItem('CreatorMode', false);\n    }\n    \n  } catch (error) {\n    console.log(\"Error fetching user mode: \", error);\n    secureLocalStorage.setItem('CreatorMode', false);\n  }\n}\n\nexport const fetchStudioEntities = async (studioId, entityType, setState) => {\n  const BASE_URL = BASEURL_PROD;\n  try {\n    const url = `${BASE_URL}crud/${studioId}/${entityType}/`;\n    console.log(url)\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.success) {\n      setState(data.data);\n    } else {\n      console.error(`Error fetching ${entityType}:`, data.error);\n    }\n  } catch (error) {\n    console.error(`Error fetching ${entityType}:`, error);\n  }\n};\n\n\nexport const getCreatorMode = async () => {\n  try{\n    const mode = secureLocalStorage.getItem('CreatorMode');\n    console.log(\"getCreatorMode \",mode)\n    if (mode){\n      return mode\n    }else{\n      return false\n    }\n  } \n  catch(error){\n    console.log(\" error\");\n    return false\n  }\n}\n\nexport const setGetCreatorModeOnMount = async (uid) => {\n  await setCreatorMode(uid);\n  return await getCreatorMode();\n};\n\n\n// Read operation with image URL\nexport const readDocumentWithImageUrl = async (collectionName, productId) => {\n    console.log(\"Debug \",`${collectionName}/${productId}`)\n    const storagePath = `${collectionName}/${productId}`;\n    const folderRef = ref(storage,storagePath);\n    try {\n        const result = await listAll(folderRef);\n        if (result.items.length > 0) {\n            const firstFileRef = result.items[0];\n            const url = await getDownloadURL(firstFileRef);\n            console.log('Debug URL:', url);\n            return url;\n          } else {\n            console.log('Debug No files found in the folder.');\n            return null;\n          }\n    } catch (error) {\n      console.error('Error getting image URL:', error);\n      return null;\n    }\n  };\n\n// Read operation\nexport const readDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    const docSnapshot = await getDoc(docRef);\n    return docSnapshot.exists() ? docSnapshot.data() : null;\n};\n\n// Create or Update operation\nexport const saveDocument = async (collectionName, documentId, data) => {\n    const docRef = doc(db, collectionName, documentId);\n    await setDoc(docRef, data, { merge: true });\n    return data;\n};\n\n\nexport const handleSavePostOTPSuccess = async (collectionName, documentId, phoneNumber) => {\n  const docRef = doc(db, collectionName, documentId);\n  await updateDoc(docRef, {isPhoneNumberVerified:true,phoneNumber});\n  return true;\n};\n\n// Update specific fields in a document\nexport const updateDocumentFields = async (collectionName, documentId, fields) => {\n    const docRef = doc(db, collectionName, documentId);\n    await updateDoc(docRef, fields);\n    return { id: documentId, ...fields };\n};\n\n// Delete operation\nexport const deleteDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    await deleteDoc(docRef);\n    return { id: documentId };\n};\n\n// Query operation\nexport const queryDocuments = async (collectionName, conditions) => {\n    const q = query(collection(db, collectionName, conditions));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const queryDocumentsCount = async (collectionName,field,operation,value) => {\n    console.log(\"Hiii \",collectionName,field,operation,value)\n    const q = query(collection(db, collectionName), where(field,operation,value));\n    const snapshot = await getCountFromServer(q);\n    return snapshot.data().count;\n};\n\n\n  // Function to delete all images in a folder\nexport  const deleteAllImagesInFolder = async (storageFolder, entityId) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n    // Function to delete all images in a folder\n  export  const deleteAllImagesInFolder2 = async (storageFolder, entityId,subfolder) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}/${subfolder}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n  // Function to delete images\nexport const deleteImages = async (storageFolder,imagesToDelete,entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Deletes specific images associated with the given entityId.\n\n    Args:\n      imagesToDelete <array>: An array of image objects to be deleted.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n    const total = imagesToDelete.length;\n    let done = 0;\n    await Promise.all(imagesToDelete.map(async (file) => {\n      let folderPath = `${storageFolder}/${entityId}/${file.filename}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}/${file.filename}`;\n      }\n      const fileRefToDelete = ref(storage, folderPath);\n      await deleteObject(fileRefToDelete);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  // Function to upload new images\nexport const uploadImages = async (storageFolder, newImages, entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n\n    Args:\n      newImages <array>: An array of new image objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n   console.log(storageFolder,entityId)\n   const total = newImages.length;\n    let done = 0;\n    await Promise.all(newImages.map(async (newFileData) => {\n      let folderPath = `${storageFolder}/${entityId}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n      }\n      const fileRef = ref(storage, `${folderPath}/${newFileData.file.name}`);\n      await uploadBytes(fileRef, newFileData.file);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  export const uploadImages2 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    uploadBytesResumable(storageRef, newImages).then((snapshot) => {\n      console.log('Uploaded a blob or file!');\n    });\n  };\n\n  export const uploadImages3 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n        });\n      }\n    );\n    \n  };\n\n\n  export const uploadImages4 = async (storageFolder, newImages, entityId, thirdFolder = null, onProgress, onComplete) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages,newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const totalBytes = snapshot.totalBytes;\n        const bytesTransferred = snapshot.bytesTransferred;\n        const progress = totalBytes > 0 ? ((bytesTransferred / totalBytes) * 100).toFixed(2) : -1;\n        onProgress(progress);\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n          onComplete(downloadURL);\n        });\n\n      }\n    );\n    \n  };\n\n\n export const uploadOneImageAndGetURL = async (storageFolder, file, entityId) => {\n    try {\n      const folderPath = `${storageFolder}/${entityId}/${file.name}`;\n      console.log(folderPath)\n      const fileRef = ref(storage, folderPath);\n      \n      await uploadBytes(fileRef, file);\n  \n      const imageUrl = await getDownloadURL(fileRef);\n      console.log(imageUrl)\n      return imageUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error; \n    }\n  };\n  \n  export const getAllFilesFromFolder = async (storageFolder) => {\n    const folderPath = `${storageFolder}`;\n    const folderRef = ref(storage, folderPath);\n    \n    try {\n        const fileList = await listAll(folderRef);\n\n        const imageUrlsComprehensive = await Promise.all(\n          fileList.items.map(async (fileRef) => {\n            const downloadURL = await getDownloadURL(fileRef);\n  \n            return {\n              id: fileRef.name,\n              filename: fileRef.name,\n              fileURL: downloadURL,\n            };\n          })\n        );\n\n        // return imageUrls;\n        return imageUrlsComprehensive\n    } catch (error) {\n        console.error('Error retrieving images:', error);\n        throw error;\n    }\n};\n\n"],"names":["_ref","shareUrl","isDarkModeOn","useSelector","selectDarkModeStatus","show","setShow","useState","_jsxs","_Fragment","children","_jsx","ShareIcon","variant","onClick","handleShow","sx","color","Modal","onHide","handleClose","backdrop","centered","style","zIndex","Header","closeButton","Title","textTransform","Body","className","FacebookShareButton","url","quote","FacebookIcon","size","round","TwitterShareButton","title","XIcon","WhatsappShareButton","WhatsappIcon","EmailShareButton","EmailIcon","LinkedinShareButton","LinkedinIcon","RedditShareButton","RedditIcon","TelegramShareButton","TelegramIcon","InputGroup","Form","Control","type","value","readOnly","copyToClipboard","navigator","clipboard","writeText","alert","STATUSES","SUBMITTED","UNDER_REVIEW","REVIEWED","VERIFIED","VERIFICATION_FAILED","DRAFT_COLLECTIONS","DRAFT_STUDIOS","DRAFT_WORKSHOPS","DRAFT_OPEN_CLASSES","DRAFT_COURSES","LEVELS","ALL","BEGINNERS","INTERMEDIATE","ADVANCED","ENTITY_FLAG","INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR","WORKSHOPS_BOOKING_LIMIT","OPEN_CLASSES_BOOKING_LIMIT","COURSES_BOOKING_LIMIT","SERVER_URLS","CLOUD","process","LOCAL","COLORS","GREEN","backgroundColor","BLUE","YELLOW","RED","PURPLE","ORANGE","TEAL","PINK","GRAY","LIGHTBLUE","DARKBLUE","CYAN","INDIGO","LIME","AMBER","BROWN","LIGHTGREEN","DEEPPURPLE","DEEPORANGE","BLACK","WHITE","SILVER","GOLD","NAVY","OLIVE","CHIP_LEVELS_DESIGN","danceStylesColorChips","COLLECTIONS","USER","USER_KYC","ADMIN","REVIEWS","TRANSACTIONS","STUDIO","INSTRUCTORS","FREE_TRIAL_BOOKINGS","WORKSHOPS","OPEN_CLASSES","COURSES","BOOKINGS","STORAGES","STUDIOIMAGES","STUDIOICON","STUDIOANNOUNCEMENTS","USERIMAGE","INSTRUCTORIMAGES","WORKSHOPICON","WORKSHOPIMAGES","OPENCLASSICON","COURSEICON","CREATORS_KYC_DOCUMENTS","BASEURL_PROD","STUDIO_ICON_DEFAULT","AMENITIES_ICONS","FaSnowflake","FaWifi","FaTint","FaToilet","FaPlug","FaFireExtinguisher","FaFirstAid","FaVideo","FaCreditCard","FaParking","setCreatorMode","async","BASEURL","concat","uid","response","fetch","data","json","success","mode","secureLocalStorage","setItem","console","log","message","error","fetchStudioEntities","studioId","entityType","setState","BASE_URL","setGetCreatorModeOnMount","getItem","getCreatorMode","readDocumentWithImageUrl","collectionName","productId","storagePath","folderRef","ref","storage","result","listAll","items","length","firstFileRef","getDownloadURL","readDocument","documentId","docRef","doc","db","docSnapshot","getDoc","exists","saveDocument","setDoc","merge","handleSavePostOTPSuccess","phoneNumber","updateDoc","isPhoneNumberVerified","updateDocumentFields","fields","id","queryDocumentsCount","field","operation","q","query","collection","where","getCountFromServer","count","deleteAllImagesInFolder","storageFolder","entityId","folderPath","fileList","Promise","all","map","deleteObject","fileRef","deleteAllImagesInFolder2","subfolder","deleteImages","imagesToDelete","setProgress","thirdFolder","arguments","undefined","total","done","file","filename","fileRefToDelete","uploadImages","newImages","newFileData","name","uploadBytes","uploadImages4","onProgress","onComplete","storageRef","uploadTask","uploadBytesResumable","on","snapshot","totalBytes","bytesTransferred","progress","toFixed","state","code","then","downloadURL","getAllFilesFromFolder","fileURL"],"sourceRoot":""}