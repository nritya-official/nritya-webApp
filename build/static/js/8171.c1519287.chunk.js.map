{"version":3,"file":"static/js/8171.c1519287.chunk.js","mappings":"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","sources":["Components/CreatorDataTable.js","Screens/CreatorDashboard.js","constants.js","utils/firebaseUtils.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BASEURL_PROD, BASEURL_DEV, COLLECTIONS } from '../constants';\nimport { useSelector } from \"react-redux\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\nimport Typography from '@mui/material/Typography';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport Paper from '@mui/material/Paper';\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nimport { LinearProgress } from '@mui/material';\n\n\n\nconst CreatorDataTable = () => {\n  const [studios, setStudios] = useState(null);\n  const [selectedStudio, setSelectedStudio] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [bookingsData, setBookingsData] = useState(null);\n  const [entityFilter, setEntityFilter] = useState(''); // Filter for entity type\n  const user_id = JSON.parse(localStorage.getItem('userInfo')).UserId;\n  const BASEURL = BASEURL_PROD;\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n  console.log(\"DataDashboard isDarkModeOn\",isDarkModeOn)\n  const themeStyles = {\n    backgroundColor: isDarkModeOn ? 'black' : '#f5f5f5',\n    color: isDarkModeOn ? '#d3d3d3' : '#000000'\n  };\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: isDarkModeOn ? \"dark\" : \"light\",\n    },\n  });\n\n  useEffect(() => {\n    const fetchStudios = async () => {\n      try {\n        const response = await fetch(`${BASEURL}reports/getAllOwnerStudio?user_id=${user_id}`);\n        const data = await response.json();\n        setStudios(data);\n      } catch (error) {\n        console.error('Error fetching studios:', error);\n      }\n    };\n    fetchStudios();\n  }, [user_id]);\n\n  const handleStudioChange = async (e) => {\n    const studioId = e.target.value;\n    console.log(\"DataDashboard studioId\",studioId)\n    setSelectedStudio(studioId);\n    setLoading(true);\n\n    if (studioId) {\n      try {\n        const response = await fetch(`${BASEURL}reports/studioEntityBookingsReport?studio_id=${studioId}`);\n        const data = await response.json();\n        setBookingsData(data);\n      } catch (error) {\n        console.error('Error fetching bookings:', error);\n      }\n    } else {\n      setBookingsData(null);\n    }\n    setLoading(false)\n  };\n\n  const handleEntityFilterChange = (e) => {\n    console.log(\"DataDashboard setEntityFilter\",e.target.value)\n    setEntityFilter(e.target.value);\n  };\n\n  const getEntityLink = (entity) => {\n    const baseLink = \"https://nritya-official.github.io/nritya-webApp/#/\";\n    const { EntityType, EntityId } = entity;\n\n    switch (EntityType) {\n      case 'Workshop':\n        return `${baseLink}workshop/${EntityId}`;\n      case 'Open Class':\n        return `${baseLink}openClass/${EntityId}`;\n      case 'Course':\n        return `${baseLink}course/${EntityId}`;\n      default:\n        return '#';\n    }\n  };\n\n  const renderTable = (loading) => {\n    if (!bookingsData) return null;\n\n    const { WORKSHOPS, OPEN_CLASSES, COURSES } = bookingsData;\n    const allEntities = [\n      ...WORKSHOPS.map(workshop => ({\n        EntityName: workshop.EntityName,\n        EntityType: 'Workshop',\n        Date: workshop.Date,\n        Capacity: workshop.Capacity,\n        Booked: workshop.BookingsCount,\n        SlotsLeft: workshop.Capacity - workshop.BookingsCount,\n        EntityId: workshop.EntityId\n      })),\n      ...OPEN_CLASSES.map(openClass => ({\n        EntityName: openClass.EntityName,\n        EntityType: 'Open Class',\n        Date: openClass.Date,\n        Capacity: openClass.Capacity,\n        Booked: openClass.BookingsCount,\n        SlotsLeft: openClass.Capacity - openClass.BookingsCount,\n        EntityId: openClass.EntityId\n      })),\n      ...COURSES.map(course => ({\n        EntityName: course.EntityName,\n        EntityType: 'Course',\n        Date: course.Date,\n        Capacity: 'N/A',\n        Booked: course.BookingsCount,\n        SlotsLeft: 'N/A',\n        EntityId: course.EntityId\n      })),\n    ];\n\n    const filteredEntities = entityFilter\n      ? allEntities.filter(entity => entity.EntityType === entityFilter)\n      : allEntities;\n      const columns = [\n        { \n          field: 'entityName', \n          headerName: 'Entity Name', \n          flex: 1, \n          renderCell: (params) => (\n            <a \n              href={getEntityLink(params.row)} \n              target=\"_blank\" \n              rel=\"noopener noreferrer\" \n              style={{ color: isDarkModeOn ? '#90caf9' : '#1976d2' }}>\n              {params.value}\n            </a>\n          )\n        },\n        { \n          field: 'entityType', \n          headerName: 'Entity Type', \n          flex: 1 \n        },\n        { \n          field: 'date', \n          headerName: 'Date', \n          flex: 1 \n        },\n        { \n          field: 'capacity', \n          headerName: 'Capacity', \n          flex: 1 \n        },\n        { \n          field: 'booked', \n          headerName: 'Booked', \n          flex: 1 \n        },\n        { \n          field: 'slotsLeft', \n          headerName: 'Slots Left', \n          flex: 1 \n        },\n      ];\n      \n      const rows = filteredEntities.map((entity, index) => ({\n        id: index, // or entity.id if you have a unique ID\n        entityName: entity?.EntityName,\n        entityType: entity?.EntityType,\n        date: entity?.Date,\n        capacity: entity?.Capacity,\n        booked: entity?.Booked,\n        slotsLeft: entity?.SlotsLeft,\n      }));\n     \n    console.log(allEntities)\n    return ( studios &&\n     \n      (\n        <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n        <Paper style={themeStyles}>\n          <div style={{ height: 400, width: '100%' }}>\n            <DataGrid\n              rows={rows}\n              columns={columns}\n              pageSize={5}\n              rowsPerPageOptions={[5]}\n              loading = {loading}\n              initialState={{\n                sorting: {\n                  sortModel: [{ field: 'Date', sort: 'desc' }],\n                },\n              }}\n              disableSelectionOnClick\n              slotProps={{ toolbar: { csvOptions: { allColumns: true } } }} \n              \n            />\n          </div>\n        </Paper>\n        </ThemeProvider>\n      )\n    );\n  };\n\n\n  return ( studios &&\n    <div >\n      <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <Typography variant=\"h4\" component=\"h3\" gutterBottom sx={{textTransform: \"none\", color:isDarkModeOn?'white':'black'}}>Data Dashboard</Typography>\n\n      <div className=\"flex-container\" style={{ display: 'flex', flexWrap: 'wrap', gap: '20px' }}>\n      \n     \n      \n  <FormControl fullWidth sx={{marginBottom: '20px', flex: '1 1 clamp(300px, 30%, 20rem)' }}>\n    <InputLabel id=\"studio-select-label\" sx={{color: isDarkModeOn ? '#ffffff' : '#000000'}} >Select Studio</InputLabel>\n    <Select\n      labelId=\"studio-select-label\"\n      id=\"studio-select\"\n      value={selectedStudio}\n      label=\"Select Studio\"\n      onChange={handleStudioChange}\n    \n    >\n      <MenuItem value=\"\" sx={{color: isDarkModeOn ? '#ffffff' : '#000000'}}>\n        <em sx={{color: isDarkModeOn ? '#ffffff' : '#000000'}} >--Select a Studio--</em>\n      </MenuItem>\n      {studios && Object.entries(studios).map(([id, name]) => (\n        <MenuItem key={id} value={id}>{name}</MenuItem>\n      ))}\n    </Select>\n  </FormControl>\n\n  <FormControl fullWidth style={{ \n    marginBottom: '20px', flex: '1 1 clamp(300px, 30%, 20rem)' }}>\n    <InputLabel id=\"entity-filter-label\"sx={{color: isDarkModeOn ? '#ffffff' : '#000000'}} >Filter by Entity Type</InputLabel>\n    <Select\n      labelId=\"entity-filter-label\"\n      id=\"entity-filter\"\n      value={entityFilter}\n      label=\"Filter by Entity Type\"\n      onChange={handleEntityFilterChange}\n     \n    >\n      <MenuItem value=\"\" sx={{color: isDarkModeOn ? '#ffffff' : '#000000'}}><em sx={{color: isDarkModeOn ? '#ffffff' : '#000000'}}>All Entities</em></MenuItem>\n      <MenuItem value=\"Workshop\">Workshop</MenuItem>\n      <MenuItem value=\"Open Class\">Open Class</MenuItem>\n      <MenuItem value=\"Course\">Course</MenuItem>\n    </Select>\n  </FormControl>\n \n</div>\n</ThemeProvider>\n\n      {renderTable(loading)}\n      {loading && <LinearProgress/>}\n    </div>\n    \n  );\n};\n\nexport default CreatorDataTable;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { useAuth } from '../context/AuthContext';\nimport { queryDocumentsCount } from '../utils/firebaseUtils';\nimport { COLLECTIONS } from '../constants';\nimport { Card, CardContent, Typography, Grid, Icon } from '@mui/material';\nimport CreatorDataTable from '../Components/CreatorDataTable.js';\n\nfunction CreatorDashboard() {\n  const [counts, setCounts] = useState({\n    instructorsCount: 0,\n    studiosCount: 0,\n    workshopsCount: 0,\n    openClassesCount: 0,\n    coursesCount: 0,\n  });\n  \n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n  const { currentUser } = useAuth();\n\n  useEffect(() => {\n    const fetchCounts = async () => {\n      const instructorsCount = await queryDocumentsCount(COLLECTIONS.INSTRUCTORS, 'createdBy', '==', currentUser.uid);\n      const studiosCount = await queryDocumentsCount(COLLECTIONS.STUDIO, \"UserId\", '==', currentUser.uid);\n      const workshopsCount = await queryDocumentsCount(COLLECTIONS.WORKSHOPS, \"UserId\", '==', currentUser.uid);\n      const openClassesCount = await queryDocumentsCount(COLLECTIONS.OPEN_CLASSES, \"UserId\", '==', currentUser.uid);\n      const coursesCount = await queryDocumentsCount(COLLECTIONS.COURSES, \"UserId\", '==', currentUser.uid);\n\n      setCounts({ \n        instructorsCount, \n        studiosCount, \n        workshopsCount, \n        openClassesCount, \n        coursesCount \n      });\n    };\n\n    fetchCounts();\n  }, [currentUser]);\n\n  const cardItems = [\n    { title: \"Total Studios\", data: counts.studiosCount, link: \"#/modifyStudios\" },\n    { title: \"Total Instructors\", data: counts.instructorsCount, link: \"#/modifyInstructors\" },\n    { title: \"Total Workshops\", data: counts.workshopsCount, link: \"#/modifyWorkshops\" },\n    { title: \"Total Open Classes\", data: counts.openClassesCount, link: \"#/modifyOpenClasses\" },\n    { title: \"Total Courses\", data: counts.coursesCount, link: \"#/modifyCourses\" }\n  ];\n\n\n  return (\n    <div style={{ minHeight: \"75vh\" }}>\n      <Typography variant=\"h4\" sx={{ color: isDarkModeOn ? \"white\" : \"black\", textTransform: 'capitalize' }}>\n        Dashboard\n      </Typography>\n\n      <Grid container spacing={2}>\n        {cardItems.map((item, index) => (\n          <Grid item xs={12} sm={6} md={4} key={index}>\n            <Card sx={{backgroundColor:isDarkModeOn?\"black\":\"white\"}}>\n              <CardContent >\n                <Typography variant=\"h6\" component=\"div\" sx={{color:isDarkModeOn?\"white\":\"black\"}}>\n                  <>\n                    {item.title}\n                    <a href={item.link} >\n                      <Icon baseClassName=\"fas\" className=\"fa-plus-circle\" color=\"primary\" />\n                    </a>\n                  </>\n                </Typography>\n                <Typography variant=\"h4\" sx={{color:isDarkModeOn?\"white\":\"black\"}} >{item.data}</Typography>\n                \n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n      <br/>\n      <CreatorDataTable/>\n    </div>\n  );\n}\n\nexport default CreatorDashboard;\n","import { FaSnowflake, FaWifi, FaTint, FaToilet, FaPlug, FaFireExtinguisher, FaFirstAid, FaVideo, FaCreditCard, FaParking  } from 'react-icons/fa';\n\nexport const STATUSES = {\n    SUBMITTED: \"Submitted\",\n    UNDER_REVIEW: \"Under Review\",\n    REVIEWED: \"Reviewed\",\n    VERIFIED: \"Verified\",\n    VERIFICATION_FAILED: \"Verification Failed\",\n};\n\nexport const DRAFT_COLLECTIONS = {\n    DRAFT_STUDIOS: 'DraftStudios',\n    DRAFT_WORKSHOPS: 'DraftWorkshops',\n    DRAFT_OPEN_CLASSES: 'DraftOpenClasses',\n    DRAFT_COURSES: 'DraftCourses'\n};\n\nexport const LEVELS = {\n    ALL : \"All\",\n    BEGINNERS : \"Beginner\", \n    INTERMEDIATE :\"Intermediate\", \n    ADVANCED :\"Advanced\"\n}\nexport const ENTITY_FLAG = {\n    INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR : 30,\n    WORKSHOPS_BOOKING_LIMIT : 10,\n    OPEN_CLASSES_BOOKING_LIMIT : 2,\n    COURSES_BOOKING_LIMIT : 10,\n}\n\n\nexport const SERVER_URLS = {\n    PROD : 'https://nrityaserver-2b241e0a97e5.herokuapp.com/',\n    LOCAL : 'http://127.0.0.1:8000/'\n}\n\nexport const COLORS = {\n    GREEN: { backgroundColor: \"#28a745\", color: \"#fff\" },     // Green background, white text\n    BLUE: { backgroundColor: \"#007bff\", color: \"#fff\" },      // Blue background, white text\n    YELLOW: { backgroundColor: \"#ffc107\", color: \"#000\" },    // Yellow background, black text\n    RED: { backgroundColor: \"#dc3545\", color: \"#fff\" },       // Red background, white text\n    PURPLE: { backgroundColor: \"#6f42c1\", color: \"#fff\" },    // Purple background, white text\n    ORANGE: { backgroundColor: \"#fd7e14\", color: \"#fff\" },    // Orange background, white text\n    TEAL: { backgroundColor: \"#20c997\", color: \"#fff\" },      // Teal background, white text\n    PINK: { backgroundColor: \"#e83e8c\", color: \"#fff\" },      // Pink background, white text\n    GRAY: { backgroundColor: \"#6c757d\", color: \"#fff\" },       // Gray background, white text\n\n    LIGHTBLUE: { backgroundColor: \"#17a2b8\", color: \"#fff\" }, // Light blue background, white text\n    DARKBLUE: { backgroundColor: \"#343a40\", color: \"#fff\" },  // Dark blue background, white text\n    CYAN: { backgroundColor: \"#00bcd4\", color: \"#fff\" },      // Cyan background, white text\n    INDIGO: { backgroundColor: \"#6610f2\", color: \"#fff\" },    // Indigo background, white text\n    LIME: { backgroundColor: \"#cddc39\", color: \"#000\" },      // Lime background, black text\n    AMBER: { backgroundColor: \"#ffca28\", color: \"#000\" },     // Amber background, black text\n    BROWN: { backgroundColor: \"#795548\", color: \"#fff\" },     // Brown background, white text\n    LIGHTGREEN: { backgroundColor: \"#8bc34a\", color: \"#000\" },// Light green background, black text\n    DEEPPURPLE: { backgroundColor: \"#673ab7\", color: \"#fff\" },// Deep purple background, white text\n    DEEPORANGE: { backgroundColor: \"#ff5722\", color: \"#fff\" },// Deep orange background, white text\n    BLACK: { backgroundColor: \"#000000\", color: \"#fff\" },     // Black background, white text\n    WHITE: { backgroundColor: \"#ffffff\", color: \"#000\" },     // White background, black text\n    SILVER: { backgroundColor: \"#c0c0c0\", color: \"#000\" },    // Silver background, black text\n    GOLD: { backgroundColor: \"#ffd700\", color: \"#000\" },      // Gold background, black text\n    NAVY: { backgroundColor: \"#001f3f\", color: \"#fff\" },      // Navy background, white text\n    OLIVE: { backgroundColor: \"#3d9970\", color: \"#fff\" },     // Olive background, white text\n\n  };\n\nexport const CHIP_LEVELS_DESIGN = {\n    [LEVELS.ALL]: COLORS.GREEN,           // Green background, white text\n    [LEVELS.BEGINNERS]: COLORS.BLUE,     // Blue background, white text\n    [LEVELS.INTERMEDIATE]: COLORS.YELLOW,  // Yellow background, black text\n    [LEVELS.ADVANCED]: COLORS.RED      // Red background, white text\n  };\n  \n\n  \nexport const danceStylesColorChips = [COLORS.PURPLE,COLORS.ORANGE,COLORS.TEAL,COLORS.LIME]\n\nexport const COLLECTIONS = {\n    USER: \"User\",\n    USER_KYC:\"UserKyc\",\n    ADMIN:\"Admin\",\n    REVIEWS: \"Reviews\",\n    TRANSACTIONS: \"Transactions\",\n    STUDIO: \"Studio\",\n    INSTRUCTORS: \"Instructors\",\n    FREE_TRIAL_BOOKINGS:\"FreeTrialBookings\",\n    WORKSHOPS: 'Workshops',\n    OPEN_CLASSES: 'OpenClasses',\n    COURSES: 'Courses',\n    BOOKINGS: 'Bookings',\n}\n\nexport const STORAGES ={\n    STUDIOIMAGES:'StudioImages',\n    STUDIOICON:'StudioIcon',\n    STUDIOANNOUNCEMENTS :'StudioAnnouncements',\n    USERIMAGE:'UserImage',\n    INSTRUCTORIMAGES: 'InstructorImages',\n    WORKSHOPICON :\"WorkshopIcon\",\n    WORKSHOPIMAGES :\"WorkshopImages\",\n    OPENCLASSICON :\"OpenClassIcon\",\n    COURSEICON :\"CourseIcon\",\n    CREATORS_KYC_DOCUMENTS :\"CreatorKycDocuments\"\n}\n\nexport const SEARCH_FILTERS ={\n    DANCEFORMS:'danceforms',\n    DISTANCES:'distances',\n}\n\nexport const BASEURL_DEV = \"http://127.0.0.1:8000/\"\nexport const BASEURL_PROD= \"https://nrityaserver-2b241e0a97e5.herokuapp.com/\"\n\nexport const AMENITIES_ICONS = {\n    \"AC\": <FaSnowflake />,\n    \"Free Wifi\": <FaWifi />,\n    \"RO Water\": <FaTint />,\n    \"Toilet\": <FaToilet />,\n    \"Power Backup\": <FaPlug />,\n    \"Fire Extinguisher\": <FaFireExtinguisher />,\n    \"First Aid Kit\": <FaFirstAid />,\n    \"CCTV Camera\": <FaVideo />,\n    \"Card Payment\": <FaCreditCard />,\n    \"Parking Space\": <FaParking />,\n};\n\n","import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, query, getDocs, where, getCountFromServer } from 'firebase/firestore';\nimport { db } from '../config';\nimport {ref,listAll,getDownloadURL,uploadBytes, deleteObject, uploadBytesResumable  } from \"firebase/storage\";\nimport { storage } from '../config';\nimport { COLLECTIONS } from '../constants';\nimport secureLocalStorage from 'react-secure-storage';\n\nexport const setCreatorMode = async (uid) => {\n  console.log(\"creatorMode uid\",uid)\n  try{\n  const userRef = doc(db, COLLECTIONS.USER, uid);\n  const userSnap = await getDoc(userRef);\n  if (userSnap.exists()) {\n    if(userSnap.data() != null){\n      const mode = userSnap.data().CreatorMode\n      console.log(\"setCreatorMode: Is User a creator?\",mode)\n      secureLocalStorage.setItem('CreatorMode', mode);\n        \n    }else{\n      console.log(\"userSnap.data() null\")\n      \n    }\n  } else {\n    console.log(\"User not found\");\n  }\n  }catch(error){\n    console.log(\" error\",error);\n  }\n}\n\nexport const getCreatorMode = async () => {\n  try{\n    const mode = secureLocalStorage.getItem('CreatorMode');\n    console.log(\"getCreatorMode \",mode)\n    if (mode){\n      return mode\n    }else{\n      return false\n    }\n  } \n  catch(error){\n    console.log(\" error\");\n    return false\n  }\n}\n\n// Read operation with image URL\nexport const readDocumentWithImageUrl = async (collectionName, productId) => {\n    console.log(\"Debug \",`${collectionName}/${productId}`)\n    const storagePath = `${collectionName}/${productId}`;\n    const folderRef = ref(storage,storagePath);\n    try {\n        const result = await listAll(folderRef);\n        if (result.items.length > 0) {\n            const firstFileRef = result.items[0];\n            const url = await getDownloadURL(firstFileRef);\n            console.log('Debug URL:', url);\n            return url;\n          } else {\n            console.log('Debug No files found in the folder.');\n            return null;\n          }\n    } catch (error) {\n      console.error('Error getting image URL:', error);\n      return null;\n    }\n  };\n\n// Read operation\nexport const readDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    const docSnapshot = await getDoc(docRef);\n    return docSnapshot.exists() ? docSnapshot.data() : null;\n};\n\n// Create or Update operation\nexport const saveDocument = async (collectionName, documentId, data) => {\n    const docRef = doc(db, collectionName, documentId);\n    await setDoc(docRef, data, { merge: true });\n    return data;\n};\n\n\nexport const handleSavePostOTPSuccess = async (collectionName, documentId, phoneNumber) => {\n  const docRef = doc(db, collectionName, documentId);\n  await updateDoc(docRef, {isPhoneNumberVerified:true,phoneNumber});\n  return true;\n};\n\n// Update specific fields in a document\nexport const updateDocumentFields = async (collectionName, documentId, fields) => {\n    const docRef = doc(db, collectionName, documentId);\n    await updateDoc(docRef, fields);\n    return { id: documentId, ...fields };\n};\n\n// Delete operation\nexport const deleteDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    await deleteDoc(docRef);\n    return { id: documentId };\n};\n\n// Query operation\nexport const queryDocuments = async (collectionName, conditions) => {\n    const q = query(collection(db, collectionName, conditions));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const queryDocumentsCount = async (collectionName,field,operation,value) => {\n    console.log(\"Hiii \",collectionName,field,operation,value)\n    const q = query(collection(db, collectionName), where(field,operation,value));\n    const snapshot = await getCountFromServer(q);\n    return snapshot.data().count;\n};\n\n\n  // Function to delete all images in a folder\nexport  const deleteAllImagesInFolder = async (storageFolder, entityId) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n    // Function to delete all images in a folder\n  export  const deleteAllImagesInFolder2 = async (storageFolder, entityId,subfolder) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}/${subfolder}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n  // Function to delete images\nexport const deleteImages = async (storageFolder,imagesToDelete,entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Deletes specific images associated with the given entityId.\n\n    Args:\n      imagesToDelete <array>: An array of image objects to be deleted.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n    const total = imagesToDelete.length;\n    let done = 0;\n    await Promise.all(imagesToDelete.map(async (file) => {\n      let folderPath = `${storageFolder}/${entityId}/${file.filename}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}/${file.filename}`;\n      }\n      const fileRefToDelete = ref(storage, folderPath);\n      await deleteObject(fileRefToDelete);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  // Function to upload new images\nexport const uploadImages = async (storageFolder, newImages, entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n\n    Args:\n      newImages <array>: An array of new image objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n   console.log(storageFolder,entityId)\n   const total = newImages.length;\n    let done = 0;\n    await Promise.all(newImages.map(async (newFileData) => {\n      let folderPath = `${storageFolder}/${entityId}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n      }\n      const fileRef = ref(storage, `${folderPath}/${newFileData.file.name}`);\n      await uploadBytes(fileRef, newFileData.file);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  export const uploadImages2 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    uploadBytesResumable(storageRef, newImages).then((snapshot) => {\n      console.log('Uploaded a blob or file!');\n    });\n  };\n\n  export const uploadImages3 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n        });\n      }\n    );\n    \n  };\n\n\n  export const uploadImages4 = async (storageFolder, newImages, entityId, thirdFolder = null, onProgress, onComplete) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages,newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const totalBytes = snapshot.totalBytes;\n        const bytesTransferred = snapshot.bytesTransferred;\n        const progress = totalBytes > 0 ? ((bytesTransferred / totalBytes) * 100).toFixed(2) : -1;\n        onProgress(progress);\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n          onComplete(downloadURL);\n        });\n\n      }\n    );\n    \n  };\n\n\n export const uploadOneImageAndGetURL = async (storageFolder, file, entityId) => {\n    try {\n      const folderPath = `${storageFolder}/${entityId}/${file.name}`;\n      console.log(folderPath)\n      const fileRef = ref(storage, folderPath);\n      \n      await uploadBytes(fileRef, file);\n  \n      const imageUrl = await getDownloadURL(fileRef);\n      console.log(imageUrl)\n      return imageUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error; \n    }\n  };\n  \n  export const getAllFilesFromFolder = async (storageFolder) => {\n    const folderPath = `${storageFolder}`;\n    const folderRef = ref(storage, folderPath);\n    \n    try {\n        const fileList = await listAll(folderRef);\n\n        const imageUrlsComprehensive = await Promise.all(\n          fileList.items.map(async (fileRef) => {\n            const downloadURL = await getDownloadURL(fileRef);\n  \n            return {\n              id: fileRef.name,\n              filename: fileRef.name,\n              fileURL: downloadURL,\n            };\n          })\n        );\n\n        // return imageUrls;\n        return imageUrlsComprehensive\n    } catch (error) {\n        console.error('Error retrieving images:', error);\n        throw error;\n    }\n};\n\n"],"names":["CreatorDataTable","studios","setStudios","useState","selectedStudio","setSelectedStudio","loading","setLoading","bookingsData","setBookingsData","entityFilter","setEntityFilter","user_id","JSON","parse","localStorage","getItem","UserId","BASEURL","BASEURL_PROD","isDarkModeOn","useSelector","selectDarkModeStatus","console","log","themeStyles","backgroundColor","color","darkTheme","createTheme","palette","mode","useEffect","async","response","fetch","concat","data","json","error","fetchStudios","getEntityLink","entity","baseLink","EntityType","EntityId","_jsxs","children","ThemeProvider","theme","_jsx","CssBaseline","Typography","variant","component","gutterBottom","sx","textTransform","className","style","display","flexWrap","gap","FormControl","fullWidth","marginBottom","flex","InputLabel","id","Select","labelId","value","label","onChange","studioId","e","target","MenuItem","Object","entries","map","_ref","name","WORKSHOPS","OPEN_CLASSES","COURSES","allEntities","workshop","EntityName","Date","Capacity","Booked","BookingsCount","SlotsLeft","openClass","course","columns","field","headerName","renderCell","params","href","row","rel","rows","filter","index","entityName","entityType","date","capacity","booked","slotsLeft","Paper","height","width","DataGrid","pageSize","rowsPerPageOptions","initialState","sorting","sortModel","sort","disableSelectionOnClick","slotProps","toolbar","csvOptions","allColumns","renderTable","LinearProgress","counts","setCounts","instructorsCount","studiosCount","workshopsCount","openClassesCount","coursesCount","currentUser","useAuth","queryDocumentsCount","COLLECTIONS","INSTRUCTORS","uid","STUDIO","fetchCounts","cardItems","title","link","minHeight","Grid","container","spacing","item","xs","sm","md","Card","CardContent","_Fragment","Icon","baseClassName","STATUSES","SUBMITTED","UNDER_REVIEW","REVIEWED","VERIFIED","VERIFICATION_FAILED","DRAFT_COLLECTIONS","DRAFT_STUDIOS","DRAFT_WORKSHOPS","DRAFT_OPEN_CLASSES","DRAFT_COURSES","LEVELS","ALL","BEGINNERS","INTERMEDIATE","ADVANCED","ENTITY_FLAG","INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR","WORKSHOPS_BOOKING_LIMIT","OPEN_CLASSES_BOOKING_LIMIT","COURSES_BOOKING_LIMIT","SERVER_URLS","PROD","LOCAL","COLORS","GREEN","BLUE","YELLOW","RED","PURPLE","ORANGE","TEAL","PINK","GRAY","LIGHTBLUE","DARKBLUE","CYAN","INDIGO","LIME","AMBER","BROWN","LIGHTGREEN","DEEPPURPLE","DEEPORANGE","BLACK","WHITE","SILVER","GOLD","NAVY","OLIVE","CHIP_LEVELS_DESIGN","danceStylesColorChips","USER","USER_KYC","ADMIN","REVIEWS","TRANSACTIONS","FREE_TRIAL_BOOKINGS","BOOKINGS","STORAGES","STUDIOIMAGES","STUDIOICON","STUDIOANNOUNCEMENTS","USERIMAGE","INSTRUCTORIMAGES","WORKSHOPICON","WORKSHOPIMAGES","OPENCLASSICON","COURSEICON","CREATORS_KYC_DOCUMENTS","AMENITIES_ICONS","FaSnowflake","FaWifi","FaTint","FaToilet","FaPlug","FaFireExtinguisher","FaFirstAid","FaVideo","FaCreditCard","FaParking","setCreatorMode","userRef","doc","db","userSnap","getDoc","exists","CreatorMode","secureLocalStorage","setItem","readDocumentWithImageUrl","collectionName","productId","storagePath","folderRef","ref","storage","result","listAll","items","length","firstFileRef","url","getDownloadURL","readDocument","documentId","docRef","docSnapshot","saveDocument","setDoc","merge","handleSavePostOTPSuccess","phoneNumber","updateDoc","isPhoneNumberVerified","updateDocumentFields","fields","operation","q","query","collection","where","getCountFromServer","count","deleteAllImagesInFolder","storageFolder","entityId","folderPath","fileList","Promise","all","deleteObject","fileRef","deleteAllImagesInFolder2","subfolder","deleteImages","imagesToDelete","setProgress","thirdFolder","arguments","undefined","total","done","file","filename","fileRefToDelete","uploadImages","newImages","newFileData","uploadBytes","uploadImages4","onProgress","onComplete","storageRef","uploadTask","uploadBytesResumable","on","snapshot","totalBytes","bytesTransferred","progress","toFixed","state","code","then","downloadURL","getAllFilesFromFolder","fileURL"],"sourceRoot":""}