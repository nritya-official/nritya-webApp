{"version":3,"file":"static/js/2993.f74e6b44.chunk.js","mappings":"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","sources":["Components/LoginModalForm.js","Components/useLocalStorageListener.js","Components/LoginModalDailog.js","Screens/LoginPage.js","constants.js","utils/firebaseUtils.js"],"sourcesContent":["import React,{useState} from \"react\";\nimport { styled } from '@mui/system';\nimport loginBoxLogo from '../../src/Components/DanceImg/Nritya_Login_logo.png';\nimport loginText from '../../src/Components/DanceImg/Lets_dance.png';\nimport LoginPage from \"../Screens/LoginPage\";\n\n// Styled components using `styled`\nconst LoginBoxMain = styled('div')(({ theme }) => ({\n    width: 'auto',\n    backgroundColor: '#000',\n    padding: '15px',\n}));\n\nconst LoginLogo = styled('div')(({ theme }) => ({\n    height: '130px',\n    width: '130px',\n    margin: '0 auto',\n}));\n\nconst LoginText = styled('div')(({ theme }) => ({\n    width: '67%',\n    minHeight: '75px',\n    margin: '0 auto',\n}));\n\nconst LoginModalForm = ({isLoggedIn, setIsLoggedIn}) => {\n    \n      const [username, setUsername] = useState(() => localStorage.getItem('username') || '');\n      const [userID, setUserID] = useState(() => {\n        const userInfo = localStorage.getItem('userInfo');\n        return userInfo ? JSON.parse(userInfo).localId : '';\n      });\n    \n      const handleLogin = (UserInfo, userInfoFull) => {\n        setUsername(UserInfo.displayName);\n        setIsLoggedIn(true);\n        setUserID(UserInfo.localId);\n        localStorage.setItem('username', UserInfo.displayName);\n        localStorage.setItem('isLoggedIn', 'true');\n        localStorage.setItem('userInfo', JSON.stringify(UserInfo));\n        localStorage.setItem('userInfoFull', JSON.stringify(userInfoFull));\n        console.log(\"User Info Full local\", JSON.parse(localStorage.getItem('userInfoFull')));\n      };\n    \n    return (\n        <LoginBoxMain>\n            <LoginLogo>\n                <img src={loginBoxLogo} alt=\"login-box-logo\" />\n            </LoginLogo>\n            <LoginText>\n                <img src={loginText} alt=\"login-text-img\" />\n            </LoginText>\n            <LoginPage onLogin={handleLogin} setIsLoggedIn={setIsLoggedIn} />\n        </LoginBoxMain>\n    );\n}\n\nexport default LoginModalForm;\n","import { useEffect } from 'react';\n\nconst useLocalStorageListener = (key, callback) => {\n  useEffect(() => {\n    const handleStorageChange = (event) => {\n      if (event.key === key && event.newValue === 'true') {\n        callback();\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, [key, callback]);\n};\nexport default useLocalStorageListener;\n","import React,{useState,useEffect} from \"react\";\nimport Dialog from '@mui/material/Dialog';\nimport { styled } from '@mui/material/styles';\nimport LoginModalForm from \"./LoginModalForm\";\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport useLocalStorageListener from './useLocalStorageListener'; \n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuiDialogContent-root': {\n    padding: theme.spacing(2),\n  },\n  '& .MuiDialogActions-root': {\n    padding: theme.spacing(1),\n  }\n}));\n\nconst LoginModalDailog = ({open, handleClose }) => {\n  console.log(\"Open\",open)\n  const [isLoggedIn, setIsLoggedIn] = useState(() => {\n    const storedIsLoggedIn = localStorage.getItem('isLoggedIn');\n    return storedIsLoggedIn === 'true';\n  });\n\n  useEffect(() => {\n    if (isLoggedIn && localStorage.getItem('isLoggedIn') === 'true') {\n      console.log(\"It's logged in\",isLoggedIn)\n      handleClose();\n    }\n  }, [isLoggedIn, handleClose]);\n\n  \n\n    return (\n\n        <React.Fragment>\n          <BootstrapDialog\n            onClose={handleClose}\n            aria-labelledby=\"customized-dialog-title\"\n            open={open}\n            maxWidth='xs'\n            sx={{\n              '& .MuiModal-backdrop': {\n                backdropFilter: 'blur(8px)'\n              },\n            }}\n          \n          >\n          <IconButton\n            aria-label=\"close\"\n            onClick={handleClose}\n            sx={{\n              position: 'absolute',\n              right: 8,\n              top: 8,\n              color: (theme) => theme.palette.grey[500],\n            }}\n          >\n                <CloseIcon />\n          </IconButton>\n            <LoginModalForm isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn}/>\n          </BootstrapDialog>\n        </React.Fragment>\n       \n    )\n}\n\nexport default LoginModalDailog;","import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {auth , provider}  from './../config.js';\nimport { signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { db } from '../config';\nimport { doc, getDoc,setDoc } from \"firebase/firestore\";\nimport { COLLECTIONS } from \"./../constants.js\";\nimport {  Row, Col } from 'react-bootstrap';\nimport { useSelector } from 'react-redux'; \nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { Button, Container } from '@mui/material';\nimport { setCreatorMode } from '../utils/firebaseUtils.js';\n\n\n\nfunction LoginPage({onLogin,setIsLoggedIn}) {\n  \n  const [loginFailed, setLoginFailed] = useState(false);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n\n  const navigate = useNavigate();\n\n    const addUserIfMissing = async (user) => {\n      try {\n        const userRef = doc(db, COLLECTIONS.USER, user.uid);\n        const userSnap = await getDoc(userRef);\n        if (userSnap.exists()) {\n          console.log(\"User there\");\n        } else {\n          // docSnap.data() will be undefined in this case\n          console.log(\"No such document!\");\n          await setDoc(doc(db, COLLECTIONS.USER, user.uid), {\n            Name: user.displayName,\n            Email: user.email,\n            DoB: null, // You may want to add user's date of birth here\n            UserId: user.uid,\n            WorkshopCreated: [],\n            WorkshopEnrolled: [],\n            Cart: [],\n            CreatorMode: false,\n            KycIdList:{},\n            StudioCreated:[],\n            premiumTill: false,\n            TransactionIDs:[],\n            recentlyWatched:{0:\"\",1:\"\",2:\"\",3:\"\",4:\"\"},\n          });\n          console.log(\"User added successfully\");\n        }\n\n        const userRef2 = doc(db, COLLECTIONS.USER, user.uid);\n        const userSnap2 = await getDoc(userRef2);\n        localStorage.setItem('userDetails',JSON.stringify({\"UserId\":user.uid,\"email\":user.email,\"isPremium\":userSnap2.data().isPremium,\"displayName\":userSnap2.data().displayName,\"WorkshopCreated\":userSnap2.data().WorkshopCreated,\"WorkshopEnrolled\":userSnap2.data().WorkshopEnrolled}));\n       \n\n        \n      } catch (error) {\n        console.error(\"Error adding user: \", error);\n      }\n    };\n\n    const signin = async () => {\n      try {\n        const result = await signInWithPopup(auth, provider);\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n        const accessToken = credential.accessToken;\n        const idToken = credential.idToken;\n        console.log(\"Access token\",accessToken)\n        console.log(\"Id token\",idToken)\n        const user = result.user;\n        console.log(\"Post login :\",user);\n        console.log(\"UserId\",user.uid);\n        console.log(\"Result \", result)\n        if (result) {\n          let token = await auth.currentUser?.getIdToken();\n          console.log(\"token\", token);\n          localStorage.setItem(\"authToken\", token);\n        }\n        onLogin({\"UserId\":user.uid,\"email\":user.email,\"isPremium\":user.isPremium,\"displayName\":user.displayName,\"WorkshopCreated\":user.WorkshopCreated,\"WorkshopEnrolled\":user.WorkshopEnrolled,\"CreatorMode\":false,\"photoURL\":user.photoURL},user);\n        setIsLoggedIn(true);\n        await addUserIfMissing(user);\n        await setCreatorMode(user.uid);\n        navigate(`/`);\n      } catch (error) {\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        console.log('Invalid username or password');\n        setLoginFailed(true);\n      }\n    };\n    \n      \n    return (\n      <Container fluid className='custom-container-main'>\n          <Row>\n            <Col xs={12} md={12}>\n              <div>\n              <form\n                className='custom-login-form'\n                onSubmit={(e) => {\n                  e.preventDefault(); // Prevent form submission\n                  signin(); // Call your signin function on form submission\n                  //alert(\"Form Submitted\")\n                }}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  padding: '15px 0'\n                }}\n              >\n                <Button\n                  type=\"submit\" // Add a type to the button to trigger form submission\n                  style={{\n                    backgroundColor: \"#D9D9D9\",\n                    color: '#000',\n                    borderRadius: '6px',\n                    textTransform: 'none',\n                    border: '1px solid #777',\n                    padding: '8px 16px'\n                  }}\n                >\n                  <img\n                    src=\"https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg\"\n                    alt=\"Google Icon\"\n                    style={{ marginRight: '10px', height: '20px' }}\n                  />\n                  Sign In with Google\n                </Button>\n              </form>\n              </div>\n            </Col>\n          </Row>\n      </Container>\n    );\n}\n\nexport default LoginPage;\n","import { FaSnowflake, FaWifi, FaTint, FaToilet, FaPlug, FaFireExtinguisher, FaFirstAid, FaVideo, FaCreditCard, FaParking  } from 'react-icons/fa';\n\nexport const STATUSES = {\n    SUBMITTED: \"Submitted\",\n    UNDER_REVIEW: \"Under Review\",\n    REVIEWED: \"Reviewed\",\n    VERIFIED: \"Verified\",\n    VERIFICATION_FAILED: \"Verification Failed\",\n};\n\nexport const DRAFT_COLLECTIONS = {\n    DRAFT_STUDIOS: 'DraftStudios',\n    DRAFT_WORKSHOPS: 'DraftWorkshops',\n    DRAFT_OPEN_CLASSES: 'DraftOpenClasses',\n    DRAFT_COURSES: 'DraftCourses'\n};\n\nexport const LEVELS = {\n    ALL : \"All\",\n    BEGINNERS : \"Beginner\", \n    INTERMEDIATE :\"Intermediate\", \n    ADVANCED :\"Advanced\"\n}\n\nexport const SERVER_URLS = {\n    PROD : 'https://nrityaserver-2b241e0a97e5.herokuapp.com/',\n    LOCAL : 'http://127.0.0.1:8000/'\n}\n\nexport const COLORS = {\n    GREEN: { backgroundColor: \"#28a745\", color: \"#fff\" },     // Green background, white text\n    BLUE: { backgroundColor: \"#007bff\", color: \"#fff\" },      // Blue background, white text\n    YELLOW: { backgroundColor: \"#ffc107\", color: \"#000\" },    // Yellow background, black text\n    RED: { backgroundColor: \"#dc3545\", color: \"#fff\" },       // Red background, white text\n    PURPLE: { backgroundColor: \"#6f42c1\", color: \"#fff\" },    // Purple background, white text\n    ORANGE: { backgroundColor: \"#fd7e14\", color: \"#fff\" },    // Orange background, white text\n    TEAL: { backgroundColor: \"#20c997\", color: \"#fff\" },      // Teal background, white text\n    PINK: { backgroundColor: \"#e83e8c\", color: \"#fff\" },      // Pink background, white text\n    GRAY: { backgroundColor: \"#6c757d\", color: \"#fff\" },       // Gray background, white text\n\n    LIGHTBLUE: { backgroundColor: \"#17a2b8\", color: \"#fff\" }, // Light blue background, white text\n    DARKBLUE: { backgroundColor: \"#343a40\", color: \"#fff\" },  // Dark blue background, white text\n    CYAN: { backgroundColor: \"#00bcd4\", color: \"#fff\" },      // Cyan background, white text\n    INDIGO: { backgroundColor: \"#6610f2\", color: \"#fff\" },    // Indigo background, white text\n    LIME: { backgroundColor: \"#cddc39\", color: \"#000\" },      // Lime background, black text\n    AMBER: { backgroundColor: \"#ffca28\", color: \"#000\" },     // Amber background, black text\n    BROWN: { backgroundColor: \"#795548\", color: \"#fff\" },     // Brown background, white text\n    LIGHTGREEN: { backgroundColor: \"#8bc34a\", color: \"#000\" },// Light green background, black text\n    DEEPPURPLE: { backgroundColor: \"#673ab7\", color: \"#fff\" },// Deep purple background, white text\n    DEEPORANGE: { backgroundColor: \"#ff5722\", color: \"#fff\" },// Deep orange background, white text\n    BLACK: { backgroundColor: \"#000000\", color: \"#fff\" },     // Black background, white text\n    WHITE: { backgroundColor: \"#ffffff\", color: \"#000\" },     // White background, black text\n    SILVER: { backgroundColor: \"#c0c0c0\", color: \"#000\" },    // Silver background, black text\n    GOLD: { backgroundColor: \"#ffd700\", color: \"#000\" },      // Gold background, black text\n    NAVY: { backgroundColor: \"#001f3f\", color: \"#fff\" },      // Navy background, white text\n    OLIVE: { backgroundColor: \"#3d9970\", color: \"#fff\" },     // Olive background, white text\n\n  };\n\nexport const CHIP_LEVELS_DESIGN = {\n    [LEVELS.ALL]: COLORS.GREEN,           // Green background, white text\n    [LEVELS.BEGINNERS]: COLORS.BLUE,     // Blue background, white text\n    [LEVELS.INTERMEDIATE]: COLORS.YELLOW,  // Yellow background, black text\n    [LEVELS.ADVANCED]: COLORS.RED      // Red background, white text\n  };\n  \n\n  \nexport const danceStylesColorChips = [COLORS.PURPLE,COLORS.ORANGE,COLORS.TEAL,COLORS.LIME]\n\nexport const COLLECTIONS = {\n    USER: \"User\",\n    USER_KYC:\"UserKyc\",\n    ADMIN:\"Admin\",\n    REVIEWS: \"Reviews\",\n    TRANSACTIONS: \"Transactions\",\n    STUDIO: \"Studio\",\n    INSTRUCTORS: \"Instructors\",\n    FREE_TRIAL_BOOKINGS:\"FreeTrialBookings\",\n    WORKSHOPS: 'Workshops',\n    OPEN_CLASSES: 'OpenClasses',\n    COURSES: 'Courses',\n    BOOKINGS: 'Bookings',\n}\n\nexport const STORAGES ={\n    STUDIOIMAGES:'StudioImages',\n    STUDIOICON:'StudioIcon',\n    STUDIOANNOUNCEMENTS :'StudioAnnouncements',\n    USERIMAGE:'UserImage',\n    INSTRUCTORIMAGES: 'InstructorImages',\n    WORKSHOPICON :\"WorkshopIcon\",\n    WORKSHOPIMAGES :\"WorkshopImages\",\n    OPENCLASSICON :\"OpenClassIcon\",\n    COURSEICON :\"CourseIcon\",\n    CREATORS_KYC_DOCUMENTS :\"CreatorKycDocuments\"\n}\n\nexport const SEARCH_FILTERS ={\n    DANCEFORMS:'danceforms',\n    DISTANCES:'distances',\n}\n\nexport const BASEURL_DEV = \"http://127.0.0.1:8000/\"\nexport const BASEURL_PROD= \"https://nrityaserver-2b241e0a97e5.herokuapp.com/\"\n\nexport const AMENITIES_ICONS = {\n    \"AC\": <FaSnowflake />,\n    \"Free Wifi\": <FaWifi />,\n    \"RO Water\": <FaTint />,\n    \"Toilet\": <FaToilet />,\n    \"Power Backup\": <FaPlug />,\n    \"Fire Extinguisher\": <FaFireExtinguisher />,\n    \"First Aid Kit\": <FaFirstAid />,\n    \"CCTV Camera\": <FaVideo />,\n    \"Card Payment\": <FaCreditCard />,\n    \"Parking Space\": <FaParking />,\n};\n\n","import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, query, getDocs, where, getCountFromServer } from 'firebase/firestore';\nimport { db } from '../config';\nimport {ref,listAll,getDownloadURL,uploadBytes, deleteObject  } from \"firebase/storage\";\nimport { storage } from '../config';\nimport { COLLECTIONS } from '../constants';\nimport secureLocalStorage from 'react-secure-storage';\n\nexport const setCreatorMode = async (uid) => {\n  console.log(\"setCreatorMode \",uid)\n  try{\n  const userRef = doc(db, COLLECTIONS.USER, uid);\n  const userSnap = await getDoc(userRef);\n  if (userSnap.exists()) {\n    if(userSnap.data() != null){\n      const mode = userSnap.data().CreatorMode\n      console.log(\"setCreatorMode: Is User a creator?\",mode)\n      secureLocalStorage.setItem('CreatorMode', mode);\n        \n    }else{\n      console.log(\"userSnap.data() null\")\n      \n    }\n  } else {\n    console.log(\"User not found\");\n  }\n  }catch(error){\n    console.log(\" error\");\n  }\n}\n\nexport const getCreatorMode = async () => {\n  try{\n    const mode = secureLocalStorage.getItem('CreatorMode');\n    console.log(\"getCreatorMode \",mode)\n    if (mode){\n      return mode\n    }else{\n      return false\n    }\n  } \n  catch(error){\n    console.log(\" error\");\n    return false\n  }\n}\n\n// Read operation with image URL\nexport const readDocumentWithImageUrl = async (collectionName, productId) => {\n    console.log(\"Debug \",`${collectionName}/${productId}`)\n    const storagePath = `${collectionName}/${productId}`;\n    const folderRef = ref(storage,storagePath);\n    try {\n        const result = await listAll(folderRef);\n        if (result.items.length > 0) {\n            const firstFileRef = result.items[0];\n            const url = await getDownloadURL(firstFileRef);\n            console.log('Debug URL:', url);\n            return url;\n          } else {\n            console.log('Debug No files found in the folder.');\n            return null;\n          }\n    } catch (error) {\n      console.error('Error getting image URL:', error);\n      return null;\n    }\n  };\n\n// Read operation\nexport const readDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    const docSnapshot = await getDoc(docRef);\n    return docSnapshot.exists() ? docSnapshot.data() : null;\n};\n\n// Create or Update operation\nexport const saveDocument = async (collectionName, documentId, data) => {\n    const docRef = doc(db, collectionName, documentId);\n    await setDoc(docRef, data, { merge: true });\n    return data;\n};\n\n\nexport const handleSavePostOTPSuccess = async (collectionName, documentId, phoneNumber) => {\n  const docRef = doc(db, collectionName, documentId);\n  await updateDoc(docRef, {isPhoneNumberVerified:true,phoneNumber});\n  return true;\n};\n\n// Update specific fields in a document\nexport const updateDocumentFields = async (collectionName, documentId, fields) => {\n    const docRef = doc(db, collectionName, documentId);\n    await updateDoc(docRef, fields);\n    return { id: documentId, ...fields };\n};\n\n// Delete operation\nexport const deleteDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    await deleteDoc(docRef);\n    return { id: documentId };\n};\n\n// Query operation\nexport const queryDocuments = async (collectionName, conditions) => {\n    const q = query(collection(db, collectionName, conditions));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const queryDocumentsCount = async (collectionName,field,operation,value) => {\n    console.log(\"Hiii \",collectionName,field,operation,value)\n    const q = query(collection(db, collectionName), where(field,operation,value));\n    const snapshot = await getCountFromServer(q);\n    return snapshot.data().count;\n};\n\n\n  // Function to delete all images in a folder\nexport  const deleteAllImagesInFolder = async (storageFolder, entityId) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n  // Function to delete images\nexport const deleteImages = async (storageFolder,imagesToDelete,entityId) => {\n    /*\n    Description: Deletes specific images associated with the given entityId.\n\n    Args:\n      imagesToDelete <array>: An array of image objects to be deleted.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n    await Promise.all(imagesToDelete.map(async (file) => {\n      const fileRefToDelete = ref(storage, `${storageFolder}/${entityId}/${file.filename}`);\n      await deleteObject(fileRefToDelete);\n    }));\n  };\n\n  // Function to upload new images\nexport const uploadImages = async (storageFolder, newImages, entityId) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n\n    Args:\n      newImages <array>: An array of new image objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n   console.log(storageFolder,entityId)\n    await Promise.all(newImages.map(async (newFileData) => {\n      const folderPath = `${storageFolder}/${entityId}`;\n      const fileRef = ref(storage, `${folderPath}/${newFileData.file.name}`);\n      await uploadBytes(fileRef, newFileData.file);\n    }));\n  };\n\n export const uploadOneImageAndGetURL = async (storageFolder, file, entityId) => {\n    try {\n      const folderPath = `${storageFolder}/${entityId}/${file.name}`;\n      console.log(folderPath)\n      const fileRef = ref(storage, folderPath);\n      \n      await uploadBytes(fileRef, file);\n  \n      const imageUrl = await getDownloadURL(fileRef);\n      console.log(imageUrl)\n      return imageUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error; \n    }\n  };\n  \n  export const getAllImagesInFolder = async (storageFolder) => {\n    const folderPath = `${storageFolder}`;\n    const folderRef = ref(storage, folderPath);\n    \n    try {\n        const fileList = await listAll(folderRef);\n\n        const imageUrlsComprehensive = await Promise.all(\n          fileList.items.map(async (fileRef) => {\n            const downloadURL = await getDownloadURL(fileRef);\n  \n            return {\n              id: fileRef.name,\n              filename: fileRef.name,\n              fileURL: downloadURL,\n            };\n          })\n        );\n\n        // return imageUrls;\n        return imageUrlsComprehensive\n    } catch (error) {\n        console.error('Error retrieving images:', error);\n        throw error;\n    }\n};\n\n"],"names":["LoginBoxMain","styled","_ref","theme","width","backgroundColor","padding","LoginLogo","_ref2","height","margin","LoginText","_ref3","minHeight","_ref4","isLoggedIn","setIsLoggedIn","username","setUsername","useState","localStorage","getItem","userID","setUserID","userInfo","JSON","parse","localId","_jsxs","children","_jsx","src","alt","loginText","LoginPage","onLogin","handleLogin","UserInfo","userInfoFull","displayName","setItem","stringify","console","log","BootstrapDialog","Dialog","spacing","open","handleClose","useEffect","React","onClose","maxWidth","sx","backdropFilter","IconButton","onClick","position","right","top","color","palette","grey","CloseIcon","LoginModalForm","loginFailed","setLoginFailed","navigate","useSelector","selectDarkModeStatus","useNavigate","signin","async","result","signInWithPopup","auth","provider","credential","GoogleAuthProvider","credentialFromResult","accessToken","idToken","user","uid","_auth$currentUser","token","currentUser","getIdToken","email","isPremium","WorkshopCreated","WorkshopEnrolled","photoURL","userRef","doc","db","COLLECTIONS","USER","getDoc","exists","setDoc","Name","Email","DoB","UserId","Cart","CreatorMode","KycIdList","StudioCreated","premiumTill","TransactionIDs","recentlyWatched","userRef2","userSnap2","data","error","addUserIfMissing","setCreatorMode","code","message","Container","fluid","className","Row","Col","xs","md","onSubmit","e","preventDefault","style","display","alignItems","justifyContent","Button","type","borderRadius","textTransform","border","marginRight","STATUSES","SUBMITTED","UNDER_REVIEW","REVIEWED","VERIFIED","VERIFICATION_FAILED","DRAFT_COLLECTIONS","DRAFT_STUDIOS","DRAFT_WORKSHOPS","DRAFT_OPEN_CLASSES","DRAFT_COURSES","LEVELS","ALL","BEGINNERS","INTERMEDIATE","ADVANCED","SERVER_URLS","PROD","LOCAL","COLORS","GREEN","BLUE","YELLOW","RED","PURPLE","ORANGE","TEAL","PINK","GRAY","LIGHTBLUE","DARKBLUE","CYAN","INDIGO","LIME","AMBER","BROWN","LIGHTGREEN","DEEPPURPLE","DEEPORANGE","BLACK","WHITE","SILVER","GOLD","NAVY","OLIVE","CHIP_LEVELS_DESIGN","danceStylesColorChips","USER_KYC","ADMIN","REVIEWS","TRANSACTIONS","STUDIO","INSTRUCTORS","FREE_TRIAL_BOOKINGS","WORKSHOPS","OPEN_CLASSES","COURSES","BOOKINGS","STORAGES","STUDIOIMAGES","STUDIOICON","STUDIOANNOUNCEMENTS","USERIMAGE","INSTRUCTORIMAGES","WORKSHOPICON","WORKSHOPIMAGES","OPENCLASSICON","COURSEICON","CREATORS_KYC_DOCUMENTS","BASEURL_PROD","AMENITIES_ICONS","FaSnowflake","FaWifi","FaTint","FaToilet","FaPlug","FaFireExtinguisher","FaFirstAid","FaVideo","FaCreditCard","FaParking","userSnap","mode","secureLocalStorage","readDocumentWithImageUrl","collectionName","productId","storagePath","folderRef","ref","storage","listAll","items","length","firstFileRef","url","getDownloadURL","readDocument","documentId","docRef","docSnapshot","saveDocument","merge","handleSavePostOTPSuccess","phoneNumber","updateDoc","isPhoneNumberVerified","updateDocumentFields","fields","id","queryDocumentsCount","field","operation","value","q","query","collection","where","getCountFromServer","count","deleteAllImagesInFolder","storageFolder","entityId","folderPath","fileList","Promise","all","map","deleteObject","fileRef","deleteImages","imagesToDelete","fileRefToDelete","file","filename","uploadImages","newImages","newFileData","name","uploadBytes","getAllImagesInFolder","downloadURL","fileURL"],"sourceRoot":""}