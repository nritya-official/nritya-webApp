{"version":3,"file":"static/js/8692.dc83ce91.chunk.js","mappings":"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","sources":["Components/CardSliderCard.js","Components/ImageUpload.js","Components/NStudioCard.js","Components/TimeRangePicker.js","utils/mapping.js","Components/StudioTable.js","Components/MapsInput.js","Components/SucessPage.js","Components/CustomSwitch.js","Components/StudioWeeklyTiming.jsx","Components/StudioAdd.js","Components/AlertPopup.js","Components/StudioUpdate.js","Screens/CreatorStudio.js"],"sourcesContent":["import React from 'react';\nimport NStudioCard from './NStudioCard';\n\nconst CardSliderCard = ({ studio }) => {\n  return (\n    <a href={`#/studio/${studio.id}`}>\n    <NStudioCard data={studio} img_src={\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}/>\n    </a>\n\n  );\n};\n\nexport default CardSliderCard;\n","import React, { useState, useEffect, forwardRef, useImperativeHandle, useRef } from \"react\";\nimport shortid from \"shortid\";\nimport { ref as firebaseRef, getDownloadURL, listAll } from 'firebase/storage';\nimport { storage } from '../config';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { deleteAllImagesInFolder,deleteImages,uploadImages} from '../utils/firebaseUtils'\nimport { Card, CardContent, IconButton } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useSnackbar } from \"../context/SnackbarContext\";\nimport { STORAGES } from \"../constants\";\nimport { useLoader } from \"../context/LoaderContext\";\n\n\nconst ImageUpload = forwardRef(({entityId,storageFolder,title, maxImageCount=10, minImageCount, updateMode, disable }, ref) => {\n  const { setIsLoading } = useLoader();\n  const showSnackbar = useSnackbar();\n  const imageInputRef = useRef(null);\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [newFiles, setNewFiles] = useState([]); // Track new files to be added\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  //console.log(\"Received props=> entityId:\", entityId, \"|storageFolder:\", storageFolder);\n  const [progressDelete, setProgressDelete] = useState(-1);\n  const [progressUpdate, setProgressUpdate] = useState(-1);\n  const [isUploadSuccessful, setIsUploadSuccessful] = useState(false);\n\n  console.log(\"Kyc enitity id \",entityId, disable)\n  const filesizes = (bytes, decimals = 2) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n  };\n\n  useEffect(() => {\n   // console.log(\"Fetching image for\",entityId)\n    if(entityId){\n      fetchStudioImages(entityId); // Fetch images when component mounts\n    }\n  }, [entityId]);\n\n  useEffect(() => {\n   // console.log(\"Selected files:\", selectedFiles);\n    if (maxImageCount && selectedFiles.length > maxImageCount) {\n      const truncatedFiles = selectedFiles.slice(0, maxImageCount);\n      alert(`Exceeded maxImageCount, keeping first ${maxImageCount} files.`);\n      imageInputRef.current.value = null;\n      setSelectedFiles(truncatedFiles);\n    }\n  }, [selectedFiles, maxImageCount]);\n  \n\n  const handleInputChange = (e) => {\n    // console.log(\"handleInputChange\")\n    const files = Array.from(e.target.files);\n    const updatedFiles = [];\n    // console.log(\"file array \",files.length)\n    files.forEach((file) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        updatedFiles.push({\n          id: shortid.generate(),\n          filename: file.name,\n          filetype: file.type,\n          fileimage: reader.result,\n          datetime: file.lastModifiedDate.toLocaleString(\"en-IN\"),\n          filesize: filesizes(file.size),\n          file: file, // Store the actual file object\n        });\n\n        if (updatedFiles.length === files.length) {\n          setSelectedFiles((prevFiles) => [...prevFiles, ...updatedFiles]);\n          setNewFiles(updatedFiles);\n          imageInputRef.current.value = null;\n          // console.log(\"New files in total\",setNewFiles.length)\n        }\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleDeleteSelectedFile = (id) => {\n    if (window.confirm(\"Are you sure you want to delete this image?\")) {\n      setSelectedFiles((prevFiles) =>\n        prevFiles.filter((file) => file.id !== id)\n      );\n    }\n  };\n\n  const handleUploadSubmit = async () => {\n    if (!entityId) {\n      alert(\"No studio selected\");\n      return;\n    }\n\n    setProgressDelete(-1);\n    setProgressUpdate(-1);\n\n    try {\n      setIsLoading(true);\n      if (maxImageCount === 1 && selectedFiles.length >= minImageCount) {\n        // Delete all previous images in the folder\n        await deleteAllImagesInFolder(storageFolder, entityId);\n        await uploadImages(storageFolder,newFiles, entityId, setProgressUpdate);\n        showSnackbar(\"Image uploaded successfully\", \"success\");\n        setIsUploadSuccessful(true);\n      } else {\n        // Calculate images to delete and add\n        const { imagesToDelete, newImages } = calculateDelta(selectedFiles, uploadedFiles);\n\n        if (minImageCount && newImages.length < minImageCount) {\n          showSnackbar(`Minimum ${minImageCount} image(s) are required`, \"error\");\n          return;\n        }\n\n        // Delete images if there are any\n        if (imagesToDelete.length > 0) {\n          await deleteImages(storageFolder, imagesToDelete, entityId, setProgressDelete);\n          showSnackbar(\"Image(s) deleted successfully\", \"success\");\n        }\n\n        // Upload new images if there are any\n        if (newImages.length > 0) {\n          await uploadImages(storageFolder, newImages, entityId, setProgressUpdate);\n          showSnackbar(\"Image(s) uploaded successfully\", \"success\");\n        }\n        setIsUploadSuccessful(true);\n      }\n\n      imageInputRef.current.value = null;\n      // alert(\"Images Uploaded/Deleted\");\n    } catch (error) {\n      setIsUploadSuccessful(false);\n      console.error(\"Error uploading/deleting images:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to calculate images to delete and new images to upload\n  const calculateDelta = (selectedFiles, uploadedFiles) => {\n    const selectedFileIds = selectedFiles.map(file => file.id);\n    const uploadedFileIds = uploadedFiles.map(file => file.id);\n\n    const imagesToDelete = uploadedFiles.filter(file => !selectedFileIds.includes(file.id));\n    const newImages = selectedFiles.filter(file => !uploadedFileIds.includes(file.id));\n\n    return { imagesToDelete, newImages };\n  };\n\n\n  const fetchStudioImages = async (entityId) => {\n    setSelectedFiles([]);\n    setNewFiles([]);\n    try {\n      const folderPath = `${storageFolder}/${entityId}`;\n      console.log(folderPath)\n      const folderRef = firebaseRef(storage, folderPath);\n      const fileList = await listAll(folderRef);\n\n      const files = await Promise.all(\n        fileList.items.map(async (fileRef) => {\n          const downloadURL = await getDownloadURL(fileRef);\n\n          return {\n            id: fileRef.name,\n            filename: fileRef.name,\n            fileURL: downloadURL,\n          };\n        })\n      );\n      // console.log('File fetching',files);\n      setUploadedFiles(files); // Update the uploadedFiles state with fetched data\n      setSelectedFiles(files);\n    } catch (error) {\n      console.error('Error fetching user images:', error);\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    isValid: () => {\n      if (minImageCount === 0) return true;\n      return isUploadSuccessful\n    },\n  }));\n\n  return (\n    <div className=\"fileupload-view\" style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\n      <div className=\"row justify-content-center m-0\" style={{ flex: '1',justifyContent: 'center' }}>\n        <div className=\"col-md-6\" style={{ flex: '1' ,justifyContent: 'center'}}>\n          <div className=\"card mt-5\">\n            <div className=\"card-body\" style={{ backgroundColor: isDarkModeOn ? '#333333' : 'white' }}>\n              <div className=\"kb-data-box\">\n                <div className=\"kb-modal-data-title\">\n                  <div className=\"kb-data-title\" style={{justifyContent:'center',flex: '1'}}>\n                    <h4>{title}</h4>\n                    <p>Max no of image(s):{maxImageCount} {storageFolder === STORAGES.STUDIOIMAGES && <p>Add at least 5 images</p>}</p>\n                  </div>\n                </div>\n                <div style={{  backgroundColor: isDarkModeOn ? '#333333' : 'white'}}>\n                  <div className=\"kb-file-upload\">\n                    <div className=\"file-upload-box\">\n                      <input\n                        ref={imageInputRef}\n                        type=\"file\"\n                        id=\"fileupload\"\n                        className=\"file-upload-input\"\n                        onChange={handleInputChange}\n                        multiple\n                      />\n\n                    </div>\n                  </div>\n                  <br></br>\n                  <div className=\"kb-attach-box mb-3\">\n                  <div className=\"row\">\n                    {entityId && selectedFiles.length > 0 ? (\n                      selectedFiles.map((file) => (\n                        \n                        <div key={file.id} className=\"col-6 col-md-3 mb-3\" style={{ position: 'relative' }}>\n                          \n                          <Card sx={{ maxWidth: 345 }}>\n                            {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                              <div style={{ position: 'relative' }}>\n                                <img\n                                  src={file.fileimage ? file.fileimage : file.fileURL}\n                                  alt={file.filename}\n                                  className=\"card-img-top\"\n                                  style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                                />\n                                <IconButton\n                                  aria-label=\"delete\"\n                                  disabled={disable}\n                                  onClick={() => handleDeleteSelectedFile(file.id)}\n                                  style={{ position: 'absolute', top: 0, right: 0, backgroundColor: 'rgba(255, 255, 255, 0.5)' }}\n                                >\n                                  <DeleteIcon style={{color:\"ff0000\"}}/>\n                                </IconButton>\n                              </div>\n                            ) : (\n                              <CardContent>\n                                <i className=\"far fa-file-alt\"></i>\n                              </CardContent>\n                            )}\n                          </Card>\n                        </div>\n                        \n                      ))\n                    ) : (\n                      <div className=\"col-12 text-center\">\n                        <p>No images selected</p>\n                      </div>\n                    )}\n                  </div>\n\n                  </div>\n\n                  \n                  <div className=\"kb-buttons-box\">\n                    <button\n                      type=\"button\"\n                      className=\"btn div-submit\"\n                      style={{ backgroundColor: isDarkModeOn ? '#892CDC' : 'black', color:'white'  }}\n                      onClick={handleUploadSubmit}\n                      disabled={disable}\n                    >\n                      Image Upload\n                    </button>\n                  </div>\n                </div>\n                {selectedFiles.length > 0 && (\n                  <div className=\"kb-attach-box\" hidden>\n                    <div className=\"row\">\n                    <hr />\n                    {selectedFiles.map((file) => (\n                      <div key={file.id} className=\"col-6 col-md-3 mb-3\">\n                      <div className=\"card\">\n                        {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                          <img\n                            src={file.fileimage}\n                            alt={file.filename}\n                            className=\"card-img-top\"\n                            style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                          />\n                        ) : (\n                          <div className=\"card-body\">\n                            <i className=\"far fa-file-alt\"></i>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n              { progressDelete >= 0 && (\n                    <div>\n                        <p style={{ color: isDarkModeOn ? '#fff' : '#000' }}>\n                            Deleting images... {progressDelete.toFixed(2)}%\n                        </p>\n                        <progress \n                            value={progressDelete} \n                            max=\"100\" \n                            style={{\n                                color: isDarkModeOn ? '#fff' : '#000'\n                            }}\n                        >\n                            {progressDelete.toFixed(2)}%\n                        </progress>\n                    </div>\n                )}\n\n                { progressUpdate >= 0 && (\n                    <div>\n                        <p style={{ color: isDarkModeOn ? '#fff' : '#000' }}>\n                            Uploading images... {progressUpdate.toFixed(2)}%\n                        </p>\n                        <progress \n                            value={progressUpdate} \n                            max=\"100\" \n                            style={{\n                                color: isDarkModeOn ? '#fff' : '#000'\n                            }}\n                        >\n                            {progressUpdate.toFixed(2)}%\n                        </progress>\n                    </div>\n                )}\n\n                            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\n// Set default prop values\nImageUpload.defaultProps = {\n  maxImageCount: 5, // Default maximum image count\n  updateMode: false,\n  disable:false,\n};\n\nexport default ImageUpload;","\nimport React from 'react';\nimport AspectRatio from '@mui/joy/AspectRatio';\nimport Card from '@mui/joy/Card';\nimport CardContent from '@mui/joy/CardContent';\nimport Chip from '@mui/joy/Chip';\nimport Box from '@mui/joy/Box';\nimport Button from '@mui/material/Button';\nimport Link from '@mui/joy/Link';\nimport Typography from '@mui/joy/Typography';\nimport { Stack } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport { CHIP_LEVELS_DESIGN, COLORS, danceStylesColorChips, STUDIO_ICON_DEFAULT } from '../constants';\nimport IconButton from '@mui/joy/IconButton';\nimport Favorite from '@mui/icons-material/Favorite';\n\n\nexport default function NStudioCard({img_src,data}) {\n    const isDarkModeOn = useSelector(selectDarkModeStatus);\n    \n    const studioId = data.id?data.id:data.studioId;\n\n    const cardStyle = {\n      backgroundColor: isDarkModeOn ? '#444' : 'white',\n      padding: '0px',\n      color: isDarkModeOn ? 'white' : 'black',\n      marginRight: \"10px\",\n      width: 320,\n      maxWidth: \"100%\",\n      boxShadow: 'lg',\n      transition: 'opacity 0.3s ease',\n    };\n  \n    const cardHoverStyle = {\n      transform: 'scale(1.01)',\n    };\n  \n  return (\n    <Card variant=\"solid\" sx={{\n      ...cardStyle,\n      '&:hover': cardHoverStyle,\n    }}>\n      \n        <AspectRatio ratio=\"1.78\" style={{ position: 'relative'}}>\n          <img\n            src={data && data.iconUrl ? data.iconUrl :STUDIO_ICON_DEFAULT}\n            loading=\"lazy\"\n            alt=\"Studio Image\"\n            style={{ maxWidth: '100%', height: 'auto', overflow: 'hidden' }}\n            \n          />\n          <Stack direction=\"row\" spacing={2} style={{ position: 'absolute', bottom: 0, left: 0, padding: '1px' }}>\n        {data && data.danceStyles && typeof data.danceStyles === 'string' ? (data.danceStyles.split(\",\").slice(0, 3).map((form, index) => (\n        <Chip\n            key={index}\n            color={index % 2 === 0 ? \"danger\" : \"success\"}  \n            sx={{ marginBottom: \"10px\", fontSize: '0.8rem',  \n                    bgcolor: danceStylesColorChips[index].backgroundColor,\n                    color: danceStylesColorChips[index].color, \n            }}\n        >\n            {form.trim()}\n        </Chip>\n        ))):(\n            <Chip\n            key={10}\n            color={10 % 2 === 0 ? \"danger\" : \"success\"} \n            style={{ marginBottom: \"10px\", fontSize: '0.8rem' }}\n        >\n            {\"No danceforms\"}\n        </Chip>\n        )}\n\n        </Stack>\n\n        <Stack\n            direction=\"row\"\n            spacing={2}\n            style={{ position: \"absolute\", top: 0, left: 0, padding: \"1px\", paddingTop: \"1px\" }}\n          >\n            {data && data.freeTrialAvailable &&(\n            \n                <Chip\n                  key={1}\n                 \n                  sx={{\n                    marginLeft: \"10px\",\n                    marginBottom: \"10px\",\n                    fontSize: \"0.8rem\",\n                    bgcolor: COLORS.LIME.backgroundColor,  // Set the background color\n                    color: COLORS.LIME.color,  // Set the text color\n                  }}\n                >\n                  {'Free Trial Available'}\n                </Chip>\n              \n            )}\n          </Stack>\n\n        </AspectRatio>\n      <CardContent style={{ padding: '10px' }}>\n        <Box display=\"flex\" justifyContent=\"space-between\" columnGap={1}>\n          <Link\n            alignSelf=\"center\"\n            href={`#/studio/${studioId}`}\n            fontWeight=\"bold\"\n            color=\"neutral\"\n            textColor=\"text.primary\"\n            underline='none'\n            overlay\n            whiteSpace='nowrap'\n            overflow='hidden'\n            textOverflow='ellipsis'\n            style={{ color: isDarkModeOn ? 'white' : 'black' }}\n          >\n            {data && data.studioName ? data.studioName : \"    \"}\n          </Link>\n          {data && data.avgRating && data.avgRating>0 ?\n            <Typography width={52} flexShrink={0} alignSelf=\"center\" style={{ color: isDarkModeOn ? 'white' : 'black' }}>\n              ⭐ {data.avgRating.toFixed(1)}\n            </Typography> : null\n          }\n        </Box>\n        <Typography style={{ color: isDarkModeOn ? 'white' : 'black' }} level=\"body-xs\">{data.street ? data.street : \".  \"}</Typography>\n        <IconButton\n          hidden\n          aria-label=\"Like minimal photography\"\n          size=\"md\"\n          variant=\"solid\"\n          color=\"danger\"\n          sx={{\n            position: 'absolute',\n            zIndex: 2,\n            borderRadius: '50%',\n            right: '1rem',\n            bottom: '2rem',\n            transform: 'translateY(50%)',\n          }}\n        >\n          <Favorite />\n        </IconButton>\n        <Box display=\"flex\" justifyContent=\"space-between\">\n          <Typography alignSelf=\"center\" fontSize={12} style={{ color: isDarkModeOn ? 'white' : 'black' }}>\n            {data && data.minFee && data.minFee>=0 &&(`@ ₹${data.minFee} onwards`)}\n          </Typography>\n          <Button\n            size='small'\n            variant=\"contained\"\n            sx={{\n              alignSelf: \"center\",\n              color: 'white',\n              backgroundColor: '#735EAB',\n              '&:hover': {\n                backgroundColor: '#735EAB',\n                color: 'white',\n              },\n              '&.Mui-disabled': {\n                backgroundColor: isDarkModeOn ? 'rgba(115, 94, 171, 0.5)' : 'rgba(115, 94, 171, 0.3)',\n                color: 'rgba(255, 255, 255, 0.5)',\n              },\n            }}\n            type='button'\n          >\n            Explore\n          </Button>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}","import React from 'react';\nimport { Modal, Form, Row, Col, Button } from 'react-bootstrap';\n\nconst TimeRangePicker = ({ show, handleClose, handleSelect, defaultTime }) => {\n  //console.log(\"TimeRangePicker\",defaultTime)\n  const startTime_i = defaultTime.split('-')[0].trim();\n  const endTime_i = defaultTime.split('-')[1]?.trim();\n\n  //console.log(startTime_i,endTime_i,defaultTime)\n\n  const generateTimeOptions = () => {\n    const options = [];\n    let option_AM = [];\n    let option_PM = [];\n    for (let hours = 0; hours < 24; hours++) {\n      for (let minutes = 0; minutes < 60; minutes += 15) {\n        const formattedHours = hours.toString().padStart(2, '0');\n        const formattedMinutes = minutes.toString().padStart(2, '0');\n        const timeString = `${formattedHours}:${formattedMinutes}`;\n  \n        if (hours < 12) {\n          option_AM.push(`${timeString} AM`);\n        } else {\n          const formattedHours12 = (hours - 12).toString().padStart(2, '0');\n          option_PM.push(`${formattedHours12}:${formattedMinutes} PM`);\n        }\n      }\n    }\n\n    for (let i = 0; i < option_AM.length || i < option_PM.length; i++) {\n      if (i < option_AM.length) {\n        options.push(option_AM[i]);\n      }\n      if (i < option_PM.length) {\n        options.push(option_PM[i]);\n      }\n    }\n    \n\n  \n    return options;\n  };\n  \n\n  const renderTimeOptions = (defaultValue) => {\n    console.log(defaultValue);\n    const timeOptions = generateTimeOptions();\n  \n    return (\n      <>\n        <option value={defaultValue}>{defaultValue}</option>\n        {timeOptions.map((option) => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </>\n    );\n  };\n  \n  \n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Select Time</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col>\n          <Form.Group >\n          <Form.Label >\n            Start Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(e.target.value, null)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(startTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n          <Col>\n          <Form.Group>\n          <Form.Label >\n            End Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(null, e.target.value)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(endTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={handleClose}>Save</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default TimeRangePicker;\n","const dayMapping = {\n  M: \"Mon\",\n  T: \"Tues\",\n  W: \"Wed\",\n  Th: \"Thurs\",\n  F: \"Fri\",\n  St: \"Sat\",\n  Sn: \"Sun\",\n};\n\nexport const updateDaysFormat = (records) => {\n  const updatedDays = records.map((day) => dayMapping[day] || day);\n\n  return [...new Set(updatedDays)];\n};\n","import React, { useState } from 'react';\nimport { Form, Table, Button } from 'react-bootstrap';\nimport { FaPlus, FaMinus } from 'react-icons/fa';\nimport './StudioTable.css'; // Import the CSS file for styling\nimport  TimeRangePicker from './TimeRangePicker';\nimport danceStyles from '../danceStyles.json';\nimport { Autocomplete, TextField } from '@mui/material';\n\nimport { MultiSelect } from 'primereact/multiselect';\nimport \"primereact/resources/primereact.css\";\nimport \"primereact/resources/themes/saga-blue/theme.css\";\nimport { updateDaysFormat } from '../utils/mapping';\n\nconst daysOfWeek = ['Mon','Tues','Wed','Thurs','Fri','Sat','Sun'];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\"\n};\n\nfunction StudioTable({ tableData = [], setTableData, instructorNamesWithIds }) {\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const danceStylesOptions = danceStyles.danceStyles;\n  const [defaultTime, setDefaultTime] =  useState('12:00 PM - 01:00 PM')\n\n  const handleAddRow = () => {\n    setTableData((prevData) => [...prevData, { className: '', danceForms: '', days: '', time: '12:00 PM - 01:00 PM', instructors: [], fee:'',level:'' ,status: '',freeTrial: false, classCategory: []  }]);\n  };\n\n  const handleRemoveRow = (index) => {\n    if (tableData.length - 1 === 0) return;\n\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      newData.splice(index, 1);\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if(field===\"days\"){\n        value = Array.isArray(value) ? value.join(',') : value; \n      }\n      console.log(tableData)\n      const newData = [...prevData];\n      newData[index][field] = value;\n      return newData;\n    });\n  };\n\n  const handleTimePickerOpen = (index,time) => {\n    setDefaultTime(time)\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null); // Reset selected row index when closing time picker\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      \n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n    \n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(' - ');\n    \n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n      \n      return newData;\n    });\n  \n    setSelectedRow(selectedRowIndex);\n\n  };\n\n  return (\n    <>\n      <Table bordered variant=\"light\">\n        <thead>\n          <tr style={{border: '1px solid black'}}>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Name</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Dance Form</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Days</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Time</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'20rem', border: '1px solid black'}}>Instructors</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Fee (₹)</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Level</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Free Trial</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Category</th>\n            <th style={{padding:'0rem'}}>\n              <Button variant=\"primary\" onClick={handleAddRow}>\n                <FaPlus />\n              </Button>\n            </th>\n          </tr>\n        </thead>\n        <tbody style={{border: '1px solid black'}}>\n          {tableData.map((row, index) => (\n            <tr key={index} className={selectedRow === index ? 'selected-row' : ''}>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  type=\"text\"\n                  value={row.className}\n                  onChange={(e) => handleTableChange(index, 'className', e.target.value)}\n                  \n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n              < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.danceForms}\n                  onChange={(e) => handleTableChange(index, 'danceForms', e.target.value)}\n                >\n                  <option value=\"\">Select a dance form</option>\n                  {danceStylesOptions.map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </Form.Control>\n\n              </td>\n              \n              <td style={{ padding:'0rem',minWidth:'15rem', border: '1px solid black'}} className=\"m-0 p-0\">\n                <MultiSelect value={row.days && updateDaysFormat(row?.days?.split?.(',')?.filter?.(day => day !== '')) } \n                    onChange={(event) => handleTableChange(index, 'days', event.target.value)}\n                    options={daysOfWeek}\n                    placeholder=\"class days\" maxSelectedLabels={7} className=\"w-full md:w-20rem\"\n                  />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.time}\n                  //onClick={() => handleTimePickerOpen(index,row.time)}\n                  onClick={() => handleTimePickerOpen(index,row.time)}\n                  \n                />\n                {showTimePicker && (\n                <TimeRangePicker\n                  show={showTimePicker}\n                  handleClose={handleTimePickerClose}\n                  handleSelect={handleTimeSelect}\n                  defaultTime={tableData[selectedRowIndex]?.time || \"00:00-00:00\"}\n                />\n              )}\n\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black', width:'20rem'}}>\n                <Autocomplete\n                  multiple\n                  id=\"tags-standard\"\n                  options={instructorNamesWithIds}\n                  value={row.instructors}\n                  onChange={(_, values) => handleTableChange(index, 'instructors', values)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Instructors\"\n                    />\n                  )}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.fee}\n                  onChange={(e) => handleTableChange(index, 'fee', e.target.value)}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.level}\n                  onChange={(e) => handleTableChange(index, 'level', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value=\"Beginner\">Beginner</option>\n                      <option value=\"Intermediate\">Intermediate</option>\n                      <option value=\"Advanced\">Advanced</option>\n                      <option value=\"Misc\">Misc</option>\n\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.freeTrial}\n                  onChange={(e) => handleTableChange(index, 'freeTrial', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value={true}>Yes</option>\n                      <option value={false}>No</option>\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem', width:'20rem'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={Array.isArray(row.classCategory) && row.classCategory.length > 0 ? row.classCategory[0] : \"\"}\n                  onChange={(e) => handleTableChange(index, 'classCategory', [e.target.value])}\n                >\n                  <option value=\"\">Select Class Category</option>\n                  {Object.values(categoryMap).map((value, idx) => <option key={idx} value={value}>{value}</option>)}\n                </Form.Control>\n              </td>\n              <td style={{padding:'0rem'}}>\n                <Button variant=\"danger\" onClick={() => handleRemoveRow(index)}>\n                  <FaMinus />\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>      \n    </>\n  );\n}\n\nexport default StudioTable;\n\n/*\n                <Autocomplete\n                  multiple\n                  id={`days-autocomplete-${index}`}\n                  options={daysOfWeekOptions}\n                  getOptionLabel={(option) => option.value}\n                  value={row.days.split(',').filter(day => day !== '').map(day => daysOfWeekOptions.find(option => option.value === day))}\n                  onChange={(event, newValue) => handleTableChange(index, 'days', newValue.map(option => option.value).join(','))}\n                  renderInput={(params) => <TextField sx={{color:\"black\",backgroundColor:\"white\",width:\"100%\"}} {...params} />}\n                />\n              */","import React, { useState, useEffect } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { useJsApiLoader } from '@react-google-maps/api';\nimport { FaMapMarkerAlt } from 'react-icons/fa';\n\nconst libraries = ['places'];\nconst apiKey = \"AIzaSyAAPq5IMotbu90TZAEtyj8qgYyVJoROzsQ\";\n\nfunction MapsInput({ selectedLocation, setSelectedLocation, mapAddress, setMapAddress }) {\n    const [center, setCenter] = useState(selectedLocation || { lat: 28.6139, lng: 77.2090 });\n\n    const { isLoaded, loadError } = useJsApiLoader({\n        googleMapsApiKey: apiKey,\n        libraries,\n    });\n\n    useEffect(() => {\n        if (selectedLocation) {\n            setCenter(selectedLocation);\n        }\n    }, [selectedLocation]);\n\n    const handleSelect = async (selectedAddress) => {\n        const results = await geocodeByAddress(selectedAddress);\n        const latLng = await getLatLng(results[0]);\n\n        setMapAddress(selectedAddress);\n        setCenter(latLng);\n        setSelectedLocation(latLng);\n    };\n\n    const handleMapClick = async ({ lat, lng }) => {\n        const latLng = { lat, lng };\n        setSelectedLocation(latLng);\n        setCenter(latLng);\n\n        if (!mapAddress.trim()) {\n            try {\n                const geocoder = new window.google.maps.Geocoder();\n                geocoder.geocode({ location: latLng }, (results, status) => {\n                    if (status === 'OK' && results[0]) {\n                        setMapAddress(results[0].formatted_address);\n                    } else {\n                        console.error('Geocoder failed due to: ', status);\n                    }\n                });\n            } catch (error) {\n                console.error('Error with reverse geocoding:', error);\n            }\n        }\n    };\n\n    if (loadError) return <p>Error loading maps</p>;\n    if (!isLoaded) return <p>Loading maps...</p>;\n\n    return (\n        <div>\n            <br />\n\n            {/* Autocomplete Input */}\n            <PlacesAutocomplete\n                value={mapAddress}\n                onChange={setMapAddress}\n                onSelect={handleSelect}\n            >\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                    <div>\n                        <input\n                            {...getInputProps({\n                                placeholder: 'Enter address...',\n                                className: 'location-search-input',\n                                style: { height: '40px', fontSize: '16px', width: '100%' },\n                            })}\n                        />\n                        <div className=\"autocomplete-dropdown-container\">\n                            {loading && <div>Loading...</div>}\n                            {suggestions.map((suggestion) => (\n                                <div {...getSuggestionItemProps(suggestion, { className: 'suggestion-item' })} key={suggestion.placeId}>\n                                    <span>{suggestion.description}</span>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </PlacesAutocomplete>\n\n            <br />\n\n            {/* Google Map */}\n            <div style={{ height: '400px', width: '100%' }}>\n                <GoogleMapReact\n                    bootstrapURLKeys={{ key: apiKey }}\n                    defaultCenter={center}\n                    center={center}\n                    defaultZoom={16}\n                    onClick={handleMapClick}\n                >\n                    {selectedLocation && (\n                        <PinMarker lat={selectedLocation.lat} lng={selectedLocation.lng} />\n                    )}\n                </GoogleMapReact>\n            </div>\n        </div>\n    );\n}\n\nconst PinMarker = () => (\n    <div style={{ position: 'relative', textAlign: 'center' }}>\n        <FaMapMarkerAlt style={{ color: 'green', fontSize: '24px' }} />\n    </div>\n);\n\nexport default MapsInput;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport MUIButton from \"@mui/material/Button\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\n\nconst SuccessMessage = ({ StudioId }) => {\n  const navigate = useNavigate();\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n\n  const form = document.getElementById(\"addStudioForm\");\n\n  const studioName = form?.studioName?.value;\n  const streetName = form?.street?.value;\n  const city = form?.city?.value;\n\n  const navigateToStudio = () => {\n    navigate(`/studio/${StudioId}`);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-12\"> {/* Change col-md-5 to col-md-12 */}\n          <div className=\"_success message-box\">\n            <i className=\"fa fa-check-circle\" aria-hidden=\"true\"></i>\n            <h4\n              style={{\n                textTransform: \"none\",\n                marginTop: \"1rem\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            >\n              Your studio {studioName} (Studio ID: {StudioId}), located at {streetName} in {city} has been registered successfully 🎉\n            </h4>\n            <MUIButton\n              sx={{ mt: 1, px: 3, color: 'white', bgcolor: '#735EAB', textTransform: 'none', \"&:hover\": { bgcolor: \"#735EAB\" }, \"&:active\": { bgcolor: \"#735EAB\" } }}\n              variant=\"text\"\n              onClick={() => navigateToStudio()}\n            >\n              Check Now\n            </MUIButton>\n          </div>\n        </div>\n      </div>\n      <hr />\n\n      <style jsx>{`\n        ._success {\n          padding: 45px;\n          width: 100%;\n          text-align: center;\n          margin: 30px auto;\n        }\n\n        ._success i {\n          font-size: 55px;\n          color: #28a745;\n        }\n\n        ._success h2 {\n          margin-bottom: 12px;\n          font-size: 30px;\n          font-weight: 300;\n          line-height: 1.2;\n          margin-top: 10px;\n        }\n\n        ._success p {\n          margin-bottom: 0px;\n          font-size: 18px;\n          color: #495057;\n          font-weight: 100;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SuccessMessage;\n","import { Box } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\n\nconst CustomSwitch = ({ isOn, handleToggle }) => {\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n\n  return (\n    <Box\n      onClick={handleToggle}\n      style={{\n        width: \"40px\",\n        height: \"20px\",\n        borderRadius: \"10px\",\n        backgroundColor: isOn ? \"#f44336\" : isDarkModeOn ? \"#555\" : \"#ccc\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: isOn ? \"flex-end\" : \"flex-start\",\n        padding: \"2px\",\n        cursor: \"pointer\",\n        transition: \"background-color 0.3s\",\n      }}\n    >\n      <Box\n        style={{\n          width: \"16px\",\n          height: \"16px\",\n          borderRadius: \"50%\",\n          backgroundColor: \"#fff\",\n          boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n          transition: \"transform 0.3s\",\n        }}\n      />\n    </Box>\n  );\n};\n\nexport default CustomSwitch;\n","import { useSelector } from \"react-redux\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport { Button as MuiButton } from \"@mui/material\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\nimport dayOrder from \"../days.json\";\nimport CustomSwitch from \"./CustomSwitch\";\n\nconst generateTimeOptions = () => {\n  let option_AM = [];\n  let option_PM = [];\n  for (let hours = 0; hours < 24; hours++) {\n    for (let minutes = 0; minutes < 60; minutes += 15) {\n      const formattedHours = hours.toString().padStart(2, \"0\");\n      const formattedMinutes = minutes.toString().padStart(2, \"0\");\n      const timeString = `${formattedHours}:${formattedMinutes}`;\n\n      if (hours < 12) {\n        option_AM.push(`${timeString} AM`);\n      } else {\n        const formattedHours12 = (hours === 12 ? 12 : hours - 12)\n          .toString()\n          .padStart(2, \"0\");\n        option_PM.push(`${formattedHours12}:${formattedMinutes} PM`);\n      }\n    }\n  }\n\n  return [...option_AM, ...option_PM];\n};\n\nconst renderTimeOptions = (defaultValue) => {\n  const timeOptions = generateTimeOptions();\n  return (\n    <>\n      <option value={defaultValue}>{defaultValue}</option>\n      {timeOptions.map((option) => (\n        <option key={option} value={option}>\n          {option}\n        </option>\n      ))}\n    </>\n  );\n};\n\nconst StudioWeeklyTimings = ({ timings, setTimings }) => {\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n\n  const handleSelect = (day, index, type, value) => {\n    const updatedDayTimings = [...timings[day]];\n    updatedDayTimings[index][type] = value;\n    setTimings({ ...timings, [day]: updatedDayTimings });\n  };\n\n  const addTimeSlot = (day) => {\n    const updatedDayTimings = [\n      ...timings[day],\n      { open: \"09:00 AM\", close: \"06:00 PM\" },\n    ];\n    setTimings({ ...timings, [day]: updatedDayTimings });\n  };\n\n  const removeTimeSlot = (day, index) => {\n    const updatedDayTimings = [...timings[day]];\n    if (updatedDayTimings.length > 1) {\n      updatedDayTimings.splice(index, 1);\n      setTimings({ ...timings, [day]: updatedDayTimings });\n    }\n  };\n\n  const toggleDayClosed = (day) => {\n    const isClosed =\n      timings[day].length === 1 && timings[day][0].open === \"Closed\";\n    if (isClosed) {\n      setTimings({\n        ...timings,\n        [day]: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n      });\n    } else {\n      setTimings({\n        ...timings,\n        [day]: [{ open: \"Closed\", close: \"Closed\" }],\n      });\n    }\n  };\n\n  const isDayClosed = (day) => {\n    return timings[day].length === 1 && timings[day][0].open === \"Closed\";\n  };\n\n  return (\n    <Row className=\"gy-3\">\n      {dayOrder.map((day) => (\n        <Col xs={12} sm={6} md={4} lg={3} key={day}>\n          <div className=\"d-flex justify-content-between align-items-center mb-3\">\n            <span style={{ fontWeight: \"bold\" }}>\n              {day.charAt(0).toUpperCase() + day.slice(1)}\n            </span>\n            <div className=\"d-flex align-items-center gap-2\">\n              <span\n                style={{\n                  fontSize: \"0.8rem\",\n                  color: isDarkModeOn ? \"#aaa\" : \"#666\",\n                }}\n              >\n                {isDayClosed(day) ? \"Closed\" : \"Open\"}\n              </span>\n              <CustomSwitch\n                isOn={isDayClosed(day)}\n                handleToggle={() => toggleDayClosed(day)}\n              />\n            </div>\n          </div>\n\n          {!isDayClosed(day) ? (\n            timings[day].map((slot, index) => (\n              <Row key={index} className=\"mb-2 align-items-center\">\n                <Col xs={5}>\n                  <Form.Group>\n                    <Form.Label>Start Time</Form.Label>\n                    <Form.Control\n                      as=\"select\"\n                      value={slot.open}\n                      onChange={(e) =>\n                        handleSelect(day, index, \"open\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                        color: isDarkModeOn ? \"white\" : \"#333333\",\n                        backgroundColor: isDarkModeOn ? \"#333333\" : \"white\",\n                      }}\n                    >\n                      {renderTimeOptions(slot.open)}\n                    </Form.Control>\n                  </Form.Group>\n                </Col>\n                <Col xs={5}>\n                  <Form.Group>\n                    <Form.Label>End Time</Form.Label>\n                    <Form.Control\n                      as=\"select\"\n                      value={slot.close}\n                      onChange={(e) =>\n                        handleSelect(day, index, \"close\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                        color: isDarkModeOn ? \"white\" : \"#333333\",\n                        backgroundColor: isDarkModeOn ? \"#333333\" : \"white\",\n                      }}\n                    >\n                      {renderTimeOptions(slot.close)}\n                    </Form.Control>\n                  </Form.Group>\n                </Col>\n                <Col xs={2}>\n                  <Button\n                    variant=\"danger\"\n                    size=\"sm\"\n                    onClick={() => removeTimeSlot(day, index)}\n                    className=\"mt-4\"\n                  >\n                    -\n                  </Button>\n                </Col>\n              </Row>\n            ))\n          ) : (\n            <div className=\"text-muted mb-3\">Studio is closed on this day</div>\n          )}\n\n          {!isDayClosed(day) && (\n            <MuiButton\n              variant=\"contained\"\n              onClick={() => addTimeSlot(day)}\n              sx={{\n                color: isDarkModeOn ? \"black\" : \"white\",\n                bgcolor: isDarkModeOn ? \"white\" : \"black\",\n                \"&:hover\": { bgcolor: isDarkModeOn ? \"white\" : \"black\" },\n              }}\n            >\n              Add Time Slot\n            </MuiButton>\n          )}\n        </Col>\n      ))}\n    </Row>\n  );\n};\n\nexport default StudioWeeklyTimings;\n","import React, { useRef } from 'react'\nimport { Row, Col , Form } from 'react-bootstrap';\nimport {LinearProgress, Button as MuiButton} from '@mui/material';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,addDoc,updateDoc,collection,where,getDocs,query, deleteDoc } from \"firebase/firestore\";\nimport { COLLECTIONS, DRAFT_COLLECTIONS } from '../constants';\nimport StudioTable from './StudioTable';\nimport ImageUpload from './ImageUpload';\nimport { STORAGES } from '../constants';\nimport MapsInput from './MapsInput';\nimport { useSelector} from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport indianCities from '../cities.json';\nimport indianStates from '../states.json';\nimport danceStyles from '../danceStyles.json';\nimport { AMENITIES_ICONS } from '../constants';\nimport {Autocomplete,TextField} from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport {Stepper,Step,StepLabel} from '@mui/material';\nimport SuccessMessage from './SucessPage';\nimport { postData } from '../utils/common';\nimport { isEqual } from 'lodash';\nimport StudioWeeklyTimings from './StudioWeeklyTiming';\nimport { useSnackbar } from '../context/SnackbarContext';\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nconst initialStudioTimings = {\n  tuesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  wednesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  thursday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  friday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  saturday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  sunday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  monday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n}\n\nconst DRAFT_INTERVAL_TIME = 1000 * 10;\n\nfunction StudioAdd({instructors}) {\n    const previousDraftState = useRef(null);\n    const effectDraftRef = useRef(null);\n    const logoImageUploadRef = useRef(null);\n    const studioImageUploadRef = useRef(null);\n    const anouncementImageUploadRef = useRef(null);\n    const showSnackbar = useSnackbar();\n    const [newStudioId, setNewStudioId] = useState(\"\")\n    const [tableData, setTableData] = useState(\n      [{ className: '', danceForms: '', days: '', time: '', instructors: [], fee:'',level:'' ,status: '' ,freeTrial:false ,classCategory: []}],\n    );\n    const [selectedLocation, setSelectedLocation] = useState(null);\n    const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n    const [selectedInstructors, setSelectedInstructors] = useState([]);\n    const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n    const [selectedAmenities, setSelectedAmenities] = useState([]);\n    const instructorNamesWithIds = instructors.map((instructor) => `${instructor.name} - ${instructor.id}`);\n    const [isReady, setIsReady] = useState(false);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [timings, setTimings] = useState(initialStudioTimings);\n\n    // console.log(\"==============\");\n    // console.log(\"timings\", timings);\n    // console.log(\"==============\");\n\n    //const [dropdownVisible, setDropdownVisible] = useState(false);\n    const locationOptions = indianCities.cities;\n    const stateOptions = indianStates.states;\n    const danceStylesOptions = danceStyles.danceStyles;\n    const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n    const [activeStep, setActiveStep] = useState(0);\n    const [mapAddress, setMapAddress] = useState('');\n\n    const validateStep1 = () => {\n      const form = document.getElementById(\"addStudioForm\");\n\n      if (!form.studioName.value) return \"Studio name is required\";\n      if (!form.aboutStudio.value) return \"About Studio is required\";\n      if (!form.founderName.value) return \"Founder name is required\";\n      if (!form.aboutFounder.value) return \"About Founder is required\";\n      if (!form.mobileNumber.value) return \"Mobile number is required\";\n      if (!form.whatsappNumber.value) return \"WhatsApp number is required\";\n      if (!form.numberOfHalls.value) return \"Number of halls is required\";\n      if (!form.maximumOccupancy.value) return \"Maximum occupancy is required\";\n      if (!selectedDanceStyles.length) return \"At least one dance style must be selected\";\n    };\n\n    const validateStep2 = () => {\n      if (!Object.values(timings).every((slots) => slots.length > 0)) {\n        return \"All timing slots must be filled\";\n      }\n      if (!tableData.length) {\n        return \"At least one class entry is required\";\n      }\n      for (const entry of tableData) {\n        if (!entry.className?.trim()) return \"Class name is required\";\n        if (!entry.danceForms?.trim()) return \"Dance forms are required\";\n        if (!entry.days?.trim()) return \"Days are required\";\n        if (!entry.time?.trim()) return \"Time is required\";\n        if (!entry.fee?.trim()) return \"Fee is required\";\n        if (!entry.level?.trim()) return \"Level is required\";\n        if (!entry.instructors.length) return \"At least one instructor is required\";\n        if (!entry.classCategory.length || !entry.classCategory[0]?.trim()) return \"Class category is required\";\n      }\n    };\n\n    const validateStep3 = () => {\n      const form = document.getElementById(\"addStudioForm\");\n\n      if (!form.buildingName.value) return \"Building name is required\";\n      if (!form.street.value) return \"Street is required\";\n      if (!form.city.value) return \"City is required\";\n      if (!form.pincode.value) return \"Pincode is required\";\n      if (!form.state.value) return \"State is required\";\n      if (!mapAddress) return \"Address is required\";\n      if (!selectedLocation) return \"Location selection is required\";\n    };\n\n    const validateStep4 = () => {\n      if (!logoImageUploadRef.current?.isValid()) return \"Please upload studio logo before proceeding\"\n    };\n\n    const validateStep5 = () => {\n      if (!studioImageUploadRef.current?.isValid()) return \"Please upload studio images before proceeding\"\n      if (!anouncementImageUploadRef.current?.isValid()) return \"Please upload studio anouncement images before proceeding\"\n    };\n\n    const handleNext = () => {\n      let errorMessage = '';\n\n      if (activeStep === 0) errorMessage = validateStep1()\n\n      if (activeStep === 1) errorMessage = validateStep2()\n\n      if (activeStep === 2) errorMessage = validateStep3()\n        \n      if (activeStep === 3) errorMessage = validateStep4()\n\n      if (activeStep === 4) errorMessage = validateStep5()\n\n      if (errorMessage) {\n        return showSnackbar(errorMessage, 'error');\n      }\n\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n\n    const darkTheme = createTheme({\n      palette: {\n        mode: isDarkModeOn?'dark':'light',\n      },\n    });\n\n    const handleDanceStylesChange = (event, value) => {\n      setSelectedDanceStyles(value);\n    };  \n\n    const handleAmentiesChange = (event, value) => {\n      setSelectedAmenities(value);\n    };\n\n    const handleInstructorChange = (event, value) => {\n      setSelectedInstructors(value);\n    };\n\n    const resetDraft = async () => {\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n\n          await deleteDoc(studioRef);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n      const handleAddStudio = async (event) => {\n        event.preventDefault();\n\n        if (activeStep < 3) { // If user enter enter/return btn at any place it should validate all\n          const errorMessage1 = validateStep1();\n          const errorMessage2 = validateStep2();\n          const errorMessage3 = validateStep3();\n        \n          const errorMessages = [errorMessage1, errorMessage2, errorMessage3].filter(Boolean).join(', ');\n        \n          if (errorMessages) {\n            return showSnackbar(errorMessages, 'error');\n          }\n        }        \n\n        const title = event.target.studioName.value;\n        if (!title) {\n          return;\n        }\n        let isPremium=true\n        const newData = tableData.reduce((accumulator, current, index) => {\n          accumulator[index] = current;\n          return accumulator;\n        }, {});\n\n        try {\n          const currentUserEmail = JSON.parse(localStorage.getItem(\"userInfo\"))?.email;\n          const studioData = {\n              studioName: event.target.studioName.value,\n              aboutStudio: event.target.aboutStudio.value,\n              founderName: event.target.founderName.value,\n              aboutFounder: event.target.aboutFounder.value,\n              mobileNumber: event.target.mobileNumber.value,\n              whatsappNumber: event.target.whatsappNumber.value,\n              mailAddress: event.target.mailAddress.value,\n              danceStyles: selectedDanceStyles.join(\",\"),\n              numberOfHalls: event.target.numberOfHalls.value,\n              maximumOccupancy: event.target.maximumOccupancy.value,\n              instructorsNames: selectedInstructors,\n              status: 'OPEN',\n              tableData: newData,\n              buildingName: event.target.buildingName.value,\n              street: event.target.street.value,\n              city: event.target.city.value,\n              landmark: event.target.landmark.value,\n              pincode: event.target.pincode.value,\n              state: event.target.state.value,\n              country: \"India\",\n              mapAddress,\n              geolocation : selectedLocation,\n              gstNumber: event.target.gstNumber.value,\n              enrolledId:[],\n              reviews:[],\n              author: JSON.parse(localStorage.getItem('userInfo')).displayName,\n              UserId: JSON.parse(localStorage.getItem('userInfo')).UserId,\n              isPremium: isPremium,\n              addAmenities: selectedAmenities.join(\",\"),\n              enrollmentProcess: encodeToUnicode(event.target.enrollmentProcess.value),\n              creatorEmail: currentUserEmail,\n              instagram: event.target.instagram.value,\n              facebook: event.target.facebook.value,\n              youtube: event.target.youtube.value,\n              twitter: event.target.twitter.value,\n              visibilty:1,\n              timings\n          };\n            setIsSubmitting(true);\n            const notifyEmails = currentUserEmail\n            const metaData = {\n              entity_name: studioData.studioName,\n              city: studioData.city ,\n            }\n            const response = await postData(studioData,COLLECTIONS.STUDIO, notifyEmails, metaData) ;\n            if (response.ok) {\n              if (effectDraftRef.current) {\n                clearInterval(effectDraftRef.current);\n              }\n              const result = await response.json();\n              setNewStudioId(result.id)\n              resetDraft();\n              handleNext();\n            }\n        } catch (error) {\n          console.error(\"Error adding studio: \", error);\n        } finally {\n          setIsSubmitting(false);\n        }\n      };\n\n  const saveDraft = async () => {\n    const form = document.getElementById(\"addStudioForm\");\n\n    try {\n      const q = query(\n        collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n        where(\n          \"UserId\",\n          \"==\",\n          JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n        )\n      );\n  \n      const querySnapshot = await getDocs(q);\n  \n      if (!querySnapshot.empty) {\n        let studios = [];\n  \n        querySnapshot.forEach((doc) => {\n          studios.push({ id: doc.id, ...doc.data() });\n        });\n  \n        let foundStudio = studios[0];\n  \n        const studioRef = doc(\n          db,\n          DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n          foundStudio.id\n        );\n  \n        const newData = tableData.reduce((accumulator, current, index) => {\n          accumulator[index] = current;\n          return accumulator;\n        }, {});\n  \n        const currentState = {\n          studioName: form.studioName.value,\n          aboutStudio: form.aboutStudio.value,\n          founderName: form.founderName.value,\n          aboutFounder: form.aboutFounder.value,\n          mobileNumber: form.mobileNumber.value,\n          whatsappNumber: form.whatsappNumber.value,\n          mailAddress: form.mailAddress.value,\n          danceStyles: selectedDanceStyles.join(\",\"),\n          numberOfHalls: form.numberOfHalls.value,\n          maximumOccupancy: form.maximumOccupancy.value,\n          instructorsNames: selectedInstructors,\n          status: \"OPEN\",\n          tableData: newData,\n          buildingName: form.buildingName.value,\n          street: form.street.value,\n          city: form.city.value,\n          landmark: form.landmark.value,\n          pincode: form.pincode.value,\n          state: form.state.value,\n          country: \"India\",\n          mapAddress: mapAddress || '',\n          geolocation: selectedLocation,\n          gstNumber: form.gstNumber.value,\n          enrolledId: [],\n          reviews: [],\n          author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n          UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n          isPremium: true,\n          addAmenities: selectedAmenities.join(\",\"),\n          enrollmentProcess: encodeToUnicode(form.enrollmentProcess.value),\n          creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\")).email,\n          instagram: form.instagram.value,\n          facebook: form.facebook.value,\n          youtube: form.youtube.value,\n          twitter: form.twitter.value,\n          visibilty: 1,\n          timings,\n        };\n\n        if (!isEqual(previousDraftState.current, currentState)) {\n          await updateDoc(studioRef, currentState);\n          previousDraftState.current = currentState;\n          showSnackbar(\"Draft saved successfully!\", \"success\");\n        } else {\n          showSnackbar(\"No changes detected to save.\", \"info\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error saving draft: \", error);\n    }\n  };\n\n  useEffect(() => {\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          form.studioName.value = foundStudio.studioName;\n          form.aboutStudio.value = foundStudio.aboutStudio;\n          form.founderName.value = foundStudio.founderName;\n          form.aboutFounder.value = foundStudio.aboutFounder;\n          form.mobileNumber.value = foundStudio.mobileNumber;\n          form.whatsappNumber.value = foundStudio.whatsappNumber;\n          form.mailAddress.value = foundStudio.mailAddress;\n          setSelectedDanceStyles(\n            foundStudio.danceStyles.length\n              ? foundStudio.danceStyles.split(\",\")\n              : []\n          );\n          form.numberOfHalls.value = foundStudio.numberOfHalls;\n          form.maximumOccupancy.value = foundStudio.maximumOccupancy;\n          setSelectedInstructors(foundStudio.instructorsNames);\n          form.buildingName.value = foundStudio.buildingName;\n          form.street.value = foundStudio.street;\n          form.city.value = foundStudio.city;\n          form.landmark.value = foundStudio.landmark;\n          form.pincode.value = foundStudio.pincode;\n          form.state.value = foundStudio.state;\n          setMapAddress(foundStudio.mapAddress || '');\n          setSelectedLocation(foundStudio.geolocation);\n          // form.aadharNumber.value = foundStudio.aadharNumber;\n          form.gstNumber.value = foundStudio.gstNumber;\n          setTableData(Object.values(foundStudio.tableData));\n          setSelectedAmenities(\n            foundStudio.addAmenities.length\n              ? foundStudio.addAmenities.split(\",\")\n              : []\n          );\n          form.enrollmentProcess.value = decodeUnicode(\n            foundStudio.enrollmentProcess\n          );\n          form.instagram.value = foundStudio.instagram;\n          form.facebook.value = foundStudio.facebook;\n          form.youtube.value = foundStudio.youtube;\n          form.twitter.value = foundStudio.twitter;\n          if (foundStudio?.timings) setTimings(foundStudio.timings);\n        } else {\n          await addDoc(collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS), {\n            studioName: form.studioName.value,\n            aboutStudio: form.aboutStudio.value,\n            founderName: form.founderName.value,\n            aboutFounder: form.aboutFounder.value,\n            mobileNumber: form.mobileNumber.value,\n            whatsappNumber: form.whatsappNumber.value,\n            mailAddress: form.mailAddress.value,\n            danceStyles: selectedDanceStyles.join(\",\"),\n            numberOfHalls: form.numberOfHalls.value,\n            maximumOccupancy: form.maximumOccupancy.value,\n            instructorsNames: selectedInstructors,\n            status: \"OPEN\",\n            tableData: {\n              0: {\n                className: \"\",\n                danceForms: \"\",\n                days: \"\",\n                time: \"\",\n                instructors: [],\n                fee: \"\",\n                level: \"\",freeTrial:false, \n                classCategory: []\n              },\n            },\n            buildingName: form.buildingName.value,\n            street: form.street.value,\n            city: form.city.value,\n            landmark: form.landmark.value,\n            pincode: form.pincode.value,\n            state: form.state.value,\n            country: \"India\",\n            mapAddress: mapAddress || \"\",\n            geolocation: selectedLocation,\n            \n            gstNumber: form.gstNumber.value,\n            enrolledId: [],\n            reviews: [],\n            author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n            UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n            isPremium: true,\n            addAmenities: selectedAmenities.join(\",\"),\n            enrollmentProcess: encodeToUnicode(form.enrollmentProcess.value),\n            creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\")).email,\n            instagram: form.instagram.value,\n            facebook: form.facebook.value,\n            youtube: form.youtube.value,\n            twitter: form.twitter.value,\n            visibilty: 1,\n            timings\n          });\n        }\n\n        setIsReady(true);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    main();\n  }, []);\n\n  useEffect(() => {\n    effectDraftRef.current = null;\n    let previousState = null; \n\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n          \n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n          \n          effectDraftRef.current = setInterval(async () => {\n            \n            try {\n              const newData = tableData.reduce((accumulator, current, index) => {\n                accumulator[index] = current;\n                return accumulator;\n              }, {});\n              const currentState = { \n                studioName: form.studioName.value,\n                aboutStudio: form.aboutStudio.value,\n                founderName: form.founderName.value,\n                aboutFounder: form.aboutFounder.value,\n                mobileNumber: form.mobileNumber.value,\n                whatsappNumber: form.whatsappNumber.value,\n                mailAddress: form.mailAddress.value,\n                danceStyles: selectedDanceStyles.join(\",\"),\n                numberOfHalls: form.numberOfHalls.value,\n                maximumOccupancy: form.maximumOccupancy.value,\n                instructorsNames: selectedInstructors,\n                status: \"OPEN\",\n                tableData: newData,\n                buildingName: form.buildingName.value,\n                street: form.street.value,\n                city: form.city.value,\n                landmark: form.landmark.value,\n                pincode: form.pincode.value,\n                state: form.state.value,\n                country: \"India\",\n                mapAddress: mapAddress || \"\",\n                geolocation: selectedLocation,\n                \n                gstNumber: form.gstNumber.value,\n                enrolledId: [],\n                reviews: [],\n                author: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .displayName,\n                UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n                isPremium: true,\n                addAmenities: selectedAmenities.join(\",\"),\n                enrollmentProcess: encodeToUnicode(\n                  form.enrollmentProcess.value\n                ),\n                creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .email,\n                instagram: form.instagram.value,\n                facebook: form.facebook.value,\n                youtube: form.youtube.value,\n                twitter: form.twitter.value,\n                visibilty: 1,\n                timings\n              }\n              \n              // Check if the current state is different from the previous state\n              if (!isEqual(previousState, currentState)) {\n                try {\n                  await updateDoc(studioRef, currentState);\n                  previousState = currentState; // Update previous state after successful save\n                  // console.log(\"Next AutoSave in\",DRAFT_INTERVAL_TIME)\n                } catch (error) {\n                  console.error(error);\n                }\n              }else{\n                // console.log(\"Nothing for Autosave to save\")\n            }\n\n            } catch (error) {\n              console.error(error);\n            }\n          }, DRAFT_INTERVAL_TIME);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    if (isReady) main();\n\n    return () => clearInterval(effectDraftRef.current);\n  }, [\n    isReady,\n    selectedDanceStyles,\n    selectedInstructors,\n    tableData,\n    mapAddress,\n    selectedLocation,\n    selectedAmenities,\n  ]);\n\n  return (\n    <div >\n          <Stepper activeStep={activeStep} alternativeLabel>\n            {['Basic Studio & Owner details', 'Instructors, Classes & Social Media', 'Address & Registration', 'Studio Icon', 'Studio & Class Images'].map((label) => (\n              <Step key={label}>\n                <StepLabel ><p style={{color:isDarkModeOn?\"white\":\"black\"}}>{label}</p></StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          \n            < div hidden={activeStep > 2} >\n            <Form id=\"addStudioForm\" onSubmit={handleAddStudio} style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n              <Form.Group controlId=\"formBasicAdd\">\n             \n                  <div hidden={activeStep !== 0}>\n                  <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Basic Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Studio Name *</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"studioName\" />\n                \n                <Form.Label>About Studio *</Form.Label>\n                <Form.Control rows={6} style={{  minHeight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio's details\" name=\"aboutStudio\" />\n                \n                </Col>\n                <Col md={6}>\n                <Form.Label>Founder's Name *</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter founder name\" name=\"founderName\" />\n                \n                <Form.Label>About Founder *</Form.Label>\n                <Form.Control rows={6} style={{  minheight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter founder's details\" name=\"aboutFounder\" />\n                \n                </Col>\n                </Row>\n                <hr></hr>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Contact Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Mobile Number *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter mobile number\" name=\"mobileNumber\" type=\"number\"  />\n\n                <Form.Label>WhatsApp Number *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter whatsapp number\" name=\"whatsappNumber\" type=\"number\"  />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Mail Address</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"email\" rows={1} placeholder=\"Enter mail address\" name=\"mailAddress\" />\n                \n                  </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Details</h3>\n                <Row>\n                  <Col md={6}>\n                <Form.Label >Dance Styles *</Form.Label>\n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                <Form.Label>Number of Hall(s) *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Number of Hall(s)\" name=\"numberOfHalls\" type=\"number\" />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Maximum Occupancy *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}  rows={1} placeholder=\"Maximum Occupancy\" name=\"maximumOccupancy\" type=\"number\"   />\n                </Col>\n                </Row>\n                <br></br>\n                <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}} disabled >\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end gap-3\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={saveDraft}>\n                      Save to Draft\n                    </MuiButton>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                  \n                  </div>\n\n\n               \n              \n                <div hidden={activeStep !== 1}>\n\n\n                \n            <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Instructor Details</h3>\n                <Form.Label>Names of Instructors</Form.Label>\n                <Row>\n                  <ThemeProvider theme={darkTheme}>\n                    <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={instructorNamesWithIds}\n                      value={selectedInstructors}\n                      onChange={handleInstructorChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Instructors\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                  </ThemeProvider>\n                </Row> \n                <a href=\"#/modifyInstructors\" rel=\"noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', color: isDarkModeOn ? 'cyan' : 'blue' }}>\n                      Go to Instrcutors' Add/update Page? \n                    </a>\n                <hr></hr>   \n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Class Schedule *</h3>\n                  <span>Time Table Of dance classes</span>\n                    <div style={{ overflowX: 'auto', whiteSpace: 'nowrap', scrollbarColor: isDarkModeOn ? '#888 #333' : '#ccc #fff', }}>\n                      <StudioTable\n                        tableData={tableData}\n                        setTableData={setTableData}\n                        instructorNamesWithIds={instructorNamesWithIds}\n                      />\n                    </div>\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Additional Details</h3>\n                <Row>\n                <Col md={4}>\n                  <Form.Label>GST Number</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"GST Number\" name=\"gstNumber\" />\n                  \n                  \n                </Col>\n                <Col md={8}>\n                <Form.Label>Add Amenities</Form.Label>\n                  \n                  <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={amenityKeys}\n                  value={selectedAmenities}\n                  onChange={handleAmentiesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Amenities\"\n                      style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                </Col>\n                </Row>\n                <Row>\n                <Form.Label>Enrollment Process</Form.Label>\n                  <Form.Control rows={12} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enrollment Process\" name=\"enrollmentProcess\" />\n          \n                </Row>\n\n                <h3 style={{ margin: '12px 0', backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Timings *</h3>\n                <StudioWeeklyTimings timings={timings} setTimings={setTimings} />\n\n                <h3 style={{ margin: '32px 0 0 0', backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Social Media Links</h3>\n               <Row>\n               <Col md={4}>\n                  <Form.Label>Instagram</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Instagram Link\" name=\"instagram\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Facebook</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Facebook Link\" name=\"facebook\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>YouTube</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"YouTube Link\" name=\"youtube\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Twitter</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Twitter Link\" name=\"twitter\" />\n                </Col>\n\n               </Row>\n\n               <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end gap-3\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={saveDraft}>\n                      Save to Draft\n                    </MuiButton>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n              </div>\n\n               \n                <div hidden={activeStep !== 2}>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Address Details</h3>\n                <Row>\n                  <Col md={6}>\n                  <Form.Label>Building Name *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter building name\" name=\"buildingName\" />\n\n                <Form.Label>Street *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter street\" name=\"street\" />\n                <Form.Label>City *</Form.Label>\n                <Form.Control as=\"select\" style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black', height: 'auto', // Let it adjust to content\n                    lineHeight: '1.5em', // Mimics rows={1}\n                    padding: '8px', }} name=\"city\">\n                    <option value=\"\">Select a city</option>\n                    {locationOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n\n                </Col>\n                <Col md={6}>\n                  <Form.Label>Landmark</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter landmark\" name=\"landmark\" />\n\n                <Form.Label>Pincode *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter pincode\" name=\"pincode\" type=\"number\"  />\n               \n                <Form.Label>State *</Form.Label>\n                <Form.Control as=\"select\" style={{ padding: \"0 1.5rem\", backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter state\" name=\"state\">\n                <option value=\"\">Select a State</option>\n                    {stateOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n               \n                </Col>\n\n                <Form.Label>Save exact Address</Form.Label>\n                <MapsInput\n                  selectedLocation={selectedLocation}\n                  setSelectedLocation={setSelectedLocation}\n                  mapAddress={mapAddress}\n                  setMapAddress={setMapAddress}\n                ></MapsInput>\n                </Row>\n                \n\n                \n              <br></br>\n\n              <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end gap-3\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={saveDraft}>\n                      Save to Draft\n                    </MuiButton>\n                    <MuiButton variant=\"contained\" disabled={isSubmitting} style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\", color:'white'}} type=\"submit\">\n                      Add Studio & Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                \n                </div>\n\n                \n                </Form.Group>\n            </Form>\n            {isSubmitting && <LinearProgress />}\n            {\n              newStudioId === \"\"?(\"\"):(<p>New Studio Created with id {newStudioId}. Now u can upload images regarding them</p>)\n            }\n            \n            </div>\n          \n             \n             \n            <div hidden={activeStep !== 3}>\n              \n              <ImageUpload entityId={newStudioId} title={\"Studio Icon\"} storageFolder={STORAGES.STUDIOICON} maxImageCount={1} minImageCount={1} ref={logoImageUploadRef}></ImageUpload>\n              <Row>\n                \n                <Col xs={12} className=\"d-flex justify-content-end\">\n                  <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                    Next\n                  </MuiButton>\n                </Col>\n              </Row>\n\n              </div>\n             \n            \n             <div hidden={activeStep !== 4}>\n              <ImageUpload entityId={newStudioId} title={\"Studio Images\"} maxImageCount={10} minImageCount={5} storageFolder={STORAGES.STUDIOIMAGES} ref={studioImageUploadRef}></ImageUpload>\n            </div>\n\n            <div hidden={activeStep !== 4}>\n              <ImageUpload entityId={newStudioId} title={\"Studio Announcement Images\"}  storageFolder={STORAGES.STUDIOANNOUNCEMENTS} maxImageCount={10} minImageCount={0} ref={anouncementImageUploadRef}></ImageUpload>\n\n              <Row className='mt-3'>\n              <Col xs={6}>\n                <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                  Prev\n                </MuiButton>\n              </Col>\n              <Col xs={6} className=\"d-flex justify-content-end\">\n                <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                  Next\n                </MuiButton>\n              </Col>\n            </Row>\n            </div>\n\n            <div  hidden={activeStep !== 5} style={{ display: 'flex',  alignItems: 'center', height: 'auto'}}>\n          \n                <SuccessMessage StudioId={newStudioId} />\n                <br></br>\n              \n            </div>\n        \n      <br></br>\n      \n    </div>\n  )\n}\n\n\nexport default StudioAdd\n","import React, { useState, useEffect } from 'react';\nimport { Alert, Container } from 'react-bootstrap';\n\nconst AlertPopup = ({\n  type = 'info',\n  message = 'Default message',\n  timeOfDisplay = 5000,\n  fontSize = '16px',\n  fontWeight = 'normal',\n  fontStyle = 'normal',\n}) => {\n  const [showAlert, setShowAlert] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowAlert(false);\n    }, timeOfDisplay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [timeOfDisplay]);\n\n  return (\n    <Container>\n      {showAlert && (\n        <Alert\n          variant={type}\n          style={{\n            fontSize,\n            fontWeight,\n            fontStyle,\n            textAlign: 'center',\n            marginTop: '10px',\n            marginBottom: '0',\n          }}\n          onClose={() => setShowAlert(false)}\n          dismissible\n        >\n          {message}\n        </Alert>\n      )}\n    </Container>\n  );\n};\n\nexport default AlertPopup;\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Row, Col, Form, Table } from \"react-bootstrap\";\nimport { db } from \"../config\";\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { COLLECTIONS } from \"../constants\";\nimport AlertPopup from \"./AlertPopup\";\nimport ImageUpload from \"./ImageUpload\";\nimport { STORAGES } from \"../constants\";\nimport MapsInput from \"./MapsInput\";\nimport { useSelector } from \"react-redux\"; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\nimport TimeRangePicker from \"./TimeRangePicker\";\nimport indianCities from \"../cities.json\";\nimport indianStates from \"../states.json\";\nimport danceStyles from \"../danceStyles.json\";\nimport { AMENITIES_ICONS } from \"../constants\";\nimport { Autocomplete, LinearProgress, TextField } from \"@mui/material\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { FaMinus, FaPlus } from \"react-icons/fa\";\nimport { MultiSelect } from \"primereact/multiselect\";\nimport { putData } from \"../utils/common\";\nimport StudioWeeklyTimings from \"./StudioWeeklyTiming\";\nimport { useSnackbar } from \"../context/SnackbarContext\";\nimport { updateDaysFormat } from \"../utils/mapping\";\n\nconst initialStudioTimings = {\n  monday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  tuesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  wednesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  thursday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  friday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  saturday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  sunday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n};\n\nconst daysOfWeek = [\"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\", \"Sun\"];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\",\n};\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString = \"\") => {\n  const utf8Encoded = unicodeString.split(\"\").map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nfunction StudioUpdate({\n  studio,\n  setStudio,\n  studioId,\n  setStudioId,\n  instructors,\n}) {\n  const showSnackbar = useSnackbar();\n  const [selectedStudio, setSelectedStudio] = useState(null);\n  const [selectedStudioId, setSelectedStudioId] = useState(null);\n  const [selectedInstructors, setSelectedInstructors] = useState([]);\n  const [selectedStudioFrozenClassRows, setSelectedStudioFrozenClassRows] =\n    useState(-1);\n  const [selectedAmenities, setSelectedAmenities] = useState([]);\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [defaultTime, setDefaultTime] = useState(\"00:00-00:00\");\n\n  const locationOptions = indianCities.cities;\n  const stateOptions = indianStates.states;\n  const danceStylesOptions = danceStyles.danceStyles;\n  const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n  const [showUpdateSuccessAlert, setShowUpdateSuccessAlert] = useState(false);\n  const [showUpdateErrorAlert, setShowUpdateErrorAlert] = useState(false);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  const [timings, setTimings] = useState(initialStudioTimings);\n  const [mapAddress, setMapAddress] = useState('');\n\n  const instructorNamesWithIds = instructors.map(\n    (instructor) => `${instructor.name} - ${instructor.id}`\n  );\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: isDarkModeOn ? \"dark\" : \"light\",\n    },\n  });\n\n  const handleDanceStylesChange = (event, value) => {\n    setSelectedDanceStyles(value);\n  };\n\n  const handleAmenitiesChange = (event, value) => {\n    setSelectedAmenities(value);\n  };\n\n  const [tableData, setTableData] = useState({\n    0: {\n      className: \"\",\n      danceForms: \"\",\n      days: \"\",\n      time: \"\",\n      instructors: [],\n      fee: \"\",\n      level: \"\",\n      freeTrial: false,\n      classCategory: [],\n    },\n  });\n\n  const handleTimePickerOpen = (index, time) => {\n    //console.log(\"handleTimePickerOpen\",time,index)\n    setDefaultTime(time);\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null);\n    //console.log(\"---------\")\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n\n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n\n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(\" - \");\n\n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n\n      return newData;\n    });\n\n    setSelectedRow(selectedRowIndex);\n  };\n\n  useEffect(() => {\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser =\n      JSON.parse(localStorage.getItem(\"StudioCreated\")) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map(\n      (studio) => `${studio.studioName} : ${studio.id}`\n    );\n    setStudioId(studioIdList);\n\n    //console.log(\"studio:\", studio);\n    //console.log(\"studioId\", studioId);\n  }, []);\n\n  useEffect(() => {\n    // Fetch data for the selected studio when studioId changes\n    if (selectedStudio) {\n      //console.log(\"Studio Instructors Names\",selectedStudio.instructorsNames)\n      setSelectedInstructors(selectedStudio.instructorsNames);\n      if (selectedStudio && selectedStudio.danceStyles) {\n        setSelectedDanceStyles(selectedStudio.danceStyles.split(\",\"));\n      }\n      if (selectedStudio && selectedStudio.addAmenities) {\n        setSelectedAmenities(selectedStudio.addAmenities.split(\",\"));\n      }\n      if (selectedStudio && selectedStudio.tableData) {\n        const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n        setSelectedStudioFrozenClassRows(maxIndex);\n      }\n      if (selectedStudio && selectedStudio?.timings) {\n        setTimings(selectedStudio.timings);\n      }\n      if (selectedStudio && selectedStudio?.mapAddress) {\n        setMapAddress(selectedStudio?.mapAddress);\n      }\n    }\n  }, [selectedStudio]);\n\n  const handleSelectStudio = async (event) => {\n    event.preventDefault();\n    const selected = event.target.value;\n    const selectedId = selected.split(\":\").pop().trim();\n    setSelectedStudioId(selectedId);\n    try {\n      const studioDoc = await getDoc(doc(db, COLLECTIONS.STUDIO, selectedId));\n      if (studioDoc.exists) {\n        setSelectedStudio(studioDoc.data());\n        if (studioDoc.data().geolocation) {\n          const loc = studioDoc.data().geolocation;\n          setSelectedLocation(loc || null);\n          //console.log(\"StudioUpdate Selected location\",selectedLocation,loc)\n        }\n\n        if (studioDoc.data().tableData) {\n          setTableData(studioDoc.data().tableData);\n          //selectedStudioFrozenClassRows()\n          const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n          setSelectedStudioFrozenClassRows(maxIndex);\n          //console.log(\"Yo We got...\",tableData,Array.isArray(tableData),isMapOfMaps(tableData),maxIndex)\n        } else {\n          setTableData({\n            0: {\n              className: \"\",\n              danceForms: \"\",\n              days: \"\",\n              time: \"\",\n              instructors: [],\n              fee: \"\",\n              level: \"\",\n              freeTrial: false,\n              classCategory: [],\n            },\n          });\n        }\n      } else {\n        setSelectedStudio(null); // No matching studio found\n      }\n    } catch (error) {\n      console.error(\"Error fetching studio data:\", error, selectedId);\n    }\n  };\n\n  const handleInstructorChange = (event, value) => {\n    setSelectedInstructors(value);\n  };\n\n  const handleUpdateStudio = async (event) => {\n    event.preventDefault();\n\n    const errorMessage = validate();\n\n    if (errorMessage) {\n      return showSnackbar(errorMessage, \"error\");\n    }\n\n    setIsSubmitting(true);\n    const nameIdLocal = event.target.nameId.value;\n    const indexOfColon = nameIdLocal.lastIndexOf(\":\");\n    const studioId = nameIdLocal.substring(indexOfColon + 1).trim();\n\n    if (!studioId) {\n      //console.log(\"Invalid or empty studio id\")\n      return;\n    }\n\n    //console.log(studioId)\n\n    if (!studioId) {\n      //console.log(\"Invalid or empty studio id\")\n      return;\n    }\n\n    //console.log(studioId)\n\n    //const description = encodeToUnicode(event.target.description.value);\n    //const geolocation = selectedLocation;\n\n    try {\n      // Update the studio document with the new values\n      ////console.log(description,geolocation)\n      const dbPayload = {\n        studioName: event.target.studioName.value,\n        aboutStudio: event.target.aboutStudio.value,\n        founderName: event.target.founderName.value,\n        aboutFounder: event.target.aboutFounder.value,\n        mobileNumber: event.target.mobileNumber.value,\n        whatsappNumber: event.target.whatsappNumber.value,\n        mailAddress: event.target.mailAddress.value,\n        danceStyles: selectedDanceStyles.join(\",\"),\n        numberOfHalls: event.target.numberOfHalls.value,\n        maximumOccupancy: event.target.maximumOccupancy.value,\n        instructorsNames: selectedInstructors,\n        status: \"OPEN\",\n        tableData: tableData,\n        buildingName: event.target.buildingName.value,\n        street: event.target.street.value,\n        city: event.target.city.value,\n        landmark: event.target.landmark.value,\n        pincode: event.target.pincode.value,\n        state: event.target.state.value,\n        country: \"India\",\n        mapAddress,\n        geolocation: selectedLocation,\n        gstNumber: event.target.gstNumber.value,\n        enrolledId: [],\n        reviews: [],\n        author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n        UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n        addAmenities: selectedAmenities.join(\",\"),\n        enrollmentProcess: encodeToUnicode(\n          event.target.enrollmentProcess.value\n        ),\n        instagram: event.target.instagram.value,\n        facebook: event.target.facebook.value,\n        youtube: event.target.youtube.value,\n        twitter: event.target.twitter.value,\n        timings,\n      };\n\n      const response = await putData(dbPayload, COLLECTIONS.STUDIO, studioId);\n      if (response.ok) {\n        //console.log(\"Studio updated successfully\");\n        // alert(\"Studio Update successfully\");\n        showSnackbar(\"Studio Details Updated Successfully\", \"success\");\n        setShowUpdateSuccessAlert(true);\n        setShowUpdateErrorAlert(false);\n      } else {\n        setShowUpdateSuccessAlert(false);\n        setShowUpdateErrorAlert(true);\n      }\n    } catch (error) {\n      console.error(\"Error updating studio: \", error);\n      setShowUpdateSuccessAlert(false);\n      setShowUpdateErrorAlert(true);\n    } finally {\n      setIsSubmitting(false);\n    }\n    // Reset input fields to their initial values when a new studio is selected\n    document.getElementById(\"updateStudioForm\").reset();\n  };\n\n  const handleAddColumn = () => {\n    setTableData((prevData) => {\n      const newData = prevData.map((row) => ({\n        ...row,\n        [Object.keys(row).length]: \"\",\n      }));\n      return newData;\n    });\n  };\n\n  const handleAddRow = () => {\n    setTableData((prevData) => {\n      const newRowKey = Object.keys(prevData).length; // Use the current number of rows as the new row key\n      return { ...prevData, [newRowKey]: { ...tableData[0] } };\n    });\n  };\n\n  const handleRemoveRow = (index) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n      delete newData[index];\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if (field === \"days\") {\n        value = Array.isArray(value) ? value.join(\",\") : value;\n      }\n\n      return {\n        ...prevData,\n        [index]: {\n          ...prevData[index],\n          [field]: value,\n        },\n      };\n    });\n  };\n\n  const validate = () => {\n    const form = document.getElementById(\"updateStudioForm\");\n\n    if (!form.studioName.value) return \"Studio name is required\";\n    if (!form.aboutStudio.value) return \"About Studio is required\";\n    if (!form.founderName.value) return \"Founder name is required\";\n    if (!form.aboutFounder.value) return \"About Founder is required\";\n    if (!form.mobileNumber.value) return \"Mobile number is required\";\n    if (!form.whatsappNumber.value) return \"WhatsApp number is required\";\n    if (!form.numberOfHalls.value) return \"Number of halls is required\";\n    if (!form.maximumOccupancy.value) return \"Maximum occupancy is required\";\n    if (!selectedDanceStyles.length)\n      return \"At least one dance style must be selected\";\n\n    if (!Object.values(timings).every((slots) => slots.length > 0)) {\n      return \"All timing slots must be filled\";\n    }\n    if (!Object.values(tableData).length) {\n      return \"At least one class entry is required\";\n    }\n    for (const entry of Object.values(tableData)) {\n      if (!entry.className?.trim()) return \"Class name is required\";\n      if (!entry.danceForms?.trim()) return \"Dance forms are required\";\n      if (!entry.days?.trim()) return \"Days are required\";\n      if (!entry.time?.trim()) return \"Time is required\";\n      if (!entry.fee?.trim()) return \"Fee is required\";\n      if (!entry.level?.trim()) return \"Level is required\";\n      if (!entry.instructors.length)\n        return \"At least one instructor is required\";\n      if (!entry.classCategory.length || !entry.classCategory[0]?.trim())\n        return \"Class category is required\";\n    }\n\n    if (!form.buildingName.value) return \"Building name is required\";\n    if (!form.street.value) return \"Street is required\";\n    if (!form.city.value) return \"City is required\";\n    if (!form.pincode.value) return \"Pincode is required\";\n    if (!form.state.value) return \"State is required\";\n    if (!mapAddress) return \"Address is required\";\n    if (!selectedLocation) return \"Location selection is required\";\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n        color: isDarkModeOn ? \"white\" : \"black\",\n      }}\n    >\n      <br></br>\n      <Form id=\"updateStudioForm\" onSubmit={handleUpdateStudio}>\n        <Form.Group controlId=\"formBasicUpdate\">\n          <Form.Label>Id</Form.Label>\n          <Form.Control\n            as=\"select\"\n            name=\"nameId\"\n            style={{\n              backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n              color: isDarkModeOn ? \"white\" : \"black\",\n              height: \"auto\", // Let it adjust to content\n              lineHeight: \"1.5em\",\n              padding: \"8px\",\n            }}\n            onChange={handleSelectStudio}\n          >\n            <option value=\"\">Select a studio...</option>\n            {studioId && studioId.length > 0 ? (\n              studioId.map((studioItem) => (\n                <option key={studioItem} value={studioItem}>\n                  {studioItem}\n                </option>\n              ))\n            ) : (\n              <option value=\"\">No studio yet!</option>\n            )}\n          </Form.Control>\n        </Form.Group>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Basic Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Studio Name *</Form.Label>\n            <Form.Control\n              rows={1}\n              defaultValue={selectedStudio ? selectedStudio.studioName : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"textarea\"\n              placeholder=\"Enter studio name\"\n              name=\"studioName\"\n            />\n\n            <Form.Label>About Studio *</Form.Label>\n            <Form.Control\n              rows={6}\n              defaultValue={selectedStudio ? selectedStudio.aboutStudio : \"\"}\n              style={{\n                minHeight: \"150px\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              placeholder=\"Enter studio details\"\n              name=\"aboutStudio\"\n            />\n          </Col>\n          <Col md={6}>\n            <Form.Label>Founder's Name *</Form.Label>\n            <Form.Control\n              rows={1}\n              defaultValue={selectedStudio ? selectedStudio.founderName : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"textarea\"\n              placeholder=\"Enter studio name\"\n              name=\"founderName\"\n            />\n\n            <Form.Label>About Founder *</Form.Label>\n            <Form.Control\n              rows={6}\n              defaultValue={selectedStudio ? selectedStudio.aboutFounder : \"\"}\n              style={{\n                height: \"150px\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              placeholder=\"Enter studio details\"\n              name=\"aboutFounder\"\n            />\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Contact Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Mobile Number *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.mobileNumber : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Enter studio details\"\n              name=\"mobileNumber\"\n              type=\"number\"\n            />\n\n            <Form.Label>WhatsApp Number *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.whatsappNumber : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Enter studio details\"\n              name=\"whatsappNumber\"\n              type=\"number\"\n            />\n          </Col>\n          <Col md={6}>\n            <Form.Label>Mail Address</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.mailAddress : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"textarea\"\n              rows={1}\n              placeholder=\"Enter studio details\"\n              name=\"mailAddress\"\n            />\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Studio Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Dance Styles *</Form.Label>\n\n            <ThemeProvider theme={darkTheme}>\n              <CssBaseline />\n\n              <Autocomplete\n                style={{\n                  backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                  color: isDarkModeOn ? \"white\" : \"black\",\n                }}\n                multiple\n                id=\"tags-standard\"\n                options={danceStylesOptions}\n                value={selectedDanceStyles}\n                onChange={handleDanceStylesChange}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"standard\"\n                    placeholder=\"Select Dance Styles\"\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                  />\n                )}\n              />\n            </ThemeProvider>\n\n            <Form.Label>Number of Hall(s) *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.numberOfHalls : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Number of Hall(s)\"\n              name=\"numberOfHalls\"\n              type=\"number\"\n            />\n          </Col>\n          <Col md={6}>\n            <Form.Label>Maximum Occupancy *</Form.Label>\n            <Form.Control\n              defaultValue={\n                selectedStudio ? selectedStudio.maximumOccupancy : \"\"\n              }\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Maximum Occupancy\"\n              name=\"maximumOccupancy\"\n              type=\"number\"\n            />\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Instructor Details\n        </h3>\n        <Form.Label>Names of Instructors</Form.Label>\n        <Row>\n          <Col xs={6}>\n            <div\n              style={{\n                backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            >\n              <Row>\n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                  <Autocomplete\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                    multiple\n                    id=\"tags-standard\"\n                    options={instructorNamesWithIds}\n                    value={selectedInstructors}\n                    onChange={handleInstructorChange}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        variant=\"standard\"\n                        placeholder=\"Select Dance Styles\"\n                        style={{\n                          backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                          color: isDarkModeOn ? \"white\" : \"black\",\n                        }}\n                      />\n                    )}\n                  />\n                </ThemeProvider>\n                <a\n                  href=\"#/modifyInstructors\"\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                  style={{\n                    textDecoration: \"none\",\n                    color: isDarkModeOn ? \"cyan\" : \"blue\",\n                  }}\n                >\n                  Go to Instrcutors' Add/update Page?\n                </a>\n              </Row>\n            </div>\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Address Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Building Name *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.buildingName : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter building name\"\n              name=\"buildingName\"\n            />\n\n            <Form.Label>Street *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.street : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter street\"\n              name=\"street\"\n            />\n            <Form.Label>City *</Form.Label>\n            <Form.Control\n              as=\"select\"\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n                height: \"auto\", // Let it adjust to content\n                lineHeight: \"1.5em\", // Mimics rows={1}\n                padding: \"8px\",\n              }}\n              name=\"city\"\n              value={selectedStudio ? selectedStudio.city : \"\"}\n              onChange={(e) => {\n                const newCity = e.target.value;\n                setSelectedStudio((prevState) => ({\n                  ...prevState,\n                  city: newCity,\n                }));\n              }}\n            >\n              <option value=\"\">Select a city</option>\n              {locationOptions.map((city, index) => (\n                <option key={index} value={city}>\n                  {city}\n                </option>\n              ))}\n            </Form.Control>\n          </Col>\n          <Col md={6}>\n            <Form.Label>Landmark</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.landmark : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter landmark\"\n              name=\"landmark\"\n            />\n\n            <Form.Label>Pincode *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.pincode : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter pincode\"\n              name=\"pincode\"\n              type=\"number\"\n            />\n\n            <Form.Label>State *</Form.Label>\n            <Form.Control\n              as=\"select\"\n              style={{\n                padding: \"0 1.5rem\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Enter state\"\n              name=\"state\"\n              value={selectedStudio ? selectedStudio.state : \"\"}\n            >\n              <option value=\"\">Select a State</option>\n              {stateOptions.map((city, index) => (\n                <option key={index} value={city}>\n                  {city}\n                </option>\n              ))}\n            </Form.Control>\n          </Col>\n\n          <Form.Label>Save exact Address</Form.Label>\n          <MapsInput\n            selectedLocation={selectedLocation}\n            setSelectedLocation={setSelectedLocation}\n            mapAddress={mapAddress}\n            setMapAddress={setMapAddress}\n          ></MapsInput>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"white\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Additional Details\n        </h3>\n        <Row>\n          <Col md={4}>\n            <Form.Label>GST Number</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.gstNumber : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"number\"\n              rows={1}\n              placeholder=\"GST Number\"\n              name=\"gstNumber\"\n            />\n          </Col>\n          <Col md={8}>\n            <Form.Label>Add Amenities</Form.Label>\n\n            <ThemeProvider theme={darkTheme}>\n              <CssBaseline />\n\n              <Autocomplete\n                style={{\n                  backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                  color: isDarkModeOn ? \"white\" : \"black\",\n                }}\n                multiple\n                id=\"tags-standard\"\n                options={amenityKeys}\n                value={selectedAmenities}\n                onChange={handleAmenitiesChange}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"standard\"\n                    placeholder=\"Select Amenities\"\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                  />\n                )}\n              />\n            </ThemeProvider>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Form.Label>Enrollment Process</Form.Label>\n            <Form.Control\n              defaultValue={\n                selectedStudio\n                  ? decodeUnicode(selectedStudio?.enrollmentProcess)\n                  : \"\"\n              }\n              rows={6}\n              style={{\n                height: \"150px\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              placeholder=\"Enrollment Process\"\n              name=\"enrollmentProcess\"\n            />\n          </Col>\n        </Row>\n\n        <br></br>\n        <span>Time Table Of dance classes</span>\n        <div\n          style={{\n            overflowX: \"auto\",\n            whiteSpace: \"nowrap\",\n            scrollbarColor: isDarkModeOn ? \"#888 #333\" : \"#ccc #fff\",\n          }}\n        >\n          <Table bordered variant=\"light\">\n            <thead>\n              <tr>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Class Name\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"10rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Dance Form\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Days\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Time\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"20rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Instructors\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"8rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Fee (₹)\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"10rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Level\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"8rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Free Trial\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Class Category\n                </th>\n                <th style={{ padding: 0 }}>\n                  <Button variant=\"primary\" onClick={handleAddRow}>\n                    <FaPlus />\n                  </Button>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.keys(tableData).map((rowKey, index) => (\n                <tr key={rowKey}>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      type=\"text\"\n                      value={tableData[rowKey].className}\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"className\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      as=\"select\"\n                      value={tableData[rowKey].danceForms}\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"danceForms\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    >\n                      <option value=\"\">Select a dance form</option>\n                      {danceStylesOptions.map((option) => (\n                        <option key={option} value={option}>\n                          {option}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <MultiSelect\n                      value={\n                        tableData[rowKey] &&\n                        tableData[rowKey].days &&\n                        updateDaysFormat(\n                          tableData?.[rowKey]?.days\n                            ?.split?.(\",\")\n                            ?.filter?.((day) => day !== \"\")\n                        )\n                      }\n                      onChange={(event) =>\n                        handleTableChange(rowKey, \"days\", event.target.value)\n                      }\n                      options={daysOfWeek}\n                      placeholder=\"class days\"\n                      maxSelectedLabels={7}\n                      className=\"w-full md:w-20rem\"\n                      style={{ color: \"#000\", width: \"100%\" }}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      type=\"text\"\n                      value={tableData[rowKey].time}\n                      //onChange={(e) => handleTableChange(rowKey, 'time', e.target.value)}\n                      onClick={() =>\n                        handleTimePickerOpen(rowKey, tableData[rowKey].time)\n                      }\n                    />\n                    {showTimePicker && (\n                      <TimeRangePicker\n                        show={showTimePicker}\n                        handleClose={handleTimePickerClose}\n                        handleSelect={handleTimeSelect}\n                        defaultTime={\n                          tableData[selectedRowIndex]?.time || \"00:00-00:00\"\n                        } // selectedRowIndex\n                      />\n                    )}\n                  </td>\n                  <td style={{ padding: \"0rem\", width: \"20rem\" }}>\n                    <Autocomplete\n                      multiple\n                      options={instructorNamesWithIds}\n                      value={\n                        tableData[rowKey] && tableData[rowKey].instructors\n                          ? tableData[rowKey].instructors\n                          : []\n                      }\n                      onChange={(_, values) =>\n                        handleTableChange(rowKey, \"instructors\", values)\n                      }\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Instructors\"\n                        />\n                      )}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      type=\"text\"\n                      value={tableData[rowKey].fee ? tableData[rowKey].fee : \"\"}\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"fee\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      as=\"select\"\n                      value={\n                        tableData[rowKey].level ? tableData[rowKey].level : \"\"\n                      }\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"level\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    >\n                      <option value=\"\">Select a Level</option>\n                      <option value=\"Beginner\">Beginner</option>\n                      <option value=\"Intermediate\">Intermediate</option>\n                      <option value=\"Advanced\">Advanced</option>\n                      <option value=\"Misc\">Misc</option>\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\", border: \"1px solid black\" }}>\n                    <Form.Control\n                      style={{\n                        backgroundColor: \"white\",\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                      as=\"select\"\n                      value={\n                        tableData[index]?.freeTrial\n                          ? tableData[index].freeTrial\n                          : \"\"\n                      }\n                      onChange={(e) =>\n                        handleTableChange(index, \"freeTrial\", e.target.value)\n                      }\n                    >\n                      <option value=\"\">Select a value</option>\n                      <option value={true}>Yes</option>\n                      <option value={false}>No</option>\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\", width: \"20rem\" }}>\n                    <Form.Control\n                      style={{\n                        backgroundColor: \"white\",\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                      as=\"select\"\n                      value={\n                        Array.isArray(tableData[index].classCategory) &&\n                        tableData[index].classCategory?.length\n                          ? tableData[index].classCategory[0]\n                          : \"\"\n                      }\n                      onChange={(e) =>\n                        handleTableChange(index, \"classCategory\", [\n                          e.target.value,\n                        ])\n                      }\n                    >\n                      <option value=\"\">Select Class Category</option>\n                      {Object.values(categoryMap).map((value, idx) => (\n                        <option key={idx} value={value}>\n                          {value}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Button\n                      variant=\"danger\"\n                      onClick={() => handleRemoveRow(rowKey)}\n                    >\n                      <FaMinus />\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n        <br></br>\n\n        <h3\n          style={{\n            margin: \"12px 0\",\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Studio Timings *\n        </h3>\n        <StudioWeeklyTimings timings={timings} setTimings={setTimings} />\n\n        <h3\n          style={{\n            margin: \"32px 0 0 0\",\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Social Media Links\n        </h3>\n        <Row>\n          <Col md={4}>\n            <Form.Label>Instagram</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.instagram : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"Instagram Link\"\n              name=\"instagram\"\n            />\n          </Col>\n          <Col md={4}>\n            <Form.Label>Facebook</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.facebook : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"Facebook Link\"\n              name=\"facebook\"\n            />\n          </Col>\n          <Col md={4}>\n            <Form.Label>YouTube</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.youtube : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"YouTube Link\"\n              name=\"youtube\"\n            />\n          </Col>\n          <Col md={4}>\n            <Form.Label>Twitter</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.twitter : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"Twitter Link\"\n              name=\"twitter\"\n            />\n          </Col>\n        </Row>\n\n        <br></br>\n        {studioId && studioId.length > 0 && selectedStudioId && (\n          <>\n            <div>\n              <ImageUpload\n                entityId={selectedStudioId}\n                title={\"Studio Images\"}\n                storageFolder={STORAGES.STUDIOIMAGES}\n                maxImageCount={10} minImageCount={5}\n              />\n            </div>\n            <br />\n            <div>\n              <ImageUpload\n                entityId={selectedStudioId}\n                title={\"Studio Icon\"}\n                storageFolder={STORAGES.STUDIOICON}\n                maxImageCount={1} minImageCount={1}\n              />\n            </div>\n            <div>\n              <ImageUpload\n                entityId={selectedStudioId}\n                title={\"Studio Announcement Images\"}\n                storageFolder={STORAGES.STUDIOANNOUNCEMENTS}\n                maxImageCount={10} minImageCount={0}\n              />\n            </div>\n            <br />\n          </>\n        )}\n        {showUpdateSuccessAlert && (\n          <AlertPopup\n            type=\"info\"\n            message=\"Studio Updated successfully\"\n            timeOfDisplay={3000}\n            fontSize=\"10px\"\n            fontWeight=\"bold\"\n          />\n        )}\n        {showUpdateErrorAlert && (\n          <AlertPopup\n            type=\"warning\"\n            message=\"Studio Update failed\"\n            timeOfDisplay={3000}\n            fontSize=\"10px\"\n            fontWeight=\"bold\"\n          />\n        )}\n        <Button\n          style={{\n            backgroundColor: isDarkModeOn ? \"#892CDC\" : \"black\",\n            color: \"white\",\n          }}\n          type=\"submit\"\n          disabled={isSubmitting}\n        >\n          Update Studio\n        </Button>\n        {isSubmitting && <LinearProgress />}\n      </Form>\n    </div>\n  );\n}\n\nexport default StudioUpdate;\n","import React from 'react';\nimport { Row, Col  } from 'react-bootstrap';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,collection,where,getDocs,query } from \"firebase/firestore\";\nimport { COLLECTIONS } from '../constants';\nimport StudioAdd from '../Components/StudioAdd';\nimport StudioUpdate from '../Components/StudioUpdate';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { useAuth } from '../context/AuthContext';\nimport CardSliderCard from '../Components/CardSliderCard';\nimport Tab from '@mui/material/Tab';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\nimport { Box } from '@mui/material';\n\n\n\nfunction CreatorStudio() {\n  const [studio, setStudio] = useState([]);\n  const [studioId, setStudioId] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  const [instructors, setInstructors] = useState([]);\n  const [isCreator, setIsCreator] = useState(false);\n  const [premiumTill, setPremiumTill] = useState(-1);\n  const { currentUser } = useAuth();\n  const [value, setValue] = React.useState('1');\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n\n  useEffect(() => {\n    console.log(\"Creator Studio getCreatorMode\")\n    const getCreatorMode = async (event) => {\n      try{\n      const userRef = doc(db, \"User\", currentUser.uid);\n      const userSnap = await getDoc(userRef);\n      if (userSnap.exists()) {\n        console.log(\"User there\",userSnap.data(),userSnap.data().CreatorMode,JSON.parse(localStorage.getItem('userInfoFull')));\n        if(userSnap.data() != null){\n          \n          setIsCreator(userSnap.data().CreatorMode)\n          setPremiumTill(userSnap.data().isPremium)\n          console.log(\"Premium Till\",premiumTill,userSnap.data())\n        }else{\n          console.log(\"userSnap.data() null\")\n        }\n      } else {\n        console.log(\"User not found but workshop created... error\");\n      }\n      }catch(error){\n        console.log(\" error\");\n      }\n    }\n  \n    getCreatorMode();\n  }, [isCreator]); // Run once on mount\n\n    // Fetch instructors for the current user\n  useEffect(() => {\n    console.log(\"Creator Studio fetchInstructors\")\n  const fetchInstructors = async () => {\n    let userId = null;\n    if (\n      JSON.parse(localStorage.getItem('userInfo')) &&\n      JSON.parse(localStorage.getItem('userInfo')).UserId\n    ) {\n      userId = JSON.parse(localStorage.getItem('userInfo')).UserId;\n    }\n    if (!userId) {\n      console.log('User not found');\n      alert('User not found');\n      return;\n    }\n\n    const instructorRef = collection(db, COLLECTIONS.INSTRUCTORS);\n    const q = query(instructorRef, where('createdBy', '==', userId));\n    const querySnapshot = await getDocs(q);\n    \n    const instructorsList = [];\n    querySnapshot.forEach((doc) => {\n      instructorsList.push({\n        id: doc.id,\n        name: doc.data().name,      \n      });\n    });\n    console.log(\"Hiii\", instructorsList)\n    setInstructors(instructorsList);\n  };\n\n  fetchInstructors();\n  }, []);\n\n \n  useEffect(() => {\n    console.log(\"Creator Studio getStudioCreated\")\n    const getStudioCreated = async ()=>{\n      const q = query(collection(db, COLLECTIONS.STUDIO), where(\"UserId\", \"==\", JSON.parse(localStorage.getItem('userInfo')).UserId)    );\n      console.log(\"Hiiii\",JSON.parse(localStorage.getItem('userInfo')).UserId)\n      const querySnapshot = await getDocs(q);\n      console.log(\"Studios : \",querySnapshot)\n      const studiosOfUser = querySnapshot.docs.filter(doc => doc.data().studioName).map(doc => \n        { const data = doc.data();\n          return {\n            id: doc.id, // Include the document ID in the data\n            ...data\n          };\n      });\n      localStorage.setItem(\"StudioCreated\", JSON.stringify(studiosOfUser));\n      setStudio(studiosOfUser);\n      setStudioId(studiosOfUser.map((studio) => (String(studio.studioName) + \" :\" + String(studio.id))));\n      console.log(studio)\n      console.log(\"studioId\",studioId)\n    };\n      \n      getStudioCreated();\n    },[setStudio]);\n \n  useEffect(() => {\n    console.log(\"Creator Studio setStudioId\")\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser = JSON.parse(localStorage.getItem('StudioCreated')) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map((studio) => `${studio.studioName} : ${studio.id}`);\n    setStudioId(studioIdList);\n\n    console.log(\"studio:\", studio);\n    console.log(\"studioId\", studioId);\n  }, [setStudioId]);\n\n  console.log(\"studio :\",studio)\n  return (\n    <div>\n      <br></br>\n      {isCreator?(\n        \n       <>\n       <Box sx={{ width: '100%', typography: 'body1' }}>\n      <TabContext value={value}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <TabList style={{color: isDarkModeOn ? 'white' : 'black'}} onChange={handleChange} aria-label=\"lab API tabs example\">\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Add Studio\" value=\"1\" />\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Update Studio\" value=\"2\" />\n          \n          </TabList>\n        </Box>\n        <TabPanel value=\"1\">\n\n        <StudioAdd instructors={instructors} />\n        </TabPanel>\n        <TabPanel value=\"2\">\n        <>\n        <StudioUpdate\n                  studio={studio}\n                  setStudio={setStudio}\n                  instructors={instructors}\n                  studioId={studioId}\n                  setStudioId={setStudioId}\n                />\n        </>\n    \n        </TabPanel>\n        \n      </TabContext>\n    </Box>\n      </>\n      ):\"\"}\n \n      <h3 style={{color: isDarkModeOn ? 'white' : 'black'}}>Your Studios:</h3>\n       <ul>\n      <Row xs={1} md={3} lg={4} className=\"g-4\">\n        {studio.length > 0 ? (\n          studio.map((studio, index) => (\n            <Col key={index}>\n              <a href={`#/studio/${studio.studioId}`} style={{ textDecoration: \"none\" }}>\n                <CardSliderCard studio={studio}/>\n              </a>\n          </Col>\n          ))\n        ) : (\n          <p style={{color: isDarkModeOn ? 'white' : 'black'}}>No studio yet!</p>\n        )}\n      </Row>\n      <br/>\n      </ul>\n    </div>\n  )\n}\nexport default CreatorStudio"],"names":["_ref","studio","_jsx","href","concat","id","children","NStudioCard","data","img_src","ImageUpload","forwardRef","ref","entityId","storageFolder","title","maxImageCount","minImageCount","updateMode","disable","setIsLoading","useLoader","showSnackbar","useSnackbar","imageInputRef","useRef","selectedFiles","setSelectedFiles","useState","uploadedFiles","setUploadedFiles","newFiles","setNewFiles","isDarkModeOn","useSelector","selectDarkModeStatus","progressDelete","setProgressDelete","progressUpdate","setProgressUpdate","isUploadSuccessful","setIsUploadSuccessful","console","log","filesizes","bytes","decimals","arguments","length","undefined","dm","i","Math","floor","parseFloat","pow","toFixed","useEffect","fetchStudioImages","truncatedFiles","slice","alert","current","value","calculateDelta","selectedFileIds","map","file","uploadedFileIds","imagesToDelete","filter","includes","newImages","async","folderPath","folderRef","firebaseRef","storage","fileList","listAll","files","Promise","all","items","downloadURL","getDownloadURL","fileRef","name","filename","fileURL","error","useImperativeHandle","isValid","className","style","display","width","justifyContent","flex","_jsxs","backgroundColor","STORAGES","STUDIOIMAGES","type","onChange","e","Array","from","target","updatedFiles","forEach","reader","FileReader","onloadend","push","shortid","filetype","fileimage","result","datetime","lastModifiedDate","toLocaleString","filesize","size","prevFiles","readAsDataURL","multiple","position","Card","sx","maxWidth","match","src","alt","maxHeight","objectFit","IconButton","disabled","onClick","handleDeleteSelectedFile","window","confirm","top","right","DeleteIcon","color","CardContent","deleteAllImagesInFolder","uploadImages","deleteImages","hidden","max","defaultProps","studioId","cardStyle","padding","marginRight","boxShadow","transition","variant","transform","AspectRatio","ratio","iconUrl","STUDIO_ICON_DEFAULT","loading","height","overflow","Stack","direction","spacing","bottom","left","danceStyles","split","form","index","Chip","marginBottom","fontSize","bgcolor","danceStylesColorChips","trim","paddingTop","freeTrialAvailable","marginLeft","COLORS","LIME","Box","columnGap","Link","alignSelf","fontWeight","textColor","underline","overlay","whiteSpace","textOverflow","studioName","avgRating","Typography","flexShrink","level","street","zIndex","borderRadius","Favorite","minFee","Button","_defaultTime$split$","show","handleClose","handleSelect","defaultTime","startTime_i","endTime_i","renderTimeOptions","defaultValue","timeOptions","generateTimeOptions","options","option_AM","option_PM","hours","minutes","formattedHours","toString","padStart","formattedMinutes","timeString","formattedHours12","_Fragment","option","Modal","onHide","Header","closeButton","Title","Body","Row","Col","Form","Group","Label","Control","as","lineHeight","Footer","dayMapping","M","T","W","Th","F","St","Sn","updateDaysFormat","records","updatedDays","day","Set","daysOfWeek","categoryMap","Kids","Adults","Women_Only","Men_Only","Seniors","All","Couples","Families","tableData","setTableData","instructorNamesWithIds","showTimePicker","setShowTimePicker","selectedRowIndex","setSelectedRowIndex","selectedRow","setSelectedRow","danceStylesOptions","setDefaultTime","handleTableChange","field","prevData","isArray","join","newData","handleTimePickerClose","handleTimeSelect","startTime","endTime","currentTime","time","currentStartTime","currentEndTime","Table","bordered","border","textAlign","minWidth","handleAddRow","danceForms","days","instructors","fee","status","freeTrial","classCategory","FaPlus","row","_row$days","_row$days$split","_row$days$split$call","_row$days$split$call$","_tableData$selectedRo","MultiSelect","call","event","placeholder","maxSelectedLabels","handleTimePickerOpen","TimeRangePicker","Autocomplete","_","values","renderInput","params","TextField","Object","idx","splice","handleRemoveRow","FaMinus","libraries","apiKey","PinMarker","FaMapMarkerAlt","selectedLocation","setSelectedLocation","mapAddress","setMapAddress","center","setCenter","lat","lng","isLoaded","loadError","useJsApiLoader","googleMapsApiKey","PlacesAutocomplete","onSelect","results","geocodeByAddress","selectedAddress","latLng","getLatLng","_ref3","getInputProps","suggestions","getSuggestionItemProps","suggestion","_createElement","key","placeId","description","GoogleMapReact","bootstrapURLKeys","defaultCenter","defaultZoom","_ref2","google","maps","Geocoder","geocode","location","formatted_address","_form$studioName","_form$street","_form$city","StudioId","navigate","useNavigate","document","getElementById","streetName","city","textTransform","marginTop","MUIButton","mt","px","jsx","isOn","handleToggle","alignItems","cursor","timings","setTimings","updatedDayTimings","isDayClosed","open","dayOrder","xs","sm","md","lg","charAt","toUpperCase","CustomSwitch","isClosed","close","toggleDayClosed","slot","removeTimeSlot","MuiButton","addTimeSlot","encodeToUnicode","text","utf8Encoded","TextEncoder","encode","String","fromCharCode","initialStudioTimings","tuesday","wednesday","thursday","friday","saturday","sunday","monday","previousDraftState","effectDraftRef","logoImageUploadRef","studioImageUploadRef","anouncementImageUploadRef","newStudioId","setNewStudioId","selectedInstructors","setSelectedInstructors","selectedDanceStyles","setSelectedDanceStyles","selectedAmenities","setSelectedAmenities","instructor","isReady","setIsReady","isSubmitting","setIsSubmitting","locationOptions","indianCities","stateOptions","indianStates","amenityKeys","keys","AMENITIES_ICONS","activeStep","setActiveStep","validateStep1","aboutStudio","founderName","aboutFounder","mobileNumber","whatsappNumber","numberOfHalls","maximumOccupancy","validateStep2","every","slots","entry","_entry$className","_entry$danceForms","_entry$days","_entry$time","_entry$fee","_entry$level","_entry$classCategory$","validateStep3","buildingName","pincode","state","handleNext","errorMessage","validateStep4","_logoImageUploadRef$c","validateStep5","_studioImageUploadRef","_anouncementImageUplo","prevActiveStep","handleBack","darkTheme","createTheme","palette","mode","saveDraft","q","query","collection","db","DRAFT_COLLECTIONS","DRAFT_STUDIOS","where","JSON","parse","localStorage","getItem","UserId","querySnapshot","getDocs","empty","studios","doc","foundStudio","studioRef","reduce","accumulator","currentState","mailAddress","instructorsNames","landmark","country","geolocation","gstNumber","enrolledId","reviews","author","displayName","isPremium","addAmenities","enrollmentProcess","creatorEmail","email","instagram","facebook","youtube","twitter","visibilty","isEqual","updateDoc","addDoc","unicodeString","c","charCodeAt","TextDecoder","decode","Uint8Array","decodeUnicode","main","previousState","setInterval","err","clearInterval","Stepper","alternativeLabel","label","Step","StepLabel","onSubmit","preventDefault","errorMessages","Boolean","_JSON$parse","currentUserEmail","studioData","notifyEmails","metaData","entity_name","response","postData","COLLECTIONS","STUDIO","ok","json","deleteDoc","resetDraft","controlId","rows","minHeight","minheight","ThemeProvider","theme","CssBaseline","handleDanceStylesChange","handleInstructorChange","rel","textDecoration","overflowX","scrollbarColor","StudioTable","handleAmentiesChange","margin","StudioWeeklyTimings","MapsInput","LinearProgress","STUDIOICON","STUDIOANNOUNCEMENTS","SuccessMessage","message","timeOfDisplay","fontStyle","showAlert","setShowAlert","timer","setTimeout","clearTimeout","Container","Alert","onClose","dismissible","setStudio","setStudioId","selectedStudio","setSelectedStudio","selectedStudioId","setSelectedStudioId","selectedStudioFrozenClassRows","setSelectedStudioFrozenClassRows","showUpdateSuccessAlert","setShowUpdateSuccessAlert","showUpdateErrorAlert","setShowUpdateErrorAlert","studiosOfUser","studioIdList","maxIndex","Number","validate","nameIdLocal","nameId","indexOfColon","lastIndexOf","substring","dbPayload","putData","reset","selectedId","pop","studioDoc","getDoc","exists","loc","studioItem","newCity","prevState","handleAmenitiesChange","newRowKey","rowKey","_tableData$rowKey","_tableData$rowKey$day","_tableData$rowKey$day2","_tableData$rowKey$day3","_tableData$rowKey$day4","_tableData$index","_tableData$index$clas","AlertPopup","setInstructors","isCreator","setIsCreator","premiumTill","setPremiumTill","currentUser","useAuth","setValue","React","userRef","uid","userSnap","CreatorMode","getCreatorMode","userId","instructorRef","INSTRUCTORS","instructorsList","fetchInstructors","docs","setItem","stringify","getStudioCreated","typography","TabContext","borderBottom","borderColor","TabList","handleChange","newValue","Tab","TabPanel","StudioAdd","StudioUpdate","CardSliderCard"],"sourceRoot":""}