{"version":3,"file":"static/js/8692.3d2ec437.chunk.js","mappings":"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","sources":["Components/CardSliderCard.js","Components/NStudioCard.js","Components/TimeRangePicker.js","utils/mapping.js","Components/StudioTable.js","Components/MapsInput.js","Components/SucessPage.js","Components/CustomSwitch.js","Components/StudioWeeklyTiming.jsx","Components/StudioAdd.js","Components/AlertPopup.js","Components/StudioUpdate.js","Screens/CreatorStudio.js"],"sourcesContent":["import React from 'react';\nimport NStudioCard from './NStudioCard';\n\nconst CardSliderCard = ({ studio }) => {\n  return (\n    <a href={`#/studio/${studio.id}`}>\n    <NStudioCard data={studio} img_src={\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}/>\n    </a>\n\n  );\n};\n\nexport default CardSliderCard;\n","\nimport React from 'react';\nimport AspectRatio from '@mui/joy/AspectRatio';\nimport Card from '@mui/joy/Card';\nimport CardContent from '@mui/joy/CardContent';\nimport Chip from '@mui/joy/Chip';\nimport Box from '@mui/joy/Box';\nimport Button from '@mui/material/Button';\nimport Link from '@mui/joy/Link';\nimport Typography from '@mui/joy/Typography';\nimport { Stack } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport { CHIP_LEVELS_DESIGN, COLORS, danceStylesColorChips, STUDIO_ICON_DEFAULT } from '../constants';\nimport IconButton from '@mui/joy/IconButton';\nimport Favorite from '@mui/icons-material/Favorite';\n\n\nexport default function NStudioCard({img_src,data}) {\n    const isDarkModeOn = useSelector(selectDarkModeStatus);\n    \n    const studioId = data.id?data.id:data.studioId;\n\n    const cardStyle = {\n      backgroundColor: isDarkModeOn ? '#444' : 'white',\n      padding: '0px',\n      color: isDarkModeOn ? 'white' : 'black',\n      marginRight: \"10px\",\n      width: 320,\n      maxWidth: \"100%\",\n      boxShadow: 'lg',\n      transition: 'opacity 0.3s ease',\n    };\n  \n    const cardHoverStyle = {\n      transform: 'scale(1.01)',\n    };\n  \n  return (\n    <Card variant=\"solid\" sx={{\n      ...cardStyle,\n      '&:hover': cardHoverStyle,\n    }}>\n      \n        <AspectRatio ratio=\"1.78\" style={{ position: 'relative'}}>\n          <img\n            src={data && data.iconUrl ? data.iconUrl :STUDIO_ICON_DEFAULT}\n            loading=\"lazy\"\n            alt=\"Studio Image\"\n            style={{ maxWidth: '100%', height: 'auto', overflow: 'hidden' }}\n            \n          />\n          <Stack direction=\"row\" spacing={2} style={{ position: 'absolute', bottom: 0, left: 0, padding: '1px' }}>\n        {data && data.danceStyles && typeof data.danceStyles === 'string' ? (data.danceStyles.split(\",\").slice(0, 3).map((form, index) => (\n        <Chip\n            key={index}\n            color={index % 2 === 0 ? \"danger\" : \"success\"}  \n            sx={{ marginBottom: \"10px\", fontSize: '0.8rem',  \n                    bgcolor: danceStylesColorChips[index].backgroundColor,\n                    color: danceStylesColorChips[index].color, \n            }}\n        >\n            {form.trim()}\n        </Chip>\n        ))):(\n            <Chip\n            key={10}\n            color={10 % 2 === 0 ? \"danger\" : \"success\"} \n            style={{ marginBottom: \"10px\", fontSize: '0.8rem' }}\n        >\n            {\"No danceforms\"}\n        </Chip>\n        )}\n\n        </Stack>\n\n        <Stack\n            direction=\"row\"\n            spacing={2}\n            style={{ position: \"absolute\", top: 0, left: 0, padding: \"1px\", paddingTop: \"1px\" }}\n          >\n            {data.freeTrialAvailable === \"true\" || data.freeTrialAvailable === true && (\n                <Chip\n                  key={1}\n                 \n                  sx={{\n                    marginLeft: \"10px\",\n                    marginBottom: \"10px\",\n                    fontSize: \"0.8rem\",\n                    bgcolor: COLORS.LIME.backgroundColor,  // Set the background color\n                    color: COLORS.LIME.color,  // Set the text color\n                  }}\n                >\n                  {'Free Trial Available'}\n                </Chip>\n            )}\n          </Stack>\n\n        </AspectRatio>\n      <CardContent style={{ padding: '10px' }}>\n        <Box display=\"flex\" justifyContent=\"space-between\" columnGap={1}>\n          <Link\n            alignSelf=\"center\"\n            href={`#/studio/${studioId}`}\n            fontWeight=\"bold\"\n            color=\"neutral\"\n            textColor=\"text.primary\"\n            underline='none'\n            overlay\n            whiteSpace='nowrap'\n            overflow='hidden'\n            textOverflow='ellipsis'\n            style={{ color: isDarkModeOn ? 'white' : 'black' }}\n          >\n            {data && data.studioName ? data.studioName : \"    \"}\n          </Link>\n          {data && data.avgRating && data.avgRating>0 ?\n            <Typography width={52} flexShrink={0} alignSelf=\"center\" style={{ color: isDarkModeOn ? 'white' : 'black' }}>\n              ⭐ {data.avgRating.toFixed(1)}\n            </Typography> : null\n          }\n        </Box>\n        <Typography style={{ color: isDarkModeOn ? 'white' : 'black' }} level=\"body-xs\">{data.street ? data.street : \".  \"}</Typography>\n        <IconButton\n          hidden\n          aria-label=\"Like minimal photography\"\n          size=\"md\"\n          variant=\"solid\"\n          color=\"danger\"\n          sx={{\n            position: 'absolute',\n            zIndex: 2,\n            borderRadius: '50%',\n            right: '1rem',\n            bottom: '2rem',\n            transform: 'translateY(50%)',\n          }}\n        >\n          <Favorite />\n        </IconButton>\n        <Box display=\"flex\" justifyContent=\"space-between\">\n          <Typography alignSelf=\"center\" fontSize={12} style={{ color: isDarkModeOn ? 'white' : 'black' }}>\n            {data && data.minFee && data.minFee>=0 &&(`@ ₹${data.minFee} onwards`)}\n          </Typography>\n          <Button\n            size='small'\n            variant=\"contained\"\n            sx={{\n              alignSelf: \"center\",\n              color: 'white',\n              backgroundColor: '#735EAB',\n              '&:hover': {\n                backgroundColor: '#735EAB',\n                color: 'white',\n              },\n              '&.Mui-disabled': {\n                backgroundColor: isDarkModeOn ? 'rgba(115, 94, 171, 0.5)' : 'rgba(115, 94, 171, 0.3)',\n                color: 'rgba(255, 255, 255, 0.5)',\n              },\n            }}\n            type='button'\n          >\n            Explore\n          </Button>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}","import React from 'react';\nimport { Modal, Form, Row, Col, Button } from 'react-bootstrap';\n\nconst TimeRangePicker = ({ show, handleClose, handleSelect, defaultTime }) => {\n  //console.log(\"TimeRangePicker\",defaultTime)\n  const startTime_i = defaultTime.split('-')[0].trim();\n  const endTime_i = defaultTime.split('-')[1]?.trim();\n\n  //console.log(startTime_i,endTime_i,defaultTime)\n\n  const generateTimeOptions = () => {\n    const options = [];\n    let option_AM = [];\n    let option_PM = [];\n    for (let hours = 0; hours < 24; hours++) {\n      for (let minutes = 0; minutes < 60; minutes += 15) {\n        const formattedHours = hours.toString().padStart(2, '0');\n        const formattedMinutes = minutes.toString().padStart(2, '0');\n        const timeString = `${formattedHours}:${formattedMinutes}`;\n  \n        if (hours < 12) {\n          option_AM.push(`${timeString} AM`);\n        } else {\n          const formattedHours12 = (hours - 12).toString().padStart(2, '0');\n          option_PM.push(`${formattedHours12}:${formattedMinutes} PM`);\n        }\n      }\n    }\n\n    for (let i = 0; i < option_AM.length || i < option_PM.length; i++) {\n      if (i < option_AM.length) {\n        options.push(option_AM[i]);\n      }\n      if (i < option_PM.length) {\n        options.push(option_PM[i]);\n      }\n    }\n    \n\n  \n    return options;\n  };\n  \n\n  const renderTimeOptions = (defaultValue) => {\n    console.log(defaultValue);\n    const timeOptions = generateTimeOptions();\n  \n    return (\n      <>\n        <option value={defaultValue}>{defaultValue}</option>\n        {timeOptions.map((option) => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </>\n    );\n  };\n  \n  \n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Select Time</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col>\n          <Form.Group >\n          <Form.Label >\n            Start Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(e.target.value, null)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(startTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n          <Col>\n          <Form.Group>\n          <Form.Label >\n            End Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(null, e.target.value)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(endTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={handleClose}>Save</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default TimeRangePicker;\n","const dayMapping = {\n  M: \"Mon\",\n  T: \"Tues\",\n  W: \"Wed\",\n  Th: \"Thurs\",\n  F: \"Fri\",\n  St: \"Sat\",\n  Sn: \"Sun\",\n};\n\nexport const updateDaysFormat = (records) => {\n  const updatedDays = records.map((day) => dayMapping[day] || day);\n\n  return [...new Set(updatedDays)];\n};\n","import React, { useState } from 'react';\nimport { Form, Table, Button } from 'react-bootstrap';\nimport { FaPlus, FaMinus } from 'react-icons/fa';\nimport './StudioTable.css'; // Import the CSS file for styling\nimport  TimeRangePicker from './TimeRangePicker';\nimport danceStyles from '../danceStyles.json';\nimport { Autocomplete, TextField } from '@mui/material';\n\nimport { MultiSelect } from 'primereact/multiselect';\nimport \"primereact/resources/primereact.css\";\nimport \"primereact/resources/themes/saga-blue/theme.css\";\nimport { updateDaysFormat } from '../utils/mapping';\n\nconst daysOfWeek = ['Mon','Tues','Wed','Thurs','Fri','Sat','Sun'];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\"\n};\n\nfunction StudioTable({ tableData = [], setTableData, instructorNamesWithIds }) {\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const danceStylesOptions = danceStyles.danceStyles;\n  const [defaultTime, setDefaultTime] =  useState('12:00 PM - 01:00 PM')\n\n  const handleAddRow = () => {\n    setTableData((prevData) => [...prevData, { className: '', danceForms: '', days: '', time: '12:00 PM - 01:00 PM', instructors: [], fee:'',level:'' ,status: '',freeTrial: false, classCategory: []  }]);\n  };\n\n  const handleRemoveRow = (index) => {\n    if (tableData.length - 1 === 0) return;\n\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      newData.splice(index, 1);\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if(field===\"days\"){\n        value = Array.isArray(value) ? value.join(',') : value; \n      }\n      console.log(tableData)\n      const newData = [...prevData];\n      newData[index][field] = value;\n      return newData;\n    });\n  };\n\n  const handleTimePickerOpen = (index,time) => {\n    setDefaultTime(time)\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null); // Reset selected row index when closing time picker\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      \n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n    \n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(' - ');\n    \n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n      \n      return newData;\n    });\n  \n    setSelectedRow(selectedRowIndex);\n\n  };\n\n  return (\n    <>\n      <Table bordered variant=\"light\">\n        <thead>\n          <tr style={{border: '1px solid black'}}>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Name</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Dance Form</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Days</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Time</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'20rem', border: '1px solid black'}}>Instructors</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Fee (₹)</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Level</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Free Trial</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Category</th>\n            <th style={{padding:'0rem'}}>\n              <Button variant=\"primary\" onClick={handleAddRow}>\n                <FaPlus />\n              </Button>\n            </th>\n          </tr>\n        </thead>\n        <tbody style={{border: '1px solid black'}}>\n          {tableData.map((row, index) => (\n            <tr key={index} className={selectedRow === index ? 'selected-row' : ''}>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  type=\"text\"\n                  value={row.className}\n                  onChange={(e) => handleTableChange(index, 'className', e.target.value)}\n                  \n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n              < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.danceForms}\n                  onChange={(e) => handleTableChange(index, 'danceForms', e.target.value)}\n                >\n                  <option value=\"\">Select a dance form</option>\n                  {danceStylesOptions.map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </Form.Control>\n\n              </td>\n              \n              <td style={{ padding:'0rem',minWidth:'15rem', border: '1px solid black'}} className=\"m-0 p-0\">\n                <MultiSelect value={row.days && updateDaysFormat(row?.days?.split?.(',')?.filter?.(day => day !== '')) } \n                    onChange={(event) => handleTableChange(index, 'days', event.target.value)}\n                    options={daysOfWeek}\n                    placeholder=\"class days\" maxSelectedLabels={7} className=\"w-full md:w-20rem\"\n                  />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.time}\n                  //onClick={() => handleTimePickerOpen(index,row.time)}\n                  onClick={() => handleTimePickerOpen(index,row.time)}\n                  \n                />\n                {showTimePicker && (\n                <TimeRangePicker\n                  show={showTimePicker}\n                  handleClose={handleTimePickerClose}\n                  handleSelect={handleTimeSelect}\n                  defaultTime={tableData[selectedRowIndex]?.time || \"00:00-00:00\"}\n                />\n              )}\n\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black', width:'20rem'}}>\n                <Autocomplete\n                  multiple\n                  id=\"tags-standard\"\n                  options={instructorNamesWithIds}\n                  value={row.instructors}\n                  onChange={(_, values) => handleTableChange(index, 'instructors', values)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Instructors\"\n                    />\n                  )}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"number\"\n                  value={row.fee}\n                  onChange={(e) => handleTableChange(index, 'fee', e.target.value)}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.level}\n                  onChange={(e) => handleTableChange(index, 'level', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value=\"Beginner\">Beginner</option>\n                      <option value=\"Intermediate\">Intermediate</option>\n                      <option value=\"Advanced\">Advanced</option>\n                      <option value=\"Misc\">Misc</option>\n\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.freeTrial}\n                  onChange={(e) => handleTableChange(index, 'freeTrial', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value={true}>Yes</option>\n                      <option value={false}>No</option>\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem', width:'20rem'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={Array.isArray(row.classCategory) && row.classCategory.length > 0 ? row.classCategory[0] : \"\"}\n                  onChange={(e) => handleTableChange(index, 'classCategory', [e.target.value])}\n                >\n                  <option value=\"\">Select Class Category</option>\n                  {Object.values(categoryMap).map((value, idx) => <option key={idx} value={value}>{value}</option>)}\n                </Form.Control>\n              </td>\n              <td style={{padding:'0rem'}}>\n                <Button variant=\"danger\" onClick={() => handleRemoveRow(index)}>\n                  <FaMinus />\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>      \n    </>\n  );\n}\n\nexport default StudioTable;\n\n/*\n                <Autocomplete\n                  multiple\n                  id={`days-autocomplete-${index}`}\n                  options={daysOfWeekOptions}\n                  getOptionLabel={(option) => option.value}\n                  value={row.days.split(',').filter(day => day !== '').map(day => daysOfWeekOptions.find(option => option.value === day))}\n                  onChange={(event, newValue) => handleTableChange(index, 'days', newValue.map(option => option.value).join(','))}\n                  renderInput={(params) => <TextField sx={{color:\"black\",backgroundColor:\"white\",width:\"100%\"}} {...params} />}\n                />\n              */","import React, { useState, useEffect } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { useJsApiLoader } from '@react-google-maps/api';\nimport { FaMapMarkerAlt } from 'react-icons/fa';\n\nconst libraries = ['places'];\nconst apiKey = \"AIzaSyAAPq5IMotbu90TZAEtyj8qgYyVJoROzsQ\";\n\nfunction MapsInput({ selectedLocation, setSelectedLocation, mapAddress, setMapAddress }) {\n    const [center, setCenter] = useState(selectedLocation || { lat: 28.6139, lng: 77.2090 });\n\n    const { isLoaded, loadError } = useJsApiLoader({\n        googleMapsApiKey: apiKey,\n        libraries,\n    });\n\n    useEffect(() => {\n        if (selectedLocation) {\n            setCenter(selectedLocation);\n        }\n    }, [selectedLocation]);\n\n    const handleSelect = async (selectedAddress) => {\n        const results = await geocodeByAddress(selectedAddress);\n        const latLng = await getLatLng(results[0]);\n\n        setMapAddress(selectedAddress);\n        setCenter(latLng);\n        setSelectedLocation(latLng);\n    };\n\n    const handleMapClick = async ({ lat, lng }) => {\n        const latLng = { lat, lng };\n        setSelectedLocation(latLng);\n        setCenter(latLng);\n\n        if (!mapAddress.trim()) {\n            try {\n                const geocoder = new window.google.maps.Geocoder();\n                geocoder.geocode({ location: latLng }, (results, status) => {\n                    if (status === 'OK' && results[0]) {\n                        setMapAddress(results[0].formatted_address);\n                    } else {\n                        console.error('Geocoder failed due to: ', status);\n                    }\n                });\n            } catch (error) {\n                console.error('Error with reverse geocoding:', error);\n            }\n        }\n    };\n\n    if (loadError) return <p>Error loading maps</p>;\n    if (!isLoaded) return <p>Loading maps...</p>;\n\n    return (\n        <div>\n            <br />\n\n            {/* Autocomplete Input */}\n            <PlacesAutocomplete\n                value={mapAddress}\n                onChange={setMapAddress}\n                onSelect={handleSelect}\n            >\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                    <div>\n                        <input\n                            {...getInputProps({\n                                placeholder: 'Enter address...',\n                                className: 'location-search-input',\n                                style: { height: '40px', fontSize: '16px', width: '100%' },\n                            })}\n                        />\n                        <div className=\"autocomplete-dropdown-container\">\n                            {loading && <div>Loading...</div>}\n                            {suggestions.map((suggestion) => (\n                                <div {...getSuggestionItemProps(suggestion, { className: 'suggestion-item' })} key={suggestion.placeId}>\n                                    <span>{suggestion.description}</span>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </PlacesAutocomplete>\n\n            <br />\n\n            {/* Google Map */}\n            <div style={{ height: '400px', width: '100%' }}>\n                <GoogleMapReact\n                    bootstrapURLKeys={{ key: apiKey }}\n                    defaultCenter={center}\n                    center={center}\n                    defaultZoom={16}\n                    onClick={handleMapClick}\n                >\n                    {selectedLocation && (\n                        <PinMarker lat={selectedLocation.lat} lng={selectedLocation.lng} />\n                    )}\n                </GoogleMapReact>\n            </div>\n        </div>\n    );\n}\n\nconst PinMarker = () => (\n    <div style={{ position: 'relative', textAlign: 'center' }}>\n        <FaMapMarkerAlt style={{ color: 'green', fontSize: '24px' }} />\n    </div>\n);\n\nexport default MapsInput;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport MUIButton from \"@mui/material/Button\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\n\nconst SuccessMessage = ({ StudioId }) => {\n  const navigate = useNavigate();\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n\n  const form = document.getElementById(\"addStudioForm\");\n\n  const studioName = form?.studioName?.value;\n  const streetName = form?.street?.value;\n  const city = form?.city?.value;\n\n  const navigateToStudio = () => {\n    navigate(`/studio/${StudioId}`);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-12\"> {/* Change col-md-5 to col-md-12 */}\n          <div className=\"_success message-box\">\n            <i className=\"fa fa-check-circle\" aria-hidden=\"true\"></i>\n            <h4\n              style={{\n                textTransform: \"none\",\n                marginTop: \"1rem\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            >\n              Your studio {studioName} (Studio ID: {StudioId}), located at {streetName} in {city} has been registered successfully 🎉\n            </h4>\n            <MUIButton\n              sx={{ mt: 1, px: 3, color: 'white', bgcolor: '#735EAB', textTransform: 'none', \"&:hover\": { bgcolor: \"#735EAB\" }, \"&:active\": { bgcolor: \"#735EAB\" } }}\n              variant=\"text\"\n              onClick={() => navigateToStudio()}\n            >\n              Check Now\n            </MUIButton>\n          </div>\n        </div>\n      </div>\n      <hr />\n\n      <style jsx>{`\n        ._success {\n          padding: 45px;\n          width: 100%;\n          text-align: center;\n          margin: 30px auto;\n        }\n\n        ._success i {\n          font-size: 55px;\n          color: #28a745;\n        }\n\n        ._success h2 {\n          margin-bottom: 12px;\n          font-size: 30px;\n          font-weight: 300;\n          line-height: 1.2;\n          margin-top: 10px;\n        }\n\n        ._success p {\n          margin-bottom: 0px;\n          font-size: 18px;\n          color: #495057;\n          font-weight: 100;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SuccessMessage;\n","import { Box } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\n\nconst CustomSwitch = ({ isOn, handleToggle }) => {\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n\n  return (\n    <Box\n      onClick={handleToggle}\n      style={{\n        width: \"40px\",\n        height: \"20px\",\n        borderRadius: \"10px\",\n        backgroundColor: isOn ? \"#f44336\" : isDarkModeOn ? \"#555\" : \"#ccc\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: isOn ? \"flex-end\" : \"flex-start\",\n        padding: \"2px\",\n        cursor: \"pointer\",\n        transition: \"background-color 0.3s\",\n      }}\n    >\n      <Box\n        style={{\n          width: \"16px\",\n          height: \"16px\",\n          borderRadius: \"50%\",\n          backgroundColor: \"#fff\",\n          boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n          transition: \"transform 0.3s\",\n        }}\n      />\n    </Box>\n  );\n};\n\nexport default CustomSwitch;\n","import { useSelector } from \"react-redux\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport { Button as MuiButton } from \"@mui/material\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\nimport dayOrder from \"../days.json\";\nimport CustomSwitch from \"./CustomSwitch\";\n\nconst generateTimeOptions = () => {\n  let option_AM = [];\n  let option_PM = [];\n  for (let hours = 0; hours < 24; hours++) {\n    for (let minutes = 0; minutes < 60; minutes += 15) {\n      const formattedHours = hours.toString().padStart(2, \"0\");\n      const formattedMinutes = minutes.toString().padStart(2, \"0\");\n      const timeString = `${formattedHours}:${formattedMinutes}`;\n\n      if (hours < 12) {\n        option_AM.push(`${timeString} AM`);\n      } else {\n        const formattedHours12 = (hours === 12 ? 12 : hours - 12)\n          .toString()\n          .padStart(2, \"0\");\n        option_PM.push(`${formattedHours12}:${formattedMinutes} PM`);\n      }\n    }\n  }\n\n  return [...option_AM, ...option_PM];\n};\n\nconst renderTimeOptions = (defaultValue) => {\n  const timeOptions = generateTimeOptions();\n  return (\n    <>\n      <option value={defaultValue}>{defaultValue}</option>\n      {timeOptions.map((option) => (\n        <option key={option} value={option}>\n          {option}\n        </option>\n      ))}\n    </>\n  );\n};\n\nconst StudioWeeklyTimings = ({ timings, setTimings }) => {\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n\n  const handleSelect = (day, index, type, value) => {\n    const updatedDayTimings = [...timings[day]];\n    updatedDayTimings[index][type] = value;\n    setTimings({ ...timings, [day]: updatedDayTimings });\n  };\n\n  const addTimeSlot = (day) => {\n    const updatedDayTimings = [\n      ...timings[day],\n      { open: \"09:00 AM\", close: \"06:00 PM\" },\n    ];\n    setTimings({ ...timings, [day]: updatedDayTimings });\n  };\n\n  const removeTimeSlot = (day, index) => {\n    const updatedDayTimings = [...timings[day]];\n    if (updatedDayTimings.length > 1) {\n      updatedDayTimings.splice(index, 1);\n      setTimings({ ...timings, [day]: updatedDayTimings });\n    }\n  };\n\n  const toggleDayClosed = (day) => {\n    const isClosed =\n      timings[day].length === 1 && timings[day][0].open === \"Closed\";\n    if (isClosed) {\n      setTimings({\n        ...timings,\n        [day]: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n      });\n    } else {\n      setTimings({\n        ...timings,\n        [day]: [{ open: \"Closed\", close: \"Closed\" }],\n      });\n    }\n  };\n\n  const isDayClosed = (day) => {\n    return timings[day].length === 1 && timings[day][0].open === \"Closed\";\n  };\n\n  return (\n    <Row className=\"gy-3\">\n      {dayOrder.map((day) => (\n        <Col xs={12} sm={6} md={4} lg={3} key={day}>\n          <div className=\"d-flex justify-content-between align-items-center mb-3\">\n            <span style={{ fontWeight: \"bold\" }}>\n              {day.charAt(0).toUpperCase() + day.slice(1)}\n            </span>\n            <div className=\"d-flex align-items-center gap-2\">\n              <span\n                style={{\n                  fontSize: \"0.8rem\",\n                  color: isDarkModeOn ? \"#aaa\" : \"#666\",\n                }}\n              >\n                {isDayClosed(day) ? \"Closed\" : \"Open\"}\n              </span>\n              <CustomSwitch\n                isOn={isDayClosed(day)}\n                handleToggle={() => toggleDayClosed(day)}\n              />\n            </div>\n          </div>\n\n          {!isDayClosed(day) ? (\n            timings[day].map((slot, index) => (\n              <Row key={index} className=\"mb-2 align-items-center\">\n                <Col xs={5}>\n                  <Form.Group>\n                    <Form.Label>Start Time</Form.Label>\n                    <Form.Control\n                      as=\"select\"\n                      value={slot.open}\n                      onChange={(e) =>\n                        handleSelect(day, index, \"open\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                        color: isDarkModeOn ? \"white\" : \"#333333\",\n                        backgroundColor: isDarkModeOn ? \"#333333\" : \"white\",\n                      }}\n                    >\n                      {renderTimeOptions(slot.open)}\n                    </Form.Control>\n                  </Form.Group>\n                </Col>\n                <Col xs={5}>\n                  <Form.Group>\n                    <Form.Label>End Time</Form.Label>\n                    <Form.Control\n                      as=\"select\"\n                      value={slot.close}\n                      onChange={(e) =>\n                        handleSelect(day, index, \"close\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                        color: isDarkModeOn ? \"white\" : \"#333333\",\n                        backgroundColor: isDarkModeOn ? \"#333333\" : \"white\",\n                      }}\n                    >\n                      {renderTimeOptions(slot.close)}\n                    </Form.Control>\n                  </Form.Group>\n                </Col>\n                <Col xs={2}>\n                  <Button\n                    variant=\"danger\"\n                    size=\"sm\"\n                    onClick={() => removeTimeSlot(day, index)}\n                    className=\"mt-4\"\n                  >\n                    -\n                  </Button>\n                </Col>\n              </Row>\n            ))\n          ) : (\n            <div className=\"text-muted mb-3\">Studio is closed on this day</div>\n          )}\n\n          {!isDayClosed(day) && (\n            <MuiButton\n              variant=\"contained\"\n              onClick={() => addTimeSlot(day)}\n              sx={{\n                color: isDarkModeOn ? \"black\" : \"white\",\n                bgcolor: isDarkModeOn ? \"white\" : \"black\",\n                \"&:hover\": { bgcolor: isDarkModeOn ? \"white\" : \"black\" },\n              }}\n            >\n              Add Time Slot\n            </MuiButton>\n          )}\n        </Col>\n      ))}\n    </Row>\n  );\n};\n\nexport default StudioWeeklyTimings;\n","import React, { useRef } from 'react'\nimport { Row, Col , Form } from 'react-bootstrap';\nimport {LinearProgress, Button as MuiButton} from '@mui/material';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,addDoc,updateDoc,collection,where,getDocs,query, deleteDoc } from \"firebase/firestore\";\nimport { COLLECTIONS, DRAFT_COLLECTIONS } from '../constants';\nimport StudioTable from './StudioTable';\nimport ImageUpload from './ImageUpload';\nimport { STORAGES } from '../constants';\nimport MapsInput from './MapsInput';\nimport { useSelector} from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport indianCities from '../cities.json';\nimport indianStates from '../states.json';\nimport danceStyles from '../danceStyles.json';\nimport { AMENITIES_ICONS } from '../constants';\nimport {Autocomplete,TextField} from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport {Stepper,Step,StepLabel} from '@mui/material';\nimport SuccessMessage from './SucessPage';\nimport { postData } from '../utils/common';\nimport { isEqual } from 'lodash';\nimport StudioWeeklyTimings from './StudioWeeklyTiming';\nimport { useSnackbar } from '../context/SnackbarContext';\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nconst initialStudioTimings = {\n  tuesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  wednesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  thursday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  friday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  saturday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  sunday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  monday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n}\n\nconst DRAFT_INTERVAL_TIME = 1000 * 10;\n\nfunction StudioAdd({instructors}) {\n    const previousDraftState = useRef(null);\n    const effectDraftRef = useRef(null);\n    const logoImageUploadRef = useRef(null);\n    const studioImageUploadRef = useRef(null);\n    const anouncementImageUploadRef = useRef(null);\n    const showSnackbar = useSnackbar();\n    const [newStudioId, setNewStudioId] = useState(\"\")\n    const [tableData, setTableData] = useState(\n      [{ className: '', danceForms: '', days: '', time: '', instructors: [], fee:'',level:'' ,status: '' ,freeTrial:false ,classCategory: []}],\n    );\n    const [selectedLocation, setSelectedLocation] = useState(null);\n    const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n    const [selectedInstructors, setSelectedInstructors] = useState([]);\n    const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n    const [selectedAmenities, setSelectedAmenities] = useState([]);\n    const instructorNamesWithIds = instructors.map((instructor) => `${instructor.name} - ${instructor.id}`);\n    const [isReady, setIsReady] = useState(false);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [timings, setTimings] = useState(initialStudioTimings);\n\n    // console.log(\"==============\");\n    // console.log(\"timings\", timings);\n    // console.log(\"==============\");\n\n    //const [dropdownVisible, setDropdownVisible] = useState(false);\n    const locationOptions = indianCities.cities;\n    const stateOptions = indianStates.states;\n    const danceStylesOptions = danceStyles.danceStyles;\n    const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n    const [activeStep, setActiveStep] = useState(0);\n    const [mapAddress, setMapAddress] = useState('');\n\n    const validateStep1 = () => {\n      const form = document.getElementById(\"addStudioForm\");\n\n      if (!form.studioName.value) return \"Studio name is required\";\n      if (!form.aboutStudio.value) return \"About Studio is required\";\n      if (!form.founderName.value) return \"Founder name is required\";\n      if (!form.aboutFounder.value) return \"About Founder is required\";\n      if (!form.mobileNumber.value) return \"Mobile number is required\";\n      if (!form.whatsappNumber.value) return \"WhatsApp number is required\";\n      if (!form.numberOfHalls.value) return \"Number of halls is required\";\n      if (!form.maximumOccupancy.value) return \"Maximum occupancy is required\";\n      if (!selectedDanceStyles.length) return \"At least one dance style must be selected\";\n    };\n\n    const validateStep2 = () => {\n      if (!Object.values(timings).every((slots) => slots.length > 0)) {\n        return \"All timing slots must be filled\";\n      }\n      if (!tableData.length) {\n        return \"At least one class entry is required\";\n      }\n      for (const entry of tableData) {\n        if (!entry.className?.trim()) return \"Class name is required\";\n        if (!entry.danceForms?.trim()) return \"Dance forms are required\";\n        if (!entry.days?.trim()) return \"Days are required\";\n        if (!entry.time?.trim()) return \"Time is required\";\n        if (!entry.fee?.trim()) return \"Fee is required\";\n        if (!entry.level?.trim()) return \"Level is required\";\n        if (!entry.instructors.length) return \"At least one instructor is required\";\n        if (!entry.classCategory.length || !entry.classCategory[0]?.trim()) return \"Class category is required\";\n      }\n    };\n\n    const validateStep3 = () => {\n      const form = document.getElementById(\"addStudioForm\");\n\n      if (!form.buildingName.value) return \"Building name is required\";\n      if (!form.street.value) return \"Street is required\";\n      if (!form.city.value) return \"City is required\";\n      if (!form.pincode.value) return \"Pincode is required\";\n      if (!form.state.value) return \"State is required\";\n      if (!mapAddress) return \"Address is required\";\n      if (!selectedLocation) return \"Location selection is required\";\n    };\n\n    const validateStep4 = () => {\n      if (!logoImageUploadRef.current?.isValid()) return \"Please upload studio logo before proceeding\"\n    };\n\n    const validateStep5 = () => {\n      if (!studioImageUploadRef.current?.isValid()) return \"Please upload studio images before proceeding\"\n      if (!anouncementImageUploadRef.current?.isValid()) return \"Please upload studio anouncement images before proceeding\"\n    };\n\n    const handleNext = () => {\n      let errorMessage = '';\n\n      if (activeStep === 0) errorMessage = validateStep1()\n\n      if (activeStep === 1) errorMessage = validateStep2()\n\n      if (activeStep === 2) errorMessage = validateStep3()\n        \n      if (activeStep === 3) errorMessage = validateStep4()\n\n      if (activeStep === 4) errorMessage = validateStep5()\n\n      if (errorMessage) {\n        return showSnackbar(errorMessage, 'error');\n      }\n\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n\n    const darkTheme = createTheme({\n      palette: {\n        mode: isDarkModeOn?'dark':'light',\n      },\n    });\n\n    const handleDanceStylesChange = (event, value) => {\n      setSelectedDanceStyles(value);\n    };  \n\n    const handleAmentiesChange = (event, value) => {\n      setSelectedAmenities(value);\n    };\n\n    const handleInstructorChange = (event, value) => {\n      setSelectedInstructors(value);\n    };\n\n    const resetDraft = async () => {\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n\n          await deleteDoc(studioRef);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n      const handleAddStudio = async (event) => {\n        event.preventDefault();\n\n        if (activeStep < 3) { // If user enter enter/return btn at any place it should validate all\n          const errorMessage1 = validateStep1();\n          const errorMessage2 = validateStep2();\n          const errorMessage3 = validateStep3();\n        \n          const errorMessages = [errorMessage1, errorMessage2, errorMessage3].filter(Boolean).join(', ');\n        \n          if (errorMessages) {\n            return showSnackbar(errorMessages, 'error');\n          }\n        }        \n\n        const title = event.target.studioName.value;\n        if (!title) {\n          return;\n        }\n        let isPremium=true\n        const newData = tableData.reduce((accumulator, current, index) => {\n          accumulator[index] = current;\n          return accumulator;\n        }, {});\n\n        try {\n          const currentUserEmail = JSON.parse(localStorage.getItem(\"userInfo\"))?.email;\n          const studioData = {\n              studioName: event.target.studioName.value,\n              aboutStudio: event.target.aboutStudio.value,\n              founderName: event.target.founderName.value,\n              aboutFounder: event.target.aboutFounder.value,\n              mobileNumber: event.target.mobileNumber.value,\n              whatsappNumber: event.target.whatsappNumber.value,\n              mailAddress: event.target.mailAddress.value,\n              danceStyles: selectedDanceStyles.join(\",\"),\n              numberOfHalls: event.target.numberOfHalls.value,\n              maximumOccupancy: event.target.maximumOccupancy.value,\n              instructorsNames: selectedInstructors,\n              status: 'OPEN',\n              tableData: newData,\n              buildingName: event.target.buildingName.value,\n              street: event.target.street.value,\n              city: event.target.city.value,\n              landmark: event.target.landmark.value,\n              pincode: event.target.pincode.value,\n              state: event.target.state.value,\n              country: \"India\",\n              mapAddress,\n              geolocation : selectedLocation,\n              gstNumber: event.target.gstNumber.value,\n              enrolledId:[],\n              reviews:[],\n              author: JSON.parse(localStorage.getItem('userInfo')).displayName,\n              UserId: JSON.parse(localStorage.getItem('userInfo')).UserId,\n              isPremium: isPremium,\n              addAmenities: selectedAmenities.join(\",\"),\n              enrollmentProcess: encodeToUnicode(event.target.enrollmentProcess.value),\n              creatorEmail: currentUserEmail,\n              instagram: event.target.instagram.value,\n              facebook: event.target.facebook.value,\n              youtube: event.target.youtube.value,\n              twitter: event.target.twitter.value,\n              visibilty:1,\n              timings\n          };\n            setIsSubmitting(true);\n            const notifyEmails = currentUserEmail\n            const metaData = {\n              entity_name: studioData.studioName,\n              city: studioData.city ,\n            }\n            const response = await postData(studioData,COLLECTIONS.STUDIO, notifyEmails, metaData) ;\n            if (response.ok) {\n              if (effectDraftRef.current) {\n                clearInterval(effectDraftRef.current);\n              }\n              const result = await response.json();\n              setNewStudioId(result.id)\n              resetDraft();\n              handleNext();\n            }\n        } catch (error) {\n          console.error(\"Error adding studio: \", error);\n        } finally {\n          setIsSubmitting(false);\n        }\n      };\n\n  const saveDraft = async () => {\n    const form = document.getElementById(\"addStudioForm\");\n\n    try {\n      const q = query(\n        collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n        where(\n          \"UserId\",\n          \"==\",\n          JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n        )\n      );\n  \n      const querySnapshot = await getDocs(q);\n  \n      if (!querySnapshot.empty) {\n        let studios = [];\n  \n        querySnapshot.forEach((doc) => {\n          studios.push({ id: doc.id, ...doc.data() });\n        });\n  \n        let foundStudio = studios[0];\n  \n        const studioRef = doc(\n          db,\n          DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n          foundStudio.id\n        );\n  \n        const newData = tableData.reduce((accumulator, current, index) => {\n          accumulator[index] = current;\n          return accumulator;\n        }, {});\n  \n        const currentState = {\n          studioName: form.studioName.value,\n          aboutStudio: form.aboutStudio.value,\n          founderName: form.founderName.value,\n          aboutFounder: form.aboutFounder.value,\n          mobileNumber: form.mobileNumber.value,\n          whatsappNumber: form.whatsappNumber.value,\n          mailAddress: form.mailAddress.value,\n          danceStyles: selectedDanceStyles.join(\",\"),\n          numberOfHalls: form.numberOfHalls.value,\n          maximumOccupancy: form.maximumOccupancy.value,\n          instructorsNames: selectedInstructors,\n          status: \"OPEN\",\n          tableData: newData,\n          buildingName: form.buildingName.value,\n          street: form.street.value,\n          city: form.city.value,\n          landmark: form.landmark.value,\n          pincode: form.pincode.value,\n          state: form.state.value,\n          country: \"India\",\n          mapAddress: mapAddress || '',\n          geolocation: selectedLocation,\n          gstNumber: form.gstNumber.value,\n          enrolledId: [],\n          reviews: [],\n          author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n          UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n          isPremium: true,\n          addAmenities: selectedAmenities.join(\",\"),\n          enrollmentProcess: encodeToUnicode(form.enrollmentProcess.value),\n          creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\")).email,\n          instagram: form.instagram.value,\n          facebook: form.facebook.value,\n          youtube: form.youtube.value,\n          twitter: form.twitter.value,\n          visibilty: 1,\n          timings,\n        };\n\n        if (!isEqual(previousDraftState.current, currentState)) {\n          await updateDoc(studioRef, currentState);\n          previousDraftState.current = currentState;\n          showSnackbar(\"Draft saved successfully!\", \"success\");\n        } else {\n          showSnackbar(\"No changes detected to save.\", \"info\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error saving draft: \", error);\n    }\n  };\n\n  useEffect(() => {\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          form.studioName.value = foundStudio.studioName;\n          form.aboutStudio.value = foundStudio.aboutStudio;\n          form.founderName.value = foundStudio.founderName;\n          form.aboutFounder.value = foundStudio.aboutFounder;\n          form.mobileNumber.value = foundStudio.mobileNumber;\n          form.whatsappNumber.value = foundStudio.whatsappNumber;\n          form.mailAddress.value = foundStudio.mailAddress;\n          setSelectedDanceStyles(\n            foundStudio.danceStyles.length\n              ? foundStudio.danceStyles.split(\",\")\n              : []\n          );\n          form.numberOfHalls.value = foundStudio.numberOfHalls;\n          form.maximumOccupancy.value = foundStudio.maximumOccupancy;\n          setSelectedInstructors(foundStudio.instructorsNames);\n          form.buildingName.value = foundStudio.buildingName;\n          form.street.value = foundStudio.street;\n          form.city.value = foundStudio.city;\n          form.landmark.value = foundStudio.landmark;\n          form.pincode.value = foundStudio.pincode;\n          form.state.value = foundStudio.state;\n          setMapAddress(foundStudio.mapAddress || '');\n          setSelectedLocation(foundStudio.geolocation);\n          // form.aadharNumber.value = foundStudio.aadharNumber;\n          form.gstNumber.value = foundStudio.gstNumber;\n          setTableData(Object.values(foundStudio.tableData));\n          setSelectedAmenities(\n            foundStudio.addAmenities.length\n              ? foundStudio.addAmenities.split(\",\")\n              : []\n          );\n          form.enrollmentProcess.value = decodeUnicode(\n            foundStudio.enrollmentProcess\n          );\n          form.instagram.value = foundStudio.instagram;\n          form.facebook.value = foundStudio.facebook;\n          form.youtube.value = foundStudio.youtube;\n          form.twitter.value = foundStudio.twitter;\n          if (foundStudio?.timings) setTimings(foundStudio.timings);\n        } else {\n          await addDoc(collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS), {\n            studioName: form.studioName.value,\n            aboutStudio: form.aboutStudio.value,\n            founderName: form.founderName.value,\n            aboutFounder: form.aboutFounder.value,\n            mobileNumber: form.mobileNumber.value,\n            whatsappNumber: form.whatsappNumber.value,\n            mailAddress: form.mailAddress.value,\n            danceStyles: selectedDanceStyles.join(\",\"),\n            numberOfHalls: form.numberOfHalls.value,\n            maximumOccupancy: form.maximumOccupancy.value,\n            instructorsNames: selectedInstructors,\n            status: \"OPEN\",\n            tableData: {\n              0: {\n                className: \"\",\n                danceForms: \"\",\n                days: \"\",\n                time: \"\",\n                instructors: [],\n                fee: \"\",\n                level: \"\",freeTrial:false, \n                classCategory: []\n              },\n            },\n            buildingName: form.buildingName.value,\n            street: form.street.value,\n            city: form.city.value,\n            landmark: form.landmark.value,\n            pincode: form.pincode.value,\n            state: form.state.value,\n            country: \"India\",\n            mapAddress: mapAddress || \"\",\n            geolocation: selectedLocation,\n            \n            gstNumber: form.gstNumber.value,\n            enrolledId: [],\n            reviews: [],\n            author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n            UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n            isPremium: true,\n            addAmenities: selectedAmenities.join(\",\"),\n            enrollmentProcess: encodeToUnicode(form.enrollmentProcess.value),\n            creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\")).email,\n            instagram: form.instagram.value,\n            facebook: form.facebook.value,\n            youtube: form.youtube.value,\n            twitter: form.twitter.value,\n            visibilty: 1,\n            timings\n          });\n        }\n\n        setIsReady(true);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    main();\n  }, []);\n\n  useEffect(() => {\n    effectDraftRef.current = null;\n    let previousState = null; \n\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n          \n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n          \n          effectDraftRef.current = setInterval(async () => {\n            \n            try {\n              const newData = tableData.reduce((accumulator, current, index) => {\n                accumulator[index] = current;\n                return accumulator;\n              }, {});\n              const currentState = { \n                studioName: form.studioName.value,\n                aboutStudio: form.aboutStudio.value,\n                founderName: form.founderName.value,\n                aboutFounder: form.aboutFounder.value,\n                mobileNumber: form.mobileNumber.value,\n                whatsappNumber: form.whatsappNumber.value,\n                mailAddress: form.mailAddress.value,\n                danceStyles: selectedDanceStyles.join(\",\"),\n                numberOfHalls: form.numberOfHalls.value,\n                maximumOccupancy: form.maximumOccupancy.value,\n                instructorsNames: selectedInstructors,\n                status: \"OPEN\",\n                tableData: newData,\n                buildingName: form.buildingName.value,\n                street: form.street.value,\n                city: form.city.value,\n                landmark: form.landmark.value,\n                pincode: form.pincode.value,\n                state: form.state.value,\n                country: \"India\",\n                mapAddress: mapAddress || \"\",\n                geolocation: selectedLocation,\n                \n                gstNumber: form.gstNumber.value,\n                enrolledId: [],\n                reviews: [],\n                author: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .displayName,\n                UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n                isPremium: true,\n                addAmenities: selectedAmenities.join(\",\"),\n                enrollmentProcess: encodeToUnicode(\n                  form.enrollmentProcess.value\n                ),\n                creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .email,\n                instagram: form.instagram.value,\n                facebook: form.facebook.value,\n                youtube: form.youtube.value,\n                twitter: form.twitter.value,\n                visibilty: 1,\n                timings\n              }\n              \n              // Check if the current state is different from the previous state\n              if (!isEqual(previousState, currentState)) {\n                try {\n                  await updateDoc(studioRef, currentState);\n                  previousState = currentState; // Update previous state after successful save\n                  // console.log(\"Next AutoSave in\",DRAFT_INTERVAL_TIME)\n                } catch (error) {\n                  console.error(error);\n                }\n              }else{\n                // console.log(\"Nothing for Autosave to save\")\n            }\n\n            } catch (error) {\n              console.error(error);\n            }\n          }, DRAFT_INTERVAL_TIME);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    if (isReady) main();\n\n    return () => clearInterval(effectDraftRef.current);\n  }, [\n    isReady,\n    selectedDanceStyles,\n    selectedInstructors,\n    tableData,\n    mapAddress,\n    selectedLocation,\n    selectedAmenities,\n  ]);\n\n  return (\n    <div >\n          <Stepper activeStep={activeStep} alternativeLabel>\n            {['Basic Studio & Owner details', 'Instructors, Classes & Social Media', 'Address & Registration', 'Studio Icon', 'Studio & Class Images'].map((label) => (\n              <Step key={label}>\n                <StepLabel ><p style={{color:isDarkModeOn?\"white\":\"black\"}}>{label}</p></StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          \n            < div hidden={activeStep > 2} >\n            <Form id=\"addStudioForm\" onSubmit={handleAddStudio} style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n              <Form.Group controlId=\"formBasicAdd\">\n             \n                  <div hidden={activeStep !== 0}>\n                  <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Basic Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Studio Name *</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"studioName\" />\n                \n                <Form.Label>About Studio *</Form.Label>\n                <Form.Control rows={6} style={{  minHeight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio's details\" name=\"aboutStudio\" />\n                \n                </Col>\n                <Col md={6}>\n                <Form.Label>Founder's Name *</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter founder name\" name=\"founderName\" />\n                \n                <Form.Label>About Founder *</Form.Label>\n                <Form.Control rows={6} style={{  minheight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter founder's details\" name=\"aboutFounder\" />\n                \n                </Col>\n                </Row>\n                <hr></hr>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Contact Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Mobile Number *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter mobile number\" name=\"mobileNumber\" type=\"number\"  />\n\n                <Form.Label>WhatsApp Number *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter whatsapp number\" name=\"whatsappNumber\" type=\"number\"  />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Mail Address</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"email\" rows={1} placeholder=\"Enter mail address\" name=\"mailAddress\" />\n                \n                  </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Details</h3>\n                <Row>\n                  <Col md={6}>\n                <Form.Label >Dance Styles *</Form.Label>\n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                <Form.Label>Number of Hall(s) *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Number of Hall(s)\" name=\"numberOfHalls\" type=\"number\" />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Maximum Occupancy *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}  rows={1} placeholder=\"Maximum Occupancy\" name=\"maximumOccupancy\" type=\"number\"   />\n                </Col>\n                </Row>\n                <br></br>\n                <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}} disabled >\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end gap-3\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={saveDraft}>\n                      Save to Draft\n                    </MuiButton>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                  \n                  </div>\n\n\n               \n              \n                <div hidden={activeStep !== 1}>\n\n\n                \n            <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Instructor Details</h3>\n                <Form.Label>Names of Instructors</Form.Label>\n                <Row>\n                  <ThemeProvider theme={darkTheme}>\n                    <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={instructorNamesWithIds}\n                      value={selectedInstructors}\n                      onChange={handleInstructorChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Instructors\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                  </ThemeProvider>\n                </Row> \n                <a href=\"#/modifyInstructors\" rel=\"noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', color: isDarkModeOn ? 'cyan' : 'blue' }}>\n                      Go to Instrcutors' Add/update Page? \n                    </a>\n                <hr></hr>   \n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Class Schedule *</h3>\n                  <span>Time Table Of dance classes</span>\n                    <div style={{ overflowX: 'auto', whiteSpace: 'nowrap', scrollbarColor: isDarkModeOn ? '#888 #333' : '#ccc #fff', }}>\n                      <StudioTable\n                        tableData={tableData}\n                        setTableData={setTableData}\n                        instructorNamesWithIds={instructorNamesWithIds}\n                      />\n                    </div>\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Additional Details</h3>\n                <Row>\n                <Col md={4}>\n                  <Form.Label>GST Number</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"GST Number\" name=\"gstNumber\" />\n                  \n                  \n                </Col>\n                <Col md={8}>\n                <Form.Label>Add Amenities</Form.Label>\n                  \n                  <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={amenityKeys}\n                  value={selectedAmenities}\n                  onChange={handleAmentiesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Amenities\"\n                      style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                </Col>\n                </Row>\n                <Row>\n                <Form.Label>Enrollment Process</Form.Label>\n                  <Form.Control rows={12} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enrollment Process\" name=\"enrollmentProcess\" />\n          \n                </Row>\n\n                <h3 style={{ margin: '12px 0', backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Timings *</h3>\n                <StudioWeeklyTimings timings={timings} setTimings={setTimings} />\n\n                <h3 style={{ margin: '32px 0 0 0', backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Social Media Links</h3>\n               <Row>\n               <Col md={4}>\n                  <Form.Label>Instagram</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Instagram Link\" name=\"instagram\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Facebook</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Facebook Link\" name=\"facebook\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>YouTube</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"YouTube Link\" name=\"youtube\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Twitter</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Twitter Link\" name=\"twitter\" />\n                </Col>\n\n               </Row>\n\n               <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end gap-3\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={saveDraft}>\n                      Save to Draft\n                    </MuiButton>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n              </div>\n\n               \n                <div hidden={activeStep !== 2}>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Address Details</h3>\n                <Row>\n                  <Col md={6}>\n                  <Form.Label>Building Name *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter building name\" name=\"buildingName\" />\n\n                <Form.Label>Street *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter street\" name=\"street\" />\n                <Form.Label>City *</Form.Label>\n                <Form.Control as=\"select\" style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black', height: 'auto', // Let it adjust to content\n                    lineHeight: '1.5em', // Mimics rows={1}\n                    padding: '8px', }} name=\"city\">\n                    <option value=\"\">Select a city</option>\n                    {locationOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n\n                </Col>\n                <Col md={6}>\n                  <Form.Label>Landmark</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter landmark\" name=\"landmark\" />\n\n                <Form.Label>Pincode *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter pincode\" name=\"pincode\" type=\"number\"  />\n               \n                <Form.Label>State *</Form.Label>\n                <Form.Control as=\"select\" style={{ padding: \"0 1.5rem\", backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter state\" name=\"state\">\n                <option value=\"\">Select a State</option>\n                    {stateOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n               \n                </Col>\n\n                <Form.Label>Save exact Address</Form.Label>\n                <MapsInput\n                  selectedLocation={selectedLocation}\n                  setSelectedLocation={setSelectedLocation}\n                  mapAddress={mapAddress}\n                  setMapAddress={setMapAddress}\n                ></MapsInput>\n                </Row>\n                \n\n                \n              <br></br>\n\n              <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end gap-3\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={saveDraft}>\n                      Save to Draft\n                    </MuiButton>\n                    <MuiButton variant=\"contained\" disabled={isSubmitting} style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\", color:'white'}} type=\"submit\">\n                      Add Studio & Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                \n                </div>\n\n                \n                </Form.Group>\n            </Form>\n            {isSubmitting && <LinearProgress />}\n            {\n              newStudioId === \"\"?(\"\"):(<p>New Studio Created with id {newStudioId}. Now u can upload images regarding them</p>)\n            }\n            \n            </div>\n          \n             \n             \n            <div hidden={activeStep !== 3}>\n              \n              <ImageUpload entityId={newStudioId} title={\"Studio Icon\"} storageFolder={STORAGES.STUDIOICON} maxImageCount={1} minImageCount={1} ref={logoImageUploadRef}></ImageUpload>\n              <Row>\n                \n                <Col xs={12} className=\"d-flex justify-content-end\">\n                  <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                    Next\n                  </MuiButton>\n                </Col>\n              </Row>\n\n              </div>\n             \n            \n             <div hidden={activeStep !== 4}>\n              <ImageUpload entityId={newStudioId} title={\"Studio Images\"} maxImageCount={10} minImageCount={5} storageFolder={STORAGES.STUDIOIMAGES} ref={studioImageUploadRef}></ImageUpload>\n            </div>\n\n            <div hidden={activeStep !== 4}>\n              <ImageUpload entityId={newStudioId} title={\"Studio Announcement Images\"}  storageFolder={STORAGES.STUDIOANNOUNCEMENTS} maxImageCount={10} minImageCount={0} ref={anouncementImageUploadRef}></ImageUpload>\n\n              <Row className='mt-3'>\n              <Col xs={6}>\n                <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                  Prev\n                </MuiButton>\n              </Col>\n              <Col xs={6} className=\"d-flex justify-content-end\">\n                <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                  Next\n                </MuiButton>\n              </Col>\n            </Row>\n            </div>\n\n            <div  hidden={activeStep !== 5} style={{ display: 'flex',  alignItems: 'center', height: 'auto'}}>\n          \n                <SuccessMessage StudioId={newStudioId} />\n                <br></br>\n              \n            </div>\n        \n      <br></br>\n      \n    </div>\n  )\n}\n\n\nexport default StudioAdd\n","import React, { useState, useEffect } from 'react';\nimport { Alert, Container } from 'react-bootstrap';\n\nconst AlertPopup = ({\n  type = 'info',\n  message = 'Default message',\n  timeOfDisplay = 5000,\n  fontSize = '16px',\n  fontWeight = 'normal',\n  fontStyle = 'normal',\n}) => {\n  const [showAlert, setShowAlert] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowAlert(false);\n    }, timeOfDisplay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [timeOfDisplay]);\n\n  return (\n    <Container>\n      {showAlert && (\n        <Alert\n          variant={type}\n          style={{\n            fontSize,\n            fontWeight,\n            fontStyle,\n            textAlign: 'center',\n            marginTop: '10px',\n            marginBottom: '0',\n          }}\n          onClose={() => setShowAlert(false)}\n          dismissible\n        >\n          {message}\n        </Alert>\n      )}\n    </Container>\n  );\n};\n\nexport default AlertPopup;\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Row, Col, Form, Table } from \"react-bootstrap\";\nimport { db } from \"../config\";\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { COLLECTIONS } from \"../constants\";\nimport AlertPopup from \"./AlertPopup\";\nimport ImageUpload from \"./ImageUpload\";\nimport { STORAGES } from \"../constants\";\nimport MapsInput from \"./MapsInput\";\nimport { useSelector } from \"react-redux\"; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\nimport TimeRangePicker from \"./TimeRangePicker\";\nimport indianCities from \"../cities.json\";\nimport indianStates from \"../states.json\";\nimport danceStyles from \"../danceStyles.json\";\nimport { AMENITIES_ICONS } from \"../constants\";\nimport { Autocomplete, LinearProgress, TextField } from \"@mui/material\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { FaMinus, FaPlus } from \"react-icons/fa\";\nimport { MultiSelect } from \"primereact/multiselect\";\nimport { putData } from \"../utils/common\";\nimport StudioWeeklyTimings from \"./StudioWeeklyTiming\";\nimport { useSnackbar } from \"../context/SnackbarContext\";\nimport { updateDaysFormat } from \"../utils/mapping\";\n\nconst initialStudioTimings = {\n  monday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  tuesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  wednesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  thursday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  friday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  saturday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  sunday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n};\n\nconst daysOfWeek = [\"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\", \"Sun\"];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\",\n};\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString = \"\") => {\n  const utf8Encoded = unicodeString.split(\"\").map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nfunction StudioUpdate({\n  studio,\n  setStudio,\n  studioId,\n  setStudioId,\n  instructors,\n}) {\n  const showSnackbar = useSnackbar();\n  const [selectedStudio, setSelectedStudio] = useState(null);\n  const [selectedStudioId, setSelectedStudioId] = useState(null);\n  const [selectedInstructors, setSelectedInstructors] = useState([]);\n  const [selectedStudioFrozenClassRows, setSelectedStudioFrozenClassRows] =\n    useState(-1);\n  const [selectedAmenities, setSelectedAmenities] = useState([]);\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [defaultTime, setDefaultTime] = useState(\"00:00-00:00\");\n\n  const locationOptions = indianCities.cities;\n  const stateOptions = indianStates.states;\n  const danceStylesOptions = danceStyles.danceStyles;\n  const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n  const [showUpdateSuccessAlert, setShowUpdateSuccessAlert] = useState(false);\n  const [showUpdateErrorAlert, setShowUpdateErrorAlert] = useState(false);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  const [timings, setTimings] = useState(initialStudioTimings);\n  const [mapAddress, setMapAddress] = useState('');\n\n  const instructorNamesWithIds = instructors.map(\n    (instructor) => `${instructor.name} - ${instructor.id}`\n  );\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: isDarkModeOn ? \"dark\" : \"light\",\n    },\n  });\n\n  const handleDanceStylesChange = (event, value) => {\n    setSelectedDanceStyles(value);\n  };\n\n  const handleAmenitiesChange = (event, value) => {\n    setSelectedAmenities(value);\n  };\n\n  const [tableData, setTableData] = useState({\n    0: {\n      className: \"\",\n      danceForms: \"\",\n      days: \"\",\n      time: \"\",\n      instructors: [],\n      fee: \"\",\n      level: \"\",\n      freeTrial: false,\n      classCategory: [],\n    },\n  });\n\n  const handleTimePickerOpen = (index, time) => {\n    //console.log(\"handleTimePickerOpen\",time,index)\n    setDefaultTime(time);\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null);\n    //console.log(\"---------\")\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n\n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n\n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(\" - \");\n\n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n\n      return newData;\n    });\n\n    setSelectedRow(selectedRowIndex);\n  };\n\n  useEffect(() => {\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser =\n      JSON.parse(localStorage.getItem(\"StudioCreated\")) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map(\n      (studio) => `${studio.studioName} : ${studio.id}`\n    );\n    setStudioId(studioIdList);\n\n    //console.log(\"studio:\", studio);\n    //console.log(\"studioId\", studioId);\n  }, []);\n\n  useEffect(() => {\n    // Fetch data for the selected studio when studioId changes\n    if (selectedStudio) {\n      //console.log(\"Studio Instructors Names\",selectedStudio.instructorsNames)\n      setSelectedInstructors(selectedStudio.instructorsNames);\n      if (selectedStudio && selectedStudio.danceStyles) {\n        setSelectedDanceStyles(selectedStudio.danceStyles.split(\",\"));\n      }\n      if (selectedStudio && selectedStudio.addAmenities) {\n        setSelectedAmenities(selectedStudio.addAmenities.split(\",\"));\n      }\n      if (selectedStudio && selectedStudio.tableData) {\n        const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n        setSelectedStudioFrozenClassRows(maxIndex);\n      }\n      if (selectedStudio && selectedStudio?.timings) {\n        setTimings(selectedStudio.timings);\n      }\n      if (selectedStudio && selectedStudio?.mapAddress) {\n        setMapAddress(selectedStudio?.mapAddress);\n      }\n    }\n  }, [selectedStudio]);\n\n  const handleSelectStudio = async (event) => {\n    event.preventDefault();\n    const selected = event.target.value;\n    const selectedId = selected.split(\":\").pop().trim();\n    setSelectedStudioId(selectedId);\n    try {\n      const studioDoc = await getDoc(doc(db, COLLECTIONS.STUDIO, selectedId));\n      if (studioDoc.exists) {\n        setSelectedStudio(studioDoc.data());\n        if (studioDoc.data().geolocation) {\n          const loc = studioDoc.data().geolocation;\n          setSelectedLocation(loc || null);\n          //console.log(\"StudioUpdate Selected location\",selectedLocation,loc)\n        }\n\n        if (studioDoc.data().tableData) {\n          setTableData(studioDoc.data().tableData);\n          //selectedStudioFrozenClassRows()\n          const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n          setSelectedStudioFrozenClassRows(maxIndex);\n          //console.log(\"Yo We got...\",tableData,Array.isArray(tableData),isMapOfMaps(tableData),maxIndex)\n        } else {\n          setTableData({\n            0: {\n              className: \"\",\n              danceForms: \"\",\n              days: \"\",\n              time: \"\",\n              instructors: [],\n              fee: \"\",\n              level: \"\",\n              freeTrial: false,\n              classCategory: [],\n            },\n          });\n        }\n      } else {\n        setSelectedStudio(null); // No matching studio found\n      }\n    } catch (error) {\n      console.error(\"Error fetching studio data:\", error, selectedId);\n    }\n  };\n\n  const handleInstructorChange = (event, value) => {\n    setSelectedInstructors(value);\n  };\n\n  const handleUpdateStudio = async (event) => {\n    event.preventDefault();\n\n    const errorMessage = validate();\n\n    if (errorMessage) {\n      return showSnackbar(errorMessage, \"error\");\n    }\n\n    setIsSubmitting(true);\n    const nameIdLocal = event.target.nameId.value;\n    const indexOfColon = nameIdLocal.lastIndexOf(\":\");\n    const studioId = nameIdLocal.substring(indexOfColon + 1).trim();\n\n    if (!studioId) {\n      //console.log(\"Invalid or empty studio id\")\n      return;\n    }\n\n    //console.log(studioId)\n\n    if (!studioId) {\n      //console.log(\"Invalid or empty studio id\")\n      return;\n    }\n\n    //console.log(studioId)\n\n    //const description = encodeToUnicode(event.target.description.value);\n    //const geolocation = selectedLocation;\n\n    try {\n      // Update the studio document with the new values\n      ////console.log(description,geolocation)\n      const dbPayload = {\n        studioName: event.target.studioName.value,\n        aboutStudio: event.target.aboutStudio.value,\n        founderName: event.target.founderName.value,\n        aboutFounder: event.target.aboutFounder.value,\n        mobileNumber: event.target.mobileNumber.value,\n        whatsappNumber: event.target.whatsappNumber.value,\n        mailAddress: event.target.mailAddress.value,\n        danceStyles: selectedDanceStyles.join(\",\"),\n        numberOfHalls: event.target.numberOfHalls.value,\n        maximumOccupancy: event.target.maximumOccupancy.value,\n        instructorsNames: selectedInstructors,\n        status: \"OPEN\",\n        tableData: tableData,\n        buildingName: event.target.buildingName.value,\n        street: event.target.street.value,\n        city: event.target.city.value,\n        landmark: event.target.landmark.value,\n        pincode: event.target.pincode.value,\n        state: event.target.state.value,\n        country: \"India\",\n        mapAddress,\n        geolocation: selectedLocation,\n        gstNumber: event.target.gstNumber.value,\n        enrolledId: [],\n        reviews: [],\n        author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n        UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n        addAmenities: selectedAmenities.join(\",\"),\n        enrollmentProcess: encodeToUnicode(\n          event.target.enrollmentProcess.value\n        ),\n        instagram: event.target.instagram.value,\n        facebook: event.target.facebook.value,\n        youtube: event.target.youtube.value,\n        twitter: event.target.twitter.value,\n        timings,\n      };\n\n      const response = await putData(dbPayload, COLLECTIONS.STUDIO, studioId);\n      if (response.ok) {\n        //console.log(\"Studio updated successfully\");\n        // alert(\"Studio Update successfully\");\n        showSnackbar(\"Studio Details Updated Successfully\", \"success\");\n        setShowUpdateSuccessAlert(true);\n        setShowUpdateErrorAlert(false);\n      } else {\n        setShowUpdateSuccessAlert(false);\n        setShowUpdateErrorAlert(true);\n      }\n    } catch (error) {\n      console.error(\"Error updating studio: \", error);\n      setShowUpdateSuccessAlert(false);\n      setShowUpdateErrorAlert(true);\n    } finally {\n      setIsSubmitting(false);\n    }\n    // Reset input fields to their initial values when a new studio is selected\n    document.getElementById(\"updateStudioForm\").reset();\n  };\n\n  const handleAddColumn = () => {\n    setTableData((prevData) => {\n      const newData = prevData.map((row) => ({\n        ...row,\n        [Object.keys(row).length]: \"\",\n      }));\n      return newData;\n    });\n  };\n\n  const handleAddRow = () => {\n    setTableData((prevData) => {\n      const newRowKey = Object.keys(prevData).length; // Use the current number of rows as the new row key\n      return { ...prevData, [newRowKey]: { ...tableData[0] } };\n    });\n  };\n\n  const handleRemoveRow = (index) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n      delete newData[index];\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if (field === \"days\") {\n        value = Array.isArray(value) ? value.join(\",\") : value;\n      }\n\n      return {\n        ...prevData,\n        [index]: {\n          ...prevData[index],\n          [field]: value,\n        },\n      };\n    });\n  };\n\n  const validate = () => {\n    const form = document.getElementById(\"updateStudioForm\");\n\n    if (!form.studioName.value) return \"Studio name is required\";\n    if (!form.aboutStudio.value) return \"About Studio is required\";\n    if (!form.founderName.value) return \"Founder name is required\";\n    if (!form.aboutFounder.value) return \"About Founder is required\";\n    if (!form.mobileNumber.value) return \"Mobile number is required\";\n    if (!form.whatsappNumber.value) return \"WhatsApp number is required\";\n    if (!form.numberOfHalls.value) return \"Number of halls is required\";\n    if (!form.maximumOccupancy.value) return \"Maximum occupancy is required\";\n    if (!selectedDanceStyles.length)\n      return \"At least one dance style must be selected\";\n\n    if (!Object.values(timings).every((slots) => slots.length > 0)) {\n      return \"All timing slots must be filled\";\n    }\n    if (!Object.values(tableData).length) {\n      return \"At least one class entry is required\";\n    }\n    for (const entry of Object.values(tableData)) {\n      if (!entry.className?.trim()) return \"Class name is required\";\n      if (!entry.danceForms?.trim()) return \"Dance forms are required\";\n      if (!entry.days?.trim()) return \"Days are required\";\n      if (!entry.time?.trim()) return \"Time is required\";\n      if (!entry.fee?.trim()) return \"Fee is required\";\n      if (!entry.level?.trim()) return \"Level is required\";\n      if (!entry.instructors.length)\n        return \"At least one instructor is required\";\n      if (!entry.classCategory.length || !entry.classCategory[0]?.trim())\n        return \"Class category is required\";\n    }\n\n    if (!form.buildingName.value) return \"Building name is required\";\n    if (!form.street.value) return \"Street is required\";\n    if (!form.city.value) return \"City is required\";\n    if (!form.pincode.value) return \"Pincode is required\";\n    if (!form.state.value) return \"State is required\";\n    if (!mapAddress) return \"Address is required\";\n    if (!selectedLocation) return \"Location selection is required\";\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n        color: isDarkModeOn ? \"white\" : \"black\",\n      }}\n    >\n      <br></br>\n      <Form id=\"updateStudioForm\" onSubmit={handleUpdateStudio}>\n        <Form.Group controlId=\"formBasicUpdate\">\n          <Form.Label>Id</Form.Label>\n          <Form.Control\n            as=\"select\"\n            name=\"nameId\"\n            style={{\n              backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n              color: isDarkModeOn ? \"white\" : \"black\",\n              height: \"auto\", // Let it adjust to content\n              lineHeight: \"1.5em\",\n              padding: \"8px\",\n            }}\n            onChange={handleSelectStudio}\n          >\n            <option value=\"\">Select a studio...</option>\n            {studioId && studioId.length > 0 ? (\n              studioId.map((studioItem) => (\n                <option key={studioItem} value={studioItem}>\n                  {studioItem}\n                </option>\n              ))\n            ) : (\n              <option value=\"\">No studio yet!</option>\n            )}\n          </Form.Control>\n        </Form.Group>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Basic Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Studio Name *</Form.Label>\n            <Form.Control\n              rows={1}\n              defaultValue={selectedStudio ? selectedStudio.studioName : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"textarea\"\n              placeholder=\"Enter studio name\"\n              name=\"studioName\"\n            />\n\n            <Form.Label>About Studio *</Form.Label>\n            <Form.Control\n              rows={6}\n              defaultValue={selectedStudio ? selectedStudio.aboutStudio : \"\"}\n              style={{\n                minHeight: \"150px\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              placeholder=\"Enter studio details\"\n              name=\"aboutStudio\"\n            />\n          </Col>\n          <Col md={6}>\n            <Form.Label>Founder's Name *</Form.Label>\n            <Form.Control\n              rows={1}\n              defaultValue={selectedStudio ? selectedStudio.founderName : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"textarea\"\n              placeholder=\"Enter studio name\"\n              name=\"founderName\"\n            />\n\n            <Form.Label>About Founder *</Form.Label>\n            <Form.Control\n              rows={6}\n              defaultValue={selectedStudio ? selectedStudio.aboutFounder : \"\"}\n              style={{\n                height: \"150px\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              placeholder=\"Enter studio details\"\n              name=\"aboutFounder\"\n            />\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Contact Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Mobile Number *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.mobileNumber : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Enter studio details\"\n              name=\"mobileNumber\"\n              type=\"number\"\n            />\n\n            <Form.Label>WhatsApp Number *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.whatsappNumber : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Enter studio details\"\n              name=\"whatsappNumber\"\n              type=\"number\"\n            />\n          </Col>\n          <Col md={6}>\n            <Form.Label>Mail Address</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.mailAddress : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"textarea\"\n              rows={1}\n              placeholder=\"Enter studio details\"\n              name=\"mailAddress\"\n            />\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Studio Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Dance Styles *</Form.Label>\n\n            <ThemeProvider theme={darkTheme}>\n              <CssBaseline />\n\n              <Autocomplete\n                style={{\n                  backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                  color: isDarkModeOn ? \"white\" : \"black\",\n                }}\n                multiple\n                id=\"tags-standard\"\n                options={danceStylesOptions}\n                value={selectedDanceStyles}\n                onChange={handleDanceStylesChange}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"standard\"\n                    placeholder=\"Select Dance Styles\"\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                  />\n                )}\n              />\n            </ThemeProvider>\n\n            <Form.Label>Number of Hall(s) *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.numberOfHalls : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Number of Hall(s)\"\n              name=\"numberOfHalls\"\n              type=\"number\"\n            />\n          </Col>\n          <Col md={6}>\n            <Form.Label>Maximum Occupancy *</Form.Label>\n            <Form.Control\n              defaultValue={\n                selectedStudio ? selectedStudio.maximumOccupancy : \"\"\n              }\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Maximum Occupancy\"\n              name=\"maximumOccupancy\"\n              type=\"number\"\n            />\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Instructor Details\n        </h3>\n        <Form.Label>Names of Instructors</Form.Label>\n        <Row>\n          <Col xs={6}>\n            <div\n              style={{\n                backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            >\n              <Row>\n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                  <Autocomplete\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                    multiple\n                    id=\"tags-standard\"\n                    options={instructorNamesWithIds}\n                    value={selectedInstructors}\n                    onChange={handleInstructorChange}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        variant=\"standard\"\n                        placeholder=\"Select Dance Styles\"\n                        style={{\n                          backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                          color: isDarkModeOn ? \"white\" : \"black\",\n                        }}\n                      />\n                    )}\n                  />\n                </ThemeProvider>\n                <a\n                  href=\"#/modifyInstructors\"\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                  style={{\n                    textDecoration: \"none\",\n                    color: isDarkModeOn ? \"cyan\" : \"blue\",\n                  }}\n                >\n                  Go to Instrcutors' Add/update Page?\n                </a>\n              </Row>\n            </div>\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Address Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Building Name *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.buildingName : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter building name\"\n              name=\"buildingName\"\n            />\n\n            <Form.Label>Street *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.street : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter street\"\n              name=\"street\"\n            />\n            <Form.Label>City *</Form.Label>\n            <Form.Control\n              as=\"select\"\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n                height: \"auto\", // Let it adjust to content\n                lineHeight: \"1.5em\", // Mimics rows={1}\n                padding: \"8px\",\n              }}\n              name=\"city\"\n              value={selectedStudio ? selectedStudio.city : \"\"}\n              onChange={(e) => {\n                const newCity = e.target.value;\n                setSelectedStudio((prevState) => ({\n                  ...prevState,\n                  city: newCity,\n                }));\n              }}\n            >\n              <option value=\"\">Select a city</option>\n              {locationOptions.map((city, index) => (\n                <option key={index} value={city}>\n                  {city}\n                </option>\n              ))}\n            </Form.Control>\n          </Col>\n          <Col md={6}>\n            <Form.Label>Landmark</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.landmark : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter landmark\"\n              name=\"landmark\"\n            />\n\n            <Form.Label>Pincode *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.pincode : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter pincode\"\n              name=\"pincode\"\n              type=\"number\"\n            />\n\n            <Form.Label>State *</Form.Label>\n            <Form.Control\n              as=\"select\"\n              style={{\n                padding: \"0 1.5rem\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Enter state\"\n              name=\"state\"\n              value={selectedStudio ? selectedStudio.state : \"\"}\n            >\n              <option value=\"\">Select a State</option>\n              {stateOptions.map((city, index) => (\n                <option key={index} value={city}>\n                  {city}\n                </option>\n              ))}\n            </Form.Control>\n          </Col>\n\n          <Form.Label>Save exact Address</Form.Label>\n          <MapsInput\n            selectedLocation={selectedLocation}\n            setSelectedLocation={setSelectedLocation}\n            mapAddress={mapAddress}\n            setMapAddress={setMapAddress}\n          ></MapsInput>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"white\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Additional Details\n        </h3>\n        <Row>\n          <Col md={4}>\n            <Form.Label>GST Number</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.gstNumber : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"number\"\n              rows={1}\n              placeholder=\"GST Number\"\n              name=\"gstNumber\"\n            />\n          </Col>\n          <Col md={8}>\n            <Form.Label>Add Amenities</Form.Label>\n\n            <ThemeProvider theme={darkTheme}>\n              <CssBaseline />\n\n              <Autocomplete\n                style={{\n                  backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                  color: isDarkModeOn ? \"white\" : \"black\",\n                }}\n                multiple\n                id=\"tags-standard\"\n                options={amenityKeys}\n                value={selectedAmenities}\n                onChange={handleAmenitiesChange}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"standard\"\n                    placeholder=\"Select Amenities\"\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                  />\n                )}\n              />\n            </ThemeProvider>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Form.Label>Enrollment Process</Form.Label>\n            <Form.Control\n              defaultValue={\n                selectedStudio\n                  ? decodeUnicode(selectedStudio?.enrollmentProcess)\n                  : \"\"\n              }\n              rows={6}\n              style={{\n                height: \"150px\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              placeholder=\"Enrollment Process\"\n              name=\"enrollmentProcess\"\n            />\n          </Col>\n        </Row>\n\n        <br></br>\n        <span>Time Table Of dance classes</span>\n        <div\n          style={{\n            overflowX: \"auto\",\n            whiteSpace: \"nowrap\",\n            scrollbarColor: isDarkModeOn ? \"#888 #333\" : \"#ccc #fff\",\n          }}\n        >\n          <Table bordered variant=\"light\">\n            <thead>\n              <tr>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Class Name\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"10rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Dance Form\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Days\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Time\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"20rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Instructors\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"8rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Fee (₹)\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"10rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Level\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"8rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Free Trial\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Class Category\n                </th>\n                <th style={{ padding: 0 }}>\n                  <Button variant=\"primary\" onClick={handleAddRow}>\n                    <FaPlus />\n                  </Button>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.keys(tableData).map((rowKey, index) => (\n                <tr key={rowKey}>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      type=\"text\"\n                      value={tableData[rowKey].className}\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"className\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      as=\"select\"\n                      value={tableData[rowKey].danceForms}\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"danceForms\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    >\n                      <option value=\"\">Select a dance form</option>\n                      {danceStylesOptions.map((option) => (\n                        <option key={option} value={option}>\n                          {option}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <MultiSelect\n                      value={\n                        tableData[rowKey] &&\n                        tableData[rowKey].days &&\n                        updateDaysFormat(\n                          tableData?.[rowKey]?.days\n                            ?.split?.(\",\")\n                            ?.filter?.((day) => day !== \"\")\n                        )\n                      }\n                      onChange={(event) =>\n                        handleTableChange(rowKey, \"days\", event.target.value)\n                      }\n                      options={daysOfWeek}\n                      placeholder=\"class days\"\n                      maxSelectedLabels={7}\n                      className=\"w-full md:w-20rem\"\n                      style={{ color: \"#000\", width: \"100%\" }}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      type=\"text\"\n                      value={tableData[rowKey].time}\n                      //onChange={(e) => handleTableChange(rowKey, 'time', e.target.value)}\n                      onClick={() =>\n                        handleTimePickerOpen(rowKey, tableData[rowKey].time)\n                      }\n                    />\n                    {showTimePicker && (\n                      <TimeRangePicker\n                        show={showTimePicker}\n                        handleClose={handleTimePickerClose}\n                        handleSelect={handleTimeSelect}\n                        defaultTime={\n                          tableData[selectedRowIndex]?.time || \"00:00-00:00\"\n                        } // selectedRowIndex\n                      />\n                    )}\n                  </td>\n                  <td style={{ padding: \"0rem\", width: \"20rem\" }}>\n                    <Autocomplete\n                      multiple\n                      options={instructorNamesWithIds}\n                      value={\n                        tableData[rowKey] && tableData[rowKey].instructors\n                          ? tableData[rowKey].instructors\n                          : []\n                      }\n                      onChange={(_, values) =>\n                        handleTableChange(rowKey, \"instructors\", values)\n                      }\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Instructors\"\n                        />\n                      )}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      type=\"number\"\n                      value={tableData[rowKey].fee ? tableData[rowKey].fee : \"\"}\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"fee\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      as=\"select\"\n                      value={\n                        tableData[rowKey].level ? tableData[rowKey].level : \"\"\n                      }\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"level\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    >\n                      <option value=\"\">Select a Level</option>\n                      <option value=\"Beginner\">Beginner</option>\n                      <option value=\"Intermediate\">Intermediate</option>\n                      <option value=\"Advanced\">Advanced</option>\n                      <option value=\"Misc\">Misc</option>\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\", border: \"1px solid black\" }}>\n                    <Form.Control\n                      style={{\n                        backgroundColor: \"white\",\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                      as=\"select\"\n                      value={\n                        tableData[index]?.freeTrial\n                          ? tableData[index].freeTrial\n                          : \"\"\n                      }\n                      onChange={(e) =>\n                        handleTableChange(index, \"freeTrial\", e.target.value)\n                      }\n                    >\n                      <option value=\"\">Select a value</option>\n                      <option value={true}>Yes</option>\n                      <option value={false}>No</option>\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\", width: \"20rem\" }}>\n                    <Form.Control\n                      style={{\n                        backgroundColor: \"white\",\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                      as=\"select\"\n                      value={\n                        Array.isArray(tableData[index].classCategory) &&\n                        tableData[index].classCategory?.length\n                          ? tableData[index].classCategory[0]\n                          : \"\"\n                      }\n                      onChange={(e) =>\n                        handleTableChange(index, \"classCategory\", [\n                          e.target.value,\n                        ])\n                      }\n                    >\n                      <option value=\"\">Select Class Category</option>\n                      {Object.values(categoryMap).map((value, idx) => (\n                        <option key={idx} value={value}>\n                          {value}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Button\n                      variant=\"danger\"\n                      onClick={() => handleRemoveRow(rowKey)}\n                    >\n                      <FaMinus />\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n        <br></br>\n\n        <h3\n          style={{\n            margin: \"12px 0\",\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Studio Timings *\n        </h3>\n        <StudioWeeklyTimings timings={timings} setTimings={setTimings} />\n\n        <h3\n          style={{\n            margin: \"32px 0 0 0\",\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Social Media Links\n        </h3>\n        <Row>\n          <Col md={4}>\n            <Form.Label>Instagram</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.instagram : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"Instagram Link\"\n              name=\"instagram\"\n            />\n          </Col>\n          <Col md={4}>\n            <Form.Label>Facebook</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.facebook : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"Facebook Link\"\n              name=\"facebook\"\n            />\n          </Col>\n          <Col md={4}>\n            <Form.Label>YouTube</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.youtube : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"YouTube Link\"\n              name=\"youtube\"\n            />\n          </Col>\n          <Col md={4}>\n            <Form.Label>Twitter</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.twitter : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"Twitter Link\"\n              name=\"twitter\"\n            />\n          </Col>\n        </Row>\n\n        <br></br>\n        {studioId && studioId.length > 0 && selectedStudioId && (\n          <>\n            <div>\n              <ImageUpload\n                entityId={selectedStudioId}\n                title={\"Studio Images\"}\n                storageFolder={STORAGES.STUDIOIMAGES}\n                maxImageCount={10} minImageCount={5}\n              />\n            </div>\n            <br />\n            <div>\n              <ImageUpload\n                entityId={selectedStudioId}\n                title={\"Studio Icon\"}\n                storageFolder={STORAGES.STUDIOICON}\n                maxImageCount={1} minImageCount={1}\n              />\n            </div>\n            <div>\n              <ImageUpload\n                entityId={selectedStudioId}\n                title={\"Studio Announcement Images\"}\n                storageFolder={STORAGES.STUDIOANNOUNCEMENTS}\n                maxImageCount={10} minImageCount={0}\n              />\n            </div>\n            <br />\n          </>\n        )}\n        {showUpdateSuccessAlert && (\n          <AlertPopup\n            type=\"info\"\n            message=\"Studio Updated successfully\"\n            timeOfDisplay={3000}\n            fontSize=\"10px\"\n            fontWeight=\"bold\"\n          />\n        )}\n        {showUpdateErrorAlert && (\n          <AlertPopup\n            type=\"warning\"\n            message=\"Studio Update failed\"\n            timeOfDisplay={3000}\n            fontSize=\"10px\"\n            fontWeight=\"bold\"\n          />\n        )}\n        <Button\n          style={{\n            backgroundColor: isDarkModeOn ? \"#892CDC\" : \"black\",\n            color: \"white\",\n          }}\n          type=\"submit\"\n          disabled={isSubmitting}\n        >\n          Update Studio\n        </Button>\n        {isSubmitting && <LinearProgress />}\n      </Form>\n    </div>\n  );\n}\n\nexport default StudioUpdate;\n","import React from 'react';\nimport { Row, Col  } from 'react-bootstrap';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,collection,where,getDocs,query } from \"firebase/firestore\";\nimport { COLLECTIONS } from '../constants';\nimport StudioAdd from '../Components/StudioAdd';\nimport StudioUpdate from '../Components/StudioUpdate';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { useAuth } from '../context/AuthContext';\nimport CardSliderCard from '../Components/CardSliderCard';\nimport Tab from '@mui/material/Tab';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\nimport { Box } from '@mui/material';\n\n\n\nfunction CreatorStudio() {\n  const [studio, setStudio] = useState([]);\n  const [studioId, setStudioId] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  const [instructors, setInstructors] = useState([]);\n  const [isCreator, setIsCreator] = useState(false);\n  const [premiumTill, setPremiumTill] = useState(-1);\n  const { currentUser } = useAuth();\n  const [value, setValue] = React.useState('1');\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n\n  useEffect(() => {\n    console.log(\"Creator Studio getCreatorMode\")\n    const getCreatorMode = async (event) => {\n      try{\n      const userRef = doc(db, \"User\", currentUser.uid);\n      const userSnap = await getDoc(userRef);\n      if (userSnap.exists()) {\n        console.log(\"User there\",userSnap.data(),userSnap.data().CreatorMode,JSON.parse(localStorage.getItem('userInfoFull')));\n        if(userSnap.data() != null){\n          \n          setIsCreator(userSnap.data().CreatorMode)\n          setPremiumTill(userSnap.data().isPremium)\n          console.log(\"Premium Till\",premiumTill,userSnap.data())\n        }else{\n          console.log(\"userSnap.data() null\")\n        }\n      } else {\n        console.log(\"User not found but workshop created... error\");\n      }\n      }catch(error){\n        console.log(\" error\");\n      }\n    }\n  \n    getCreatorMode();\n  }, [isCreator]); // Run once on mount\n\n    // Fetch instructors for the current user\n  useEffect(() => {\n    console.log(\"Creator Studio fetchInstructors\")\n  const fetchInstructors = async () => {\n    let userId = null;\n    if (\n      JSON.parse(localStorage.getItem('userInfo')) &&\n      JSON.parse(localStorage.getItem('userInfo')).UserId\n    ) {\n      userId = JSON.parse(localStorage.getItem('userInfo')).UserId;\n    }\n    if (!userId) {\n      console.log('User not found');\n      alert('User not found');\n      return;\n    }\n\n    const instructorRef = collection(db, COLLECTIONS.INSTRUCTORS);\n    const q = query(instructorRef, where('createdBy', '==', userId));\n    const querySnapshot = await getDocs(q);\n    \n    const instructorsList = [];\n    querySnapshot.forEach((doc) => {\n      instructorsList.push({\n        id: doc.id,\n        name: doc.data().name,      \n      });\n    });\n    console.log(\"Hiii\", instructorsList)\n    setInstructors(instructorsList);\n  };\n\n  fetchInstructors();\n  }, []);\n\n \n  useEffect(() => {\n    console.log(\"Creator Studio getStudioCreated\")\n    const getStudioCreated = async ()=>{\n      const q = query(collection(db, COLLECTIONS.STUDIO), where(\"UserId\", \"==\", JSON.parse(localStorage.getItem('userInfo')).UserId)    );\n      console.log(\"Hiiii\",JSON.parse(localStorage.getItem('userInfo')).UserId)\n      const querySnapshot = await getDocs(q);\n      console.log(\"Studios : \",querySnapshot)\n      const studiosOfUser = querySnapshot.docs.filter(doc => doc.data().studioName).map(doc => \n        { const data = doc.data();\n          return {\n            id: doc.id, // Include the document ID in the data\n            ...data\n          };\n      });\n      localStorage.setItem(\"StudioCreated\", JSON.stringify(studiosOfUser));\n      setStudio(studiosOfUser);\n      setStudioId(studiosOfUser.map((studio) => (String(studio.studioName) + \" :\" + String(studio.id))));\n      console.log(studio)\n      console.log(\"studioId\",studioId)\n    };\n      \n      getStudioCreated();\n    },[setStudio]);\n \n  useEffect(() => {\n    console.log(\"Creator Studio setStudioId\")\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser = JSON.parse(localStorage.getItem('StudioCreated')) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map((studio) => `${studio.studioName} : ${studio.id}`);\n    setStudioId(studioIdList);\n\n    console.log(\"studio:\", studio);\n    console.log(\"studioId\", studioId);\n  }, [setStudioId]);\n\n  console.log(\"studio :\",studio)\n  return (\n    <div>\n      <br></br>\n      {isCreator?(\n        \n       <>\n       <Box sx={{ width: '100%', typography: 'body1' }}>\n      <TabContext value={value}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <TabList style={{color: isDarkModeOn ? 'white' : 'black'}} onChange={handleChange} aria-label=\"lab API tabs example\">\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Add Studio\" value=\"1\" />\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Update Studio\" value=\"2\" />\n          \n          </TabList>\n        </Box>\n        <TabPanel value=\"1\">\n\n        <StudioAdd instructors={instructors} />\n        </TabPanel>\n        <TabPanel value=\"2\">\n        <>\n        <StudioUpdate\n                  studio={studio}\n                  setStudio={setStudio}\n                  instructors={instructors}\n                  studioId={studioId}\n                  setStudioId={setStudioId}\n                />\n        </>\n    \n        </TabPanel>\n        \n      </TabContext>\n    </Box>\n      </>\n      ):\"\"}\n \n      <h3 style={{color: isDarkModeOn ? 'white' : 'black'}}>Your Studios:</h3>\n       <ul>\n      <Row xs={1} md={3} lg={4} className=\"g-4\">\n        {studio.length > 0 ? (\n          studio.map((studio, index) => (\n            <Col key={index}>\n              <a href={`#/studio/${studio.studioId}`} style={{ textDecoration: \"none\" }}>\n                <CardSliderCard studio={studio}/>\n              </a>\n          </Col>\n          ))\n        ) : (\n          <p style={{color: isDarkModeOn ? 'white' : 'black'}}>No studio yet!</p>\n        )}\n      </Row>\n      <br/>\n      </ul>\n    </div>\n  )\n}\nexport default CreatorStudio"],"names":["_ref","studio","_jsx","href","concat","id","children","NStudioCard","data","img_src","isDarkModeOn","useSelector","selectDarkModeStatus","studioId","cardStyle","backgroundColor","padding","color","marginRight","width","maxWidth","boxShadow","transition","_jsxs","Card","variant","sx","transform","AspectRatio","ratio","style","position","src","iconUrl","STUDIO_ICON_DEFAULT","loading","alt","height","overflow","Stack","direction","spacing","bottom","left","danceStyles","split","slice","map","form","index","Chip","marginBottom","fontSize","bgcolor","danceStylesColorChips","trim","top","paddingTop","freeTrialAvailable","marginLeft","COLORS","LIME","CardContent","Box","display","justifyContent","columnGap","Link","alignSelf","fontWeight","textColor","underline","overlay","whiteSpace","textOverflow","studioName","avgRating","Typography","flexShrink","toFixed","level","street","IconButton","hidden","size","zIndex","borderRadius","right","Favorite","minFee","Button","type","_defaultTime$split$","show","handleClose","handleSelect","defaultTime","startTime_i","endTime_i","renderTimeOptions","defaultValue","console","log","timeOptions","generateTimeOptions","options","option_AM","option_PM","hours","minutes","formattedHours","toString","padStart","formattedMinutes","timeString","push","formattedHours12","i","length","_Fragment","value","option","Modal","onHide","Header","closeButton","Title","Body","Row","Col","Form","Group","Label","Control","as","onChange","e","target","lineHeight","Footer","onClick","dayMapping","M","T","W","Th","F","St","Sn","updateDaysFormat","records","updatedDays","day","Set","daysOfWeek","categoryMap","Kids","Adults","Women_Only","Men_Only","Seniors","All","Couples","Families","tableData","setTableData","instructorNamesWithIds","showTimePicker","setShowTimePicker","useState","selectedRowIndex","setSelectedRowIndex","selectedRow","setSelectedRow","danceStylesOptions","setDefaultTime","handleTableChange","field","prevData","Array","isArray","join","newData","handleTimePickerClose","handleTimeSelect","startTime","endTime","currentTime","time","undefined","currentStartTime","currentEndTime","Table","bordered","border","textAlign","minWidth","handleAddRow","className","danceForms","days","instructors","fee","status","freeTrial","classCategory","FaPlus","row","_row$days","_row$days$split","_row$days$split$call","_row$days$split$call$","_tableData$selectedRo","MultiSelect","call","filter","event","placeholder","maxSelectedLabels","handleTimePickerOpen","TimeRangePicker","Autocomplete","multiple","_","values","renderInput","params","TextField","Object","idx","splice","handleRemoveRow","FaMinus","libraries","apiKey","PinMarker","FaMapMarkerAlt","selectedLocation","setSelectedLocation","mapAddress","setMapAddress","center","setCenter","lat","lng","isLoaded","loadError","useJsApiLoader","googleMapsApiKey","useEffect","PlacesAutocomplete","onSelect","async","results","geocodeByAddress","selectedAddress","latLng","getLatLng","_ref3","getInputProps","suggestions","getSuggestionItemProps","suggestion","_createElement","key","placeId","description","GoogleMapReact","bootstrapURLKeys","defaultCenter","defaultZoom","_ref2","window","google","maps","Geocoder","geocode","location","formatted_address","error","_form$studioName","_form$street","_form$city","StudioId","navigate","useNavigate","document","getElementById","streetName","city","textTransform","marginTop","MUIButton","mt","px","jsx","isOn","handleToggle","alignItems","cursor","timings","setTimings","updatedDayTimings","isDayClosed","open","dayOrder","xs","sm","md","lg","charAt","toUpperCase","CustomSwitch","isClosed","close","toggleDayClosed","slot","removeTimeSlot","MuiButton","addTimeSlot","encodeToUnicode","text","utf8Encoded","TextEncoder","encode","String","fromCharCode","initialStudioTimings","tuesday","wednesday","thursday","friday","saturday","sunday","monday","previousDraftState","useRef","effectDraftRef","logoImageUploadRef","studioImageUploadRef","anouncementImageUploadRef","showSnackbar","useSnackbar","newStudioId","setNewStudioId","selectedInstructors","setSelectedInstructors","selectedDanceStyles","setSelectedDanceStyles","selectedAmenities","setSelectedAmenities","instructor","name","isReady","setIsReady","isSubmitting","setIsSubmitting","locationOptions","indianCities","stateOptions","indianStates","amenityKeys","keys","AMENITIES_ICONS","activeStep","setActiveStep","validateStep1","aboutStudio","founderName","aboutFounder","mobileNumber","whatsappNumber","numberOfHalls","maximumOccupancy","validateStep2","every","slots","entry","_entry$className","_entry$danceForms","_entry$days","_entry$time","_entry$fee","_entry$level","_entry$classCategory$","validateStep3","buildingName","pincode","state","handleNext","errorMessage","validateStep4","_logoImageUploadRef$c","current","isValid","validateStep5","_studioImageUploadRef","_anouncementImageUplo","prevActiveStep","handleBack","darkTheme","createTheme","palette","mode","saveDraft","q","query","collection","db","DRAFT_COLLECTIONS","DRAFT_STUDIOS","where","JSON","parse","localStorage","getItem","UserId","querySnapshot","getDocs","empty","studios","forEach","doc","foundStudio","studioRef","reduce","accumulator","currentState","mailAddress","instructorsNames","landmark","country","geolocation","gstNumber","enrolledId","reviews","author","displayName","isPremium","addAmenities","enrollmentProcess","creatorEmail","email","instagram","facebook","youtube","twitter","visibilty","isEqual","updateDoc","addDoc","unicodeString","c","charCodeAt","TextDecoder","decode","Uint8Array","decodeUnicode","main","previousState","setInterval","err","clearInterval","Stepper","alternativeLabel","label","Step","StepLabel","onSubmit","preventDefault","errorMessages","Boolean","_JSON$parse","currentUserEmail","studioData","notifyEmails","metaData","entity_name","response","postData","COLLECTIONS","STUDIO","ok","result","json","deleteDoc","resetDraft","controlId","rows","minHeight","minheight","ThemeProvider","theme","CssBaseline","handleDanceStylesChange","disabled","handleInstructorChange","rel","textDecoration","overflowX","scrollbarColor","StudioTable","handleAmentiesChange","margin","StudioWeeklyTimings","MapsInput","LinearProgress","ImageUpload","entityId","title","storageFolder","STORAGES","STUDIOICON","maxImageCount","minImageCount","ref","STUDIOIMAGES","STUDIOANNOUNCEMENTS","SuccessMessage","message","timeOfDisplay","fontStyle","showAlert","setShowAlert","timer","setTimeout","clearTimeout","Container","Alert","onClose","dismissible","arguments","setStudio","setStudioId","selectedStudio","setSelectedStudio","selectedStudioId","setSelectedStudioId","selectedStudioFrozenClassRows","setSelectedStudioFrozenClassRows","showUpdateSuccessAlert","setShowUpdateSuccessAlert","showUpdateErrorAlert","setShowUpdateErrorAlert","studiosOfUser","studioIdList","maxIndex","Math","max","Number","validate","nameIdLocal","nameId","indexOfColon","lastIndexOf","substring","dbPayload","putData","reset","selectedId","pop","studioDoc","getDoc","exists","loc","studioItem","newCity","prevState","handleAmenitiesChange","newRowKey","rowKey","_tableData$rowKey","_tableData$rowKey$day","_tableData$rowKey$day2","_tableData$rowKey$day3","_tableData$rowKey$day4","_tableData$index","_tableData$index$clas","AlertPopup","setInstructors","isCreator","setIsCreator","premiumTill","setPremiumTill","currentUser","useAuth","setValue","React","userRef","uid","userSnap","CreatorMode","getCreatorMode","userId","alert","instructorRef","INSTRUCTORS","instructorsList","fetchInstructors","docs","setItem","stringify","getStudioCreated","typography","TabContext","borderBottom","borderColor","TabList","handleChange","newValue","Tab","TabPanel","StudioAdd","StudioUpdate","CardSliderCard"],"sourceRoot":""}