{"version":3,"file":"static/js/8171.40666326.chunk.js","mappings":"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","sources":["Screens/CreatorDashboard.js","constants.js","utils/firebaseUtils.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { useAuth } from '../context/AuthContext';\nimport { queryDocumentsCount } from '../utils/firebaseUtils';\nimport { COLLECTIONS } from '../constants';\nimport { Card, CardContent, Typography, Grid, Icon } from '@mui/material';\nimport CreatorDataTable from '../Components/CreatorDataTable.js';\n\nfunction CreatorDashboard() {\n  const [counts, setCounts] = useState({\n    instructorsCount: 0,\n    studiosCount: 0,\n    workshopsCount: 0,\n    openClassesCount: 0,\n    coursesCount: 0,\n  });\n  \n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n  const { currentUser } = useAuth();\n\n  useEffect(() => {\n    const fetchCounts = async () => {\n      const instructorsCount = await queryDocumentsCount(COLLECTIONS.INSTRUCTORS, 'createdBy', '==', currentUser.uid);\n      const studiosCount = await queryDocumentsCount(COLLECTIONS.STUDIO, \"UserId\", '==', currentUser.uid);\n      const workshopsCount = await queryDocumentsCount(COLLECTIONS.WORKSHOPS, \"UserId\", '==', currentUser.uid);\n      const openClassesCount = await queryDocumentsCount(COLLECTIONS.OPEN_CLASSES, \"UserId\", '==', currentUser.uid);\n      const coursesCount = await queryDocumentsCount(COLLECTIONS.COURSES, \"UserId\", '==', currentUser.uid);\n\n      setCounts({ \n        instructorsCount, \n        studiosCount, \n        workshopsCount, \n        openClassesCount, \n        coursesCount \n      });\n    };\n\n    fetchCounts();\n  }, [currentUser]);\n  \n  const isDashboardModuleVisible = process.env.REACT_APP_DASHBOARD_MODULES_VISIBLE === \"true\";\n  const cardItems = [\n    { title: \"Total Studios\", data: counts.studiosCount, link: \"#/modifyStudios\" },\n    { title: \"Total Instructors\", data: counts.instructorsCount, link: \"#/modifyInstructors\" }\n  ];\n  if (isDashboardModuleVisible) {\n    cardItems.push(\n      { title: \"Total Workshops\", data: counts.workshopsCount, link: \"#/modifyWorkshops\" },\n      { title: \"Total Open Classes\", data: counts.openClassesCount, link: \"#/modifyOpenClasses\" },\n      { title: \"Total Courses\", data: counts.coursesCount, link: \"#/modifyCourses\" },\n      { title: \"Studio Subscription\", data: counts.coursesCount, link: \"#/studioSubscription\" }\n    );\n  }\n\n  return (\n    <div style={{ minHeight: \"75vh\" }}>\n      <Typography variant=\"h4\" sx={{ color: isDarkModeOn ? \"white\" : \"black\", textTransform: 'capitalize' }}>\n        Dashboard\n      </Typography>\n\n      <Grid container spacing={2}>\n        {cardItems.map((item, index) => (\n          <Grid item xs={12} sm={6} md={4} key={index}>\n            <Card sx={{backgroundColor:isDarkModeOn?\"black\":\"white\"}}>\n              <CardContent >\n                <Typography variant=\"h6\" component=\"div\" sx={{color:isDarkModeOn?\"white\":\"black\"}}>\n                  <>\n                    {item.title}\n                    <a href={item.link} >\n                      <Icon baseClassName=\"fas\" className=\"fa-plus-circle\" color=\"primary\" />\n                    </a>\n                  </>\n                </Typography>\n                <Typography variant=\"h4\" sx={{color:isDarkModeOn?\"white\":\"black\"}} >{item.data}</Typography>\n                \n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n      <br/>\n      {isDashboardModuleVisible && <CreatorDataTable/>}\n    </div>\n  );\n}\n\nexport default CreatorDashboard;\n","import { FaSnowflake, FaWifi, FaTint, FaToilet, FaPlug, FaFireExtinguisher, FaFirstAid, FaVideo, FaCreditCard, FaParking  } from 'react-icons/fa';\n\nexport const STATUSES = {\n    SUBMITTED: \"Submitted\",\n    UNDER_REVIEW: \"Under Review\",\n    REVIEWED: \"Reviewed\",\n    VERIFIED: \"Verified\",\n    VERIFICATION_FAILED: \"Verification Failed\",\n};\n\nexport const DRAFT_COLLECTIONS = {\n    DRAFT_STUDIOS: 'DraftStudios',\n    DRAFT_WORKSHOPS: 'DraftWorkshops',\n    DRAFT_OPEN_CLASSES: 'DraftOpenClasses',\n    DRAFT_COURSES: 'DraftCourses'\n};\n\nexport const LEVELS = {\n    ALL : \"All\",\n    BEGINNERS : \"Beginner\", \n    INTERMEDIATE :\"Intermediate\", \n    ADVANCED :\"Advanced\"\n}\nexport const ENTITY_FLAG = {\n    INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR : 30,\n    WORKSHOPS_BOOKING_LIMIT : 10,\n    OPEN_CLASSES_BOOKING_LIMIT : 2,\n    COURSES_BOOKING_LIMIT : 10,\n}\n\n\nexport const SERVER_URLS = {\n    CLOUD : process.env.REACT_APP_BACKEND_URL,\n    LOCAL : 'http://127.0.0.1:8000/'\n}\n\nexport const COLORS = {\n    GREEN: { backgroundColor: \"#28a745\", color: \"#fff\" },     // Green background, white text\n    BLUE: { backgroundColor: \"#007bff\", color: \"#fff\" },      // Blue background, white text\n    YELLOW: { backgroundColor: \"#ffc107\", color: \"#000\" },    // Yellow background, black text\n    RED: { backgroundColor: \"#dc3545\", color: \"#fff\" },       // Red background, white text\n    PURPLE: { backgroundColor: \"#6f42c1\", color: \"#fff\" },    // Purple background, white text\n    ORANGE: { backgroundColor: \"#fd7e14\", color: \"#fff\" },    // Orange background, white text\n    TEAL: { backgroundColor: \"#20c997\", color: \"#fff\" },      // Teal background, white text\n    PINK: { backgroundColor: \"#e83e8c\", color: \"#fff\" },      // Pink background, white text\n    GRAY: { backgroundColor: \"#6c757d\", color: \"#fff\" },       // Gray background, white text\n\n    LIGHTBLUE: { backgroundColor: \"#17a2b8\", color: \"#fff\" }, // Light blue background, white text\n    DARKBLUE: { backgroundColor: \"#343a40\", color: \"#fff\" },  // Dark blue background, white text\n    CYAN: { backgroundColor: \"#00bcd4\", color: \"#fff\" },      // Cyan background, white text\n    INDIGO: { backgroundColor: \"#6610f2\", color: \"#fff\" },    // Indigo background, white text\n    LIME: { backgroundColor: \"#cddc39\", color: \"#000\" },      // Lime background, black text\n    AMBER: { backgroundColor: \"#ffca28\", color: \"#000\" },     // Amber background, black text\n    BROWN: { backgroundColor: \"#795548\", color: \"#fff\" },     // Brown background, white text\n    LIGHTGREEN: { backgroundColor: \"#8bc34a\", color: \"#000\" },// Light green background, black text\n    DEEPPURPLE: { backgroundColor: \"#673ab7\", color: \"#fff\" },// Deep purple background, white text\n    DEEPORANGE: { backgroundColor: \"#ff5722\", color: \"#fff\" },// Deep orange background, white text\n    BLACK: { backgroundColor: \"#000000\", color: \"#fff\" },     // Black background, white text\n    WHITE: { backgroundColor: \"#ffffff\", color: \"#000\" },     // White background, black text\n    SILVER: { backgroundColor: \"#c0c0c0\", color: \"#000\" },    // Silver background, black text\n    GOLD: { backgroundColor: \"#ffd700\", color: \"#000\" },      // Gold background, black text\n    NAVY: { backgroundColor: \"#001f3f\", color: \"#fff\" },      // Navy background, white text\n    OLIVE: { backgroundColor: \"#3d9970\", color: \"#fff\" },     // Olive background, white text\n\n  };\n\nexport const CHIP_LEVELS_DESIGN = {\n    [LEVELS.ALL]: COLORS.GREEN,           // Green background, white text\n    [LEVELS.BEGINNERS]: COLORS.BLUE,     // Blue background, white text\n    [LEVELS.INTERMEDIATE]: COLORS.YELLOW,  // Yellow background, black text\n    [LEVELS.ADVANCED]: COLORS.RED      // Red background, white text\n  };\n  \n\n  \nexport const danceStylesColorChips = [COLORS.PURPLE,COLORS.ORANGE,COLORS.TEAL,COLORS.LIME]\n\nexport const COLLECTIONS = {\n    USER: \"User\",\n    USER_KYC:\"UserKyc\",\n    ADMIN:\"Admin\",\n    REVIEWS: \"Reviews\",\n    TRANSACTIONS: \"Transactions\",\n    STUDIO: \"Studio\",\n    INSTRUCTORS: \"Instructors\",\n    FREE_TRIAL_BOOKINGS:\"FreeTrialBookings\",\n    WORKSHOPS: 'Workshops',\n    OPEN_CLASSES: 'OpenClasses',\n    COURSES: 'Courses',\n    BOOKINGS: 'Bookings',\n}\n\nexport const STORAGES ={\n    STUDIOIMAGES:'StudioImages',\n    STUDIOICON:'StudioIcon',\n    STUDIOANNOUNCEMENTS :'StudioAnnouncements',\n    USERIMAGE:'UserImage',\n    INSTRUCTORIMAGES: 'InstructorImages',\n    WORKSHOPICON :\"WorkshopIcon\",\n    WORKSHOPIMAGES :\"WorkshopImages\",\n    OPENCLASSICON :\"OpenClassIcon\",\n    COURSEICON :\"CourseIcon\",\n    CREATORS_KYC_DOCUMENTS :\"CreatorKycDocuments\"\n}\n\nexport const SEARCH_FILTERS ={\n    DANCEFORMS:'danceforms',\n    DISTANCES:'distances',\n}\n\nexport const BASEURL_DEV = \"http://0.0.0.0:8000/\"\nexport const BASEURL_PROD= process.env.REACT_APP_BACKEND_URL\nexport const STUDIO_ICON_DEFAULT = \"https://firebasestorage.googleapis.com/v0/b/nritya-7e526.appspot.com/o/RichEmailImages%2FDance3.jpg?alt=media&token=d7d41929-39c1-40d1-ad6a-1b2281769e84\"\n\nexport const AMENITIES_ICONS = {\n    \"AC\": <FaSnowflake />,\n    \"Free Wifi\": <FaWifi />,\n    \"RO Water\": <FaTint />,\n    \"Toilet\": <FaToilet />,\n    \"Power Backup\": <FaPlug />,\n    \"Fire Extinguisher\": <FaFireExtinguisher />,\n    \"First Aid Kit\": <FaFirstAid />,\n    \"CCTV Camera\": <FaVideo />,\n    \"Card Payment\": <FaCreditCard />,\n    \"Parking Space\": <FaParking />,\n};\n\n","import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, query, getDocs, where, getCountFromServer } from 'firebase/firestore';\nimport { db } from '../config';\nimport {ref,listAll,getDownloadURL,uploadBytes, deleteObject, uploadBytesResumable  } from \"firebase/storage\";\nimport { storage } from '../config';\nimport { BASEURL_DEV, BASEURL_PROD } from '../constants';\nimport secureLocalStorage from 'react-secure-storage';\n\nexport const setCreatorMode = async (uid) => {\n  const BASEURL = BASEURL_PROD;\n  const url = `${BASEURL}crud/getUserMode/${uid}`;\n  //console.log(\"creatorMode uid\", uid, url);\n  \n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.success) {\n      let mode = false;\n      if (data.data === true) {\n        mode = true;\n      }\n      //console.log(\"setCreatorMode: Is User a creator?\", mode);\n      secureLocalStorage.setItem('CreatorMode', mode);\n    } else {\n      console.log(\"Error: \", data.message || \"Unknown error\");\n      //secureLocalStorage.setItem('CreatorMode', false);\n    }\n    \n  } catch (error) {\n    console.log(\"Error fetching user mode: \", error);\n    secureLocalStorage.setItem('CreatorMode', false);\n  }\n}\n\nexport const fetchStudioEntities = async (studioId, entityType, setState) => {\n  const BASE_URL = BASEURL_PROD;\n  try {\n    const url = `${BASE_URL}crud/${studioId}/${entityType}/`;\n    console.log(url)\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.success) {\n      setState(data.data);\n    } else {\n      console.error(`Error fetching ${entityType}:`, data.error);\n    }\n  } catch (error) {\n    console.error(`Error fetching ${entityType}:`, error);\n  }\n};\n\n\nexport const getCreatorMode = async () => {\n  try{\n    const mode = secureLocalStorage.getItem('CreatorMode');\n    console.log(\"getCreatorMode \",mode)\n    if (mode){\n      return mode\n    }else{\n      return false\n    }\n  } \n  catch(error){\n    console.log(\" error\");\n    return false\n  }\n}\n\nexport const setGetCreatorModeOnMount = async (uid) => {\n  await setCreatorMode(uid);\n  return await getCreatorMode();\n};\n\n\n// Read operation with image URL\nexport const readDocumentWithImageUrl = async (collectionName, productId) => {\n    console.log(\"Debug \",`${collectionName}/${productId}`)\n    const storagePath = `${collectionName}/${productId}`;\n    const folderRef = ref(storage,storagePath);\n    try {\n        const result = await listAll(folderRef);\n        if (result.items.length > 0) {\n            const firstFileRef = result.items[0];\n            const url = await getDownloadURL(firstFileRef);\n            console.log('Debug URL:', url);\n            return url;\n          } else {\n            console.log('Debug No files found in the folder.');\n            return null;\n          }\n    } catch (error) {\n      console.error('Error getting image URL:', error);\n      return null;\n    }\n  };\n\n// Read operation\nexport const readDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    const docSnapshot = await getDoc(docRef);\n    return docSnapshot.exists() ? docSnapshot.data() : null;\n};\n\n// Create or Update operation\nexport const saveDocument = async (collectionName, documentId, data) => {\n    const docRef = doc(db, collectionName, documentId);\n    await setDoc(docRef, data, { merge: true });\n    return data;\n};\n\n\nexport const handleSavePostOTPSuccess = async (collectionName, documentId, phoneNumber) => {\n  const docRef = doc(db, collectionName, documentId);\n  await updateDoc(docRef, {isPhoneNumberVerified:true,phoneNumber});\n  return true;\n};\n\n// Update specific fields in a document\nexport const updateDocumentFields = async (collectionName, documentId, fields) => {\n    const docRef = doc(db, collectionName, documentId);\n    await updateDoc(docRef, fields);\n    return { id: documentId, ...fields };\n};\n\n// Delete operation\nexport const deleteDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    await deleteDoc(docRef);\n    return { id: documentId };\n};\n\n// Query operation\nexport const queryDocuments = async (collectionName, conditions) => {\n    const q = query(collection(db, collectionName, conditions));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const queryDocumentsCount = async (collectionName,field,operation,value) => {\n    console.log(\"Hiii \",collectionName,field,operation,value)\n    const q = query(collection(db, collectionName), where(field,operation,value));\n    const snapshot = await getCountFromServer(q);\n    return snapshot.data().count;\n};\n\n\n  // Function to delete all images in a folder\nexport  const deleteAllImagesInFolder = async (storageFolder, entityId) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n    // Function to delete all images in a folder\n  export  const deleteAllImagesInFolder2 = async (storageFolder, entityId,subfolder) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}/${subfolder}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n  // Function to delete images\nexport const deleteImages = async (storageFolder,imagesToDelete,entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Deletes specific images associated with the given entityId.\n\n    Args:\n      imagesToDelete <array>: An array of image objects to be deleted.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n    const total = imagesToDelete.length;\n    let done = 0;\n    await Promise.all(imagesToDelete.map(async (file) => {\n      let folderPath = `${storageFolder}/${entityId}/${file.filename}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}/${file.filename}`;\n      }\n      const fileRefToDelete = ref(storage, folderPath);\n      await deleteObject(fileRefToDelete);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  // Function to upload new images\nexport const uploadImages = async (storageFolder, newImages, entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n\n    Args:\n      newImages <array>: An array of new image objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n   console.log(storageFolder,entityId)\n   const total = newImages.length;\n    let done = 0;\n    await Promise.all(newImages.map(async (newFileData) => {\n      let folderPath = `${storageFolder}/${entityId}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n      }\n      const fileRef = ref(storage, `${folderPath}/${newFileData.file.name}`);\n      await uploadBytes(fileRef, newFileData.file);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  export const uploadImages2 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    uploadBytesResumable(storageRef, newImages).then((snapshot) => {\n      console.log('Uploaded a blob or file!');\n    });\n  };\n\n  export const uploadImages3 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n        });\n      }\n    );\n    \n  };\n\n\n  export const uploadImages4 = async (storageFolder, newImages, entityId, thirdFolder = null, onProgress, onComplete) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages,newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const totalBytes = snapshot.totalBytes;\n        const bytesTransferred = snapshot.bytesTransferred;\n        const progress = totalBytes > 0 ? ((bytesTransferred / totalBytes) * 100).toFixed(2) : -1;\n        onProgress(progress);\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n          onComplete(downloadURL);\n        });\n\n      }\n    );\n    \n  };\n\n\n export const uploadOneImageAndGetURL = async (storageFolder, file, entityId) => {\n    try {\n      const folderPath = `${storageFolder}/${entityId}/${file.name}`;\n      console.log(folderPath)\n      const fileRef = ref(storage, folderPath);\n      \n      await uploadBytes(fileRef, file);\n  \n      const imageUrl = await getDownloadURL(fileRef);\n      console.log(imageUrl)\n      return imageUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error; \n    }\n  };\n  \n  export const getAllFilesFromFolder = async (storageFolder) => {\n    const folderPath = `${storageFolder}`;\n    const folderRef = ref(storage, folderPath);\n    \n    try {\n        const fileList = await listAll(folderRef);\n\n        const imageUrlsComprehensive = await Promise.all(\n          fileList.items.map(async (fileRef) => {\n            const downloadURL = await getDownloadURL(fileRef);\n  \n            return {\n              id: fileRef.name,\n              filename: fileRef.name,\n              fileURL: downloadURL,\n            };\n          })\n        );\n\n        // return imageUrls;\n        return imageUrlsComprehensive\n    } catch (error) {\n        console.error('Error retrieving images:', error);\n        throw error;\n    }\n};\n\n"],"names":["counts","setCounts","useState","instructorsCount","studiosCount","workshopsCount","openClassesCount","coursesCount","isDarkModeOn","useSelector","selectDarkModeStatus","currentUser","useAuth","useEffect","async","queryDocumentsCount","COLLECTIONS","INSTRUCTORS","uid","STUDIO","WORKSHOPS","OPEN_CLASSES","COURSES","fetchCounts","cardItems","title","data","link","_jsxs","style","minHeight","children","_jsx","Typography","variant","sx","color","textTransform","Grid","container","spacing","map","item","index","xs","sm","md","Card","backgroundColor","CardContent","component","_Fragment","href","Icon","baseClassName","className","process","STATUSES","SUBMITTED","UNDER_REVIEW","REVIEWED","VERIFIED","VERIFICATION_FAILED","DRAFT_COLLECTIONS","DRAFT_STUDIOS","DRAFT_WORKSHOPS","DRAFT_OPEN_CLASSES","DRAFT_COURSES","LEVELS","ALL","BEGINNERS","INTERMEDIATE","ADVANCED","ENTITY_FLAG","INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR","WORKSHOPS_BOOKING_LIMIT","OPEN_CLASSES_BOOKING_LIMIT","COURSES_BOOKING_LIMIT","SERVER_URLS","CLOUD","LOCAL","COLORS","GREEN","BLUE","YELLOW","RED","PURPLE","ORANGE","TEAL","PINK","GRAY","LIGHTBLUE","DARKBLUE","CYAN","INDIGO","LIME","AMBER","BROWN","LIGHTGREEN","DEEPPURPLE","DEEPORANGE","BLACK","WHITE","SILVER","GOLD","NAVY","OLIVE","CHIP_LEVELS_DESIGN","danceStylesColorChips","USER","USER_KYC","ADMIN","REVIEWS","TRANSACTIONS","FREE_TRIAL_BOOKINGS","BOOKINGS","STORAGES","STUDIOIMAGES","STUDIOICON","STUDIOANNOUNCEMENTS","USERIMAGE","INSTRUCTORIMAGES","WORKSHOPICON","WORKSHOPIMAGES","OPENCLASSICON","COURSEICON","CREATORS_KYC_DOCUMENTS","BASEURL_PROD","STUDIO_ICON_DEFAULT","AMENITIES_ICONS","FaSnowflake","FaWifi","FaTint","FaToilet","FaPlug","FaFireExtinguisher","FaFirstAid","FaVideo","FaCreditCard","FaParking","setCreatorMode","BASEURL","url","concat","response","fetch","json","success","mode","secureLocalStorage","setItem","console","log","message","error","fetchStudioEntities","studioId","entityType","setState","BASE_URL","setGetCreatorModeOnMount","getItem","getCreatorMode","readDocumentWithImageUrl","collectionName","productId","storagePath","folderRef","ref","storage","result","listAll","items","length","firstFileRef","getDownloadURL","readDocument","documentId","docRef","doc","db","docSnapshot","getDoc","exists","saveDocument","setDoc","merge","handleSavePostOTPSuccess","phoneNumber","updateDoc","isPhoneNumberVerified","updateDocumentFields","fields","id","field","operation","value","q","query","collection","where","getCountFromServer","count","deleteAllImagesInFolder","storageFolder","entityId","folderPath","fileList","Promise","all","deleteObject","fileRef","deleteAllImagesInFolder2","subfolder","deleteImages","imagesToDelete","setProgress","thirdFolder","arguments","undefined","total","done","file","filename","fileRefToDelete","uploadImages","newImages","newFileData","name","uploadBytes","uploadImages4","onProgress","onComplete","storageRef","uploadTask","uploadBytesResumable","on","snapshot","totalBytes","bytesTransferred","progress","toFixed","state","code","then","downloadURL","getAllFilesFromFolder","fileURL"],"sourceRoot":""}