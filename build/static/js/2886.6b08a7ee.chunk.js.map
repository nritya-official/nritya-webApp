{"version":3,"file":"static/js/2886.6b08a7ee.chunk.js","mappings":"mKAGA,MASA,EATuBA,IAAiB,IAAhB,OAAEC,GAAQD,EAChC,OACEE,EAAAA,EAAAA,KAAA,KAAGC,KAAI,YAAAC,OAAcH,EAAOI,IAAKC,UACjCJ,EAAAA,EAAAA,KAACK,EAAAA,EAAW,CAACC,KAAMP,EAAQQ,QAAS,8EAChC,C,oNCOR,MAAMC,GAAcC,EAAAA,EAAAA,aAAW,CAAAX,EAAwFY,KAAS,IAAhG,SAACC,EAAQ,cAACC,EAAa,MAACC,EAAK,cAAEC,EAAc,GAAE,cAAEC,EAAa,WAAEC,EAAU,QAAEC,GAASnB,EACnH,MAAM,aAAEoB,IAAiBC,EAAAA,EAAAA,KACnBC,GAAeC,EAAAA,EAAAA,KACfC,GAAgBC,EAAAA,EAAAA,QAAO,OACtBC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,KAC5CC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,KAC5CG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,IACnCK,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,IAE1BC,EAAgBC,IAAqBT,EAAAA,EAAAA,WAAU,IAC/CU,EAAgBC,IAAqBX,EAAAA,EAAAA,WAAU,IAC/CY,EAAoBC,IAAyBb,EAAAA,EAAAA,WAAS,GAE7Dc,QAAQC,IAAI,kBAAkB9B,EAAUM,GACxC,MAAMyB,EAAY,SAACC,GAAyB,IAAlBC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACnC,GAAc,IAAVF,EAAa,MAAO,UACxB,MACMK,EAAKJ,EAAW,EAAI,EAAIA,EAExBK,EAAIC,KAAKC,MAAMD,KAAKT,IAAIE,GAASO,KAAKT,IAHlC,OAIV,OAAOW,YAAYT,EAAQO,KAAKG,IAJtB,KAI6BJ,IAAIK,QAAQN,IAAO,IAF5C,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAEIC,EACxE,GAEAM,EAAAA,EAAAA,YAAU,KAEL5C,GACD6C,EAAkB7C,EACpB,GACC,CAACA,KAEJ4C,EAAAA,EAAAA,YAAU,KAER,GAAIzC,GAAiBU,EAAcsB,OAAShC,EAAe,CACzD,MAAM2C,EAAiBjC,EAAckC,MAAM,EAAG5C,GAC9C6C,MAAM,yCAADzD,OAA0CY,EAAa,YAC5DQ,EAAcsC,QAAQC,MAAQ,KAC9BpC,EAAiBgC,EACnB,IACC,CAACjC,EAAeV,IAGnB,MAyFMgD,EAAiBA,CAACtC,EAAeG,KACrC,MAAMoC,EAAkBvC,EAAcwC,KAAIC,GAAQA,EAAK9D,KACjD+D,EAAkBvC,EAAcqC,KAAIC,GAAQA,EAAK9D,KAKvD,MAAO,CAAEgE,eAHcxC,EAAcyC,QAAOH,IAASF,EAAgBM,SAASJ,EAAK9D,MAG1DmE,UAFP9C,EAAc4C,QAAOH,IAASC,EAAgBG,SAASJ,EAAK9D,MAE1C,EAIhCqD,EAAoBe,UACxB9C,EAAiB,IACjBK,EAAY,IACZ,IACE,MAAM0C,EAAU,GAAAtE,OAAMU,EAAa,KAAAV,OAAIS,GACvC6B,QAAQC,IAAI+B,GACZ,MAAMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,GAASH,GACjCI,QAAiBC,EAAAA,EAAAA,IAAQJ,GAEzBK,QAAcC,QAAQC,IAC1BJ,EAASK,MAAMjB,KAAIO,UACjB,MAAMW,QAAoBC,EAAAA,EAAAA,IAAeC,GAEzC,MAAO,CACLjF,GAAIiF,EAAQC,KACZC,SAAUF,EAAQC,KAClBE,QAASL,EACV,KAILtD,EAAiBkD,GACjBrD,EAAiBqD,EACnB,CAAE,MAAOU,GACPhD,QAAQgD,MAAM,8BAA+BA,EAC/C,GAUF,OAPAC,EAAAA,EAAAA,qBAAoB/E,GAAK,MACvBgF,QAASA,IACe,IAAlB3E,GACGuB,OAKTtC,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,kBAAkBC,MAAO,CAAEC,QAAS,OAAQC,MAAO,OAAQC,eAAgB,UAAW3F,UACnGJ,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,iCAAiCC,MAAO,CAAEI,KAAM,IAAID,eAAgB,UAAW3F,UAC5FJ,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,WAAWC,MAAO,CAAEI,KAAM,IAAKD,eAAgB,UAAU3F,UACtEJ,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,YAAWvF,UACxB6F,EAAAA,EAAAA,MAAA,OAAKN,UAAU,YAAYC,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,SAAU3B,SAAA,EACxF6F,EAAAA,EAAAA,MAAA,OAAKN,UAAU,cAAavF,SAAA,EAC1BJ,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,sBAAqBvF,UAClC6F,EAAAA,EAAAA,MAAA,OAAKN,UAAU,gBAAgBC,MAAO,CAACG,eAAe,SAASC,KAAM,KAAK5F,SAAA,EACxEJ,EAAAA,EAAAA,KAAA,MAAAI,SAAKS,KACLoF,EAAAA,EAAAA,MAAA,KAAA7F,SAAA,CAAG,sBAAoBU,EAAc,IAAEF,IAAkBuF,EAAAA,GAASC,eAAgBpG,EAAAA,EAAAA,KAAA,KAAAI,SAAG,mCAGzF6F,EAAAA,EAAAA,MAAA,OAAKL,MAAO,CAAGM,gBAAiBnE,EAAe,UAAY,SAAS3B,SAAA,EAClEJ,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,iBAAgBvF,UAC7BJ,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,kBAAiBvF,UAC9BJ,EAAAA,EAAAA,KAAA,SACEU,IAAKY,EACL+E,KAAK,OACLlG,GAAG,aACHwF,UAAU,oBACVW,SA5JKC,IAEzB,MAAMzB,EAAQ0B,MAAMC,KAAKF,EAAEG,OAAO5B,OAC5B6B,EAAe,GAErB7B,EAAM8B,SAAS3C,IACb,MAAM4C,EAAS,IAAIC,WACnBD,EAAOE,UAAY,KACjBJ,EAAaK,KAAK,CAChB7G,GAAI8G,IAAAA,WACJ3B,SAAUrB,EAAKoB,KACf6B,SAAUjD,EAAKoC,KACfc,UAAWN,EAAOO,OAClBC,SAAUpD,EAAKqD,iBAAiBC,eAAe,SAC/CC,SAAU9E,EAAUuB,EAAKwD,MACzBxD,KAAMA,IAGJ0C,EAAa7D,SAAWgC,EAAMhC,SAChCrB,GAAkBiG,GAAc,IAAIA,KAAcf,KAClD7E,EAAY6E,GACZrF,EAAcsC,QAAQC,MAAQ,KAEhC,EAGFgD,EAAOc,cAAc1D,EAAK,GAC1B,EAkIkB2D,UAAQ,SAKd5H,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,qBAAoBvF,UACnCJ,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,MAAKvF,SACjBO,GAAYa,EAAcsB,OAAS,EAClCtB,EAAcwC,KAAKC,IAEjBjE,EAAAA,EAAAA,KAAA,OAAmB2F,UAAU,sBAAsBC,MAAO,CAAEiC,SAAU,YAAazH,UAEjFJ,EAAAA,EAAAA,KAAC8H,EAAAA,EAAI,CAACC,GAAI,CAAEC,SAAU,KAAM5H,SACzB6D,EAAKqB,SAAS2C,MAAM,+BACnBhC,EAAAA,EAAAA,MAAA,OAAKL,MAAO,CAAEiC,SAAU,YAAazH,SAAA,EACnCJ,EAAAA,EAAAA,KAAA,OACEkI,IAAKjE,EAAKkD,UAAYlD,EAAKkD,UAAYlD,EAAKsB,QAC5C4C,IAAKlE,EAAKqB,SACVK,UAAU,eACVC,MAAO,CAAEwC,UAAW,QAASC,UAAW,YAE1CrI,EAAAA,EAAAA,KAACsI,EAAAA,EAAU,CACT,aAAW,SACXC,SAAUtH,EACVuH,QAASA,KAAMC,OAxJbtI,EAwJsC8D,EAAK9D,QAvJvEuI,OAAOC,QAAQ,gDACjBlH,GAAkBiG,GAChBA,EAAUtD,QAAQH,GAASA,EAAK9D,KAAOA,OAHXA,KAwJ+C,EACjDyF,MAAO,CAAEiC,SAAU,WAAYe,IAAK,EAAGC,MAAO,EAAG3C,gBAAiB,4BAA6B9F,UAE/FJ,EAAAA,EAAAA,KAAC8I,EAAAA,EAAU,CAAClD,MAAO,CAACmD,MAAM,kBAI9B/I,EAAAA,EAAAA,KAACgJ,EAAAA,EAAW,CAAA5I,UACVJ,EAAAA,EAAAA,KAAA,KAAG2F,UAAU,yBAtBX1B,EAAK9D,OA8BjBH,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,qBAAoBvF,UACjCJ,EAAAA,EAAAA,KAAA,KAAAI,SAAG,8BAQTJ,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,iBAAgBvF,UAC7BJ,EAAAA,EAAAA,KAAA,UACEqG,KAAK,SACLV,UAAU,iBACVC,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,QAASgH,MAAM,SACpEP,QA9KOjE,UACzB,GAAK5D,EAAL,CAKAwB,GAAmB,GACnBE,GAAmB,GAEnB,IAEE,GADAnB,GAAa,GACS,IAAlBJ,GAAuBU,EAAcsB,QAAU/B,QAE3CkI,EAAAA,EAAAA,IAAwBrI,EAAeD,SACvCuI,EAAAA,EAAAA,IAAatI,EAAciB,EAAUlB,EAAU0B,GACrDjB,EAAa,8BAA+B,WAC5CmB,GAAsB,OACjB,CAEL,MAAM,eAAE4B,EAAc,UAAEG,GAAcR,EAAetC,EAAeG,GAEpE,GAAIZ,GAAiBuD,EAAUxB,OAAS/B,EAEtC,YADAK,EAAa,WAADlB,OAAYa,EAAa,0BAA0B,SAK7DoD,EAAerB,OAAS,UACpBqG,EAAAA,EAAAA,IAAavI,EAAeuD,EAAgBxD,EAAUwB,GAC5Df,EAAa,gCAAiC,YAI5CkD,EAAUxB,OAAS,UACfoG,EAAAA,EAAAA,IAAatI,EAAe0D,EAAW3D,EAAU0B,GACvDjB,EAAa,iCAAkC,YAEjDmB,GAAsB,EACxB,CAEAjB,EAAcsC,QAAQC,MAAQ,IAEhC,CAAE,MAAO2B,GACPjD,GAAsB,GACtBC,QAAQgD,MAAM,mCAAoCA,EACpD,CAAC,QACCtE,GAAa,EACf,CA3CA,MAFEyC,MAAM,qBA6CR,EAgIkB4E,SAAUtH,EAAQb,SACnB,sBAKJoB,EAAcsB,OAAS,IACtB9C,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,gBAAgByD,QAAM,EAAAhJ,UACnC6F,EAAAA,EAAAA,MAAA,OAAKN,UAAU,MAAKvF,SAAA,EACpBJ,EAAAA,EAAAA,KAAA,SACCwB,EAAcwC,KAAKC,IAClBjE,EAAAA,EAAAA,KAAA,OAAmB2F,UAAU,sBAAqBvF,UAClDJ,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,OAAMvF,SAClB6D,EAAKqB,SAAS2C,MAAM,+BACnBjI,EAAAA,EAAAA,KAAA,OACEkI,IAAKjE,EAAKkD,UACVgB,IAAKlE,EAAKqB,SACVK,UAAU,eACVC,MAAO,CAAEwC,UAAW,QAASC,UAAW,YAG1CrI,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,YAAWvF,UACxBJ,EAAAA,EAAAA,KAAA,KAAG2F,UAAU,yBAXT1B,EAAK9D,cAqBrB+B,GAAkB,IACd+D,EAAAA,EAAAA,MAAA,OAAA7F,SAAA,EACI6F,EAAAA,EAAAA,MAAA,KAAGL,MAAO,CAAEmD,MAAOhH,EAAe,OAAS,QAAS3B,SAAA,CAAC,sBAC7B8B,EAAeoB,QAAQ,GAAG,QAElD2C,EAAAA,EAAAA,MAAA,YACIpC,MAAO3B,EACPmH,IAAI,MACJzD,MAAO,CACHmD,MAAOhH,EAAe,OAAS,QACjC3B,SAAA,CAED8B,EAAeoB,QAAQ,GAAG,UAKrClB,GAAkB,IAChB6D,EAAAA,EAAAA,MAAA,OAAA7F,SAAA,EACI6F,EAAAA,EAAAA,MAAA,KAAGL,MAAO,CAAEmD,MAAOhH,EAAe,OAAS,QAAS3B,SAAA,CAAC,uBAC5BgC,EAAekB,QAAQ,GAAG,QAEnD2C,EAAAA,EAAAA,MAAA,YACIpC,MAAOzB,EACPiH,IAAI,MACJzD,MAAO,CACHmD,MAAOhH,EAAe,OAAS,QACjC3B,SAAA,CAEDgC,EAAekB,QAAQ,GAAG,oBAS7C,IAKV9C,EAAY8I,aAAe,CACzBxI,cAAe,EACfE,YAAY,EACZC,SAAQ,GAGV,S,qNC3Ue,SAASZ,EAAWP,GAAkB,IAAjB,QAACS,EAAO,KAACD,GAAKR,EAC9C,MAAMiC,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,GAE3BsH,EAAWjJ,EAAKH,GAAGG,EAAKH,GAAGG,EAAKiJ,SAEhCC,EAAY,CAChBtD,gBAAiBnE,EAAe,OAAS,QACzC0H,QAAS,MACTV,MAAOhH,EAAe,QAAU,QAChC2H,YAAa,OACb5D,MAAO,IACPkC,SAAU,OACV2B,UAAW,KACXC,WAAY,qBAOhB,OACE3D,EAAAA,EAAAA,MAAC6B,EAAAA,EAAI,CAAC+B,QAAQ,QAAQ9B,GAAI,IACrByB,EACH,UAPqB,CACrBM,UAAW,gBAOX1J,SAAA,EAEE6F,EAAAA,EAAAA,MAAC8D,EAAAA,EAAW,CAACC,MAAM,OAAOpE,MAAO,CAAEiC,SAAU,YAAYzH,SAAA,EACvDJ,EAAAA,EAAAA,KAAA,OACEkI,IAAK5H,GAAQA,EAAK2J,QAAU3J,EAAK2J,QAAS,2EAC1CC,QAAQ,OACR/B,IAAI,eACJvC,MAAO,CAAEoC,SAAU,OAAQmC,OAAQ,OAAQC,SAAU,aAGvDpK,EAAAA,EAAAA,KAACqK,EAAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAG3E,MAAO,CAAEiC,SAAU,WAAY2C,OAAQ,EAAGC,KAAM,EAAGhB,QAAS,OAAQrJ,SACxGE,GAAQA,EAAKoK,aAA2C,kBAArBpK,EAAKoK,YAA4BpK,EAAKoK,YAAYC,MAAM,KAAKjH,MAAM,EAAG,GAAGM,KAAI,CAAC4G,EAAMC,KACxH7K,EAAAA,EAAAA,KAAC8K,EAAAA,EAAI,CAED/B,MAAO8B,EAAQ,IAAM,EAAI,SAAW,UACpC9C,GAAI,CAAEgD,aAAc,OAAQC,SAAU,SAC9BC,QAASC,EAAAA,GAAsBL,GAAO3E,gBACtC6C,MAAOmC,EAAAA,GAAsBL,GAAO9B,OAC1C3I,SAEDwK,EAAKO,QAPDN,MAUL7K,EAAAA,EAAAA,KAAC8K,EAAAA,EAAI,CAEL/B,MAAsB,SACtBnD,MAAO,CAAEmF,aAAc,OAAQC,SAAU,UAAW5K,SAEnD,iBAJI,OAUTJ,EAAAA,EAAAA,KAACqK,EAAAA,EAAK,CACFC,UAAU,MACVC,QAAS,EACT3E,MAAO,CAAEiC,SAAU,WAAYe,IAAK,EAAG6B,KAAM,EAAGhB,QAAS,MAAO2B,WAAY,OAAQhL,SAEnFE,GAAQA,EAAK+K,qBAEVrL,EAAAA,EAAAA,KAAC8K,EAAAA,EAAI,CAGH/C,GAAI,CACFuD,WAAY,OACZP,aAAc,OACdC,SAAU,SACVC,QAASM,EAAAA,GAAOC,KAAKtF,gBACrB6C,MAAOwC,EAAAA,GAAOC,KAAKzC,OACnB3I,SAED,wBAVI,SAiBjB6F,EAAAA,EAAAA,MAAC+C,EAAAA,EAAW,CAACpD,MAAO,CAAE6D,QAAS,QAASrJ,SAAA,EACtC6F,EAAAA,EAAAA,MAACwF,EAAAA,EAAG,CAAC5F,QAAQ,OAAOE,eAAe,gBAAgB2F,UAAW,EAAEtL,SAAA,EAC9DJ,EAAAA,EAAAA,KAAC2L,EAAAA,EAAI,CACHC,UAAU,SACV3L,KAAI,YAAAC,OAAcqJ,GAClBsC,WAAW,OACX9C,MAAM,UACN+C,UAAU,eACVC,UAAU,OACVC,SAAO,EACPC,WAAW,SACX7B,SAAS,SACT8B,aAAa,WACbtG,MAAO,CAAEmD,MAAOhH,EAAe,QAAU,SAAU3B,SAElDE,GAAQA,EAAK6L,WAAa7L,EAAK6L,WAAa,SAE9C7L,GAAQA,EAAK8L,WAAa9L,EAAK8L,UAAU,GACxCnG,EAAAA,EAAAA,MAACoG,EAAAA,GAAU,CAACvG,MAAO,GAAIwG,WAAY,EAAGV,UAAU,SAAShG,MAAO,CAAEmD,MAAOhH,EAAe,QAAU,SAAU3B,SAAA,CAAC,UACxGE,EAAK8L,UAAU9I,QAAQ,MACZ,SAGpBtD,EAAAA,EAAAA,KAACqM,EAAAA,GAAU,CAACzG,MAAO,CAAEmD,MAAOhH,EAAe,QAAU,SAAWwK,MAAM,UAASnM,SAAEE,EAAKkM,OAASlM,EAAKkM,OAAS,SAC7GxM,EAAAA,EAAAA,KAACsI,EAAAA,GAAU,CACTc,QAAM,EACN,aAAW,2BACX3B,KAAK,KACLoC,QAAQ,QACRd,MAAM,SACNhB,GAAI,CACFF,SAAU,WACV4E,OAAQ,EACRC,aAAc,MACd7D,MAAO,OACP2B,OAAQ,OACRV,UAAW,mBACX1J,UAEFJ,EAAAA,EAAAA,KAAC2M,EAAAA,EAAQ,OAEX1G,EAAAA,EAAAA,MAACwF,EAAAA,EAAG,CAAC5F,QAAQ,OAAOE,eAAe,gBAAe3F,SAAA,EAChDJ,EAAAA,EAAAA,KAACqM,EAAAA,GAAU,CAACT,UAAU,SAASZ,SAAU,GAAIpF,MAAO,CAAEmD,MAAOhH,EAAe,QAAU,SAAU3B,SAC7FE,GAAQA,EAAKsM,QAAUtM,EAAKsM,QAAQ,GAAC,WAAA1M,OAAUI,EAAKsM,OAAM,eAE7D5M,EAAAA,EAAAA,KAAC6M,EAAAA,EAAM,CACLpF,KAAK,QACLoC,QAAQ,YACR9B,GAAI,CACF6D,UAAW,SACX7C,MAAO,QACP7C,gBAAiB,UACjB,UAAW,CACTA,gBAAiB,UACjB6C,MAAO,SAET,iBAAkB,CAChB7C,gBAAiBnE,EAAe,0BAA4B,0BAC5DgH,MAAO,6BAGX1C,KAAK,SAAQjG,SACd,oBAOX,C,8MCvKA,MA2GA,EA3GwBN,IAAuD,IAADgN,EAAA,IAArD,KAAEC,EAAI,YAAEC,EAAW,aAAEC,EAAY,YAAEC,GAAapN,EAEvE,MAAMqN,EAAcD,EAAYvC,MAAM,KAAK,GAAGQ,OACxCiC,EAAqC,QAA5BN,EAAGI,EAAYvC,MAAM,KAAK,UAAE,IAAAmC,OAAA,EAAzBA,EAA2B3B,OAsCvCkC,EAAqBC,IACzB9K,QAAQC,IAAI6K,GACZ,MAAMC,EApCoBC,MAC1B,MAAMC,EAAU,GAChB,IAAIC,EAAY,GACZC,EAAY,GAChB,IAAK,IAAIC,EAAQ,EAAGA,EAAQ,GAAIA,IAC9B,IAAK,IAAIC,EAAU,EAAGA,EAAU,GAAIA,GAAW,GAAI,CACjD,MAAMC,EAAiBF,EAAMG,WAAWC,SAAS,EAAG,KAC9CC,EAAmBJ,EAAQE,WAAWC,SAAS,EAAG,KAClDE,EAAU,GAAAhO,OAAM4N,EAAc,KAAA5N,OAAI+N,GAExC,GAAIL,EAAQ,GACVF,EAAU1G,KAAK,GAAD9G,OAAIgO,EAAU,YACvB,CACL,MAAMC,GAAoBP,EAAQ,IAAIG,WAAWC,SAAS,EAAG,KAC7DL,EAAU3G,KAAK,GAAD9G,OAAIiO,EAAgB,KAAAjO,OAAI+N,EAAgB,OACxD,CACF,CAGF,IAAK,IAAIhL,EAAI,EAAGA,EAAIyK,EAAU5K,QAAUG,EAAI0K,EAAU7K,OAAQG,IACxDA,EAAIyK,EAAU5K,QAChB2K,EAAQzG,KAAK0G,EAAUzK,IAErBA,EAAI0K,EAAU7K,QAChB2K,EAAQzG,KAAK2G,EAAU1K,IAM3B,OAAOwK,CAAO,EAMMD,GAEpB,OACEvH,EAAAA,EAAAA,MAAAmI,EAAAA,SAAA,CAAAhO,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAOyJ,EAAalN,SAAEkN,IAC7BC,EAAYvJ,KAAKqK,IAChBrO,EAAAA,EAAAA,KAAA,UAAqB6D,MAAOwK,EAAOjO,SAChCiO,GADUA,OAId,EAMP,OACEpI,EAAAA,EAAAA,MAACqI,EAAAA,EAAK,CAACvB,KAAMA,EAAMwB,OAAQvB,EAAY5M,SAAA,EACrCJ,EAAAA,EAAAA,KAACsO,EAAAA,EAAME,OAAM,CAACC,aAAW,EAAArO,UACvBJ,EAAAA,EAAAA,KAACsO,EAAAA,EAAMI,MAAK,CAAAtO,SAAC,mBAEfJ,EAAAA,EAAAA,KAACsO,EAAAA,EAAMK,KAAI,CAAAvO,UACT6F,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACFJ,EAAAA,EAAAA,KAAC6O,EAAAA,EAAG,CAAAzO,UACJ6F,EAAAA,EAAAA,MAAC6I,EAAAA,EAAKC,MAAK,CAAA3O,SAAA,EACXJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAE,gBAGXJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACXC,GAAG,SACH5I,SAAWC,GAAM0G,EAAa1G,EAAEG,OAAO7C,MAAO,MAC9C+B,MAAO,CAACuE,OAAQ,OACdgF,WAAY,QACZ1F,QAAS,OAAOrJ,SAEjBiN,EAAkBF,WAIvBnN,EAAAA,EAAAA,KAAC6O,EAAAA,EAAG,CAAAzO,UACJ6F,EAAAA,EAAAA,MAAC6I,EAAAA,EAAKC,MAAK,CAAA3O,SAAA,EACXJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAE,cAGXJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACXC,GAAG,SACH5I,SAAWC,GAAM0G,EAAa,KAAM1G,EAAEG,OAAO7C,OAC7C+B,MAAO,CAACuE,OAAQ,OACdgF,WAAY,QACZ1F,QAAS,OAAOrJ,SAEjBiN,EAAkBD,gBAM3BpN,EAAAA,EAAAA,KAACsO,EAAAA,EAAMc,OAAM,CAAAhP,UACXJ,EAAAA,EAAAA,KAAC6M,EAAAA,EAAM,CAACrE,QAASwE,EAAY5M,SAAC,aAE1B,E,iEC1GZ,MAAMiP,EAAa,CACjBC,EAAG,MACHC,EAAG,OACHC,EAAG,MACHC,GAAI,QACJC,EAAG,MACHC,GAAI,MACJC,GAAI,OAGOC,EAAoBC,IAC/B,MAAMC,EAAcD,EAAQ9L,KAAKgM,GAAQX,EAAWW,IAAQA,IAE5D,MAAO,IAAI,IAAIC,IAAIF,GAAa,ECA5BG,EAAa,CAAC,MAAM,OAAO,MAAM,QAAQ,MAAM,MAAM,OACrDC,EAAc,CAClBC,KAAM,OACNC,OAAQ,SACRC,WAAY,aACZC,SAAU,WACVC,QAAS,UACTC,IAAK,wBACLC,QAAS,UACTC,SAAU,YAuNZ,QApNA,SAAoB7Q,GAA4D,IAA3D,UAAE8Q,EAAY,GAAE,aAAEC,EAAY,uBAAEC,GAAwBhR,EAC3E,MAAOiR,EAAgBC,IAAqBtP,EAAAA,EAAAA,WAAS,IAC9CuP,EAAkBC,IAAuBxP,EAAAA,EAAAA,UAAS,OAClDyP,EAAaC,IAAkB1P,EAAAA,EAAAA,UAAS,MACzC2P,EAAqB3G,EAAAA,GACpBwC,EAAaoE,IAAmB5P,EAAAA,EAAAA,UAAS,uBAgB1C6P,EAAoBA,CAAC1G,EAAO2G,EAAO3N,KACvCgN,GAAcY,IACD,SAARD,IACD3N,EAAQ2C,MAAMkL,QAAQ7N,GAASA,EAAM8N,KAAK,KAAO9N,GAEnDrB,QAAQC,IAAImO,GACZ,MAAMgB,EAAU,IAAIH,GAEpB,OADAG,EAAQ/G,GAAO2G,GAAS3N,EACjB+N,CAAO,GACd,EASEC,EAAwBA,KAC5Bb,GAAkB,GAClBE,EAAoB,KAAK,EAGrBY,EAAmBA,CAACC,EAAWC,KACnCnB,GAAcY,IACZ,MAAMG,EAAU,IAAIH,GAEpB,GAAyB,OAArBR,GAA6BW,EAAQX,GAAmB,CAC1D,MAAMgB,EAAcL,EAAQX,GAAkBiB,KAE9C,QAAoBnP,IAAhBkP,EAA2B,CAC7B,MAAOE,EAAkBC,GAAkBH,EAAYtH,MAAM,OAE3C,OAAdoH,IACFH,EAAQX,GAAkBiB,KAAI,GAAAhS,OAAM6R,EAAS,OAAA7R,OAAMkS,IAErC,OAAZJ,IACFJ,EAAQX,GAAkBiB,KAAI,GAAAhS,OAAMiS,EAAgB,OAAAjS,OAAM8R,GAE9D,CACF,CAEA,OAAOJ,CAAO,IAGhBR,EAAeH,EAAiB,EAIlC,OACEjR,EAAAA,EAAAA,KAAAoO,EAAAA,SAAA,CAAAhO,UACE6F,EAAAA,EAAAA,MAACoM,EAAAA,EAAK,CAACC,UAAQ,EAACzI,QAAQ,QAAOzJ,SAAA,EAC7BJ,EAAAA,EAAAA,KAAA,SAAAI,UACE6F,EAAAA,EAAAA,MAAA,MAAIL,MAAO,CAAC2M,OAAQ,mBAAmBnS,SAAA,EACrCJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAO+I,UAAU,SAAWC,SAAS,QAASF,OAAQ,mBAAmBnS,SAAC,gBAC9FJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAO+I,UAAU,SAAWC,SAAS,QAASF,OAAQ,mBAAmBnS,SAAC,gBAC9FJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAO+I,UAAU,SAAWC,SAAS,QAASF,OAAQ,mBAAmBnS,SAAC,UAC9FJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAO+I,UAAU,SAAWC,SAAS,QAASF,OAAQ,mBAAmBnS,SAAC,UAC9FJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAO+I,UAAU,SAAWC,SAAS,QAASF,OAAQ,mBAAmBnS,SAAC,iBAC9FJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAO+I,UAAU,SAAWC,SAAS,OAAQF,OAAQ,mBAAmBnS,SAAC,kBAC7FJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAO+I,UAAU,SAAWC,SAAS,QAASF,OAAQ,mBAAmBnS,SAAC,WAC9FJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAO+I,UAAU,SAAWC,SAAS,OAAQF,OAAQ,mBAAmBnS,SAAC,gBAC7FJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAO+I,UAAU,SAAWC,SAAS,QAASF,OAAQ,mBAAmBnS,SAAC,oBAC9FJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,QAAQrJ,UAC1BJ,EAAAA,EAAAA,KAAC6M,EAAAA,EAAM,CAAChD,QAAQ,UAAUrB,QA9EjBkK,KACnB7B,GAAcY,GAAa,IAAIA,EAAU,CAAE9L,UAAW,GAAIgN,WAAY,GAAIC,KAAM,GAAIV,KAAM,sBAAuBW,YAAa,GAAIC,IAAI,GAAGvG,MAAM,GAAIwG,OAAQ,GAAGC,WAAW,EAAOC,cAAe,MAAO,EA6E5I7S,UAC9CJ,EAAAA,EAAAA,KAACkT,EAAAA,IAAM,cAKflT,EAAAA,EAAAA,KAAA,SAAO4F,MAAO,CAAC2M,OAAQ,mBAAmBnS,SACvCwQ,EAAU5M,KAAI,CAACmP,EAAKtI,KAAK,IAAAuI,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OACxBvN,EAAAA,EAAAA,MAAA,MAAgBN,UAAWwL,IAAgBtG,EAAQ,eAAiB,GAAGzK,SAAA,EACrEJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAO8I,OAAQ,mBAAmBnS,UACpDJ,EAAAA,EAAAA,KAAE8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAACM,gBAAgB,QAAQiE,OAAQ,OAAQgF,WAAY,QAAQ1F,QAAS,OAC1FpD,KAAK,OACLxC,MAAOsP,EAAIxN,UACXW,SAAWC,GAAMgL,EAAkB1G,EAAO,YAAatE,EAAEG,OAAO7C,YAIpE7D,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAO8I,OAAQ,mBAAmBnS,UACtD6F,EAAAA,EAAAA,MAAE6I,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAACM,gBAAgB,QAAQiE,OAAQ,OAAQgF,WAAY,QAAQ1F,QAAS,OACxFyF,GAAG,SACHrL,MAAOsP,EAAIR,WACXrM,SAAWC,GAAMgL,EAAkB1G,EAAO,aAActE,EAAEG,OAAO7C,OAAOzD,SAAA,EAExEJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAEzD,SAAC,wBAChBiR,EAAmBrN,KAAKqK,IACvBrO,EAAAA,EAAAA,KAAA,UAAqB6D,MAAOwK,EAAOjO,SAChCiO,GADUA,WAQnBrO,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAE6D,QAAQ,OAAOgJ,SAAS,QAASF,OAAQ,mBAAoB5M,UAAU,UAASvF,UAC3FJ,EAAAA,EAAAA,KAACyT,EAAAA,EAAW,CAAC5P,MAAOsP,EAAIP,MAAQ/C,EAAoB,OAAHsD,QAAG,IAAHA,GAAS,QAANC,EAAHD,EAAKP,YAAI,IAAAQ,GAAO,QAAPC,EAATD,EAAWzI,aAAK,IAAA0I,GAAO,QAAPC,EAAhBD,EAAAK,KAAAN,EAAmB,YAAI,IAAAE,GAAQ,QAARC,EAAvBD,EAAyBlP,cAAM,IAAAmP,OAA5B,EAAHA,EAAAG,KAAAJ,GAAkCtD,GAAe,KAARA,KACtF1J,SAAWqN,GAAUpC,EAAkB1G,EAAO,OAAQ8I,EAAMjN,OAAO7C,OACnE4J,QAASyC,EACT0D,YAAY,aAAaC,kBAAmB,EAAGlO,UAAU,yBAG/DM,EAAAA,EAAAA,MAAA,MAAIL,MAAO,CAAC6D,QAAQ,OAAO8I,OAAQ,mBAAmBnS,SAAA,EACpDJ,EAAAA,EAAAA,KAAE8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAACM,gBAAgB,SACrCG,KAAK,OACLxC,MAAOsP,EAAIjB,KAEX1J,QAASA,IAjGIsL,EAACjJ,EAAMqH,KAClCZ,EAAeY,GACfhB,EAAoBrG,GACpBmG,GAAkB,EAAK,EA8FM8C,CAAqBjJ,EAAMsI,EAAIjB,QAG/CnB,IACD/Q,EAAAA,EAAAA,KAAC+T,EAAe,CACdhH,KAAMgE,EACN/D,YAAa6E,EACb5E,aAAc6E,EACd5E,aAAwC,QAA3BsG,EAAA5C,EAAUK,UAAiB,IAAAuC,OAAA,EAA3BA,EAA6BtB,OAAQ,oBAKtDlS,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAO8I,OAAQ,kBAAmBzM,MAAM,SAAS1F,UACnEJ,EAAAA,EAAAA,KAACgU,EAAAA,EAAY,CACXpM,UAAQ,EACRzH,GAAG,gBACHsN,QAASqD,EACTjN,MAAOsP,EAAIN,YACXvM,SAAUA,CAAC2N,EAAGC,IAAW3C,EAAkB1G,EAAO,cAAeqJ,GACjEC,YAAcC,IACZpU,EAAAA,EAAAA,KAACqU,EAAAA,EAAS,IACJD,EACJvK,QAAQ,WACR+J,YAAY,4BAKpB5T,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAO8I,OAAQ,mBAAmBnS,UACpDJ,EAAAA,EAAAA,KAAE8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAACM,gBAAgB,SACrCG,KAAK,OACLxC,MAAOsP,EAAIL,IACXxM,SAAWC,GAAMgL,EAAkB1G,EAAO,MAAOtE,EAAEG,OAAO7C,YAG9D7D,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAO8I,OAAQ,mBAAmBnS,UACpD6F,EAAAA,EAAAA,MAAE6I,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAACM,gBAAgB,QAAQiE,OAAQ,OAAQgF,WAAY,QAAQ1F,QAAS,OAC1FyF,GAAG,SACHrL,MAAOsP,EAAI5G,MACXjG,SAAWC,GAAMgL,EAAkB1G,EAAO,QAAStE,EAAEG,OAAO7C,OAAOzD,SAAA,CACpE,SAAKJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAEzD,SAAC,oBACjBJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,WAAUzD,SAAC,cACzBJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,eAAczD,SAAC,kBAC7BJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,WAAUzD,SAAC,cACzBJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,OAAMzD,SAAC,eAI7BJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAO8I,OAAQ,mBAAmBnS,UACpD6F,EAAAA,EAAAA,MAAE6I,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAACM,gBAAgB,QAAQiE,OAAQ,OAAQgF,WAAY,QAAQ1F,QAAS,OAC1FyF,GAAG,SACHrL,MAAOsP,EAAIH,UACX1M,SAAWC,GAAMgL,EAAkB1G,EAAO,YAAatE,EAAEG,OAAO7C,OAAOzD,SAAA,CACxE,SAAKJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAEzD,SAAC,oBACjBJ,EAAAA,EAAAA,KAAA,UAAQ6D,OAAO,EAAKzD,SAAC,SACrBJ,EAAAA,EAAAA,KAAA,UAAQ6D,OAAO,EAAMzD,SAAC,aAG9BJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,OAAQ3D,MAAM,SAAS1F,UACzC6F,EAAAA,EAAAA,MAAE6I,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAACM,gBAAgB,QAAQiE,OAAQ,OAAQgF,WAAY,QAAQ1F,QAAS,OAC1FyF,GAAG,SACHrL,MAAO2C,MAAMkL,QAAQyB,EAAIF,gBAAkBE,EAAIF,cAAcnQ,OAAS,EAAIqQ,EAAIF,cAAc,GAAK,GACjG3M,SAAWC,GAAMgL,EAAkB1G,EAAO,gBAAiB,CAACtE,EAAEG,OAAO7C,QAAQzD,SAAA,EAE7EJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAEzD,SAAC,0BAChBkU,OAAOJ,OAAO/D,GAAanM,KAAI,CAACH,EAAO0Q,KAAQvU,EAAAA,EAAAA,KAAA,UAAkB6D,MAAOA,EAAMzD,SAAEyD,GAApB0Q,WAGjEvU,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAC6D,QAAQ,QAAQrJ,UAC1BJ,EAAAA,EAAAA,KAAC6M,EAAAA,EAAM,CAAChD,QAAQ,SAASrB,QAASA,IA7LvBqC,KACnB+F,EAAU9N,OAAS,IAAM,GAE7B+N,GAAcY,IACZ,MAAMG,EAAU,IAAIH,GAEpB,OADAG,EAAQ4C,OAAO3J,EAAO,GACf+G,CAAO,GACd,EAsLkD6C,CAAgB5J,GAAOzK,UAC7DJ,EAAAA,EAAAA,KAAC0U,EAAAA,IAAO,UA5GL7J,EA+GJ,UAMjB,E,8CCrOA,MAAM8J,EAAY,CAAC,UACbC,EAAS,0CAoGf,MAAMC,EAAYA,KACd7U,EAAAA,EAAAA,KAAA,OAAK4F,MAAO,CAAEiC,SAAU,WAAY2K,UAAW,UAAWpS,UACtDJ,EAAAA,EAAAA,KAAC8U,EAAAA,IAAc,CAAClP,MAAO,CAAEmD,MAAO,QAASiC,SAAU,YAI3D,EAxGA,SAAkBlL,GAAwE,IAAvE,iBAAEiV,EAAgB,oBAAEC,EAAmB,WAAEC,EAAU,cAAEC,GAAepV,EACnF,MAAOqV,EAAQC,IAAa1T,EAAAA,EAAAA,UAASqT,GAAoB,CAAEM,IAAK,QAASC,IAAK,UAExE,SAAEC,EAAQ,UAAEC,IAAcC,EAAAA,EAAAA,IAAe,CAC3CC,iBAAkBd,EAClBD,cAuCJ,OApCApR,EAAAA,EAAAA,YAAU,KACFwR,GACAK,EAAUL,EACd,GACD,CAACA,IAgCAS,GAAkBxV,EAAAA,EAAAA,KAAA,KAAAI,SAAG,uBACpBmV,GAGDtP,EAAAA,EAAAA,MAAA,OAAA7F,SAAA,EACIJ,EAAAA,EAAAA,KAAA,UAGAA,EAAAA,EAAAA,KAAC2V,EAAAA,GAAkB,CACf9R,MAAOoR,EACP3O,SAAU4O,EACVU,SAzCSrR,UACjB,MAAMsR,QAAgBC,EAAAA,EAAAA,IAAiBC,GACjCC,QAAeC,EAAAA,EAAAA,IAAUJ,EAAQ,IAEvCX,EAAca,GACdX,EAAUY,GACVhB,EAAoBgB,EAAO,EAmCI5V,SAEtB8V,IAAA,IAAC,cAAEC,EAAa,YAAEC,EAAW,uBAAEC,EAAsB,QAAEnM,GAASgM,EAAA,OAC7DjQ,EAAAA,EAAAA,MAAA,OAAA7F,SAAA,EACIJ,EAAAA,EAAAA,KAAA,YACQmW,EAAc,CACdvC,YAAa,mBACbjO,UAAW,wBACXC,MAAO,CAAEuE,OAAQ,OAAQa,SAAU,OAAQlF,MAAO,aAG1DG,EAAAA,EAAAA,MAAA,OAAKN,UAAU,kCAAiCvF,SAAA,CAC3C8J,IAAWlK,EAAAA,EAAAA,KAAA,OAAAI,SAAK,eAChBgW,EAAYpS,KAAKsS,IACdC,EAAAA,EAAAA,eAAA,UAASF,EAAuBC,EAAY,CAAE3Q,UAAW,oBAAsB6Q,IAAKF,EAAWG,UAC3FzW,EAAAA,EAAAA,KAAA,QAAAI,SAAOkW,EAAWI,sBAI5B,KAId1W,EAAAA,EAAAA,KAAA,UAGAA,EAAAA,EAAAA,KAAA,OAAK4F,MAAO,CAAEuE,OAAQ,QAASrE,MAAO,QAAS1F,UAC3CJ,EAAAA,EAAAA,KAAC2W,EAAAA,GAAc,CACXC,iBAAkB,CAAEJ,IAAK5B,GACzBiC,cAAe1B,EACfA,OAAQA,EACR2B,YAAa,GACbtO,QAhEOjE,UAAyB,IAAlB,IAAE8Q,EAAG,IAAEC,GAAKyB,EACtC,MAAMf,EAAS,CAAEX,MAAKC,OAItB,GAHAN,EAAoBgB,GACpBZ,EAAUY,IAELf,EAAW9J,OACZ,KACqB,IAAIzC,OAAOsO,OAAOC,KAAKC,UAC/BC,QAAQ,CAAEC,SAAUpB,IAAU,CAACH,EAAS9C,KAC9B,OAAXA,GAAmB8C,EAAQ,GAC3BX,EAAcW,EAAQ,GAAGwB,mBAEzB7U,QAAQgD,MAAM,2BAA4BuN,EAC9C,GAER,CAAE,MAAOvN,GACLhD,QAAQgD,MAAM,gCAAiCA,EACnD,CACJ,EA8CoCpF,SAEvB2U,IACG/U,EAAAA,EAAAA,KAAC6U,EAAS,CAACQ,IAAKN,EAAiBM,IAAKC,IAAKP,EAAiBO,cA7C1DtV,EAAAA,EAAAA,KAAA,KAAAI,SAAG,mBAmD7B,E,4HCnGA,MAyEA,EAzEuBN,IAAmB,IAADwX,EAAAC,EAAAC,EAAA,IAAjB,SAAEC,GAAU3X,EAClC,MAAM4X,GAAWC,EAAAA,EAAAA,MACX5V,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,GAE3B2I,EAAOgN,SAASC,eAAe,iBAE/B1L,EAAiB,OAAJvB,QAAI,IAAJA,GAAgB,QAAZ0M,EAAJ1M,EAAMuB,kBAAU,IAAAmL,OAAZ,EAAJA,EAAkBzT,MAC/BiU,EAAiB,OAAJlN,QAAI,IAAJA,GAAY,QAAR2M,EAAJ3M,EAAM4B,cAAM,IAAA+K,OAAR,EAAJA,EAAc1T,MAC3BkU,EAAW,OAAJnN,QAAI,IAAJA,GAAU,QAAN4M,EAAJ5M,EAAMmN,YAAI,IAAAP,OAAN,EAAJA,EAAY3T,MAMzB,OACEoC,EAAAA,EAAAA,MAAA,OAAKN,UAAU,YAAWvF,SAAA,EACxBJ,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,6BAA4BvF,UACzC6F,EAAAA,EAAAA,MAAA,OAAKN,UAAU,YAAWvF,SAAA,CAAC,KACzB6F,EAAAA,EAAAA,MAAA,OAAKN,UAAU,uBAAsBvF,SAAA,EACnCJ,EAAAA,EAAAA,KAAA,KAAG2F,UAAU,qBAAqB,cAAY,UAC9CM,EAAAA,EAAAA,MAAA,MACEL,MAAO,CACLoS,cAAe,OACfC,UAAW,OACXlP,MAAOhH,EAAe,QAAU,SAChC3B,SAAA,CACH,eACc+L,EAAW,gBAAcsL,EAAS,iBAAeK,EAAW,OAAKC,EAAK,qDAErF/X,EAAAA,EAAAA,KAACkY,EAAAA,EAAS,CACRnQ,GAAI,CAAEoQ,GAAI,EAAGC,GAAI,EAAGrP,MAAO,QAASkC,QAAS,UAAW+M,cAAe,OAAQ,UAAW,CAAE/M,QAAS,WAAa,WAAY,CAAEA,QAAS,YACzIpB,QAAQ,OACRrB,QAASA,KArBnBkP,EAAS,WAADxX,OAAYuX,GAqBwB,EAAArX,SACnC,uBAMPJ,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,SAAOqY,KAAG,EAAAjY,SAAA,wkBA4BN,E,uHC9CJiN,EAAqBC,IACzB,MAAMC,EAxBoBC,MAC1B,IAAIE,EAAY,GACZC,EAAY,GAChB,IAAK,IAAIC,EAAQ,EAAGA,EAAQ,GAAIA,IAC9B,IAAK,IAAIC,EAAU,EAAGA,EAAU,GAAIA,GAAW,GAAI,CACjD,MAAMC,EAAiBF,EAAMG,WAAWC,SAAS,EAAG,KAC9CC,EAAmBJ,EAAQE,WAAWC,SAAS,EAAG,KAClDE,EAAU,GAAAhO,OAAM4N,EAAc,KAAA5N,OAAI+N,GAExC,GAAIL,EAAQ,GACVF,EAAU1G,KAAK,GAAD9G,OAAIgO,EAAU,YACvB,CACL,MAAMC,GAA8B,KAAVP,EAAe,GAAKA,EAAQ,IACnDG,WACAC,SAAS,EAAG,KACfL,EAAU3G,KAAK,GAAD9G,OAAIiO,EAAgB,KAAAjO,OAAI+N,EAAgB,OACxD,CACF,CAGF,MAAO,IAAIP,KAAcC,EAAU,EAIfH,GACpB,OACEvH,EAAAA,EAAAA,MAAAmI,EAAAA,SAAA,CAAAhO,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAOyJ,EAAalN,SAAEkN,IAC7BC,EAAYvJ,KAAKqK,IAChBrO,EAAAA,EAAAA,KAAA,UAAqB6D,MAAOwK,EAAOjO,SAChCiO,GADUA,OAId,EA6GP,EAzG4BvO,IAA8B,IAA7B,QAAEwY,EAAO,WAAEC,GAAYzY,EAClD,MAAMiC,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,GAE3BgL,EAAeA,CAAC+C,EAAKnF,EAAOxE,EAAMxC,KACtC,MAAM2U,EAAoB,IAAIF,EAAQtI,IACtCwI,EAAkB3N,GAAOxE,GAAQxC,EACjC0U,EAAW,IAAKD,EAAS,CAACtI,GAAMwI,GAAoB,EAmBtD,OACExY,EAAAA,EAAAA,KAAC4O,EAAAA,EAAG,CAACjJ,UAAU,OAAMvF,SAClBqY,EAASzU,KAAKgM,IACb/J,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC6J,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAEzY,SAAA,EAC/BJ,EAAAA,EAAAA,KAAA,QAAM2F,UAAU,OAAOC,MAAO,CAAEiG,WAAY,QAASzL,SAClD4P,EAAI8I,OAAO,GAAGC,cAAgB/I,EAAItM,MAAM,KAE1C4U,EAAQtI,GAAKhM,KAAI,CAACgV,EAAMnO,KACvB5E,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAajJ,UAAU,0BAAyBvF,SAAA,EAClDJ,EAAAA,EAAAA,KAAC6O,EAAAA,EAAG,CAAC6J,GAAI,EAAEtY,UACT6F,EAAAA,EAAAA,MAAC6I,EAAAA,EAAKC,MAAK,CAAA3O,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,gBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACXC,GAAG,SACHrL,MAAOmV,EAAKC,KACZ3S,SAAWC,GACT0G,EAAa+C,EAAKnF,EAAO,OAAQtE,EAAEG,OAAO7C,OAE5C+B,MAAO,CACLuE,OAAQ,OACRgF,WAAY,QACZ1F,QAAS,MACTV,MAAOhH,EAAe,QAAU,UAChCmE,gBAAiBnE,EAAe,UAAY,SAC5C3B,SAEDiN,EAAkB2L,EAAKC,cAI9BjZ,EAAAA,EAAAA,KAAC6O,EAAAA,EAAG,CAAC6J,GAAI,EAAEtY,UACT6F,EAAAA,EAAAA,MAAC6I,EAAAA,EAAKC,MAAK,CAAA3O,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,cACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACXC,GAAG,SACHrL,MAAOmV,EAAKE,MACZ5S,SAAWC,GACT0G,EAAa+C,EAAKnF,EAAO,QAAStE,EAAEG,OAAO7C,OAE7C+B,MAAO,CACLuE,OAAQ,OACRgF,WAAY,QACZ1F,QAAS,MACTV,MAAOhH,EAAe,QAAU,UAChCmE,gBAAiBnE,EAAe,UAAY,SAC5C3B,SAEDiN,EAAkB2L,EAAKE,eAI9BlZ,EAAAA,EAAAA,KAAC6O,EAAAA,EAAG,CAAC6J,GAAI,EAAEtY,UACTJ,EAAAA,EAAAA,KAAC6M,EAAAA,EAAM,CACLhD,QAAQ,SACRpC,KAAK,KACLe,QAASA,IA/DF2Q,EAACnJ,EAAKnF,KAC3B,MAAM2N,EAAoB,IAAIF,EAAQtI,IAClCwI,EAAkB1V,OAAS,IAC7B0V,EAAkBhE,OAAO3J,EAAO,GAChC0N,EAAW,IAAKD,EAAS,CAACtI,GAAMwI,IAClC,EA0D6BW,CAAenJ,EAAKnF,GACnClF,UAAU,OAAMvF,SACjB,UAjDKyK,MAuDZ7K,EAAAA,EAAAA,KAACoZ,EAAAA,EAAS,CACRvP,QAAQ,YACRrB,QAASA,IAjFEwH,KACnB,MAAMwI,EAAoB,IACrBF,EAAQtI,GACX,CAAEiJ,KAAM,WAAYC,MAAO,aAE7BX,EAAW,IAAKD,EAAS,CAACtI,GAAMwI,GAAoB,EA4E7Ba,CAAYrJ,GAC3BjI,GAAI,CACFgB,MAAOhH,EAAe,QAAU,QAChCkJ,QAASlJ,EAAe,QAAU,QAClC,UAAW,CAAEkJ,QAASlJ,EAAe,QAAU,UAC/C3B,SACH,oBApEoC4P,MAyErC,E,eCrHV,MAAMsJ,EAAmBC,IACvB,MACMC,GADc,IAAIC,aACQC,OAAOH,GACvC,OAAOI,OAAOC,gBAAgBJ,EAAY,EAStCK,GAAuB,CAC3BC,QAAS,CAAC,CAAEb,KAAM,WAAYC,MAAO,aACrCa,UAAW,CAAC,CAAEd,KAAM,WAAYC,MAAO,aACvCc,SAAU,CAAC,CAAEf,KAAM,WAAYC,MAAO,aACtCe,OAAQ,CAAC,CAAEhB,KAAM,WAAYC,MAAO,aACpCgB,SAAU,CAAC,CAAEjB,KAAM,WAAYC,MAAO,aACtCiB,OAAQ,CAAC,CAAElB,KAAM,WAAYC,MAAO,aACpCkB,OAAQ,CAAC,CAAEnB,KAAM,WAAYC,MAAO,cAm8BtC,SA97BA,SAAkBpZ,GAAiB,IAAhB,YAAC+S,GAAY/S,EAC5B,MAAMua,GAAqB9Y,EAAAA,EAAAA,QAAO,MAC5B+Y,GAAiB/Y,EAAAA,EAAAA,QAAO,MACxBgZ,GAAqBhZ,EAAAA,EAAAA,QAAO,MAC5BiZ,GAAuBjZ,EAAAA,EAAAA,QAAO,MAC9BkZ,GAA4BlZ,EAAAA,EAAAA,QAAO,MACnCH,GAAeC,EAAAA,EAAAA,MACdqZ,EAAaC,IAAkBjZ,EAAAA,EAAAA,UAAS,KACxCkP,EAAWC,IAAgBnP,EAAAA,EAAAA,UAChC,CAAC,CAAEiE,UAAW,GAAIgN,WAAY,GAAIC,KAAM,GAAIV,KAAM,GAAIW,YAAa,GAAIC,IAAI,GAAGvG,MAAM,GAAIwG,OAAQ,GAAIC,WAAU,EAAOC,cAAe,OAE/H8B,EAAkBC,IAAuBtT,EAAAA,EAAAA,UAAS,MACnDK,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1B2Y,EAAqBC,IAA0BnZ,EAAAA,EAAAA,UAAS,KACxDoZ,EAAqBC,IAA0BrZ,EAAAA,EAAAA,UAAS,KACxDsZ,EAAmBC,IAAwBvZ,EAAAA,EAAAA,UAAS,IACrDoP,EAAyB+B,EAAY7O,KAAKkX,GAAU,GAAAhb,OAAQgb,EAAW7V,KAAI,OAAAnF,OAAMgb,EAAW/a,OAC3Fgb,GAASC,KAAc1Z,EAAAA,EAAAA,WAAS,IAChC2Z,GAAcC,KAAmB5Z,EAAAA,EAAAA,WAAS,IAC1C4W,GAASC,KAAc7W,EAAAA,EAAAA,UAASmY,IAOjC0B,GAAkBC,EAAAA,EAClBC,GAAeC,EAAAA,EACfrK,GAAqB3G,EAAAA,EACrBiR,GAAcrH,OAAOsH,KAAKC,EAAAA,IAAiB7X,IAAI2V,SAC9CmC,GAAYC,KAAiBra,EAAAA,EAAAA,UAAS,IACtCuT,GAAYC,KAAiBxT,EAAAA,EAAAA,UAAS,IAEvCsa,GAAgBA,KACpB,MAAMpR,EAAOgN,SAASC,eAAe,iBAErC,OAAKjN,EAAKuB,WAAWtI,MAChB+G,EAAKqR,YAAYpY,MACjB+G,EAAKsR,YAAYrY,MACjB+G,EAAKuR,aAAatY,MAClB+G,EAAKwR,aAAavY,MAClB+G,EAAKyR,eAAexY,MACpB+G,EAAK0R,cAAczY,MACnB+G,EAAK2R,iBAAiB1Y,MACtBiX,EAAoBhY,YAAzB,EAAwC,4CADC,gCADH,8BADC,8BADF,4BADA,4BADD,2BADA,2BADD,yBAQgD,EAG/E0Z,GAAgBA,KACpB,IAAKlI,OAAOJ,OAAOoE,IAASmE,OAAOC,GAAUA,EAAM5Z,OAAS,IAC1D,MAAO,kCAET,IAAK8N,EAAU9N,OACb,MAAO,uCAET,IAAK,MAAM6Z,KAAS/L,EAAW,CAAC,IAADgM,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAC7B,GAAoB,QAAhBN,EAACD,EAAMhX,iBAAS,IAAAiX,IAAfA,EAAiBzR,OAAQ,MAAO,yBACrC,GAAqB,QAAjB0R,EAACF,EAAMhK,kBAAU,IAAAkK,IAAhBA,EAAkB1R,OAAQ,MAAO,2BACtC,GAAe,QAAX2R,EAACH,EAAM/J,YAAI,IAAAkK,IAAVA,EAAY3R,OAAQ,MAAO,oBAChC,GAAe,QAAX4R,EAACJ,EAAMzK,YAAI,IAAA6K,IAAVA,EAAY5R,OAAQ,MAAO,mBAChC,GAAc,QAAV6R,EAACL,EAAM7J,WAAG,IAAAkK,IAATA,EAAW7R,OAAQ,MAAO,kBAC/B,GAAgB,QAAZ8R,EAACN,EAAMpQ,aAAK,IAAA0Q,IAAXA,EAAa9R,OAAQ,MAAO,oBACjC,IAAKwR,EAAM9J,YAAY/P,OAAQ,MAAO,sCACtC,IAAK6Z,EAAM1J,cAAcnQ,QAAiC,QAAvBoa,EAACP,EAAM1J,cAAc,UAAE,IAAAiK,IAAtBA,EAAwB/R,OAAQ,MAAO,4BAC7E,GAGIgS,GAAgBA,KACpB,MAAMvS,EAAOgN,SAASC,eAAe,iBAErC,OAAKjN,EAAKwS,aAAavZ,MAClB+G,EAAK4B,OAAO3I,MACZ+G,EAAKmN,KAAKlU,MACV+G,EAAKyS,QAAQxZ,MACb+G,EAAK0S,MAAMzZ,MACXoR,GACAF,OAAL,EAA8B,iCADN,sBADM,oBADE,sBADH,mBADE,qBADM,2BAMyB,EAY1DwI,GAAaA,KACjB,IAAIC,EAAe,GAYnB,GAVmB,IAAf1B,KAAkB0B,EAAexB,MAElB,IAAfF,KAAkB0B,EAAehB,MAElB,IAAfV,KAAkB0B,EAAeL,MAElB,IAAfrB,KAAkB0B,EAlBFC,MAAO,IAADC,EAC1B,GAA+B,QAA3BA,EAACnD,EAAmB3W,eAAO,IAAA8Z,IAA1BA,EAA4BhY,UAAW,MAAO,6CAA6C,EAiB3D+X,IAElB,IAAf3B,KAAkB0B,EAhBFG,MAAO,IAADC,EAAAC,EAC1B,OAAiC,QAA7BD,EAACpD,EAAqB5W,eAAO,IAAAga,GAA5BA,EAA8BlY,UACG,QAAlCmY,EAACpD,EAA0B7W,eAAO,IAAAia,GAAjCA,EAAmCnY,eAAxC,EAA0D,4DADL,+CACgE,EAchFiY,IAEjCH,EACF,OAAOpc,EAAaoc,EAAc,SAGpCzB,IAAe+B,GAAmBA,EAAiB,GAAE,EAGjDC,GAAaA,KACjBhC,IAAe+B,GAAmBA,EAAiB,GAAE,EAIjDE,IAAYC,EAAAA,EAAAA,GAAY,CAC5BC,QAAS,CACPC,KAAMpc,EAAa,OAAO,WA4I1Bqc,GAAY7Z,UAChB,MAAMqG,EAAOgN,SAASC,eAAe,iBAErC,IACE,MAAMwG,GAAIC,EAAAA,EAAAA,KACRC,EAAAA,EAAAA,IAAWC,EAAAA,GAAIC,EAAAA,GAAkBC,gBACjCC,EAAAA,EAAAA,IACE,SACA,KACAC,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,SAI3CC,QAAsBC,EAAAA,EAAAA,IAAQb,GAEpC,IAAKY,EAAcE,MAAO,CACxB,IAAIC,EAAU,GAEdH,EAAcrY,SAASyY,IACrBD,EAAQpY,KAAK,CAAE7G,GAAIkf,EAAIlf,MAAOkf,EAAI/e,QAAS,IAG7C,IAAIgf,EAAcF,EAAQ,GAE1B,MAAMG,GAAYF,EAAAA,EAAAA,IAChBb,EAAAA,GACAC,EAAAA,GAAkBC,cAClBY,EAAYnf,IAGRyR,EAAUhB,EAAU4O,QAAO,CAACC,EAAa7b,EAASiH,KACtD4U,EAAY5U,GAASjH,EACd6b,IACN,CAAC,GAEEC,EAAe,CACnBvT,WAAYvB,EAAKuB,WAAWtI,MAC5BoY,YAAarR,EAAKqR,YAAYpY,MAC9BqY,YAAatR,EAAKsR,YAAYrY,MAC9BsY,aAAcvR,EAAKuR,aAAatY,MAChCuY,aAAcxR,EAAKwR,aAAavY,MAChCwY,eAAgBzR,EAAKyR,eAAexY,MACpC8b,YAAa/U,EAAK+U,YAAY9b,MAC9B6G,YAAaoQ,EAAoBnJ,KAAK,KACtC2K,cAAe1R,EAAK0R,cAAczY,MAClC0Y,iBAAkB3R,EAAK2R,iBAAiB1Y,MACxC+b,iBAAkBhF,EAClB7H,OAAQ,OACRnC,UAAWgB,EACXwL,aAAcxS,EAAKwS,aAAavZ,MAChC2I,OAAQ5B,EAAK4B,OAAO3I,MACpBkU,KAAMnN,EAAKmN,KAAKlU,MAChBgc,SAAUjV,EAAKiV,SAAShc,MACxBwZ,QAASzS,EAAKyS,QAAQxZ,MACtByZ,MAAO1S,EAAK0S,MAAMzZ,MAClBic,QAAS,QACT7K,WAAYA,IAAc,GAC1B8K,YAAahL,EACbiL,UAAWpV,EAAKoV,UAAUnc,MAC1Boc,WAAY,GACZC,QAAS,GACTC,OAAQvB,KAAKC,MAAMC,aAAaC,QAAQ,aAAaqB,YACrDpB,OAAQJ,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,OACrDqB,WAAW,EACXC,aAActF,EAAkBrJ,KAAK,KACrC4O,kBAAmBjH,EAAgB1O,EAAK2V,kBAAkB1c,OAC1D2c,aAAc5B,KAAKC,MAAMC,aAAaC,QAAQ,aAAa0B,MAC3DC,UAAW9V,EAAK8V,UAAU7c,MAC1B8c,SAAU/V,EAAK+V,SAAS9c,MACxB+c,QAAShW,EAAKgW,QAAQ/c,MACtBgd,QAASjW,EAAKiW,QAAQhd,MACtBid,UAAW,EACXxI,aAGGyI,EAAAA,EAAAA,SAAQ1G,EAAmBzW,QAAS8b,GAKvCte,EAAa,+BAAgC,eAJvC4f,EAAAA,EAAAA,IAAUzB,EAAWG,GAC3BrF,EAAmBzW,QAAU8b,EAC7Bte,EAAa,4BAA6B,WAI9C,CACF,CAAE,MAAOoE,GACPhD,QAAQgD,MAAM,uBAAwBA,EACxC,GA4PF,OAzPAjC,EAAAA,EAAAA,YAAU,MACRgB,iBACE,MAAMqG,EAAOgN,SAASC,eAAe,iBAErC,IACE,MAAMwG,GAAIC,EAAAA,EAAAA,KACRC,EAAAA,EAAAA,IAAWC,EAAAA,GAAIC,EAAAA,GAAkBC,gBACjCC,EAAAA,EAAAA,IACE,SACA,KACAC,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,SAI3CC,QAAsBC,EAAAA,EAAAA,IAAQb,GAEpC,GAAKY,EAAcE,YAiDX8B,EAAAA,EAAAA,KAAO1C,EAAAA,EAAAA,IAAWC,EAAAA,GAAIC,EAAAA,GAAkBC,eAAgB,CAC5DvS,WAAYvB,EAAKuB,WAAWtI,MAC5BoY,YAAarR,EAAKqR,YAAYpY,MAC9BqY,YAAatR,EAAKsR,YAAYrY,MAC9BsY,aAAcvR,EAAKuR,aAAatY,MAChCuY,aAAcxR,EAAKwR,aAAavY,MAChCwY,eAAgBzR,EAAKyR,eAAexY,MACpC8b,YAAa/U,EAAK+U,YAAY9b,MAC9B6G,YAAaoQ,EAAoBnJ,KAAK,KACtC2K,cAAe1R,EAAK0R,cAAczY,MAClC0Y,iBAAkB3R,EAAK2R,iBAAiB1Y,MACxC+b,iBAAkBhF,EAClB7H,OAAQ,OACRnC,UAAW,CACT,EAAG,CACDjL,UAAW,GACXgN,WAAY,GACZC,KAAM,GACNV,KAAM,GACNW,YAAa,GACbC,IAAK,GACLvG,MAAO,GAAGyG,WAAU,EACpBC,cAAe,KAGnBmK,aAAcxS,EAAKwS,aAAavZ,MAChC2I,OAAQ5B,EAAK4B,OAAO3I,MACpBkU,KAAMnN,EAAKmN,KAAKlU,MAChBgc,SAAUjV,EAAKiV,SAAShc,MACxBwZ,QAASzS,EAAKyS,QAAQxZ,MACtByZ,MAAO1S,EAAK0S,MAAMzZ,MAClBic,QAAS,QACT7K,WAAYA,IAAc,GAC1B8K,YAAahL,EAEbiL,UAAWpV,EAAKoV,UAAUnc,MAC1Boc,WAAY,GACZC,QAAS,GACTC,OAAQvB,KAAKC,MAAMC,aAAaC,QAAQ,aAAaqB,YACrDpB,OAAQJ,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,OACrDqB,WAAW,EACXC,aAActF,EAAkBrJ,KAAK,KACrC4O,kBAAmBjH,EAAgB1O,EAAK2V,kBAAkB1c,OAC1D2c,aAAc5B,KAAKC,MAAMC,aAAaC,QAAQ,aAAa0B,MAC3DC,UAAW9V,EAAK8V,UAAU7c,MAC1B8c,SAAU/V,EAAK+V,SAAS9c,MACxB+c,QAAShW,EAAKgW,QAAQ/c,MACtBgd,QAASjW,EAAKiW,QAAQhd,MACtBid,UAAW,EACXxI,iBAlGsB,CACxB,IAAI8G,EAAU,GAEdH,EAAcrY,SAASyY,IACrBD,EAAQpY,KAAK,CAAE7G,GAAIkf,EAAIlf,MAAOkf,EAAI/e,QAAS,IAG7C,IAAIgf,EAAcF,EAAQ,GAE1BxU,EAAKuB,WAAWtI,MAAQyb,EAAYnT,WACpCvB,EAAKqR,YAAYpY,MAAQyb,EAAYrD,YACrCrR,EAAKsR,YAAYrY,MAAQyb,EAAYpD,YACrCtR,EAAKuR,aAAatY,MAAQyb,EAAYnD,aACtCvR,EAAKwR,aAAavY,MAAQyb,EAAYlD,aACtCxR,EAAKyR,eAAexY,MAAQyb,EAAYjD,eACxCzR,EAAK+U,YAAY9b,MAAQyb,EAAYK,YACrC5E,EACEuE,EAAY5U,YAAY5H,OACpBwc,EAAY5U,YAAYC,MAAM,KAC9B,IAENC,EAAK0R,cAAczY,MAAQyb,EAAYhD,cACvC1R,EAAK2R,iBAAiB1Y,MAAQyb,EAAY/C,iBAC1C1B,EAAuByE,EAAYM,kBACnChV,EAAKwS,aAAavZ,MAAQyb,EAAYlC,aACtCxS,EAAK4B,OAAO3I,MAAQyb,EAAY9S,OAChC5B,EAAKmN,KAAKlU,MAAQyb,EAAYvH,KAC9BnN,EAAKiV,SAAShc,MAAQyb,EAAYO,SAClCjV,EAAKyS,QAAQxZ,MAAQyb,EAAYjC,QACjCzS,EAAK0S,MAAMzZ,MAAQyb,EAAYhC,MAC/BpI,GAAcoK,EAAYrK,YAAc,IACxCD,EAAoBsK,EAAYS,aAEhCnV,EAAKoV,UAAUnc,MAAQyb,EAAYU,UACnCnP,EAAayD,OAAOJ,OAAOoL,EAAY1O,YACvCqK,EACEqE,EAAYgB,aAAaxd,OACrBwc,EAAYgB,aAAa3V,MAAM,KAC/B,IAENC,EAAK2V,kBAAkB1c,MAhaVqd,KACrB,MAAM1H,EAAc0H,EAAcvW,MAAM,IAAI3G,KAAKmd,GAAMA,EAAEC,WAAW,KAEpE,OADoB,IAAIC,aACLC,OAAO,IAAIC,WAAW/H,GAAa,EA6ZfgI,CAC7BlC,EAAYiB,mBAEd3V,EAAK8V,UAAU7c,MAAQyb,EAAYoB,UACnC9V,EAAK+V,SAAS9c,MAAQyb,EAAYqB,SAClC/V,EAAKgW,QAAQ/c,MAAQyb,EAAYsB,QACjChW,EAAKiW,QAAQhd,MAAQyb,EAAYuB,QAClB,OAAXvB,QAAW,IAAXA,GAAAA,EAAahH,SAASC,GAAW+G,EAAYhH,QACnD,CAsDA8C,IAAW,EACb,CAAE,MAAO5V,GACPhD,QAAQgD,MAAMA,EAChB,CACF,CAEAic,EAAM,GACL,KAEHle,EAAAA,EAAAA,YAAU,KACR+W,EAAe1W,QAAU,KACzB,IAAI8d,EAAgB,KA6GpB,OAFIvG,IAzGJ5W,iBACE,MAAMqG,EAAOgN,SAASC,eAAe,iBAErC,IACE,MAAMwG,GAAIC,EAAAA,EAAAA,KACRC,EAAAA,EAAAA,IAAWC,EAAAA,GAAIC,EAAAA,GAAkBC,gBACjCC,EAAAA,EAAAA,IACE,SACA,KACAC,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,SAI3CC,QAAsBC,EAAAA,EAAAA,IAAQb,GAEpC,IAAKY,EAAcE,MAAO,CACxB,IAAIC,EAAU,GAEdH,EAAcrY,SAASyY,IACrBD,EAAQpY,KAAK,CAAE7G,GAAIkf,EAAIlf,MAAOkf,EAAI/e,QAAS,IAG7C,IAAIgf,EAAcF,EAAQ,GAE1B,MAAMG,GAAYF,EAAAA,EAAAA,IAChBb,EAAAA,GACAC,EAAAA,GAAkBC,cAClBY,EAAYnf,IAGdma,EAAe1W,QAAU+d,aAAYpd,UAEnC,IACE,MAAMqN,EAAUhB,EAAU4O,QAAO,CAACC,EAAa7b,EAASiH,KACtD4U,EAAY5U,GAASjH,EACd6b,IACN,CAAC,GACEC,EAAe,CACnBvT,WAAYvB,EAAKuB,WAAWtI,MAC5BoY,YAAarR,EAAKqR,YAAYpY,MAC9BqY,YAAatR,EAAKsR,YAAYrY,MAC9BsY,aAAcvR,EAAKuR,aAAatY,MAChCuY,aAAcxR,EAAKwR,aAAavY,MAChCwY,eAAgBzR,EAAKyR,eAAexY,MACpC8b,YAAa/U,EAAK+U,YAAY9b,MAC9B6G,YAAaoQ,EAAoBnJ,KAAK,KACtC2K,cAAe1R,EAAK0R,cAAczY,MAClC0Y,iBAAkB3R,EAAK2R,iBAAiB1Y,MACxC+b,iBAAkBhF,EAClB7H,OAAQ,OACRnC,UAAWgB,EACXwL,aAAcxS,EAAKwS,aAAavZ,MAChC2I,OAAQ5B,EAAK4B,OAAO3I,MACpBkU,KAAMnN,EAAKmN,KAAKlU,MAChBgc,SAAUjV,EAAKiV,SAAShc,MACxBwZ,QAASzS,EAAKyS,QAAQxZ,MACtByZ,MAAO1S,EAAK0S,MAAMzZ,MAClBic,QAAS,QACT7K,WAAYA,IAAc,GAC1B8K,YAAahL,EAEbiL,UAAWpV,EAAKoV,UAAUnc,MAC1Boc,WAAY,GACZC,QAAS,GACTC,OAAQvB,KAAKC,MAAMC,aAAaC,QAAQ,aACrCqB,YACHpB,OAAQJ,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,OACrDqB,WAAW,EACXC,aAActF,EAAkBrJ,KAAK,KACrC4O,kBAAmBjH,EACjB1O,EAAK2V,kBAAkB1c,OAEzB2c,aAAc5B,KAAKC,MAAMC,aAAaC,QAAQ,aAC3C0B,MACHC,UAAW9V,EAAK8V,UAAU7c,MAC1B8c,SAAU/V,EAAK+V,SAAS9c,MACxB+c,QAAShW,EAAKgW,QAAQ/c,MACtBgd,QAASjW,EAAKiW,QAAQhd,MACtBid,UAAW,EACXxI,YAIF,KAAKyI,EAAAA,EAAAA,SAAQW,EAAehC,GAC1B,UACQsB,EAAAA,EAAAA,IAAUzB,EAAWG,GAC3BgC,EAAgBhC,CAElB,CAAE,MAAOla,GACPhD,QAAQgD,MAAMA,EAChB,CAKJ,CAAE,MAAOA,GACPhD,QAAQgD,MAAMA,EAChB,IA5jBgB,IA8jBpB,CACF,CAAE,MAAOoc,GACPpf,QAAQgD,MAAMoc,EAChB,CACF,CAEaH,GAEN,IAAMI,cAAcvH,EAAe1W,QAAQ,GACjD,CACDuX,GACAL,EACAF,EACAhK,EACAqE,GACAF,EACAiG,KAIA/U,EAAAA,EAAAA,MAAA,OAAA7F,SAAA,EACMJ,EAAAA,EAAAA,KAAC8hB,EAAAA,EAAO,CAAChG,WAAYA,GAAYiG,kBAAgB,EAAA3hB,SAC9C,CAAC,+BAAgC,sCAAuC,yBAA0B,cAAe,yBAAyB4D,KAAKge,IAC9IhiB,EAAAA,EAAAA,KAACiiB,EAAAA,EAAI,CAAA7hB,UACHJ,EAAAA,EAAAA,KAACkiB,EAAAA,EAAS,CAAA9hB,UAAEJ,EAAAA,EAAAA,KAAA,KAAG4F,MAAO,CAACmD,MAAMhH,EAAa,QAAQ,SAAS3B,SAAE4hB,OADpDA,QAMb/b,EAAAA,EAAAA,MAAA,OAAMmD,OAAQ0S,GAAa,EAAE1b,SAAA,EAC7BJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAI,CAAC3O,GAAG,gBAAgBgiB,SArbP5d,UAGtB,GAFAoP,EAAMyO,iBAEFtG,GAAa,EAAG,CAClB,MAIMuG,EAAgB,CAJArG,KACAQ,KACAW,MAE8C/Y,OAAOke,SAAS3Q,KAAK,MAEzF,GAAI0Q,EACF,OAAOjhB,EAAaihB,EAAe,QAEvC,CAGA,IADc1O,EAAMjN,OAAOyF,WAAWtI,MAEpC,OAGF,MAAM+N,EAAUhB,EAAU4O,QAAO,CAACC,EAAa7b,EAASiH,KACtD4U,EAAY5U,GAASjH,EACd6b,IACN,CAAC,GAEJ,IAAK,IAAD8C,EACF,MAAMC,EAA+D,QAA/CD,EAAG3D,KAAKC,MAAMC,aAAaC,QAAQ,oBAAY,IAAAwD,OAAA,EAA5CA,EAA8C9B,MACjEgC,EAAa,CACftW,WAAYwH,EAAMjN,OAAOyF,WAAWtI,MACpCoY,YAAatI,EAAMjN,OAAOuV,YAAYpY,MACtCqY,YAAavI,EAAMjN,OAAOwV,YAAYrY,MACtCsY,aAAcxI,EAAMjN,OAAOyV,aAAatY,MACxCuY,aAAczI,EAAMjN,OAAO0V,aAAavY,MACxCwY,eAAgB1I,EAAMjN,OAAO2V,eAAexY,MAC5C8b,YAAahM,EAAMjN,OAAOiZ,YAAY9b,MACtC6G,YAAaoQ,EAAoBnJ,KAAK,KACtC2K,cAAe3I,EAAMjN,OAAO4V,cAAczY,MAC1C0Y,iBAAkB5I,EAAMjN,OAAO6V,iBAAiB1Y,MAChD+b,iBAAkBhF,EAClB7H,OAAQ,OACRnC,UAAWgB,EACXwL,aAAczJ,EAAMjN,OAAO0W,aAAavZ,MACxC2I,OAAQmH,EAAMjN,OAAO8F,OAAO3I,MAC5BkU,KAAMpE,EAAMjN,OAAOqR,KAAKlU,MACxBgc,SAAUlM,EAAMjN,OAAOmZ,SAAShc,MAChCwZ,QAAS1J,EAAMjN,OAAO2W,QAAQxZ,MAC9ByZ,MAAO3J,EAAMjN,OAAO4W,MAAMzZ,MAC1Bic,QAAS,QACT7K,cACA8K,YAAchL,EACdiL,UAAWrM,EAAMjN,OAAOsZ,UAAUnc,MAClCoc,WAAW,GACXC,QAAQ,GACRC,OAAQvB,KAAKC,MAAMC,aAAaC,QAAQ,aAAaqB,YACrDpB,OAAQJ,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,OACrDqB,UApCQ,KAqCRC,aAActF,EAAkBrJ,KAAK,KACrC4O,kBAAmBjH,EAAgB3F,EAAMjN,OAAO6Z,kBAAkB1c,OAClE2c,aAAcgC,EACd9B,UAAW/M,EAAMjN,OAAOga,UAAU7c,MAClC8c,SAAUhN,EAAMjN,OAAOia,SAAS9c,MAChC+c,QAASjN,EAAMjN,OAAOka,QAAQ/c,MAC9Bgd,QAASlN,EAAMjN,OAAOma,QAAQhd,MAC9Bid,UAAU,EACVxI,YAEFgD,IAAgB,GAChB,MAAMoH,EAAeF,EACfG,EAAW,CACfC,YAAaH,EAAWtW,WACxB4L,KAAM0K,EAAW1K,MAEb8K,QAAiBC,EAAAA,EAAAA,IAASL,EAAWM,EAAAA,GAAYC,OAAQN,EAAcC,GAC7E,GAAIE,EAASI,GAAI,CACX3I,EAAe1W,SACjBie,cAAcvH,EAAe1W,SAE/B,MAAMwD,QAAeyb,EAASK,OAC9BvI,EAAevT,EAAOjH,IAjHboE,WACjB,IACE,MAAM8Z,GAAIC,EAAAA,EAAAA,KACRC,EAAAA,EAAAA,IAAWC,EAAAA,GAAIC,EAAAA,GAAkBC,gBACjCC,EAAAA,EAAAA,IACE,SACA,KACAC,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,SAI3CC,QAAsBC,EAAAA,EAAAA,IAAQb,GAEpC,IAAKY,EAAcE,MAAO,CACxB,IAAIC,EAAU,GAEdH,EAAcrY,SAASyY,IACrBD,EAAQpY,KAAK,CAAE7G,GAAIkf,EAAIlf,MAAOkf,EAAI/e,QAAS,IAG7C,IAAIgf,EAAcF,EAAQ,GAE1B,MAAMG,GAAYF,EAAAA,EAAAA,IAChBb,EAAAA,GACAC,EAAAA,GAAkBC,cAClBY,EAAYnf,UAGRgjB,EAAAA,EAAAA,IAAU5D,EAClB,CACF,CAAE,MAAO/Z,GACPhD,QAAQgD,MAAMA,EAChB,GAkFQ4d,GACA7F,IACF,CACJ,CAAE,MAAO/X,GACPhD,QAAQgD,MAAM,wBAAyBA,EACzC,CAAC,QACC8V,IAAgB,EAClB,GA+VwD1V,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAU3B,UACrJ6F,EAAAA,EAAAA,MAAC6I,EAAAA,EAAKC,MAAK,CAACsU,UAAU,eAAcjjB,SAAA,EAEhC6F,EAAAA,EAAAA,MAAA,OAAKmD,OAAuB,IAAf0S,GAAiB1b,SAAA,EAC9BJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAU3B,SAAC,mBAC1G6F,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACJ6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EAEXJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,mBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACqU,KAAM,EAAG1d,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWsE,KAAK,WAAWuN,YAAY,oBAAoBvO,KAAK,gBAEhLrF,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,oBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACqU,KAAM,EAAG1d,MAAO,CAAG2d,UAAW,QAASrd,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWmN,GAAG,WAAW0E,YAAY,yBAAyBvO,KAAK,oBAGxMY,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACXJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,sBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACqU,KAAM,EAAG1d,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWsE,KAAK,WAAWuN,YAAY,qBAAqBvO,KAAK,iBAEjLrF,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,qBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACqU,KAAM,EAAG1d,MAAO,CAAG4d,UAAW,QAAStd,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWmN,GAAG,WAAW0E,YAAY,0BAA0BvO,KAAK,wBAIzMrF,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAU3B,SAAC,qBACxG6F,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACJ6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EAEXJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,qBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWuhB,KAAM,EAAG1P,YAAY,sBAAsBvO,KAAK,eAAegB,KAAK,YAEtLrG,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,uBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWuhB,KAAM,EAAG1P,YAAY,wBAAwBvO,KAAK,iBAAiBgB,KAAK,eAE1LJ,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACXJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,kBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWsE,KAAK,QAAQid,KAAM,EAAG1P,YAAY,qBAAqBvO,KAAK,uBAI9KrF,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAU3B,SAAC,oBACxG6F,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACF6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACbJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAE,oBACb6F,EAAAA,EAAAA,MAACwd,EAAAA,EAAa,CAACC,MAAO1F,GAAU5d,SAAA,EAC9BJ,EAAAA,EAAAA,KAAC2jB,EAAAA,GAAW,KAEb3jB,EAAAA,EAAAA,KAACgU,EAAAA,EAAY,CACZpO,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SACzF6F,UAAQ,EACRzH,GAAG,gBACHsN,QAAS4D,GACTxN,MAAOiX,EACPxU,SA7hBkBsd,CAACjQ,EAAO9P,KACtCkX,EAAuBlX,EAAM,EA6hBjBsQ,YAAcC,IACZpU,EAAAA,EAAAA,KAACqU,EAAAA,EAAS,IACJD,EACJvK,QAAQ,WACR+J,YAAY,sBACZhO,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,iBAK/F/B,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,yBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWuhB,KAAM,EAAG1P,YAAY,oBAAoBvO,KAAK,gBAAgBgB,KAAK,eAErLJ,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACXJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,yBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAYuhB,KAAM,EAAG1P,YAAY,oBAAoBvO,KAAK,mBAAmBgB,KAAK,kBAGzLrG,EAAAA,EAAAA,KAAA,UACAiG,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACFJ,EAAAA,EAAAA,KAAC6O,EAAAA,EAAG,CAAC6J,GAAI,EAAEtY,UACTJ,EAAAA,EAAAA,KAACoZ,EAAAA,EAAS,CAACvP,QAAQ,YAAYjE,MAAO,CAACM,gBAAgBnE,EAAa,UAAU,SAAUwG,UAAQ,EAAAnI,SAAE,YAIpG6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC6J,GAAI,EAAG/S,UAAU,mCAAkCvF,SAAA,EACtDJ,EAAAA,EAAAA,KAACoZ,EAAAA,EAAS,CAACvP,QAAQ,YAAYjE,MAAO,CAACM,gBAAgBnE,EAAa,UAAU,SAASyG,QAAS4V,GAAUhe,SAAC,mBAG3GJ,EAAAA,EAAAA,KAACoZ,EAAAA,EAAS,CAACvP,QAAQ,YAAYjE,MAAO,CAACM,gBAAgBnE,EAAa,UAAU,SAASyG,QAASA,IAAM+U,KAAand,SAAC,mBAWxH6F,EAAAA,EAAAA,MAAA,OAAKmD,OAAuB,IAAf0S,GAAiB1b,SAAA,EAIlCJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAU3B,SAAC,wBACpGJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,0BACZJ,EAAAA,EAAAA,KAAC4O,EAAAA,EAAG,CAAAxO,UACF6F,EAAAA,EAAAA,MAACwd,EAAAA,EAAa,CAACC,MAAO1F,GAAU5d,SAAA,EAC9BJ,EAAAA,EAAAA,KAAC2jB,EAAAA,GAAW,KAEZ3jB,EAAAA,EAAAA,KAACgU,EAAAA,EAAY,CACXpO,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SACzF6F,UAAQ,EACRzH,GAAG,gBACHsN,QAASqD,EACTjN,MAAO+W,EACPtU,SA9kBaud,CAAClQ,EAAO9P,KACrCgX,EAAuBhX,EAAM,EA8kBbsQ,YAAcC,IACZpU,EAAAA,EAAAA,KAACqU,EAAAA,EAAS,IACJD,EACJvK,QAAQ,WACR+J,YAAY,qBACZhO,MAAO,CAACM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,mBAMlG/B,EAAAA,EAAAA,KAAA,KAAGC,KAAK,sBAAsB6jB,IAAI,aAAapd,OAAO,SAASd,MAAO,CAAEme,eAAgB,OAAQhb,MAAOhH,EAAe,OAAS,QAAS3B,SAAC,yCAGzIJ,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAU3B,SAAC,sBACtGJ,EAAAA,EAAAA,KAAA,QAAAI,SAAM,iCACJJ,EAAAA,EAAAA,KAAA,OAAK4F,MAAO,CAAEoe,UAAW,OAAQ/X,WAAY,SAAUgY,eAAgBliB,EAAe,YAAc,aAAe3B,UACjHJ,EAAAA,EAAAA,KAACkkB,EAAW,CACVtT,UAAWA,EACXC,aAAcA,EACdC,uBAAwBA,OAGhC9Q,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAU3B,SAAC,wBACxG6F,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACJ6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,gBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWsE,KAAK,OAAOid,KAAM,EAAG1P,YAAY,aAAavO,KAAK,kBAIvKY,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACXJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,mBAEV6F,EAAAA,EAAAA,MAACwd,EAAAA,EAAa,CAACC,MAAO1F,GAAU5d,SAAA,EAChCJ,EAAAA,EAAAA,KAAC2jB,EAAAA,GAAW,KAEb3jB,EAAAA,EAAAA,KAACgU,EAAAA,EAAY,CACZpO,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SACzF6F,UAAQ,EACRzH,GAAG,gBACHsN,QAASkO,GACT9X,MAAOmX,EACP1U,SAhoBe6d,CAACxQ,EAAO9P,KACnCoX,EAAqBpX,EAAM,EAgoBfsQ,YAAcC,IACZpU,EAAAA,EAAAA,KAACqU,EAAAA,EAAS,IACJD,EACJvK,QAAQ,WACR+J,YAAY,mBACZhO,MAAO,CAACM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,uBAO9FkE,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACJJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,wBACVJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACqU,KAAM,GAAI1d,MAAO,CAAGuE,OAAQ,QAASjE,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWmN,GAAG,WAAW0E,YAAY,qBAAqBvO,KAAK,0BAIpMrF,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAEwe,OAAQ,SAAUle,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAU3B,SAAC,sBAC1HJ,EAAAA,EAAAA,KAACqkB,EAAmB,CAAC/L,QAASA,GAASC,WAAYA,MAEnDvY,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAEwe,OAAQ,aAAcle,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAU3B,SAAC,wBAC/H6F,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACJ6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACRJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,eACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWsE,KAAK,OAAOid,KAAM,EAAG1P,YAAY,iBAAiBvO,KAAK,kBAE3KY,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,cACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWsE,KAAK,OAAOid,KAAM,EAAG1P,YAAY,gBAAgBvO,KAAK,iBAE1KY,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,aACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWsE,KAAK,OAAOid,KAAM,EAAG1P,YAAY,eAAevO,KAAK,gBAEzKY,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,aACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWsE,KAAK,OAAOid,KAAM,EAAG1P,YAAY,eAAevO,KAAK,mBAK1KY,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACDJ,EAAAA,EAAAA,KAAC6O,EAAAA,EAAG,CAAC6J,GAAI,EAAEtY,UACTJ,EAAAA,EAAAA,KAACoZ,EAAAA,EAAS,CAACvP,QAAQ,YAAYjE,MAAO,CAACM,gBAAgBnE,EAAa,UAAU,SAASyG,QAASA,IAAMuV,KAAa3d,SAAC,YAItH6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC6J,GAAI,EAAG/S,UAAU,mCAAkCvF,SAAA,EACtDJ,EAAAA,EAAAA,KAACoZ,EAAAA,EAAS,CAACvP,QAAQ,YAAYjE,MAAO,CAACM,gBAAgBnE,EAAa,UAAU,SAASyG,QAAS4V,GAAUhe,SAAC,mBAG3GJ,EAAAA,EAAAA,KAACoZ,EAAAA,EAAS,CAACvP,QAAQ,YAAYjE,MAAO,CAACM,gBAAgBnE,EAAa,UAAU,SAASyG,QAASA,IAAM+U,KAAand,SAAC,mBAQxH6F,EAAAA,EAAAA,MAAA,OAAKmD,OAAuB,IAAf0S,GAAiB1b,SAAA,EAE9BJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAU3B,SAAC,qBACxG6F,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACF6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACXJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,qBACdJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWmN,GAAG,WAAWoU,KAAM,EAAG1P,YAAY,sBAAsBvO,KAAK,kBAEhLrF,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,cACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWmN,GAAG,WAAWoU,KAAM,EAAG1P,YAAY,eAAevO,KAAK,YACzKrF,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,YACZ6F,EAAAA,EAAAA,MAAC6I,EAAAA,EAAKG,QAAO,CAACC,GAAG,SAAStJ,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,QAASoI,OAAQ,OAChIgF,WAAY,QACZ1F,QAAS,OAAUpE,KAAK,OAAMjF,SAAA,EAC9BJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAEzD,SAAC,kBAChBmb,GAAgBvX,KAAI,CAAC+T,EAAMlN,KACxB7K,EAAAA,EAAAA,KAAA,UAAoB6D,MAAOkU,EAAK3X,SAC3B2X,GADQlN,YAOrB5E,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,cACdJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWuhB,KAAM,EAAG1P,YAAY,iBAAiBvO,KAAK,cAE7JrF,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,eACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CAACrJ,MAAO,CAAEM,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWuhB,KAAM,EAAG1P,YAAY,gBAAgBvO,KAAK,UAAUgB,KAAK,YAE3KrG,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,aACZ6F,EAAAA,EAAAA,MAAC6I,EAAAA,EAAKG,QAAO,CAACC,GAAG,SAAStJ,MAAO,CAAE6D,QAAS,WAAYvD,gBAAiBnE,EAAe,UAAY,GAAIgH,MAAOhH,EAAe,QAAU,SAAWuhB,KAAM,EAAG1P,YAAY,cAAcvO,KAAK,QAAOjF,SAAA,EAClMJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAEzD,SAAC,mBACZqb,GAAazX,KAAI,CAAC+T,EAAMlN,KACrB7K,EAAAA,EAAAA,KAAA,UAAoB6D,MAAOkU,EAAK3X,SAC3B2X,GADQlN,YAQrB7K,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,wBACZJ,EAAAA,EAAAA,KAACskB,EAAS,CACRvP,iBAAkBA,EAClBC,oBAAqBA,EACrBC,WAAYA,GACZC,cAAeA,SAMnBlV,EAAAA,EAAAA,KAAA,UAEAiG,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACAJ,EAAAA,EAAAA,KAAC6O,EAAAA,EAAG,CAAC6J,GAAI,EAAEtY,UACTJ,EAAAA,EAAAA,KAACoZ,EAAAA,EAAS,CAACvP,QAAQ,YAAYjE,MAAO,CAACM,gBAAgBnE,EAAa,UAAU,SAASyG,QAASA,IAAMuV,KAAa3d,SAAC,YAItH6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC6J,GAAI,EAAG/S,UAAU,mCAAkCvF,SAAA,EACtDJ,EAAAA,EAAAA,KAACoZ,EAAAA,EAAS,CAACvP,QAAQ,YAAYjE,MAAO,CAACM,gBAAgBnE,EAAa,UAAU,SAASyG,QAAS4V,GAAUhe,SAAC,mBAG3GJ,EAAAA,EAAAA,KAACoZ,EAAAA,EAAS,CAACvP,QAAQ,YAAYtB,SAAU8S,GAAczV,MAAO,CAACM,gBAAgBnE,EAAa,UAAU,QAASgH,MAAM,SAAU1C,KAAK,SAAQjG,SAAC,oCAWpJib,KAAgBrb,EAAAA,EAAAA,KAACukB,EAAAA,EAAc,IAEd,KAAhB7J,EAAoB,IAAKzU,EAAAA,EAAAA,MAAA,KAAA7F,SAAA,CAAG,8BAA4Bsa,EAAY,kDAOtEzU,EAAAA,EAAAA,MAAA,OAAKmD,OAAuB,IAAf0S,GAAiB1b,SAAA,EAE5BJ,EAAAA,EAAAA,KAACQ,EAAAA,EAAW,CAACG,SAAU+Z,EAAa7Z,MAAO,cAAeD,cAAeuF,EAAAA,GAASqe,WAAY1jB,cAAe,EAAGC,cAAe,EAAGL,IAAK6Z,KACvIva,EAAAA,EAAAA,KAAC4O,EAAAA,EAAG,CAAAxO,UAEFJ,EAAAA,EAAAA,KAAC6O,EAAAA,EAAG,CAAC6J,GAAI,GAAI/S,UAAU,6BAA4BvF,UACjDJ,EAAAA,EAAAA,KAACoZ,EAAAA,EAAS,CAACvP,QAAQ,YAAYjE,MAAO,CAACM,gBAAgBnE,EAAa,UAAU,SAASyG,QAASA,IAAM+U,KAAand,SAAC,iBASzHJ,EAAAA,EAAAA,KAAA,OAAKoJ,OAAuB,IAAf0S,GAAiB1b,UAC7BJ,EAAAA,EAAAA,KAACQ,EAAAA,EAAW,CAACG,SAAU+Z,EAAa7Z,MAAO,gBAAiBC,cAAe,GAAIC,cAAe,EAAGH,cAAeuF,EAAAA,GAASC,aAAc1F,IAAK8Z,OAG9IvU,EAAAA,EAAAA,MAAA,OAAKmD,OAAuB,IAAf0S,GAAiB1b,SAAA,EAC5BJ,EAAAA,EAAAA,KAACQ,EAAAA,EAAW,CAACG,SAAU+Z,EAAa7Z,MAAO,6BAA+BD,cAAeuF,EAAAA,GAASse,oBAAqB3jB,cAAe,GAAIC,cAAe,EAAGL,IAAK+Z,KAEjKxU,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAACjJ,UAAU,OAAMvF,SAAA,EACrBJ,EAAAA,EAAAA,KAAC6O,EAAAA,EAAG,CAAC6J,GAAI,EAAEtY,UACTJ,EAAAA,EAAAA,KAACoZ,EAAAA,EAAS,CAACvP,QAAQ,YAAYjE,MAAO,CAACM,gBAAgBnE,EAAa,UAAU,SAASyG,QAASA,IAAMuV,KAAa3d,SAAC,YAItHJ,EAAAA,EAAAA,KAAC6O,EAAAA,EAAG,CAAC6J,GAAI,EAAG/S,UAAU,6BAA4BvF,UAChDJ,EAAAA,EAAAA,KAACoZ,EAAAA,EAAS,CAACvP,QAAQ,YAAYjE,MAAO,CAACM,gBAAgBnE,EAAa,UAAU,SAASyG,QAASA,IAAM+U,KAAand,SAAC,kBAOxH6F,EAAAA,EAAAA,MAAA,OAAMmD,OAAuB,IAAf0S,GAAkBlW,MAAO,CAAEC,QAAS,OAAS6e,WAAY,SAAUva,OAAQ,QAAQ/J,SAAA,EAE7FJ,EAAAA,EAAAA,KAAC2kB,EAAc,CAAClN,SAAUiD,KAC1B1a,EAAAA,EAAAA,KAAA,aAIVA,EAAAA,EAAAA,KAAA,WAIN,E,4BC3+BA,MA2CA,GA3CmBF,IAOZ,IAPa,KAClBuG,EAAO,OAAM,QACbue,EAAU,kBAAiB,cAC3BC,EAAgB,IAAI,SACpB7Z,EAAW,OAAM,WACjBa,EAAa,SAAQ,UACrBiZ,EAAY,UACbhlB,EACC,MAAOilB,EAAWC,IAAgBtjB,EAAAA,EAAAA,WAAS,GAY3C,OAVA6B,EAAAA,EAAAA,YAAU,KACR,MAAM0hB,EAAQC,YAAW,KACvBF,GAAa,EAAM,GAClBH,GAEH,MAAO,KACLM,aAAaF,EAAM,CACpB,GACA,CAACJ,KAGF7kB,EAAAA,EAAAA,KAAColB,GAAAA,EAAS,CAAAhlB,SACP2kB,IACC/kB,EAAAA,EAAAA,KAACqlB,GAAAA,EAAK,CACJxb,QAASxD,EACTT,MAAO,CACLoF,WACAa,aACAiZ,YACAtS,UAAW,SACXyF,UAAW,OACXlN,aAAc,KAEhBua,QAASA,IAAMN,GAAa,GAC5BO,aAAW,EAAAnlB,SAEVwkB,KAGK,EChBV/K,GAAuB,CAC3BO,OAAQ,CAAC,CAAEnB,KAAM,WAAYC,MAAO,aACpCY,QAAS,CAAC,CAAEb,KAAM,WAAYC,MAAO,aACrCa,UAAW,CAAC,CAAEd,KAAM,WAAYC,MAAO,aACvCc,SAAU,CAAC,CAAEf,KAAM,WAAYC,MAAO,aACtCe,OAAQ,CAAC,CAAEhB,KAAM,WAAYC,MAAO,aACpCgB,SAAU,CAAC,CAAEjB,KAAM,WAAYC,MAAO,aACtCiB,OAAQ,CAAC,CAAElB,KAAM,WAAYC,MAAO,cAGhChJ,GAAa,CAAC,MAAO,OAAQ,MAAO,QAAS,MAAO,MAAO,OAC3DC,GAAc,CAClBC,KAAM,OACNC,OAAQ,SACRC,WAAY,aACZC,SAAU,WACVC,QAAS,UACTC,IAAK,wBACLC,QAAS,UACTC,SAAU,YAGN2I,GAAmBC,IACvB,MACMC,GADc,IAAIC,aACQC,OAAOH,GACvC,OAAOI,OAAOC,gBAAgBJ,EAAY,EAGtCgI,GAAgB,WACpB,MAAMhI,GAD4B3W,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IACH8H,MAAM,IAAI3G,KAAKmd,GAAMA,EAAEC,WAAW,KAEpE,OADoB,IAAIC,aACLC,OAAO,IAAIC,WAAW/H,GAC3C,EAkyCA,SAhyCA,SAAqB1Z,GAMjB,IANkB,OACpBC,EAAM,UACNylB,EAAS,SACTjc,EAAQ,YACRkc,EAAW,YACX5S,GACD/S,EACC,MAAMsB,GAAeC,EAAAA,EAAAA,MACdqkB,EAAgBC,IAAqBjkB,EAAAA,EAAAA,UAAS,OAC9CkkB,EAAkBC,IAAuBnkB,EAAAA,EAAAA,UAAS,OAClDkZ,EAAqBC,IAA0BnZ,EAAAA,EAAAA,UAAS,KACxDokB,EAA+BC,IACpCrkB,EAAAA,EAAAA,WAAU,IACLsZ,EAAmBC,IAAwBvZ,EAAAA,EAAAA,UAAS,KACpDqP,EAAgBC,IAAqBtP,EAAAA,EAAAA,WAAS,IAC9CuP,EAAkBC,IAAuBxP,EAAAA,EAAAA,UAAS,OAClD2Z,EAAcC,IAAmB5Z,EAAAA,EAAAA,WAAS,IAC1CyP,EAAaC,KAAkB1P,EAAAA,EAAAA,UAAS,OACxCwL,GAAaoE,KAAkB5P,EAAAA,EAAAA,UAAS,eAEzC6Z,GAAkBC,EAAAA,EAClBC,GAAeC,EAAAA,EACfrK,GAAqB3G,EAAAA,EACrBiR,GAAcrH,OAAOsH,KAAKC,EAAAA,IAAiB7X,IAAI2V,SAC9CqM,GAAwBC,KAA6BvkB,EAAAA,EAAAA,WAAS,IAC9DwkB,GAAsBC,KAA2BzkB,EAAAA,EAAAA,WAAS,IAC1DqT,GAAkBC,KAAuBtT,EAAAA,EAAAA,UAAS,OAClDoZ,GAAqBC,KAA0BrZ,EAAAA,EAAAA,UAAS,IACzDK,IAAeC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BqW,GAASC,KAAc7W,EAAAA,EAAAA,UAASmY,KAChC5E,GAAYC,KAAiBxT,EAAAA,EAAAA,UAAS,IAEvCoP,GAAyB+B,EAAY7O,KACxCkX,GAAU,GAAAhb,OAAQgb,EAAW7V,KAAI,OAAAnF,OAAMgb,EAAW/a,MAG/C6d,IAAYC,EAAAA,EAAAA,GAAY,CAC5BC,QAAS,CACPC,KAAMpc,GAAe,OAAS,YAY3B6O,GAAWC,KAAgBnP,EAAAA,EAAAA,UAAS,CACzC,EAAG,CACDiE,UAAW,GACXgN,WAAY,GACZC,KAAM,GACNV,KAAM,GACNW,YAAa,GACbC,IAAK,GACLvG,MAAO,GACPyG,WAAW,EACXC,cAAe,MAWbpB,GAAwBA,KAC5Bb,GAAkB,GAClBE,EAAoB,KAAK,EAIrBY,GAAmBA,CAACC,EAAWC,KACnCnB,IAAcY,IACZ,MAAMG,EAAU,IAAKH,GAErB,GAAyB,OAArBR,GAA6BW,EAAQX,GAAmB,CAC1D,MAAMgB,EAAcL,EAAQX,GAAkBiB,KAE9C,QAAoBnP,IAAhBkP,EAA2B,CAC7B,MAAOE,EAAkBC,GAAkBH,EAAYtH,MAAM,OAE3C,OAAdoH,IACFH,EAAQX,GAAkBiB,KAAI,GAAAhS,OAAM6R,EAAS,OAAA7R,OAAMkS,IAErC,OAAZJ,IACFJ,EAAQX,GAAkBiB,KAAI,GAAAhS,OAAMiS,EAAgB,OAAAjS,OAAM8R,GAE9D,CACF,CAEA,OAAOJ,CAAO,IAGhBR,GAAeH,EAAiB,GAGlC1N,EAAAA,EAAAA,YAAU,KAER,MAAM6iB,EACJxH,KAAKC,MAAMC,aAAaC,QAAQ,mBAAqB,GACvDyG,EAAUY,GAGV,MAAMC,EAAeD,EAAcpiB,KAChCjE,GAAM,GAAAG,OAAQH,EAAOoM,WAAU,OAAAjM,OAAMH,EAAOI,MAE/CslB,EAAYY,EAAa,GAIxB,KAEH9iB,EAAAA,EAAAA,YAAU,KAER,GAAImiB,EAAgB,CASlB,GAPA7K,EAAuB6K,EAAe9F,kBAClC8F,GAAkBA,EAAehb,aACnCqQ,GAAuB2K,EAAehb,YAAYC,MAAM,MAEtD+a,GAAkBA,EAAepF,cACnCrF,EAAqByK,EAAepF,aAAa3V,MAAM,MAErD+a,GAAkBA,EAAe9U,UAAW,CAC9C,MAAM0V,EAAWpjB,KAAKmG,OAAOiL,OAAOsH,KAAKhL,IAAW5M,IAAIuiB,SACxDR,EAAiCO,EACnC,CACIZ,GAAgC,OAAdA,QAAc,IAAdA,GAAAA,EAAgBpN,SACpCC,GAAWmN,EAAepN,SAExBoN,GAAgC,OAAdA,QAAc,IAAdA,GAAAA,EAAgBzQ,YACpCC,GAA4B,OAAdwQ,QAAc,IAAdA,OAAc,EAAdA,EAAgBzQ,WAElC,IACC,CAACyQ,IAEJ,MAwKMnU,GAAoBA,CAAC1G,EAAO2G,EAAO3N,KACvCgN,IAAcY,IACE,SAAVD,IACF3N,EAAQ2C,MAAMkL,QAAQ7N,GAASA,EAAM8N,KAAK,KAAO9N,GAG5C,IACF4N,EACH,CAAC5G,GAAQ,IACJ4G,EAAS5G,GACZ,CAAC2G,GAAQ3N,MAGb,EAGE2iB,GAAWA,KACf,MAAM5b,EAAOgN,SAASC,eAAe,oBAErC,IAAKjN,EAAKuB,WAAWtI,MAAO,MAAO,0BACnC,IAAK+G,EAAKqR,YAAYpY,MAAO,MAAO,2BACpC,IAAK+G,EAAKsR,YAAYrY,MAAO,MAAO,2BACpC,IAAK+G,EAAKuR,aAAatY,MAAO,MAAO,4BACrC,IAAK+G,EAAKwR,aAAavY,MAAO,MAAO,4BACrC,IAAK+G,EAAKyR,eAAexY,MAAO,MAAO,8BACvC,IAAK+G,EAAK0R,cAAczY,MAAO,MAAO,8BACtC,IAAK+G,EAAK2R,iBAAiB1Y,MAAO,MAAO,gCACzC,IAAKiX,GAAoBhY,OACvB,MAAO,4CAET,IAAKwR,OAAOJ,OAAOoE,IAASmE,OAAOC,GAAUA,EAAM5Z,OAAS,IAC1D,MAAO,kCAET,IAAKwR,OAAOJ,OAAOtD,IAAW9N,OAC5B,MAAO,uCAET,IAAK,MAAM6Z,KAASrI,OAAOJ,OAAOtD,IAAY,CAAC,IAADgM,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAC5C,GAAoB,QAAhBN,EAACD,EAAMhX,iBAAS,IAAAiX,IAAfA,EAAiBzR,OAAQ,MAAO,yBACrC,GAAqB,QAAjB0R,EAACF,EAAMhK,kBAAU,IAAAkK,IAAhBA,EAAkB1R,OAAQ,MAAO,2BACtC,GAAe,QAAX2R,EAACH,EAAM/J,YAAI,IAAAkK,IAAVA,EAAY3R,OAAQ,MAAO,oBAChC,GAAe,QAAX4R,EAACJ,EAAMzK,YAAI,IAAA6K,IAAVA,EAAY5R,OAAQ,MAAO,mBAChC,GAAc,QAAV6R,EAACL,EAAM7J,WAAG,IAAAkK,IAATA,EAAW7R,OAAQ,MAAO,kBAC/B,GAAgB,QAAZ8R,EAACN,EAAMpQ,aAAK,IAAA0Q,IAAXA,EAAa9R,OAAQ,MAAO,oBACjC,IAAKwR,EAAM9J,YAAY/P,OACrB,MAAO,sCACT,IAAK6Z,EAAM1J,cAAcnQ,QAAiC,QAAvBoa,EAACP,EAAM1J,cAAc,UAAE,IAAAiK,IAAtBA,EAAwB/R,OAC1D,MAAO,4BACX,CAEA,OAAKP,EAAKwS,aAAavZ,MAClB+G,EAAK4B,OAAO3I,MACZ+G,EAAKmN,KAAKlU,MACV+G,EAAKyS,QAAQxZ,MACb+G,EAAK0S,MAAMzZ,MACXoR,GACAF,QAAL,EAA8B,iCADN,sBADM,oBADE,sBADH,mBADE,qBADM,2BAMyB,EAGhE,OACE9O,EAAAA,EAAAA,MAAA,OACEL,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAChC3B,SAAA,EAEFJ,EAAAA,EAAAA,KAAA,UACAiG,EAAAA,EAAAA,MAAC6I,EAAAA,EAAI,CAAC3O,GAAG,mBAAmBgiB,SA1LL5d,UACzBoP,EAAMyO,iBAEN,MAAM5E,EAAegJ,KAErB,GAAIhJ,EACF,OAAOpc,EAAaoc,EAAc,SAGpClC,GAAgB,GAChB,MAAMmL,EAAc9S,EAAMjN,OAAOggB,OAAO7iB,MAClC8iB,EAAeF,EAAYG,YAAY,KACvCrd,EAAWkd,EAAYI,UAAUF,EAAe,GAAGxb,OAEzD,GAAK5B,GAOAA,EAAL,CAUA,IAGE,MAAMud,EAAY,CAChB3a,WAAYwH,EAAMjN,OAAOyF,WAAWtI,MACpCoY,YAAatI,EAAMjN,OAAOuV,YAAYpY,MACtCqY,YAAavI,EAAMjN,OAAOwV,YAAYrY,MACtCsY,aAAcxI,EAAMjN,OAAOyV,aAAatY,MACxCuY,aAAczI,EAAMjN,OAAO0V,aAAavY,MACxCwY,eAAgB1I,EAAMjN,OAAO2V,eAAexY,MAC5C8b,YAAahM,EAAMjN,OAAOiZ,YAAY9b,MACtC6G,YAAaoQ,GAAoBnJ,KAAK,KACtC2K,cAAe3I,EAAMjN,OAAO4V,cAAczY,MAC1C0Y,iBAAkB5I,EAAMjN,OAAO6V,iBAAiB1Y,MAChD+b,iBAAkBhF,EAClB7H,OAAQ,OACRnC,UAAWA,GACXwM,aAAczJ,EAAMjN,OAAO0W,aAAavZ,MACxC2I,OAAQmH,EAAMjN,OAAO8F,OAAO3I,MAC5BkU,KAAMpE,EAAMjN,OAAOqR,KAAKlU,MACxBgc,SAAUlM,EAAMjN,OAAOmZ,SAAShc,MAChCwZ,QAAS1J,EAAMjN,OAAO2W,QAAQxZ,MAC9ByZ,MAAO3J,EAAMjN,OAAO4W,MAAMzZ,MAC1Bic,QAAS,QACT7K,cACA8K,YAAahL,GACbiL,UAAWrM,EAAMjN,OAAOsZ,UAAUnc,MAClCoc,WAAY,GACZC,QAAS,GACTC,OAAQvB,KAAKC,MAAMC,aAAaC,QAAQ,aAAaqB,YACrDpB,OAAQJ,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,OACrDsB,aAActF,EAAkBrJ,KAAK,KACrC4O,kBAAmBjH,GACjB3F,EAAMjN,OAAO6Z,kBAAkB1c,OAEjC6c,UAAW/M,EAAMjN,OAAOga,UAAU7c,MAClC8c,SAAUhN,EAAMjN,OAAOia,SAAS9c,MAChC+c,QAASjN,EAAMjN,OAAOka,QAAQ/c,MAC9Bgd,QAASlN,EAAMjN,OAAOma,QAAQhd,MAC9ByU,mBAGqByO,EAAAA,EAAAA,IAAQD,EAAW/D,EAAAA,GAAYC,OAAQzZ,IACjD0Z,IAGX7hB,EAAa,sCAAuC,WACpD6kB,IAA0B,GAC1BE,IAAwB,KAExBF,IAA0B,GAC1BE,IAAwB,GAE5B,CAAE,MAAO3gB,GACPhD,QAAQgD,MAAM,0BAA2BA,GACzCygB,IAA0B,GAC1BE,IAAwB,EAC1B,CAAC,QACC7K,GAAgB,EAClB,CAEA1D,SAASC,eAAe,oBAAoBmP,OApE5C,CAoEmD,EA8FQ5mB,SAAA,EACvD6F,EAAAA,EAAAA,MAAC6I,EAAAA,EAAKC,MAAK,CAACsU,UAAU,kBAAiBjjB,SAAA,EACrCJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,QACZ6F,EAAAA,EAAAA,MAAC6I,EAAAA,EAAKG,QAAO,CACXC,GAAG,SACH7J,KAAK,SACLO,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,QAChCoI,OAAQ,OACRgF,WAAY,QACZ1F,QAAS,OAEXnD,SAvPiB/B,UACzBoP,EAAMyO,iBACN,MACM6E,EADWtT,EAAMjN,OAAO7C,MACF8G,MAAM,KAAKuc,MAAM/b,OAC7C0a,EAAoBoB,GACpB,IACE,MAAME,QAAkBC,EAAAA,EAAAA,KAAO/H,EAAAA,EAAAA,IAAIb,EAAAA,GAAIuE,EAAAA,GAAYC,OAAQiE,IAC3D,GAAIE,EAAUE,OAAQ,CAEpB,GADA1B,EAAkBwB,EAAU7mB,QACxB6mB,EAAU7mB,OAAOyf,YAAa,CAChC,MAAMuH,EAAMH,EAAU7mB,OAAOyf,YAC7B/K,GAAoBsS,GAAO,KAE7B,CAEA,GAAIH,EAAU7mB,OAAOsQ,UAAW,CAC9BC,GAAasW,EAAU7mB,OAAOsQ,WAE9B,MAAM0V,EAAWpjB,KAAKmG,OAAOiL,OAAOsH,KAAKhL,IAAW5M,IAAIuiB,SACxDR,EAAiCO,EAEnC,MACEzV,GAAa,CACX,EAAG,CACDlL,UAAW,GACXgN,WAAY,GACZC,KAAM,GACNV,KAAM,GACNW,YAAa,GACbC,IAAK,GACLvG,MAAO,GACPyG,WAAW,EACXC,cAAe,KAIvB,MACE0S,EAAkB,KAEtB,CAAE,MAAOngB,GACPhD,QAAQgD,MAAM,8BAA+BA,EAAOyhB,EACtD,GA8MqC7mB,SAAA,EAE7BJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAEzD,SAAC,uBAChBmJ,GAAYA,EAASzG,OAAS,EAC7ByG,EAASvF,KAAKujB,IACZvnB,EAAAA,EAAAA,KAAA,UAAyB6D,MAAO0jB,EAAWnnB,SACxCmnB,GADUA,MAKfvnB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAEzD,SAAC,0BAKvBJ,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAChC3B,SACH,mBAGD6F,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACF6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,mBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACXqU,KAAM,EACNhW,aAAcoY,EAAiBA,EAAevZ,WAAa,GAC3DvG,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCsE,KAAK,WACLuN,YAAY,oBACZvO,KAAK,gBAGPrF,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,oBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACXqU,KAAM,EACNhW,aAAcoY,EAAiBA,EAAezJ,YAAc,GAC5DrW,MAAO,CACL2d,UAAW,QACXrd,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCmN,GAAG,WACH0E,YAAY,uBACZvO,KAAK,oBAGTY,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,sBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACXqU,KAAM,EACNhW,aAAcoY,EAAiBA,EAAexJ,YAAc,GAC5DtW,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCsE,KAAK,WACLuN,YAAY,oBACZvO,KAAK,iBAGPrF,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,qBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACXqU,KAAM,EACNhW,aAAcoY,EAAiBA,EAAevJ,aAAe,GAC7DvW,MAAO,CACLuE,OAAQ,QACRjE,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCmN,GAAG,WACH0E,YAAY,uBACZvO,KAAK,wBAIXrF,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAChC3B,SACH,qBAGD6F,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACF6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,qBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX3B,aAAcoY,EAAiBA,EAAetJ,aAAe,GAC7DxW,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCuhB,KAAM,EACN1P,YAAY,uBACZvO,KAAK,eACLgB,KAAK,YAGPrG,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,uBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX3B,aAAcoY,EAAiBA,EAAerJ,eAAiB,GAC/DzW,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCuhB,KAAM,EACN1P,YAAY,uBACZvO,KAAK,iBACLgB,KAAK,eAGTJ,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,kBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX3B,aAAcoY,EAAiBA,EAAe/F,YAAc,GAC5D/Z,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCsE,KAAK,WACLid,KAAM,EACN1P,YAAY,uBACZvO,KAAK,uBAIXrF,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAChC3B,SACH,oBAGD6F,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACF6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,oBAEZ6F,EAAAA,EAAAA,MAACwd,EAAAA,EAAa,CAACC,MAAO1F,GAAU5d,SAAA,EAC9BJ,EAAAA,EAAAA,KAAC2jB,EAAAA,GAAW,KAEZ3jB,EAAAA,EAAAA,KAACgU,EAAAA,EAAY,CACXpO,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElC6F,UAAQ,EACRzH,GAAG,gBACHsN,QAAS4D,GACTxN,MAAOiX,GACPxU,SA3fkBsd,CAACjQ,EAAO9P,KACtCkX,GAAuBlX,EAAM,EA2fjBsQ,YAAcC,IACZpU,EAAAA,EAAAA,KAACqU,EAAAA,EAAS,IACJD,EACJvK,QAAQ,WACR+J,YAAY,sBACZhO,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,iBAO1C/B,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,yBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX3B,aAAcoY,EAAiBA,EAAepJ,cAAgB,GAC9D1W,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCuhB,KAAM,EACN1P,YAAY,oBACZvO,KAAK,gBACLgB,KAAK,eAGTJ,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,yBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX3B,aACEoY,EAAiBA,EAAenJ,iBAAmB,GAErD3W,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCuhB,KAAM,EACN1P,YAAY,oBACZvO,KAAK,mBACLgB,KAAK,kBAIXrG,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAChC3B,SACH,wBAGDJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,0BACZJ,EAAAA,EAAAA,KAAC4O,EAAAA,EAAG,CAAAxO,UACFJ,EAAAA,EAAAA,KAAC6O,EAAAA,EAAG,CAAC6J,GAAI,EAAEtY,UACTJ,EAAAA,EAAAA,KAAA,OACE4F,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAChC3B,UAEF6F,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACF6F,EAAAA,EAAAA,MAACwd,EAAAA,EAAa,CAACC,MAAO1F,GAAU5d,SAAA,EAC9BJ,EAAAA,EAAAA,KAAC2jB,EAAAA,GAAW,KAEZ3jB,EAAAA,EAAAA,KAACgU,EAAAA,EAAY,CACXpO,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElC6F,UAAQ,EACRzH,GAAG,gBACHsN,QAASqD,GACTjN,MAAO+W,EACPtU,SAxbaud,CAAClQ,EAAO9P,KACrCgX,EAAuBhX,EAAM,EAwbbsQ,YAAcC,IACZpU,EAAAA,EAAAA,KAACqU,EAAAA,EAAS,IACJD,EACJvK,QAAQ,WACR+J,YAAY,sBACZhO,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,iBAM1C/B,EAAAA,EAAAA,KAAA,KACEC,KAAK,sBACL6jB,IAAI,aACJpd,OAAO,SACPd,MAAO,CACLme,eAAgB,OAChBhb,MAAOhH,GAAe,OAAS,QAC/B3B,SACH,kDAOTJ,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAChC3B,SACH,qBAGD6F,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACF6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,qBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX3B,aAAcoY,EAAiBA,EAAetI,aAAe,GAC7DxX,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCmN,GAAG,WACHoU,KAAM,EACN1P,YAAY,sBACZvO,KAAK,kBAGPrF,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,cACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX3B,aAAcoY,EAAiBA,EAAelZ,OAAS,GACvD5G,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCmN,GAAG,WACHoU,KAAM,EACN1P,YAAY,eACZvO,KAAK,YAEPrF,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,YACZ6F,EAAAA,EAAAA,MAAC6I,EAAAA,EAAKG,QAAO,CACXC,GAAG,SACHtJ,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,QAChCoI,OAAQ,OACRgF,WAAY,QACZ1F,QAAS,OAEXpE,KAAK,OACLxB,MAAO6hB,EAAiBA,EAAe3N,KAAO,GAC9CzR,SAAWC,IACT,MAAMihB,EAAUjhB,EAAEG,OAAO7C,MACzB8hB,GAAmB8B,IAAS,IACvBA,EACH1P,KAAMyP,KACL,EACHpnB,SAAA,EAEFJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAEzD,SAAC,kBAChBmb,GAAgBvX,KAAI,CAAC+T,EAAMlN,KAC1B7K,EAAAA,EAAAA,KAAA,UAAoB6D,MAAOkU,EAAK3X,SAC7B2X,GADUlN,YAMnB5E,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,cACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX3B,aAAcoY,EAAiBA,EAAe7F,SAAW,GACzDja,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCmN,GAAG,WACHoU,KAAM,EACN1P,YAAY,iBACZvO,KAAK,cAGPrF,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,eACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX3B,aAAcoY,EAAiBA,EAAerI,QAAU,GACxDzX,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCmN,GAAG,WACHoU,KAAM,EACN1P,YAAY,gBACZvO,KAAK,UACLgB,KAAK,YAGPrG,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,aACZ6F,EAAAA,EAAAA,MAAC6I,EAAAA,EAAKG,QAAO,CACXC,GAAG,SACHtJ,MAAO,CACL6D,QAAS,WACTvD,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCuhB,KAAM,EACN1P,YAAY,cACZvO,KAAK,QACLxB,MAAO6hB,EAAiBA,EAAepI,MAAQ,GAAGld,SAAA,EAElDJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAEzD,SAAC,mBAChBqb,GAAazX,KAAI,CAAC+T,EAAMlN,KACvB7K,EAAAA,EAAAA,KAAA,UAAoB6D,MAAOkU,EAAK3X,SAC7B2X,GADUlN,YAOnB7K,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,wBACZJ,EAAAA,EAAAA,KAACskB,EAAS,CACRvP,iBAAkBA,GAClBC,oBAAqBA,GACrBC,WAAYA,GACZC,cAAeA,SAGnBlV,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,QAC5CgH,MAAOhH,GAAe,QAAU,SAChC3B,SACH,wBAGD6F,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACF6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,gBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX3B,aAAcoY,EAAiBA,EAAe1F,UAAY,GAC1Dpa,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCsE,KAAK,SACLid,KAAM,EACN1P,YAAY,aACZvO,KAAK,kBAGTY,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,mBAEZ6F,EAAAA,EAAAA,MAACwd,EAAAA,EAAa,CAACC,MAAO1F,GAAU5d,SAAA,EAC9BJ,EAAAA,EAAAA,KAAC2jB,EAAAA,GAAW,KAEZ3jB,EAAAA,EAAAA,KAACgU,EAAAA,EAAY,CACXpO,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElC6F,UAAQ,EACRzH,GAAG,gBACHsN,QAASkO,GACT9X,MAAOmX,EACP1U,SApwBgBohB,CAAC/T,EAAO9P,KACpCoX,EAAqBpX,EAAM,EAowBfsQ,YAAcC,IACZpU,EAAAA,EAAAA,KAACqU,EAAAA,EAAS,IACJD,EACJvK,QAAQ,WACR+J,YAAY,mBACZhO,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,uBAQ9C/B,EAAAA,EAAAA,KAAC4O,EAAAA,EAAG,CAAAxO,UACF6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAAzO,SAAA,EACFJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,wBACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX3B,aACEoY,EACIlE,GAA4B,OAAdkE,QAAc,IAAdA,OAAc,EAAdA,EAAgBnF,mBAC9B,GAEN+C,KAAM,EACN1d,MAAO,CACLuE,OAAQ,QACRjE,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCmN,GAAG,WACH0E,YAAY,qBACZvO,KAAK,4BAKXrF,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,QAAAI,SAAM,iCACNJ,EAAAA,EAAAA,KAAA,OACE4F,MAAO,CACLoe,UAAW,OACX/X,WAAY,SACZgY,eAAgBliB,GAAe,YAAc,aAC7C3B,UAEF6F,EAAAA,EAAAA,MAACoM,EAAAA,EAAK,CAACC,UAAQ,EAACzI,QAAQ,QAAOzJ,SAAA,EAC7BJ,EAAAA,EAAAA,KAAA,SAAAI,UACE6F,EAAAA,EAAAA,MAAA,MAAA7F,SAAA,EACEJ,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACL6D,QAAS,OACT+I,UAAW,SACXC,SAAU,QACVF,OAAQ,mBACRnS,SACH,gBAGDJ,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACL6D,QAAS,OACT+I,UAAW,SACXC,SAAU,QACVF,OAAQ,mBACRnS,SACH,gBAGDJ,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACL6D,QAAS,OACT+I,UAAW,SACXC,SAAU,QACVF,OAAQ,mBACRnS,SACH,UAGDJ,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACL6D,QAAS,OACT+I,UAAW,SACXC,SAAU,QACVF,OAAQ,mBACRnS,SACH,UAGDJ,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACL6D,QAAS,OACT+I,UAAW,SACXC,SAAU,QACVF,OAAQ,mBACRnS,SACH,iBAGDJ,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACL6D,QAAS,OACT+I,UAAW,SACXC,SAAU,OACVF,OAAQ,mBACRnS,SACH,kBAGDJ,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACL6D,QAAS,OACT+I,UAAW,SACXC,SAAU,QACVF,OAAQ,mBACRnS,SACH,WAGDJ,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACL6D,QAAS,OACT+I,UAAW,SACXC,SAAU,OACVF,OAAQ,mBACRnS,SACH,gBAGDJ,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACL6D,QAAS,OACT+I,UAAW,SACXC,SAAU,QACVF,OAAQ,mBACRnS,SACH,oBAGDJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAE6D,QAAS,GAAIrJ,UACxBJ,EAAAA,EAAAA,KAAC6M,EAAAA,EAAM,CAAChD,QAAQ,UAAUrB,QAxpBrBkK,KACnB7B,IAAcY,IACZ,MAAMkW,EAAYrT,OAAOsH,KAAKnK,GAAU3O,OACxC,MAAO,IAAK2O,EAAU,CAACkW,GAAY,IAAK/W,GAAU,IAAM,GACxD,EAopB4DxQ,UAC9CJ,EAAAA,EAAAA,KAACkT,EAAAA,IAAM,cAKflT,EAAAA,EAAAA,KAAA,SAAAI,SACGkU,OAAOsH,KAAKhL,IAAW5M,KAAI,CAAC4jB,EAAQ/c,KAAK,IAAAgd,EAAAC,EAAAC,EAAAC,EAAAC,EAAAzU,EAAA0U,EAAAC,EAAA,OACxCliB,EAAAA,EAAAA,MAAA,MAAA7F,SAAA,EACEJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAE6D,QAAS,QAASrJ,UAC7BJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX5I,KAAK,OACLxC,MAAO+M,GAAUgX,GAAQjiB,UACzBW,SAAWC,GACTgL,GAAkBqW,EAAQ,YAAarhB,EAAEG,OAAO7C,OAElD+B,MAAO,CACLuE,OAAQ,OACRgF,WAAY,QACZ1F,QAAS,YAIfzJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAE6D,QAAS,QAASrJ,UAC7B6F,EAAAA,EAAAA,MAAC6I,EAAAA,EAAKG,QAAO,CACXC,GAAG,SACHrL,MAAO+M,GAAUgX,GAAQjV,WACzBrM,SAAWC,GACTgL,GAAkBqW,EAAQ,aAAcrhB,EAAEG,OAAO7C,OAEnD+B,MAAO,CACLuE,OAAQ,OACRgF,WAAY,QACZ1F,QAAS,OACTrJ,SAAA,EAEFJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAEzD,SAAC,wBAChBiR,GAAmBrN,KAAKqK,IACvBrO,EAAAA,EAAAA,KAAA,UAAqB6D,MAAOwK,EAAOjO,SAChCiO,GADUA,WAMnBrO,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAE6D,QAAS,QAASrJ,UAC7BJ,EAAAA,EAAAA,KAACyT,EAAAA,EAAW,CACV5P,MACE+M,GAAUgX,IACVhX,GAAUgX,GAAQhV,MAClB/C,EACW,OAATe,SAAS,IAATA,IAAmB,QAAViX,EAATjX,GAAYgX,UAAO,IAAAC,GAAM,QAANC,EAAnBD,EAAqBjV,YAAI,IAAAkV,GAChB,QADgBC,EAAzBD,EACInd,aAAK,IAAAod,GAAO,QAAPC,EADTD,EAAArU,KAAAoU,EACY,YAAI,IAAAE,GACN,QADMC,EADhBD,EAEI5jB,cAAM,IAAA6jB,OAFD,EAATA,EAAAvU,KAAAsU,GAEchY,GAAgB,KAARA,KAG1B1J,SAAWqN,GACTpC,GAAkBqW,EAAQ,OAAQjU,EAAMjN,OAAO7C,OAEjD4J,QAASyC,GACT0D,YAAY,aACZC,kBAAmB,EACnBlO,UAAU,oBACVC,MAAO,CAAEmD,MAAO,OAAQjD,MAAO,aAGnCG,EAAAA,EAAAA,MAAA,MAAIL,MAAO,CAAE6D,QAAS,QAASrJ,SAAA,EAC7BJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX5I,KAAK,OACLxC,MAAO+M,GAAUgX,GAAQ1V,KAEzB1J,QAASA,IAr8BAsL,EAACjJ,EAAOqH,KAEnCZ,GAAeY,GACfhB,EAAoBrG,GACpBmG,GAAkB,EAAK,EAk8BH8C,CAAqB8T,EAAQhX,GAAUgX,GAAQ1V,QAGlDnB,IACC/Q,EAAAA,EAAAA,KAAC+T,EAAe,CACdhH,KAAMgE,EACN/D,YAAa6E,GACb5E,aAAc6E,GACd5E,aAC6B,QAA3BsG,EAAA5C,GAAUK,UAAiB,IAAAuC,OAAA,EAA3BA,EAA6BtB,OAAQ,oBAK7ClS,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAE6D,QAAS,OAAQ3D,MAAO,SAAU1F,UAC7CJ,EAAAA,EAAAA,KAACgU,EAAAA,EAAY,CACXpM,UAAQ,EACR6F,QAASqD,GACTjN,MACE+M,GAAUgX,IAAWhX,GAAUgX,GAAQ/U,YACnCjC,GAAUgX,GAAQ/U,YAClB,GAENvM,SAAUA,CAAC2N,EAAGC,IACZ3C,GAAkBqW,EAAQ,cAAe1T,GAE3CC,YAAcC,IACZpU,EAAAA,EAAAA,KAACqU,EAAAA,EAAS,IACJD,EACJvK,QAAQ,WACR+J,YAAY,4BAKpB5T,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAE6D,QAAS,QAASrJ,UAC7BJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX5I,KAAK,OACLxC,MAAO+M,GAAUgX,GAAQ9U,IAAMlC,GAAUgX,GAAQ9U,IAAM,GACvDxM,SAAWC,GACTgL,GAAkBqW,EAAQ,MAAOrhB,EAAEG,OAAO7C,OAE5C+B,MAAO,CACLuE,OAAQ,OACRgF,WAAY,QACZ1F,QAAS,YAIfzJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAE6D,QAAS,QAASrJ,UAC7B6F,EAAAA,EAAAA,MAAC6I,EAAAA,EAAKG,QAAO,CACXC,GAAG,SACHrL,MACE+M,GAAUgX,GAAQrb,MAAQqE,GAAUgX,GAAQrb,MAAQ,GAEtDjG,SAAWC,GACTgL,GAAkBqW,EAAQ,QAASrhB,EAAEG,OAAO7C,OAE9C+B,MAAO,CACLuE,OAAQ,OACRgF,WAAY,QACZ1F,QAAS,OACTrJ,SAAA,EAEFJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAEzD,SAAC,oBACjBJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,WAAUzD,SAAC,cACzBJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,eAAczD,SAAC,kBAC7BJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,WAAUzD,SAAC,cACzBJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,OAAMzD,SAAC,eAGzBJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAE6D,QAAS,OAAQ8I,OAAQ,mBAAoBnS,UACxD6F,EAAAA,EAAAA,MAAC6I,EAAAA,EAAKG,QAAO,CACXrJ,MAAO,CACLM,gBAAiB,QACjBiE,OAAQ,OACRgF,WAAY,QACZ1F,QAAS,OAEXyF,GAAG,SACHrL,MACkB,QAAhBqkB,EAAAtX,GAAU/F,UAAM,IAAAqd,GAAhBA,EAAkBlV,UACdpC,GAAU/F,GAAOmI,UACjB,GAEN1M,SAAWC,GACTgL,GAAkB1G,EAAO,YAAatE,EAAEG,OAAO7C,OAChDzD,SAAA,EAEDJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAEzD,SAAC,oBACjBJ,EAAAA,EAAAA,KAAA,UAAQ6D,OAAO,EAAKzD,SAAC,SACrBJ,EAAAA,EAAAA,KAAA,UAAQ6D,OAAO,EAAMzD,SAAC,aAG1BJ,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAE6D,QAAS,OAAQ3D,MAAO,SAAU1F,UAC7C6F,EAAAA,EAAAA,MAAC6I,EAAAA,EAAKG,QAAO,CACXrJ,MAAO,CACLM,gBAAiB,QACjBiE,OAAQ,OACRgF,WAAY,QACZ1F,QAAS,OAEXyF,GAAG,SACHrL,MACE2C,MAAMkL,QAAQd,GAAU/F,GAAOoI,gBACD,QADekV,EAC7CvX,GAAU/F,GAAOoI,qBAAa,IAAAkV,GAA9BA,EAAgCrlB,OAC5B8N,GAAU/F,GAAOoI,cAAc,GAC/B,GAEN3M,SAAWC,GACTgL,GAAkB1G,EAAO,gBAAiB,CACxCtE,EAAEG,OAAO7C,QAEZzD,SAAA,EAEDJ,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAEzD,SAAC,0BAChBkU,OAAOJ,OAAO/D,IAAanM,KAAI,CAACH,EAAO0Q,KACtCvU,EAAAA,EAAAA,KAAA,UAAkB6D,MAAOA,EAAMzD,SAC5ByD,GADU0Q,WAMnBvU,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAAE6D,QAAS,QAASrJ,UAC7BJ,EAAAA,EAAAA,KAAC6M,EAAAA,EAAM,CACLhD,QAAQ,SACRrB,QAASA,IAt1BJqC,KACvBgG,IAAcY,IACZ,MAAMG,EAAU,IAAKH,GAErB,cADOG,EAAQ/G,GACR+G,CAAO,GACd,EAi1B+B6C,CAAgBmT,GAAQxnB,UAEvCJ,EAAAA,EAAAA,KAAC0U,EAAAA,IAAO,UA/LLkT,EAkMJ,YAKb5nB,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACLwe,OAAQ,SACRle,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAChC3B,SACH,sBAGDJ,EAAAA,EAAAA,KAACqkB,EAAmB,CAAC/L,QAASA,GAASC,WAAYA,MAEnDvY,EAAAA,EAAAA,KAAA,MACE4F,MAAO,CACLwe,OAAQ,aACRle,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAChC3B,SACH,wBAGD6F,EAAAA,EAAAA,MAAC2I,EAAAA,EAAG,CAAAxO,SAAA,EACF6F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,eACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX3B,aAAcoY,EAAiBA,EAAehF,UAAY,GAC1D9a,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCsE,KAAK,OACLid,KAAM,EACN1P,YAAY,iBACZvO,KAAK,kBAGTY,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,cACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX3B,aAAcoY,EAAiBA,EAAe/E,SAAW,GACzD/a,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCsE,KAAK,OACLid,KAAM,EACN1P,YAAY,gBACZvO,KAAK,iBAGTY,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,aACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX3B,aAAcoY,EAAiBA,EAAe9E,QAAU,GACxDhb,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCsE,KAAK,OACLid,KAAM,EACN1P,YAAY,eACZvO,KAAK,gBAGTY,EAAAA,EAAAA,MAAC4I,EAAAA,EAAG,CAAC+J,GAAI,EAAExY,SAAA,EACTJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKE,MAAK,CAAA5O,SAAC,aACZJ,EAAAA,EAAAA,KAAC8O,EAAAA,EAAKG,QAAO,CACX3B,aAAcoY,EAAiBA,EAAe7E,QAAU,GACxDjb,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,GAC5CgH,MAAOhH,GAAe,QAAU,SAElCsE,KAAK,OACLid,KAAM,EACN1P,YAAY,eACZvO,KAAK,mBAKXrF,EAAAA,EAAAA,KAAA,SACCuJ,GAAYA,EAASzG,OAAS,GAAK8iB,IAClC3f,EAAAA,EAAAA,MAAAmI,EAAAA,SAAA,CAAAhO,SAAA,EACEJ,EAAAA,EAAAA,KAAA,OAAAI,UACEJ,EAAAA,EAAAA,KAACQ,EAAAA,EAAW,CACVG,SAAUilB,EACV/kB,MAAO,gBACPD,cAAeuF,EAAAA,GAASC,aACxBtF,cAAe,GAAIC,cAAe,OAGtCf,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAAI,UACEJ,EAAAA,EAAAA,KAACQ,EAAAA,EAAW,CACVG,SAAUilB,EACV/kB,MAAO,cACPD,cAAeuF,EAAAA,GAASqe,WACxB1jB,cAAe,EAAGC,cAAe,OAGrCf,EAAAA,EAAAA,KAAA,OAAAI,UACEJ,EAAAA,EAAAA,KAACQ,EAAAA,EAAW,CACVG,SAAUilB,EACV/kB,MAAO,6BACPD,cAAeuF,EAAAA,GAASse,oBACxB3jB,cAAe,GAAIC,cAAe,OAGtCf,EAAAA,EAAAA,KAAA,YAGHgmB,KACChmB,EAAAA,EAAAA,KAACooB,GAAU,CACT/hB,KAAK,OACLue,QAAQ,8BACRC,cAAe,IACf7Z,SAAS,OACTa,WAAW,SAGdqa,KACClmB,EAAAA,EAAAA,KAACooB,GAAU,CACT/hB,KAAK,UACLue,QAAQ,uBACRC,cAAe,IACf7Z,SAAS,OACTa,WAAW,UAGf7L,EAAAA,EAAAA,KAAC6M,EAAAA,EAAM,CACLjH,MAAO,CACLM,gBAAiBnE,GAAe,UAAY,QAC5CgH,MAAO,SAET1C,KAAK,SACLkC,SAAU8S,EAAajb,SACxB,kBAGAib,IAAgBrb,EAAAA,EAAAA,KAACukB,EAAAA,EAAc,SAIxC,E,wFCxpCA,SA9KA,WACE,MAAOxkB,EAAQylB,IAAa9jB,EAAAA,EAAAA,UAAS,KAC9B6H,EAAUkc,IAAe/jB,EAAAA,EAAAA,UAAS,IACnCK,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1B4Q,EAAawV,IAAkB3mB,EAAAA,EAAAA,UAAS,KACxC4mB,EAAWC,IAAgB7mB,EAAAA,EAAAA,WAAS,IACpC8mB,EAAaC,IAAkB/mB,EAAAA,EAAAA,WAAU,IAC1C,YAAEgnB,IAAgBC,EAAAA,GAAAA,MACjB9kB,EAAO+kB,GAAYC,EAAAA,SAAe,KA6GzC,OAtGAtlB,EAAAA,EAAAA,YAAU,KACRf,QAAQC,IAAI,iCACW8B,WACrB,IACA,MAAMukB,GAAUzJ,EAAAA,EAAAA,IAAIb,EAAAA,GAAI,OAAQkK,EAAYK,KACtCC,QAAiB5B,EAAAA,EAAAA,IAAO0B,GAC1BE,EAAS3B,UACX7kB,QAAQC,IAAI,aAAaumB,EAAS1oB,OAAO0oB,EAAS1oB,OAAO2oB,YAAYrK,KAAKC,MAAMC,aAAaC,QAAQ,kBAC/E,MAAnBiK,EAAS1oB,QAEVioB,EAAaS,EAAS1oB,OAAO2oB,aAC7BR,EAAeO,EAAS1oB,OAAO+f,WAC/B7d,QAAQC,IAAI,eAAe+lB,EAAYQ,EAAS1oB,SAEhDkC,QAAQC,IAAI,yBAGdD,QAAQC,IAAI,+CAEd,CAAC,MAAM+C,GACLhD,QAAQC,IAAI,SACd,GAGFymB,EAAgB,GACf,CAACZ,KAGJ/kB,EAAAA,EAAAA,YAAU,KACRf,QAAQC,IAAI,mCACW8B,WACvB,IAAI4kB,EAAS,KAOb,GALEvK,KAAKC,MAAMC,aAAaC,QAAQ,cAChCH,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,SAE7CmK,EAASvK,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,SAEnDmK,EAGH,OAFA3mB,QAAQC,IAAI,uBACZkB,MAAM,kBAIR,MAAMylB,GAAgB7K,EAAAA,EAAAA,IAAWC,EAAAA,GAAIuE,EAAAA,GAAYsG,aAC3ChL,GAAIC,EAAAA,EAAAA,IAAM8K,GAAezK,EAAAA,EAAAA,IAAM,YAAa,KAAMwK,IAClDlK,QAAsBC,EAAAA,EAAAA,IAAQb,GAE9BiL,EAAkB,GACxBrK,EAAcrY,SAASyY,IACrBiK,EAAgBtiB,KAAK,CACnB7G,GAAIkf,EAAIlf,GACRkF,KAAMga,EAAI/e,OAAO+E,MACjB,IAEJ7C,QAAQC,IAAI,OAAQ6mB,GACpBjB,EAAeiB,EAAgB,EAGjCC,EAAkB,GACf,KAGHhmB,EAAAA,EAAAA,YAAU,KACRf,QAAQC,IAAI,mCACa8B,WACvB,MAAM8Z,GAAIC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,IAAWC,EAAAA,GAAIuE,EAAAA,GAAYC,SAASrE,EAAAA,EAAAA,IAAM,SAAU,KAAMC,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,SACvHxc,QAAQC,IAAI,QAAQmc,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,QACjE,MAAMC,QAAsBC,EAAAA,EAAAA,IAAQb,GACpC7b,QAAQC,IAAI,aAAawc,GACzB,MAAMmH,EAAgBnH,EAAcuK,KAAKplB,QAAOib,GAAOA,EAAI/e,OAAO6L,aAAYnI,KAAIqb,IAC9E,MAAM/e,EAAO+e,EAAI/e,OACjB,MAAO,CACLH,GAAIkf,EAAIlf,MACLG,EACJ,IAELwe,aAAa2K,QAAQ,gBAAiB7K,KAAK8K,UAAUtD,IACrDZ,EAAUY,GACVX,EAAYW,EAAcpiB,KAAKjE,GAAY4Z,OAAO5Z,EAAOoM,YAAc,KAAOwN,OAAO5Z,EAAOI,OAC5FqC,QAAQC,IAAI1C,GACZyC,QAAQC,IAAI,WAAW8G,EAAS,EAGhCogB,EAAkB,GAClB,CAACnE,KAELjiB,EAAAA,EAAAA,YAAU,KACRf,QAAQC,IAAI,8BAEZ,MAAM2jB,EAAgBxH,KAAKC,MAAMC,aAAaC,QAAQ,mBAAqB,GAC3EyG,EAAUY,GAGV,MAAMC,EAAeD,EAAcpiB,KAAKjE,GAAM,GAAAG,OAAQH,EAAOoM,WAAU,OAAAjM,OAAMH,EAAOI,MACpFslB,EAAYY,GAEZ7jB,QAAQC,IAAI,UAAW1C,GACvByC,QAAQC,IAAI,WAAY8G,EAAS,GAChC,CAACkc,IAEJjjB,QAAQC,IAAI,WAAW1C,IAErBkG,EAAAA,EAAAA,MAAA,OAAA7F,SAAA,EACEJ,EAAAA,EAAAA,KAAA,SACCsoB,GAEAtoB,EAAAA,EAAAA,KAAAoO,EAAAA,SAAA,CAAAhO,UACAJ,EAAAA,EAAAA,KAACyL,GAAAA,EAAG,CAAC1D,GAAI,CAAEjC,MAAO,OAAQ8jB,WAAY,SAAUxpB,UACjD6F,EAAAA,EAAAA,MAAC4jB,GAAAA,GAAU,CAAChmB,MAAOA,EAAMzD,SAAA,EACvBJ,EAAAA,EAAAA,KAACyL,GAAAA,EAAG,CAAC1D,GAAI,CAAE+hB,aAAc,EAAGC,YAAa,WAAY3pB,UACnD6F,EAAAA,EAAAA,MAAC+jB,GAAAA,EAAO,CAACpkB,MAAO,CAACmD,MAAOhH,EAAe,QAAU,SAAUuE,SApH9C2jB,CAACtW,EAAOuW,KAC3BtB,EAASsB,EAAS,EAmHuE,aAAW,uBAAsB9pB,SAAA,EAClHJ,EAAAA,EAAAA,KAACmqB,GAAAA,EAAG,CAACvkB,MAAO,CAACmD,MAAOhH,EAAe,QAAU,SAAUigB,MAAM,aAAane,MAAM,OAChF7D,EAAAA,EAAAA,KAACmqB,GAAAA,EAAG,CAACvkB,MAAO,CAACmD,MAAOhH,EAAe,QAAU,SAAUigB,MAAM,gBAAgBne,MAAM,YAIvF7D,EAAAA,EAAAA,KAACoqB,GAAAA,EAAQ,CAACvmB,MAAM,IAAGzD,UAEnBJ,EAAAA,EAAAA,KAACqqB,GAAS,CAACxX,YAAaA,OAExB7S,EAAAA,EAAAA,KAACoqB,GAAAA,EAAQ,CAACvmB,MAAM,IAAGzD,UACnBJ,EAAAA,EAAAA,KAAAoO,EAAAA,SAAA,CAAAhO,UACAJ,EAAAA,EAAAA,KAACsqB,GAAY,CACHvqB,OAAQA,EACRylB,UAAWA,EACX3S,YAAaA,EACbtJ,SAAUA,EACVkc,YAAaA,eASvB,IAEFzlB,EAAAA,EAAAA,KAAA,MAAI4F,MAAO,CAACmD,MAAOhH,EAAe,QAAU,SAAS3B,SAAC,mBACrD6F,EAAAA,EAAAA,MAAA,MAAA7F,SAAA,EACDJ,EAAAA,EAAAA,KAAC4O,EAAAA,EAAG,CAAC8J,GAAI,EAAGE,GAAI,EAAGC,GAAI,EAAGlT,UAAU,MAAKvF,SACtCL,EAAO+C,OAAS,EACf/C,EAAOiE,KAAI,CAACjE,EAAQ8K,KAClB7K,EAAAA,EAAAA,KAAC6O,EAAAA,EAAG,CAAAzO,UACFJ,EAAAA,EAAAA,KAAA,KAAGC,KAAI,YAAAC,OAAcH,EAAOwJ,UAAY3D,MAAO,CAAEme,eAAgB,QAAS3jB,UACxEJ,EAAAA,EAAAA,KAACuqB,GAAAA,EAAc,CAACxqB,OAAQA,OAFlB8K,MAOZ7K,EAAAA,EAAAA,KAAA,KAAG4F,MAAO,CAACmD,MAAOhH,EAAe,QAAU,SAAS3B,SAAC,sBAGzDJ,EAAAA,EAAAA,KAAA,cAIN,C","sources":["Components/CardSliderCard.js","Components/ImageUpload.js","Components/NStudioCard.js","Components/TimeRangePicker.js","utils/mapping.js","Components/StudioTable.js","Components/MapsInput.js","Components/SucessPage.js","Components/StudioWeeklyTiming.jsx","Components/StudioAdd.js","Components/AlertPopup.js","Components/StudioUpdate.js","Screens/CreatorStudio.js"],"sourcesContent":["import React from 'react';\nimport NStudioCard from './NStudioCard';\n\nconst CardSliderCard = ({ studio }) => {\n  return (\n    <a href={`#/studio/${studio.id}`}>\n    <NStudioCard data={studio} img_src={\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}/>\n    </a>\n\n  );\n};\n\nexport default CardSliderCard;\n","import React, { useState, useEffect, forwardRef, useImperativeHandle, useRef } from \"react\";\nimport shortid from \"shortid\";\nimport { ref as firebaseRef, getDownloadURL, listAll } from 'firebase/storage';\nimport { storage } from '../config';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { deleteAllImagesInFolder,deleteImages,uploadImages} from '../utils/firebaseUtils'\nimport { Card, CardContent, IconButton } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useSnackbar } from \"../context/SnackbarContext\";\nimport { STORAGES } from \"../constants\";\nimport { useLoader } from \"../context/LoaderContext\";\n\n\nconst ImageUpload = forwardRef(({entityId,storageFolder,title, maxImageCount=10, minImageCount, updateMode, disable }, ref) => {\n  const { setIsLoading } = useLoader();\n  const showSnackbar = useSnackbar();\n  const imageInputRef = useRef(null);\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [newFiles, setNewFiles] = useState([]); // Track new files to be added\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  //console.log(\"Received props=> entityId:\", entityId, \"|storageFolder:\", storageFolder);\n  const [progressDelete, setProgressDelete] = useState(-1);\n  const [progressUpdate, setProgressUpdate] = useState(-1);\n  const [isUploadSuccessful, setIsUploadSuccessful] = useState(false);\n\n  console.log(\"Kyc enitity id \",entityId, disable)\n  const filesizes = (bytes, decimals = 2) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n  };\n\n  useEffect(() => {\n   // console.log(\"Fetching image for\",entityId)\n    if(entityId){\n      fetchStudioImages(entityId); // Fetch images when component mounts\n    }\n  }, [entityId]);\n\n  useEffect(() => {\n   // console.log(\"Selected files:\", selectedFiles);\n    if (maxImageCount && selectedFiles.length > maxImageCount) {\n      const truncatedFiles = selectedFiles.slice(0, maxImageCount);\n      alert(`Exceeded maxImageCount, keeping first ${maxImageCount} files.`);\n      imageInputRef.current.value = null;\n      setSelectedFiles(truncatedFiles);\n    }\n  }, [selectedFiles, maxImageCount]);\n  \n\n  const handleInputChange = (e) => {\n    // console.log(\"handleInputChange\")\n    const files = Array.from(e.target.files);\n    const updatedFiles = [];\n    // console.log(\"file array \",files.length)\n    files.forEach((file) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        updatedFiles.push({\n          id: shortid.generate(),\n          filename: file.name,\n          filetype: file.type,\n          fileimage: reader.result,\n          datetime: file.lastModifiedDate.toLocaleString(\"en-IN\"),\n          filesize: filesizes(file.size),\n          file: file, // Store the actual file object\n        });\n\n        if (updatedFiles.length === files.length) {\n          setSelectedFiles((prevFiles) => [...prevFiles, ...updatedFiles]);\n          setNewFiles(updatedFiles);\n          imageInputRef.current.value = null;\n          // console.log(\"New files in total\",setNewFiles.length)\n        }\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleDeleteSelectedFile = (id) => {\n    if (window.confirm(\"Are you sure you want to delete this image?\")) {\n      setSelectedFiles((prevFiles) =>\n        prevFiles.filter((file) => file.id !== id)\n      );\n    }\n  };\n\n  const handleUploadSubmit = async () => {\n    if (!entityId) {\n      alert(\"No studio selected\");\n      return;\n    }\n\n    setProgressDelete(-1);\n    setProgressUpdate(-1);\n\n    try {\n      setIsLoading(true);\n      if (maxImageCount === 1 && selectedFiles.length >= minImageCount) {\n        // Delete all previous images in the folder\n        await deleteAllImagesInFolder(storageFolder, entityId);\n        await uploadImages(storageFolder,newFiles, entityId, setProgressUpdate);\n        showSnackbar(\"Image uploaded successfully\", \"success\");\n        setIsUploadSuccessful(true);\n      } else {\n        // Calculate images to delete and add\n        const { imagesToDelete, newImages } = calculateDelta(selectedFiles, uploadedFiles);\n\n        if (minImageCount && newImages.length < minImageCount) {\n          showSnackbar(`Minimum ${minImageCount} image(s) are required`, \"error\");\n          return;\n        }\n\n        // Delete images if there are any\n        if (imagesToDelete.length > 0) {\n          await deleteImages(storageFolder, imagesToDelete, entityId, setProgressDelete);\n          showSnackbar(\"Image(s) deleted successfully\", \"success\");\n        }\n\n        // Upload new images if there are any\n        if (newImages.length > 0) {\n          await uploadImages(storageFolder, newImages, entityId, setProgressUpdate);\n          showSnackbar(\"Image(s) uploaded successfully\", \"success\");\n        }\n        setIsUploadSuccessful(true);\n      }\n\n      imageInputRef.current.value = null;\n      // alert(\"Images Uploaded/Deleted\");\n    } catch (error) {\n      setIsUploadSuccessful(false);\n      console.error(\"Error uploading/deleting images:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to calculate images to delete and new images to upload\n  const calculateDelta = (selectedFiles, uploadedFiles) => {\n    const selectedFileIds = selectedFiles.map(file => file.id);\n    const uploadedFileIds = uploadedFiles.map(file => file.id);\n\n    const imagesToDelete = uploadedFiles.filter(file => !selectedFileIds.includes(file.id));\n    const newImages = selectedFiles.filter(file => !uploadedFileIds.includes(file.id));\n\n    return { imagesToDelete, newImages };\n  };\n\n\n  const fetchStudioImages = async (entityId) => {\n    setSelectedFiles([]);\n    setNewFiles([]);\n    try {\n      const folderPath = `${storageFolder}/${entityId}`;\n      console.log(folderPath)\n      const folderRef = firebaseRef(storage, folderPath);\n      const fileList = await listAll(folderRef);\n\n      const files = await Promise.all(\n        fileList.items.map(async (fileRef) => {\n          const downloadURL = await getDownloadURL(fileRef);\n\n          return {\n            id: fileRef.name,\n            filename: fileRef.name,\n            fileURL: downloadURL,\n          };\n        })\n      );\n      // console.log('File fetching',files);\n      setUploadedFiles(files); // Update the uploadedFiles state with fetched data\n      setSelectedFiles(files);\n    } catch (error) {\n      console.error('Error fetching user images:', error);\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    isValid: () => {\n      if (minImageCount === 0) return true;\n      return isUploadSuccessful\n    },\n  }));\n\n  return (\n    <div className=\"fileupload-view\" style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\n      <div className=\"row justify-content-center m-0\" style={{ flex: '1',justifyContent: 'center' }}>\n        <div className=\"col-md-6\" style={{ flex: '1' ,justifyContent: 'center'}}>\n          <div className=\"card mt-5\">\n            <div className=\"card-body\" style={{ backgroundColor: isDarkModeOn ? '#333333' : 'white' }}>\n              <div className=\"kb-data-box\">\n                <div className=\"kb-modal-data-title\">\n                  <div className=\"kb-data-title\" style={{justifyContent:'center',flex: '1'}}>\n                    <h4>{title}</h4>\n                    <p>Max no of image(s):{maxImageCount} {storageFolder === STORAGES.STUDIOIMAGES && <p>Add at least 5 images</p>}</p>\n                  </div>\n                </div>\n                <div style={{  backgroundColor: isDarkModeOn ? '#333333' : 'white'}}>\n                  <div className=\"kb-file-upload\">\n                    <div className=\"file-upload-box\">\n                      <input\n                        ref={imageInputRef}\n                        type=\"file\"\n                        id=\"fileupload\"\n                        className=\"file-upload-input\"\n                        onChange={handleInputChange}\n                        multiple\n                      />\n\n                    </div>\n                  </div>\n                  <br></br>\n                  <div className=\"kb-attach-box mb-3\">\n                  <div className=\"row\">\n                    {entityId && selectedFiles.length > 0 ? (\n                      selectedFiles.map((file) => (\n                        \n                        <div key={file.id} className=\"col-6 col-md-3 mb-3\" style={{ position: 'relative' }}>\n                          \n                          <Card sx={{ maxWidth: 345 }}>\n                            {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                              <div style={{ position: 'relative' }}>\n                                <img\n                                  src={file.fileimage ? file.fileimage : file.fileURL}\n                                  alt={file.filename}\n                                  className=\"card-img-top\"\n                                  style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                                />\n                                <IconButton\n                                  aria-label=\"delete\"\n                                  disabled={disable}\n                                  onClick={() => handleDeleteSelectedFile(file.id)}\n                                  style={{ position: 'absolute', top: 0, right: 0, backgroundColor: 'rgba(255, 255, 255, 0.5)' }}\n                                >\n                                  <DeleteIcon style={{color:\"ff0000\"}}/>\n                                </IconButton>\n                              </div>\n                            ) : (\n                              <CardContent>\n                                <i className=\"far fa-file-alt\"></i>\n                              </CardContent>\n                            )}\n                          </Card>\n                        </div>\n                        \n                      ))\n                    ) : (\n                      <div className=\"col-12 text-center\">\n                        <p>No images selected</p>\n                      </div>\n                    )}\n                  </div>\n\n                  </div>\n\n                  \n                  <div className=\"kb-buttons-box\">\n                    <button\n                      type=\"button\"\n                      className=\"btn div-submit\"\n                      style={{ backgroundColor: isDarkModeOn ? '#892CDC' : 'black', color:'white'  }}\n                      onClick={handleUploadSubmit}\n                      disabled={disable}\n                    >\n                      Image Upload\n                    </button>\n                  </div>\n                </div>\n                {selectedFiles.length > 0 && (\n                  <div className=\"kb-attach-box\" hidden>\n                    <div className=\"row\">\n                    <hr />\n                    {selectedFiles.map((file) => (\n                      <div key={file.id} className=\"col-6 col-md-3 mb-3\">\n                      <div className=\"card\">\n                        {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                          <img\n                            src={file.fileimage}\n                            alt={file.filename}\n                            className=\"card-img-top\"\n                            style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                          />\n                        ) : (\n                          <div className=\"card-body\">\n                            <i className=\"far fa-file-alt\"></i>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n              { progressDelete >= 0 && (\n                    <div>\n                        <p style={{ color: isDarkModeOn ? '#fff' : '#000' }}>\n                            Deleting images... {progressDelete.toFixed(2)}%\n                        </p>\n                        <progress \n                            value={progressDelete} \n                            max=\"100\" \n                            style={{\n                                color: isDarkModeOn ? '#fff' : '#000'\n                            }}\n                        >\n                            {progressDelete.toFixed(2)}%\n                        </progress>\n                    </div>\n                )}\n\n                { progressUpdate >= 0 && (\n                    <div>\n                        <p style={{ color: isDarkModeOn ? '#fff' : '#000' }}>\n                            Uploading images... {progressUpdate.toFixed(2)}%\n                        </p>\n                        <progress \n                            value={progressUpdate} \n                            max=\"100\" \n                            style={{\n                                color: isDarkModeOn ? '#fff' : '#000'\n                            }}\n                        >\n                            {progressUpdate.toFixed(2)}%\n                        </progress>\n                    </div>\n                )}\n\n                            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\n// Set default prop values\nImageUpload.defaultProps = {\n  maxImageCount: 5, // Default maximum image count\n  updateMode: false,\n  disable:false,\n};\n\nexport default ImageUpload;","\nimport React from 'react';\nimport AspectRatio from '@mui/joy/AspectRatio';\nimport Card from '@mui/joy/Card';\nimport CardContent from '@mui/joy/CardContent';\nimport Chip from '@mui/joy/Chip';\nimport Box from '@mui/joy/Box';\nimport Button from '@mui/material/Button';\nimport Link from '@mui/joy/Link';\nimport Typography from '@mui/joy/Typography';\nimport { Stack } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport { CHIP_LEVELS_DESIGN, COLORS, danceStylesColorChips } from '../constants';\nimport IconButton from '@mui/joy/IconButton';\nimport Favorite from '@mui/icons-material/Favorite';\n\n\nexport default function NStudioCard({img_src,data}) {\n    const isDarkModeOn = useSelector(selectDarkModeStatus);\n    \n    const studioId = data.id?data.id:data.studioId;\n\n    const cardStyle = {\n      backgroundColor: isDarkModeOn ? '#444' : 'white',\n      padding: '0px',\n      color: isDarkModeOn ? 'white' : 'black',\n      marginRight: \"10px\",\n      width: 320,\n      maxWidth: \"100%\",\n      boxShadow: 'lg',\n      transition: 'opacity 0.3s ease',\n    };\n  \n    const cardHoverStyle = {\n      transform: 'scale(1.01)',\n    };\n  \n  return (\n    <Card variant=\"solid\" sx={{\n      ...cardStyle,\n      '&:hover': cardHoverStyle,\n    }}>\n      \n        <AspectRatio ratio=\"1.78\" style={{ position: 'relative'}}>\n          <img\n            src={data && data.iconUrl ? data.iconUrl :\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}\n            loading=\"lazy\"\n            alt=\"Studio Image\"\n            style={{ maxWidth: '100%', height: 'auto', overflow: 'hidden' }}\n            \n          />\n          <Stack direction=\"row\" spacing={2} style={{ position: 'absolute', bottom: 0, left: 0, padding: '1px' }}>\n        {data && data.danceStyles && typeof data.danceStyles === 'string' ? (data.danceStyles.split(\",\").slice(0, 3).map((form, index) => (\n        <Chip\n            key={index}\n            color={index % 2 === 0 ? \"danger\" : \"success\"}  \n            sx={{ marginBottom: \"10px\", fontSize: '0.8rem',  \n                    bgcolor: danceStylesColorChips[index].backgroundColor,\n                    color: danceStylesColorChips[index].color, \n            }}\n        >\n            {form.trim()}\n        </Chip>\n        ))):(\n            <Chip\n            key={10}\n            color={10 % 2 === 0 ? \"danger\" : \"success\"} \n            style={{ marginBottom: \"10px\", fontSize: '0.8rem' }}\n        >\n            {\"No danceforms\"}\n        </Chip>\n        )}\n\n        </Stack>\n\n        <Stack\n            direction=\"row\"\n            spacing={2}\n            style={{ position: \"absolute\", top: 0, left: 0, padding: \"1px\", paddingTop: \"1px\" }}\n          >\n            {data && data.freeTrialAvailable &&(\n            \n                <Chip\n                  key={1}\n                 \n                  sx={{\n                    marginLeft: \"10px\",\n                    marginBottom: \"10px\",\n                    fontSize: \"0.8rem\",\n                    bgcolor: COLORS.LIME.backgroundColor,  // Set the background color\n                    color: COLORS.LIME.color,  // Set the text color\n                  }}\n                >\n                  {'Free Trial Available'}\n                </Chip>\n              \n            )}\n          </Stack>\n\n        </AspectRatio>\n      <CardContent style={{ padding: '10px' }}>\n        <Box display=\"flex\" justifyContent=\"space-between\" columnGap={1}>\n          <Link\n            alignSelf=\"center\"\n            href={`#/studio/${studioId}`}\n            fontWeight=\"bold\"\n            color=\"neutral\"\n            textColor=\"text.primary\"\n            underline='none'\n            overlay\n            whiteSpace='nowrap'\n            overflow='hidden'\n            textOverflow='ellipsis'\n            style={{ color: isDarkModeOn ? 'white' : 'black' }}\n          >\n            {data && data.studioName ? data.studioName : \"    \"}\n          </Link>\n          {data && data.avgRating && data.avgRating>0 ?\n            <Typography width={52} flexShrink={0} alignSelf=\"center\" style={{ color: isDarkModeOn ? 'white' : 'black' }}>\n              ⭐ {data.avgRating.toFixed(1)}\n            </Typography> : null\n          }\n        </Box>\n        <Typography style={{ color: isDarkModeOn ? 'white' : 'black' }} level=\"body-xs\">{data.street ? data.street : \".  \"}</Typography>\n        <IconButton\n          hidden\n          aria-label=\"Like minimal photography\"\n          size=\"md\"\n          variant=\"solid\"\n          color=\"danger\"\n          sx={{\n            position: 'absolute',\n            zIndex: 2,\n            borderRadius: '50%',\n            right: '1rem',\n            bottom: '2rem',\n            transform: 'translateY(50%)',\n          }}\n        >\n          <Favorite />\n        </IconButton>\n        <Box display=\"flex\" justifyContent=\"space-between\">\n          <Typography alignSelf=\"center\" fontSize={12} style={{ color: isDarkModeOn ? 'white' : 'black' }}>\n            {data && data.minFee && data.minFee>=0 &&(`@ ₹${data.minFee} onwards`)}\n          </Typography>\n          <Button\n            size='small'\n            variant=\"contained\"\n            sx={{\n              alignSelf: \"center\",\n              color: 'white',\n              backgroundColor: '#735EAB',\n              '&:hover': {\n                backgroundColor: '#735EAB',\n                color: 'white',\n              },\n              '&.Mui-disabled': {\n                backgroundColor: isDarkModeOn ? 'rgba(115, 94, 171, 0.5)' : 'rgba(115, 94, 171, 0.3)',\n                color: 'rgba(255, 255, 255, 0.5)',\n              },\n            }}\n            type='button'\n          >\n            Explore\n          </Button>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}","import React from 'react';\nimport { Modal, Form, Row, Col, Button } from 'react-bootstrap';\n\nconst TimeRangePicker = ({ show, handleClose, handleSelect, defaultTime }) => {\n  //console.log(\"TimeRangePicker\",defaultTime)\n  const startTime_i = defaultTime.split('-')[0].trim();\n  const endTime_i = defaultTime.split('-')[1]?.trim();\n\n  //console.log(startTime_i,endTime_i,defaultTime)\n\n  const generateTimeOptions = () => {\n    const options = [];\n    let option_AM = [];\n    let option_PM = [];\n    for (let hours = 0; hours < 24; hours++) {\n      for (let minutes = 0; minutes < 60; minutes += 15) {\n        const formattedHours = hours.toString().padStart(2, '0');\n        const formattedMinutes = minutes.toString().padStart(2, '0');\n        const timeString = `${formattedHours}:${formattedMinutes}`;\n  \n        if (hours < 12) {\n          option_AM.push(`${timeString} AM`);\n        } else {\n          const formattedHours12 = (hours - 12).toString().padStart(2, '0');\n          option_PM.push(`${formattedHours12}:${formattedMinutes} PM`);\n        }\n      }\n    }\n\n    for (let i = 0; i < option_AM.length || i < option_PM.length; i++) {\n      if (i < option_AM.length) {\n        options.push(option_AM[i]);\n      }\n      if (i < option_PM.length) {\n        options.push(option_PM[i]);\n      }\n    }\n    \n\n  \n    return options;\n  };\n  \n\n  const renderTimeOptions = (defaultValue) => {\n    console.log(defaultValue);\n    const timeOptions = generateTimeOptions();\n  \n    return (\n      <>\n        <option value={defaultValue}>{defaultValue}</option>\n        {timeOptions.map((option) => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </>\n    );\n  };\n  \n  \n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Select Time</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col>\n          <Form.Group >\n          <Form.Label >\n            Start Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(e.target.value, null)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(startTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n          <Col>\n          <Form.Group>\n          <Form.Label >\n            End Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(null, e.target.value)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(endTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={handleClose}>Save</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default TimeRangePicker;\n","const dayMapping = {\n  M: \"Mon\",\n  T: \"Tues\",\n  W: \"Wed\",\n  Th: \"Thurs\",\n  F: \"Fri\",\n  St: \"Sat\",\n  Sn: \"Sun\",\n};\n\nexport const updateDaysFormat = (records) => {\n  const updatedDays = records.map((day) => dayMapping[day] || day);\n\n  return [...new Set(updatedDays)];\n};\n","import React, { useState } from 'react';\nimport { Form, Table, Button } from 'react-bootstrap';\nimport { FaPlus, FaMinus } from 'react-icons/fa';\nimport './StudioTable.css'; // Import the CSS file for styling\nimport  TimeRangePicker from './TimeRangePicker';\nimport danceStyles from '../danceStyles.json';\nimport { Autocomplete, TextField } from '@mui/material';\n\nimport { MultiSelect } from 'primereact/multiselect';\nimport \"primereact/resources/primereact.css\";\nimport \"primereact/resources/themes/saga-blue/theme.css\";\nimport { updateDaysFormat } from '../utils/mapping';\n\nconst daysOfWeek = ['Mon','Tues','Wed','Thurs','Fri','Sat','Sun'];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\"\n};\n\nfunction StudioTable({ tableData = [], setTableData, instructorNamesWithIds }) {\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const danceStylesOptions = danceStyles.danceStyles;\n  const [defaultTime, setDefaultTime] =  useState('12:00 PM - 01:00 PM')\n\n  const handleAddRow = () => {\n    setTableData((prevData) => [...prevData, { className: '', danceForms: '', days: '', time: '12:00 PM - 01:00 PM', instructors: [], fee:'',level:'' ,status: '',freeTrial: false, classCategory: []  }]);\n  };\n\n  const handleRemoveRow = (index) => {\n    if (tableData.length - 1 === 0) return;\n\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      newData.splice(index, 1);\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if(field===\"days\"){\n        value = Array.isArray(value) ? value.join(',') : value; \n      }\n      console.log(tableData)\n      const newData = [...prevData];\n      newData[index][field] = value;\n      return newData;\n    });\n  };\n\n  const handleTimePickerOpen = (index,time) => {\n    setDefaultTime(time)\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null); // Reset selected row index when closing time picker\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      \n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n    \n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(' - ');\n    \n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n      \n      return newData;\n    });\n  \n    setSelectedRow(selectedRowIndex);\n\n  };\n\n  return (\n    <>\n      <Table bordered variant=\"light\">\n        <thead>\n          <tr style={{border: '1px solid black'}}>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Name</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Dance Form</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Days</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Time</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'20rem', border: '1px solid black'}}>Instructors</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Fee (₹)</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Level</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Free Trial</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Category</th>\n            <th style={{padding:'0rem'}}>\n              <Button variant=\"primary\" onClick={handleAddRow}>\n                <FaPlus />\n              </Button>\n            </th>\n          </tr>\n        </thead>\n        <tbody style={{border: '1px solid black'}}>\n          {tableData.map((row, index) => (\n            <tr key={index} className={selectedRow === index ? 'selected-row' : ''}>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  type=\"text\"\n                  value={row.className}\n                  onChange={(e) => handleTableChange(index, 'className', e.target.value)}\n                  \n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n              < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.danceForms}\n                  onChange={(e) => handleTableChange(index, 'danceForms', e.target.value)}\n                >\n                  <option value=\"\">Select a dance form</option>\n                  {danceStylesOptions.map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </Form.Control>\n\n              </td>\n              \n              <td style={{ padding:'0rem',minWidth:'15rem', border: '1px solid black'}} className=\"m-0 p-0\">\n                <MultiSelect value={row.days && updateDaysFormat(row?.days?.split?.(',')?.filter?.(day => day !== '')) } \n                    onChange={(event) => handleTableChange(index, 'days', event.target.value)}\n                    options={daysOfWeek}\n                    placeholder=\"class days\" maxSelectedLabels={7} className=\"w-full md:w-20rem\"\n                  />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.time}\n                  //onClick={() => handleTimePickerOpen(index,row.time)}\n                  onClick={() => handleTimePickerOpen(index,row.time)}\n                  \n                />\n                {showTimePicker && (\n                <TimeRangePicker\n                  show={showTimePicker}\n                  handleClose={handleTimePickerClose}\n                  handleSelect={handleTimeSelect}\n                  defaultTime={tableData[selectedRowIndex]?.time || \"00:00-00:00\"}\n                />\n              )}\n\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black', width:'20rem'}}>\n                <Autocomplete\n                  multiple\n                  id=\"tags-standard\"\n                  options={instructorNamesWithIds}\n                  value={row.instructors}\n                  onChange={(_, values) => handleTableChange(index, 'instructors', values)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Instructors\"\n                    />\n                  )}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.fee}\n                  onChange={(e) => handleTableChange(index, 'fee', e.target.value)}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.level}\n                  onChange={(e) => handleTableChange(index, 'level', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value=\"Beginner\">Beginner</option>\n                      <option value=\"Intermediate\">Intermediate</option>\n                      <option value=\"Advanced\">Advanced</option>\n                      <option value=\"Misc\">Misc</option>\n\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.freeTrial}\n                  onChange={(e) => handleTableChange(index, 'freeTrial', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value={true}>Yes</option>\n                      <option value={false}>No</option>\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem', width:'20rem'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={Array.isArray(row.classCategory) && row.classCategory.length > 0 ? row.classCategory[0] : \"\"}\n                  onChange={(e) => handleTableChange(index, 'classCategory', [e.target.value])}\n                >\n                  <option value=\"\">Select Class Category</option>\n                  {Object.values(categoryMap).map((value, idx) => <option key={idx} value={value}>{value}</option>)}\n                </Form.Control>\n              </td>\n              <td style={{padding:'0rem'}}>\n                <Button variant=\"danger\" onClick={() => handleRemoveRow(index)}>\n                  <FaMinus />\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>      \n    </>\n  );\n}\n\nexport default StudioTable;\n\n/*\n                <Autocomplete\n                  multiple\n                  id={`days-autocomplete-${index}`}\n                  options={daysOfWeekOptions}\n                  getOptionLabel={(option) => option.value}\n                  value={row.days.split(',').filter(day => day !== '').map(day => daysOfWeekOptions.find(option => option.value === day))}\n                  onChange={(event, newValue) => handleTableChange(index, 'days', newValue.map(option => option.value).join(','))}\n                  renderInput={(params) => <TextField sx={{color:\"black\",backgroundColor:\"white\",width:\"100%\"}} {...params} />}\n                />\n              */","import React, { useState, useEffect } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { useJsApiLoader } from '@react-google-maps/api';\nimport { FaMapMarkerAlt } from 'react-icons/fa';\n\nconst libraries = ['places'];\nconst apiKey = \"AIzaSyAAPq5IMotbu90TZAEtyj8qgYyVJoROzsQ\";\n\nfunction MapsInput({ selectedLocation, setSelectedLocation, mapAddress, setMapAddress }) {\n    const [center, setCenter] = useState(selectedLocation || { lat: 28.6139, lng: 77.2090 });\n\n    const { isLoaded, loadError } = useJsApiLoader({\n        googleMapsApiKey: apiKey,\n        libraries,\n    });\n\n    useEffect(() => {\n        if (selectedLocation) {\n            setCenter(selectedLocation);\n        }\n    }, [selectedLocation]);\n\n    const handleSelect = async (selectedAddress) => {\n        const results = await geocodeByAddress(selectedAddress);\n        const latLng = await getLatLng(results[0]);\n\n        setMapAddress(selectedAddress);\n        setCenter(latLng);\n        setSelectedLocation(latLng);\n    };\n\n    const handleMapClick = async ({ lat, lng }) => {\n        const latLng = { lat, lng };\n        setSelectedLocation(latLng);\n        setCenter(latLng);\n\n        if (!mapAddress.trim()) {\n            try {\n                const geocoder = new window.google.maps.Geocoder();\n                geocoder.geocode({ location: latLng }, (results, status) => {\n                    if (status === 'OK' && results[0]) {\n                        setMapAddress(results[0].formatted_address);\n                    } else {\n                        console.error('Geocoder failed due to: ', status);\n                    }\n                });\n            } catch (error) {\n                console.error('Error with reverse geocoding:', error);\n            }\n        }\n    };\n\n    if (loadError) return <p>Error loading maps</p>;\n    if (!isLoaded) return <p>Loading maps...</p>;\n\n    return (\n        <div>\n            <br />\n\n            {/* Autocomplete Input */}\n            <PlacesAutocomplete\n                value={mapAddress}\n                onChange={setMapAddress}\n                onSelect={handleSelect}\n            >\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                    <div>\n                        <input\n                            {...getInputProps({\n                                placeholder: 'Enter address...',\n                                className: 'location-search-input',\n                                style: { height: '40px', fontSize: '16px', width: '100%' },\n                            })}\n                        />\n                        <div className=\"autocomplete-dropdown-container\">\n                            {loading && <div>Loading...</div>}\n                            {suggestions.map((suggestion) => (\n                                <div {...getSuggestionItemProps(suggestion, { className: 'suggestion-item' })} key={suggestion.placeId}>\n                                    <span>{suggestion.description}</span>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </PlacesAutocomplete>\n\n            <br />\n\n            {/* Google Map */}\n            <div style={{ height: '400px', width: '100%' }}>\n                <GoogleMapReact\n                    bootstrapURLKeys={{ key: apiKey }}\n                    defaultCenter={center}\n                    center={center}\n                    defaultZoom={16}\n                    onClick={handleMapClick}\n                >\n                    {selectedLocation && (\n                        <PinMarker lat={selectedLocation.lat} lng={selectedLocation.lng} />\n                    )}\n                </GoogleMapReact>\n            </div>\n        </div>\n    );\n}\n\nconst PinMarker = () => (\n    <div style={{ position: 'relative', textAlign: 'center' }}>\n        <FaMapMarkerAlt style={{ color: 'green', fontSize: '24px' }} />\n    </div>\n);\n\nexport default MapsInput;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport MUIButton from \"@mui/material/Button\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\n\nconst SuccessMessage = ({ StudioId }) => {\n  const navigate = useNavigate();\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n\n  const form = document.getElementById(\"addStudioForm\");\n\n  const studioName = form?.studioName?.value;\n  const streetName = form?.street?.value;\n  const city = form?.city?.value;\n\n  const navigateToStudio = () => {\n    navigate(`/studio/${StudioId}`);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-12\"> {/* Change col-md-5 to col-md-12 */}\n          <div className=\"_success message-box\">\n            <i className=\"fa fa-check-circle\" aria-hidden=\"true\"></i>\n            <h4\n              style={{\n                textTransform: \"none\",\n                marginTop: \"1rem\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            >\n              Your studio {studioName} (Studio ID: {StudioId}), located at {streetName} in {city} has been registered successfully 🎉\n            </h4>\n            <MUIButton\n              sx={{ mt: 1, px: 3, color: 'white', bgcolor: '#735EAB', textTransform: 'none', \"&:hover\": { bgcolor: \"#735EAB\" }, \"&:active\": { bgcolor: \"#735EAB\" } }}\n              variant=\"text\"\n              onClick={() => navigateToStudio()}\n            >\n              Check Now\n            </MUIButton>\n          </div>\n        </div>\n      </div>\n      <hr />\n\n      <style jsx>{`\n        ._success {\n          padding: 45px;\n          width: 100%;\n          text-align: center;\n          margin: 30px auto;\n        }\n\n        ._success i {\n          font-size: 55px;\n          color: #28a745;\n        }\n\n        ._success h2 {\n          margin-bottom: 12px;\n          font-size: 30px;\n          font-weight: 300;\n          line-height: 1.2;\n          margin-top: 10px;\n        }\n\n        ._success p {\n          margin-bottom: 0px;\n          font-size: 18px;\n          color: #495057;\n          font-weight: 100;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SuccessMessage;\n","import { useSelector } from \"react-redux\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport { Button as MuiButton } from \"@mui/material\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\nimport dayOrder from \"../days.json\";\n\nconst generateTimeOptions = () => {\n  let option_AM = [];\n  let option_PM = [];\n  for (let hours = 0; hours < 24; hours++) {\n    for (let minutes = 0; minutes < 60; minutes += 15) {\n      const formattedHours = hours.toString().padStart(2, \"0\");\n      const formattedMinutes = minutes.toString().padStart(2, \"0\");\n      const timeString = `${formattedHours}:${formattedMinutes}`;\n\n      if (hours < 12) {\n        option_AM.push(`${timeString} AM`);\n      } else {\n        const formattedHours12 = (hours === 12 ? 12 : hours - 12)\n          .toString()\n          .padStart(2, \"0\");\n        option_PM.push(`${formattedHours12}:${formattedMinutes} PM`);\n      }\n    }\n  }\n\n  return [...option_AM, ...option_PM];\n};\n\nconst renderTimeOptions = (defaultValue) => {\n  const timeOptions = generateTimeOptions();\n  return (\n    <>\n      <option value={defaultValue}>{defaultValue}</option>\n      {timeOptions.map((option) => (\n        <option key={option} value={option}>\n          {option}\n        </option>\n      ))}\n    </>\n  );\n};\n\nconst StudioWeeklyTimings = ({ timings, setTimings }) => {\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n\n  const handleSelect = (day, index, type, value) => {\n    const updatedDayTimings = [...timings[day]];\n    updatedDayTimings[index][type] = value;\n    setTimings({ ...timings, [day]: updatedDayTimings });\n  };\n\n  const addTimeSlot = (day) => {\n    const updatedDayTimings = [\n      ...timings[day],\n      { open: \"09:00 AM\", close: \"06:00 PM\" },\n    ];\n    setTimings({ ...timings, [day]: updatedDayTimings });\n  };\n\n  const removeTimeSlot = (day, index) => {\n    const updatedDayTimings = [...timings[day]];\n    if (updatedDayTimings.length > 1) {\n      updatedDayTimings.splice(index, 1);\n      setTimings({ ...timings, [day]: updatedDayTimings });\n    }\n  };\n\n  return (\n    <Row className=\"gy-3\">\n      {dayOrder.map((day) => (\n        <Col xs={12} sm={6} md={4} lg={3} key={day}>\n          <span className=\"mb-3\" style={{ fontWeight: \"bold\" }}>\n            {day.charAt(0).toUpperCase() + day.slice(1)}\n          </span>\n          {timings[day].map((slot, index) => (\n            <Row key={index} className=\"mb-2 align-items-center\">\n              <Col xs={5}>\n                <Form.Group>\n                  <Form.Label>Start Time</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    value={slot.open}\n                    onChange={(e) =>\n                      handleSelect(day, index, \"open\", e.target.value)\n                    }\n                    style={{\n                      height: \"auto\",\n                      lineHeight: \"1.5em\",\n                      padding: \"8px\",\n                      color: isDarkModeOn ? \"white\" : \"#333333\",\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"white\",\n                    }}\n                  >\n                    {renderTimeOptions(slot.open)}\n                  </Form.Control>\n                </Form.Group>\n              </Col>\n              <Col xs={5}>\n                <Form.Group>\n                  <Form.Label>End Time</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    value={slot.close}\n                    onChange={(e) =>\n                      handleSelect(day, index, \"close\", e.target.value)\n                    }\n                    style={{\n                      height: \"auto\",\n                      lineHeight: \"1.5em\",\n                      padding: \"8px\",\n                      color: isDarkModeOn ? \"white\" : \"#333333\",\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"white\",\n                    }}\n                  >\n                    {renderTimeOptions(slot.close)}\n                  </Form.Control>\n                </Form.Group>\n              </Col>\n              <Col xs={2}>\n                <Button\n                  variant=\"danger\"\n                  size=\"sm\"\n                  onClick={() => removeTimeSlot(day, index)}\n                  className=\"mt-4\"\n                >\n                  -\n                </Button>\n              </Col>\n            </Row>\n          ))}\n          <MuiButton\n            variant=\"contained\"\n            onClick={() => addTimeSlot(day)}\n            sx={{\n              color: isDarkModeOn ? \"black\" : \"white\",\n              bgcolor: isDarkModeOn ? \"white\" : \"black\",\n              \"&:hover\": { bgcolor: isDarkModeOn ? \"white\" : \"black\" },\n            }}\n          >\n            Add Time Slot\n          </MuiButton>\n        </Col>\n      ))}\n    </Row>\n  );\n};\n\nexport default StudioWeeklyTimings;\n","import React, { useRef } from 'react'\nimport { Row, Col , Form } from 'react-bootstrap';\nimport {LinearProgress, Button as MuiButton} from '@mui/material';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,addDoc,updateDoc,collection,where,getDocs,query, deleteDoc } from \"firebase/firestore\";\nimport { COLLECTIONS, DRAFT_COLLECTIONS } from '../constants';\nimport StudioTable from './StudioTable';\nimport ImageUpload from './ImageUpload';\nimport { STORAGES } from '../constants';\nimport MapsInput from './MapsInput';\nimport { useSelector} from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport indianCities from '../cities.json';\nimport indianStates from '../states.json';\nimport danceStyles from '../danceStyles.json';\nimport { AMENITIES_ICONS } from '../constants';\nimport {Autocomplete,TextField} from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport {Stepper,Step,StepLabel} from '@mui/material';\nimport SuccessMessage from './SucessPage';\nimport { postData } from '../utils/common';\nimport { isEqual } from 'lodash';\nimport StudioWeeklyTimings from './StudioWeeklyTiming';\nimport { useSnackbar } from '../context/SnackbarContext';\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nconst initialStudioTimings = {\n  tuesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  wednesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  thursday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  friday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  saturday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  sunday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  monday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n}\n\nconst DRAFT_INTERVAL_TIME = 1000 * 10;\n\nfunction StudioAdd({instructors}) {\n    const previousDraftState = useRef(null);\n    const effectDraftRef = useRef(null);\n    const logoImageUploadRef = useRef(null);\n    const studioImageUploadRef = useRef(null);\n    const anouncementImageUploadRef = useRef(null);\n    const showSnackbar = useSnackbar();\n    const [newStudioId, setNewStudioId] = useState(\"\")\n    const [tableData, setTableData] = useState(\n      [{ className: '', danceForms: '', days: '', time: '', instructors: [], fee:'',level:'' ,status: '' ,freeTrial:false ,classCategory: []}],\n    );\n    const [selectedLocation, setSelectedLocation] = useState(null);\n    const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n    const [selectedInstructors, setSelectedInstructors] = useState([]);\n    const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n    const [selectedAmenities, setSelectedAmenities] = useState([]);\n    const instructorNamesWithIds = instructors.map((instructor) => `${instructor.name} - ${instructor.id}`);\n    const [isReady, setIsReady] = useState(false);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [timings, setTimings] = useState(initialStudioTimings);\n\n    // console.log(\"==============\");\n    // console.log(\"timings\", timings);\n    // console.log(\"==============\");\n\n    //const [dropdownVisible, setDropdownVisible] = useState(false);\n    const locationOptions = indianCities.cities;\n    const stateOptions = indianStates.states;\n    const danceStylesOptions = danceStyles.danceStyles;\n    const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n    const [activeStep, setActiveStep] = useState(0);\n    const [mapAddress, setMapAddress] = useState('');\n\n    const validateStep1 = () => {\n      const form = document.getElementById(\"addStudioForm\");\n\n      if (!form.studioName.value) return \"Studio name is required\";\n      if (!form.aboutStudio.value) return \"About Studio is required\";\n      if (!form.founderName.value) return \"Founder name is required\";\n      if (!form.aboutFounder.value) return \"About Founder is required\";\n      if (!form.mobileNumber.value) return \"Mobile number is required\";\n      if (!form.whatsappNumber.value) return \"WhatsApp number is required\";\n      if (!form.numberOfHalls.value) return \"Number of halls is required\";\n      if (!form.maximumOccupancy.value) return \"Maximum occupancy is required\";\n      if (!selectedDanceStyles.length) return \"At least one dance style must be selected\";\n    };\n\n    const validateStep2 = () => {\n      if (!Object.values(timings).every((slots) => slots.length > 0)) {\n        return \"All timing slots must be filled\";\n      }\n      if (!tableData.length) {\n        return \"At least one class entry is required\";\n      }\n      for (const entry of tableData) {\n        if (!entry.className?.trim()) return \"Class name is required\";\n        if (!entry.danceForms?.trim()) return \"Dance forms are required\";\n        if (!entry.days?.trim()) return \"Days are required\";\n        if (!entry.time?.trim()) return \"Time is required\";\n        if (!entry.fee?.trim()) return \"Fee is required\";\n        if (!entry.level?.trim()) return \"Level is required\";\n        if (!entry.instructors.length) return \"At least one instructor is required\";\n        if (!entry.classCategory.length || !entry.classCategory[0]?.trim()) return \"Class category is required\";\n      }\n    };\n\n    const validateStep3 = () => {\n      const form = document.getElementById(\"addStudioForm\");\n\n      if (!form.buildingName.value) return \"Building name is required\";\n      if (!form.street.value) return \"Street is required\";\n      if (!form.city.value) return \"City is required\";\n      if (!form.pincode.value) return \"Pincode is required\";\n      if (!form.state.value) return \"State is required\";\n      if (!mapAddress) return \"Address is required\";\n      if (!selectedLocation) return \"Location selection is required\";\n    };\n\n    const validateStep4 = () => {\n      if (!logoImageUploadRef.current?.isValid()) return \"Please upload studio logo before proceeding\"\n    };\n\n    const validateStep5 = () => {\n      if (!studioImageUploadRef.current?.isValid()) return \"Please upload studio images before proceeding\"\n      if (!anouncementImageUploadRef.current?.isValid()) return \"Please upload studio anouncement images before proceeding\"\n    };\n\n    const handleNext = () => {\n      let errorMessage = '';\n\n      if (activeStep === 0) errorMessage = validateStep1()\n\n      if (activeStep === 1) errorMessage = validateStep2()\n\n      if (activeStep === 2) errorMessage = validateStep3()\n        \n      if (activeStep === 3) errorMessage = validateStep4()\n\n      if (activeStep === 4) errorMessage = validateStep5()\n\n      if (errorMessage) {\n        return showSnackbar(errorMessage, 'error');\n      }\n\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n\n    const darkTheme = createTheme({\n      palette: {\n        mode: isDarkModeOn?'dark':'light',\n      },\n    });\n\n    const handleDanceStylesChange = (event, value) => {\n      setSelectedDanceStyles(value);\n    };  \n\n    const handleAmentiesChange = (event, value) => {\n      setSelectedAmenities(value);\n    };\n\n    const handleInstructorChange = (event, value) => {\n      setSelectedInstructors(value);\n    };\n\n    const resetDraft = async () => {\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n\n          await deleteDoc(studioRef);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n      const handleAddStudio = async (event) => {\n        event.preventDefault();\n\n        if (activeStep < 3) { // If user enter enter/return btn at any place it should validate all\n          const errorMessage1 = validateStep1();\n          const errorMessage2 = validateStep2();\n          const errorMessage3 = validateStep3();\n        \n          const errorMessages = [errorMessage1, errorMessage2, errorMessage3].filter(Boolean).join(', ');\n        \n          if (errorMessages) {\n            return showSnackbar(errorMessages, 'error');\n          }\n        }        \n\n        const title = event.target.studioName.value;\n        if (!title) {\n          return;\n        }\n        let isPremium=true\n        const newData = tableData.reduce((accumulator, current, index) => {\n          accumulator[index] = current;\n          return accumulator;\n        }, {});\n\n        try {\n          const currentUserEmail = JSON.parse(localStorage.getItem(\"userInfo\"))?.email;\n          const studioData = {\n              studioName: event.target.studioName.value,\n              aboutStudio: event.target.aboutStudio.value,\n              founderName: event.target.founderName.value,\n              aboutFounder: event.target.aboutFounder.value,\n              mobileNumber: event.target.mobileNumber.value,\n              whatsappNumber: event.target.whatsappNumber.value,\n              mailAddress: event.target.mailAddress.value,\n              danceStyles: selectedDanceStyles.join(\",\"),\n              numberOfHalls: event.target.numberOfHalls.value,\n              maximumOccupancy: event.target.maximumOccupancy.value,\n              instructorsNames: selectedInstructors,\n              status: 'OPEN',\n              tableData: newData,\n              buildingName: event.target.buildingName.value,\n              street: event.target.street.value,\n              city: event.target.city.value,\n              landmark: event.target.landmark.value,\n              pincode: event.target.pincode.value,\n              state: event.target.state.value,\n              country: \"India\",\n              mapAddress,\n              geolocation : selectedLocation,\n              gstNumber: event.target.gstNumber.value,\n              enrolledId:[],\n              reviews:[],\n              author: JSON.parse(localStorage.getItem('userInfo')).displayName,\n              UserId: JSON.parse(localStorage.getItem('userInfo')).UserId,\n              isPremium: isPremium,\n              addAmenities: selectedAmenities.join(\",\"),\n              enrollmentProcess: encodeToUnicode(event.target.enrollmentProcess.value),\n              creatorEmail: currentUserEmail,\n              instagram: event.target.instagram.value,\n              facebook: event.target.facebook.value,\n              youtube: event.target.youtube.value,\n              twitter: event.target.twitter.value,\n              visibilty:1,\n              timings\n          };\n            setIsSubmitting(true);\n            const notifyEmails = currentUserEmail\n            const metaData = {\n              entity_name: studioData.studioName,\n              city: studioData.city ,\n            }\n            const response = await postData(studioData,COLLECTIONS.STUDIO, notifyEmails, metaData) ;\n            if (response.ok) {\n              if (effectDraftRef.current) {\n                clearInterval(effectDraftRef.current);\n              }\n              const result = await response.json();\n              setNewStudioId(result.id)\n              resetDraft();\n              handleNext();\n            }\n        } catch (error) {\n          console.error(\"Error adding studio: \", error);\n        } finally {\n          setIsSubmitting(false);\n        }\n      };\n\n  const saveDraft = async () => {\n    const form = document.getElementById(\"addStudioForm\");\n\n    try {\n      const q = query(\n        collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n        where(\n          \"UserId\",\n          \"==\",\n          JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n        )\n      );\n  \n      const querySnapshot = await getDocs(q);\n  \n      if (!querySnapshot.empty) {\n        let studios = [];\n  \n        querySnapshot.forEach((doc) => {\n          studios.push({ id: doc.id, ...doc.data() });\n        });\n  \n        let foundStudio = studios[0];\n  \n        const studioRef = doc(\n          db,\n          DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n          foundStudio.id\n        );\n  \n        const newData = tableData.reduce((accumulator, current, index) => {\n          accumulator[index] = current;\n          return accumulator;\n        }, {});\n  \n        const currentState = {\n          studioName: form.studioName.value,\n          aboutStudio: form.aboutStudio.value,\n          founderName: form.founderName.value,\n          aboutFounder: form.aboutFounder.value,\n          mobileNumber: form.mobileNumber.value,\n          whatsappNumber: form.whatsappNumber.value,\n          mailAddress: form.mailAddress.value,\n          danceStyles: selectedDanceStyles.join(\",\"),\n          numberOfHalls: form.numberOfHalls.value,\n          maximumOccupancy: form.maximumOccupancy.value,\n          instructorsNames: selectedInstructors,\n          status: \"OPEN\",\n          tableData: newData,\n          buildingName: form.buildingName.value,\n          street: form.street.value,\n          city: form.city.value,\n          landmark: form.landmark.value,\n          pincode: form.pincode.value,\n          state: form.state.value,\n          country: \"India\",\n          mapAddress: mapAddress || '',\n          geolocation: selectedLocation,\n          gstNumber: form.gstNumber.value,\n          enrolledId: [],\n          reviews: [],\n          author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n          UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n          isPremium: true,\n          addAmenities: selectedAmenities.join(\",\"),\n          enrollmentProcess: encodeToUnicode(form.enrollmentProcess.value),\n          creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\")).email,\n          instagram: form.instagram.value,\n          facebook: form.facebook.value,\n          youtube: form.youtube.value,\n          twitter: form.twitter.value,\n          visibilty: 1,\n          timings,\n        };\n\n        if (!isEqual(previousDraftState.current, currentState)) {\n          await updateDoc(studioRef, currentState);\n          previousDraftState.current = currentState;\n          showSnackbar(\"Draft saved successfully!\", \"success\");\n        } else {\n          showSnackbar(\"No changes detected to save.\", \"info\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error saving draft: \", error);\n    }\n  };\n\n  useEffect(() => {\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          form.studioName.value = foundStudio.studioName;\n          form.aboutStudio.value = foundStudio.aboutStudio;\n          form.founderName.value = foundStudio.founderName;\n          form.aboutFounder.value = foundStudio.aboutFounder;\n          form.mobileNumber.value = foundStudio.mobileNumber;\n          form.whatsappNumber.value = foundStudio.whatsappNumber;\n          form.mailAddress.value = foundStudio.mailAddress;\n          setSelectedDanceStyles(\n            foundStudio.danceStyles.length\n              ? foundStudio.danceStyles.split(\",\")\n              : []\n          );\n          form.numberOfHalls.value = foundStudio.numberOfHalls;\n          form.maximumOccupancy.value = foundStudio.maximumOccupancy;\n          setSelectedInstructors(foundStudio.instructorsNames);\n          form.buildingName.value = foundStudio.buildingName;\n          form.street.value = foundStudio.street;\n          form.city.value = foundStudio.city;\n          form.landmark.value = foundStudio.landmark;\n          form.pincode.value = foundStudio.pincode;\n          form.state.value = foundStudio.state;\n          setMapAddress(foundStudio.mapAddress || '');\n          setSelectedLocation(foundStudio.geolocation);\n          // form.aadharNumber.value = foundStudio.aadharNumber;\n          form.gstNumber.value = foundStudio.gstNumber;\n          setTableData(Object.values(foundStudio.tableData));\n          setSelectedAmenities(\n            foundStudio.addAmenities.length\n              ? foundStudio.addAmenities.split(\",\")\n              : []\n          );\n          form.enrollmentProcess.value = decodeUnicode(\n            foundStudio.enrollmentProcess\n          );\n          form.instagram.value = foundStudio.instagram;\n          form.facebook.value = foundStudio.facebook;\n          form.youtube.value = foundStudio.youtube;\n          form.twitter.value = foundStudio.twitter;\n          if (foundStudio?.timings) setTimings(foundStudio.timings);\n        } else {\n          await addDoc(collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS), {\n            studioName: form.studioName.value,\n            aboutStudio: form.aboutStudio.value,\n            founderName: form.founderName.value,\n            aboutFounder: form.aboutFounder.value,\n            mobileNumber: form.mobileNumber.value,\n            whatsappNumber: form.whatsappNumber.value,\n            mailAddress: form.mailAddress.value,\n            danceStyles: selectedDanceStyles.join(\",\"),\n            numberOfHalls: form.numberOfHalls.value,\n            maximumOccupancy: form.maximumOccupancy.value,\n            instructorsNames: selectedInstructors,\n            status: \"OPEN\",\n            tableData: {\n              0: {\n                className: \"\",\n                danceForms: \"\",\n                days: \"\",\n                time: \"\",\n                instructors: [],\n                fee: \"\",\n                level: \"\",freeTrial:false, \n                classCategory: []\n              },\n            },\n            buildingName: form.buildingName.value,\n            street: form.street.value,\n            city: form.city.value,\n            landmark: form.landmark.value,\n            pincode: form.pincode.value,\n            state: form.state.value,\n            country: \"India\",\n            mapAddress: mapAddress || \"\",\n            geolocation: selectedLocation,\n            \n            gstNumber: form.gstNumber.value,\n            enrolledId: [],\n            reviews: [],\n            author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n            UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n            isPremium: true,\n            addAmenities: selectedAmenities.join(\",\"),\n            enrollmentProcess: encodeToUnicode(form.enrollmentProcess.value),\n            creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\")).email,\n            instagram: form.instagram.value,\n            facebook: form.facebook.value,\n            youtube: form.youtube.value,\n            twitter: form.twitter.value,\n            visibilty: 1,\n            timings\n          });\n        }\n\n        setIsReady(true);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    main();\n  }, []);\n\n  useEffect(() => {\n    effectDraftRef.current = null;\n    let previousState = null; \n\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n          \n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n          \n          effectDraftRef.current = setInterval(async () => {\n            \n            try {\n              const newData = tableData.reduce((accumulator, current, index) => {\n                accumulator[index] = current;\n                return accumulator;\n              }, {});\n              const currentState = { \n                studioName: form.studioName.value,\n                aboutStudio: form.aboutStudio.value,\n                founderName: form.founderName.value,\n                aboutFounder: form.aboutFounder.value,\n                mobileNumber: form.mobileNumber.value,\n                whatsappNumber: form.whatsappNumber.value,\n                mailAddress: form.mailAddress.value,\n                danceStyles: selectedDanceStyles.join(\",\"),\n                numberOfHalls: form.numberOfHalls.value,\n                maximumOccupancy: form.maximumOccupancy.value,\n                instructorsNames: selectedInstructors,\n                status: \"OPEN\",\n                tableData: newData,\n                buildingName: form.buildingName.value,\n                street: form.street.value,\n                city: form.city.value,\n                landmark: form.landmark.value,\n                pincode: form.pincode.value,\n                state: form.state.value,\n                country: \"India\",\n                mapAddress: mapAddress || \"\",\n                geolocation: selectedLocation,\n                \n                gstNumber: form.gstNumber.value,\n                enrolledId: [],\n                reviews: [],\n                author: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .displayName,\n                UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n                isPremium: true,\n                addAmenities: selectedAmenities.join(\",\"),\n                enrollmentProcess: encodeToUnicode(\n                  form.enrollmentProcess.value\n                ),\n                creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .email,\n                instagram: form.instagram.value,\n                facebook: form.facebook.value,\n                youtube: form.youtube.value,\n                twitter: form.twitter.value,\n                visibilty: 1,\n                timings\n              }\n              \n              // Check if the current state is different from the previous state\n              if (!isEqual(previousState, currentState)) {\n                try {\n                  await updateDoc(studioRef, currentState);\n                  previousState = currentState; // Update previous state after successful save\n                  // console.log(\"Next AutoSave in\",DRAFT_INTERVAL_TIME)\n                } catch (error) {\n                  console.error(error);\n                }\n              }else{\n                // console.log(\"Nothing for Autosave to save\")\n            }\n\n            } catch (error) {\n              console.error(error);\n            }\n          }, DRAFT_INTERVAL_TIME);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    if (isReady) main();\n\n    return () => clearInterval(effectDraftRef.current);\n  }, [\n    isReady,\n    selectedDanceStyles,\n    selectedInstructors,\n    tableData,\n    mapAddress,\n    selectedLocation,\n    selectedAmenities,\n  ]);\n\n  return (\n    <div >\n          <Stepper activeStep={activeStep} alternativeLabel>\n            {['Basic Studio & Owner details', 'Instructors, Classes & Social Media', 'Address & Registration', 'Studio Icon', 'Studio & Class Images'].map((label) => (\n              <Step key={label}>\n                <StepLabel ><p style={{color:isDarkModeOn?\"white\":\"black\"}}>{label}</p></StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          \n            < div hidden={activeStep > 2} >\n            <Form id=\"addStudioForm\" onSubmit={handleAddStudio} style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n              <Form.Group controlId=\"formBasicAdd\">\n             \n                  <div hidden={activeStep !== 0}>\n                  <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Basic Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Studio Name *</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"studioName\" />\n                \n                <Form.Label>About Studio *</Form.Label>\n                <Form.Control rows={6} style={{  minHeight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio's details\" name=\"aboutStudio\" />\n                \n                </Col>\n                <Col md={6}>\n                <Form.Label>Founder's Name *</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter founder name\" name=\"founderName\" />\n                \n                <Form.Label>About Founder *</Form.Label>\n                <Form.Control rows={6} style={{  minheight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter founder's details\" name=\"aboutFounder\" />\n                \n                </Col>\n                </Row>\n                <hr></hr>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Contact Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Mobile Number *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter mobile number\" name=\"mobileNumber\" type=\"number\"  />\n\n                <Form.Label>WhatsApp Number *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter whatsapp number\" name=\"whatsappNumber\" type=\"number\"  />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Mail Address</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"email\" rows={1} placeholder=\"Enter mail address\" name=\"mailAddress\" />\n                \n                  </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Details</h3>\n                <Row>\n                  <Col md={6}>\n                <Form.Label >Dance Styles *</Form.Label>\n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                <Form.Label>Number of Hall(s) *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Number of Hall(s)\" name=\"numberOfHalls\" type=\"number\" />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Maximum Occupancy *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}  rows={1} placeholder=\"Maximum Occupancy\" name=\"maximumOccupancy\" type=\"number\"   />\n                </Col>\n                </Row>\n                <br></br>\n                <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}} disabled >\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end gap-3\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={saveDraft}>\n                      Save to Draft\n                    </MuiButton>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                  \n                  </div>\n\n\n               \n              \n                <div hidden={activeStep !== 1}>\n\n\n                \n            <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Instructor Details</h3>\n                <Form.Label>Names of Instructors</Form.Label>\n                <Row>\n                  <ThemeProvider theme={darkTheme}>\n                    <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={instructorNamesWithIds}\n                      value={selectedInstructors}\n                      onChange={handleInstructorChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Instructors\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                  </ThemeProvider>\n                </Row> \n                <a href=\"#/modifyInstructors\" rel=\"noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', color: isDarkModeOn ? 'cyan' : 'blue' }}>\n                      Go to Instrcutors' Add/update Page? \n                    </a>\n                <hr></hr>   \n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Class Schedule *</h3>\n                  <span>Time Table Of dance classes</span>\n                    <div style={{ overflowX: 'auto', whiteSpace: 'nowrap', scrollbarColor: isDarkModeOn ? '#888 #333' : '#ccc #fff', }}>\n                      <StudioTable\n                        tableData={tableData}\n                        setTableData={setTableData}\n                        instructorNamesWithIds={instructorNamesWithIds}\n                      />\n                    </div>\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Additional Details</h3>\n                <Row>\n                <Col md={4}>\n                  <Form.Label>GST Number</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"GST Number\" name=\"gstNumber\" />\n                  \n                  \n                </Col>\n                <Col md={8}>\n                <Form.Label>Add Amenities</Form.Label>\n                  \n                  <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={amenityKeys}\n                  value={selectedAmenities}\n                  onChange={handleAmentiesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Amenities\"\n                      style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                </Col>\n                </Row>\n                <Row>\n                <Form.Label>Enrollment Process</Form.Label>\n                  <Form.Control rows={12} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enrollment Process\" name=\"enrollmentProcess\" />\n          \n                </Row>\n\n                <h3 style={{ margin: '12px 0', backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Timings *</h3>\n                <StudioWeeklyTimings timings={timings} setTimings={setTimings} />\n\n                <h3 style={{ margin: '32px 0 0 0', backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Social Media Links</h3>\n               <Row>\n               <Col md={4}>\n                  <Form.Label>Instagram</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Instagram Link\" name=\"instagram\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Facebook</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Facebook Link\" name=\"facebook\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>YouTube</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"YouTube Link\" name=\"youtube\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Twitter</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Twitter Link\" name=\"twitter\" />\n                </Col>\n\n               </Row>\n\n               <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end gap-3\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={saveDraft}>\n                      Save to Draft\n                    </MuiButton>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n              </div>\n\n               \n                <div hidden={activeStep !== 2}>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Address Details</h3>\n                <Row>\n                  <Col md={6}>\n                  <Form.Label>Building Name *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter building name\" name=\"buildingName\" />\n\n                <Form.Label>Street *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter street\" name=\"street\" />\n                <Form.Label>City *</Form.Label>\n                <Form.Control as=\"select\" style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black', height: 'auto', // Let it adjust to content\n                    lineHeight: '1.5em', // Mimics rows={1}\n                    padding: '8px', }} name=\"city\">\n                    <option value=\"\">Select a city</option>\n                    {locationOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n\n                </Col>\n                <Col md={6}>\n                  <Form.Label>Landmark</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter landmark\" name=\"landmark\" />\n\n                <Form.Label>Pincode *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter pincode\" name=\"pincode\" type=\"number\"  />\n               \n                <Form.Label>State *</Form.Label>\n                <Form.Control as=\"select\" style={{ padding: \"0 1.5rem\", backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter state\" name=\"state\">\n                <option value=\"\">Select a State</option>\n                    {stateOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n               \n                </Col>\n\n                <Form.Label>Save exact Address</Form.Label>\n                <MapsInput\n                  selectedLocation={selectedLocation}\n                  setSelectedLocation={setSelectedLocation}\n                  mapAddress={mapAddress}\n                  setMapAddress={setMapAddress}\n                ></MapsInput>\n                </Row>\n                \n\n                \n              <br></br>\n\n              <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end gap-3\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={saveDraft}>\n                      Save to Draft\n                    </MuiButton>\n                    <MuiButton variant=\"contained\" disabled={isSubmitting} style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\", color:'white'}} type=\"submit\">\n                      Add Studio & Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                \n                </div>\n\n                \n                </Form.Group>\n            </Form>\n            {isSubmitting && <LinearProgress />}\n            {\n              newStudioId === \"\"?(\"\"):(<p>New Studio Created with id {newStudioId}. Now u can upload images regarding them</p>)\n            }\n            \n            </div>\n          \n             \n             \n            <div hidden={activeStep !== 3}>\n              \n              <ImageUpload entityId={newStudioId} title={\"Studio Icon\"} storageFolder={STORAGES.STUDIOICON} maxImageCount={1} minImageCount={1} ref={logoImageUploadRef}></ImageUpload>\n              <Row>\n                \n                <Col xs={12} className=\"d-flex justify-content-end\">\n                  <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                    Next\n                  </MuiButton>\n                </Col>\n              </Row>\n\n              </div>\n             \n            \n             <div hidden={activeStep !== 4}>\n              <ImageUpload entityId={newStudioId} title={\"Studio Images\"} maxImageCount={10} minImageCount={5} storageFolder={STORAGES.STUDIOIMAGES} ref={studioImageUploadRef}></ImageUpload>\n            </div>\n\n            <div hidden={activeStep !== 4}>\n              <ImageUpload entityId={newStudioId} title={\"Studio Announcement Images\"}  storageFolder={STORAGES.STUDIOANNOUNCEMENTS} maxImageCount={10} minImageCount={0} ref={anouncementImageUploadRef}></ImageUpload>\n\n              <Row className='mt-3'>\n              <Col xs={6}>\n                <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                  Prev\n                </MuiButton>\n              </Col>\n              <Col xs={6} className=\"d-flex justify-content-end\">\n                <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                  Next\n                </MuiButton>\n              </Col>\n            </Row>\n            </div>\n\n            <div  hidden={activeStep !== 5} style={{ display: 'flex',  alignItems: 'center', height: 'auto'}}>\n          \n                <SuccessMessage StudioId={newStudioId} />\n                <br></br>\n              \n            </div>\n        \n      <br></br>\n      \n    </div>\n  )\n}\n\n\nexport default StudioAdd\n","import React, { useState, useEffect } from 'react';\nimport { Alert, Container } from 'react-bootstrap';\n\nconst AlertPopup = ({\n  type = 'info',\n  message = 'Default message',\n  timeOfDisplay = 5000,\n  fontSize = '16px',\n  fontWeight = 'normal',\n  fontStyle = 'normal',\n}) => {\n  const [showAlert, setShowAlert] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowAlert(false);\n    }, timeOfDisplay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [timeOfDisplay]);\n\n  return (\n    <Container>\n      {showAlert && (\n        <Alert\n          variant={type}\n          style={{\n            fontSize,\n            fontWeight,\n            fontStyle,\n            textAlign: 'center',\n            marginTop: '10px',\n            marginBottom: '0',\n          }}\n          onClose={() => setShowAlert(false)}\n          dismissible\n        >\n          {message}\n        </Alert>\n      )}\n    </Container>\n  );\n};\n\nexport default AlertPopup;\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Row, Col, Form, Table } from \"react-bootstrap\";\nimport { db } from \"../config\";\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { COLLECTIONS } from \"../constants\";\nimport AlertPopup from \"./AlertPopup\";\nimport ImageUpload from \"./ImageUpload\";\nimport { STORAGES } from \"../constants\";\nimport MapsInput from \"./MapsInput\";\nimport { useSelector } from \"react-redux\"; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\nimport TimeRangePicker from \"./TimeRangePicker\";\nimport indianCities from \"../cities.json\";\nimport indianStates from \"../states.json\";\nimport danceStyles from \"../danceStyles.json\";\nimport { AMENITIES_ICONS } from \"../constants\";\nimport { Autocomplete, LinearProgress, TextField } from \"@mui/material\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { FaMinus, FaPlus } from \"react-icons/fa\";\nimport { MultiSelect } from \"primereact/multiselect\";\nimport { putData } from \"../utils/common\";\nimport StudioWeeklyTimings from \"./StudioWeeklyTiming\";\nimport { useSnackbar } from \"../context/SnackbarContext\";\nimport { updateDaysFormat } from \"../utils/mapping\";\n\nconst initialStudioTimings = {\n  monday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  tuesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  wednesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  thursday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  friday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  saturday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  sunday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n};\n\nconst daysOfWeek = [\"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\", \"Sun\"];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\",\n};\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString = \"\") => {\n  const utf8Encoded = unicodeString.split(\"\").map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nfunction StudioUpdate({\n  studio,\n  setStudio,\n  studioId,\n  setStudioId,\n  instructors,\n}) {\n  const showSnackbar = useSnackbar();\n  const [selectedStudio, setSelectedStudio] = useState(null);\n  const [selectedStudioId, setSelectedStudioId] = useState(null);\n  const [selectedInstructors, setSelectedInstructors] = useState([]);\n  const [selectedStudioFrozenClassRows, setSelectedStudioFrozenClassRows] =\n    useState(-1);\n  const [selectedAmenities, setSelectedAmenities] = useState([]);\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [defaultTime, setDefaultTime] = useState(\"00:00-00:00\");\n\n  const locationOptions = indianCities.cities;\n  const stateOptions = indianStates.states;\n  const danceStylesOptions = danceStyles.danceStyles;\n  const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n  const [showUpdateSuccessAlert, setShowUpdateSuccessAlert] = useState(false);\n  const [showUpdateErrorAlert, setShowUpdateErrorAlert] = useState(false);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  const [timings, setTimings] = useState(initialStudioTimings);\n  const [mapAddress, setMapAddress] = useState('');\n\n  const instructorNamesWithIds = instructors.map(\n    (instructor) => `${instructor.name} - ${instructor.id}`\n  );\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: isDarkModeOn ? \"dark\" : \"light\",\n    },\n  });\n\n  const handleDanceStylesChange = (event, value) => {\n    setSelectedDanceStyles(value);\n  };\n\n  const handleAmenitiesChange = (event, value) => {\n    setSelectedAmenities(value);\n  };\n\n  const [tableData, setTableData] = useState({\n    0: {\n      className: \"\",\n      danceForms: \"\",\n      days: \"\",\n      time: \"\",\n      instructors: [],\n      fee: \"\",\n      level: \"\",\n      freeTrial: false,\n      classCategory: [],\n    },\n  });\n\n  const handleTimePickerOpen = (index, time) => {\n    //console.log(\"handleTimePickerOpen\",time,index)\n    setDefaultTime(time);\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null);\n    //console.log(\"---------\")\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n\n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n\n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(\" - \");\n\n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n\n      return newData;\n    });\n\n    setSelectedRow(selectedRowIndex);\n  };\n\n  useEffect(() => {\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser =\n      JSON.parse(localStorage.getItem(\"StudioCreated\")) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map(\n      (studio) => `${studio.studioName} : ${studio.id}`\n    );\n    setStudioId(studioIdList);\n\n    //console.log(\"studio:\", studio);\n    //console.log(\"studioId\", studioId);\n  }, []);\n\n  useEffect(() => {\n    // Fetch data for the selected studio when studioId changes\n    if (selectedStudio) {\n      //console.log(\"Studio Instructors Names\",selectedStudio.instructorsNames)\n      setSelectedInstructors(selectedStudio.instructorsNames);\n      if (selectedStudio && selectedStudio.danceStyles) {\n        setSelectedDanceStyles(selectedStudio.danceStyles.split(\",\"));\n      }\n      if (selectedStudio && selectedStudio.addAmenities) {\n        setSelectedAmenities(selectedStudio.addAmenities.split(\",\"));\n      }\n      if (selectedStudio && selectedStudio.tableData) {\n        const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n        setSelectedStudioFrozenClassRows(maxIndex);\n      }\n      if (selectedStudio && selectedStudio?.timings) {\n        setTimings(selectedStudio.timings);\n      }\n      if (selectedStudio && selectedStudio?.mapAddress) {\n        setMapAddress(selectedStudio?.mapAddress);\n      }\n    }\n  }, [selectedStudio]);\n\n  const handleSelectStudio = async (event) => {\n    event.preventDefault();\n    const selected = event.target.value;\n    const selectedId = selected.split(\":\").pop().trim();\n    setSelectedStudioId(selectedId);\n    try {\n      const studioDoc = await getDoc(doc(db, COLLECTIONS.STUDIO, selectedId));\n      if (studioDoc.exists) {\n        setSelectedStudio(studioDoc.data());\n        if (studioDoc.data().geolocation) {\n          const loc = studioDoc.data().geolocation;\n          setSelectedLocation(loc || null);\n          //console.log(\"StudioUpdate Selected location\",selectedLocation,loc)\n        }\n\n        if (studioDoc.data().tableData) {\n          setTableData(studioDoc.data().tableData);\n          //selectedStudioFrozenClassRows()\n          const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n          setSelectedStudioFrozenClassRows(maxIndex);\n          //console.log(\"Yo We got...\",tableData,Array.isArray(tableData),isMapOfMaps(tableData),maxIndex)\n        } else {\n          setTableData({\n            0: {\n              className: \"\",\n              danceForms: \"\",\n              days: \"\",\n              time: \"\",\n              instructors: [],\n              fee: \"\",\n              level: \"\",\n              freeTrial: false,\n              classCategory: [],\n            },\n          });\n        }\n      } else {\n        setSelectedStudio(null); // No matching studio found\n      }\n    } catch (error) {\n      console.error(\"Error fetching studio data:\", error, selectedId);\n    }\n  };\n\n  const handleInstructorChange = (event, value) => {\n    setSelectedInstructors(value);\n  };\n\n  const handleUpdateStudio = async (event) => {\n    event.preventDefault();\n\n    const errorMessage = validate();\n\n    if (errorMessage) {\n      return showSnackbar(errorMessage, \"error\");\n    }\n\n    setIsSubmitting(true);\n    const nameIdLocal = event.target.nameId.value;\n    const indexOfColon = nameIdLocal.lastIndexOf(\":\");\n    const studioId = nameIdLocal.substring(indexOfColon + 1).trim();\n\n    if (!studioId) {\n      //console.log(\"Invalid or empty studio id\")\n      return;\n    }\n\n    //console.log(studioId)\n\n    if (!studioId) {\n      //console.log(\"Invalid or empty studio id\")\n      return;\n    }\n\n    //console.log(studioId)\n\n    //const description = encodeToUnicode(event.target.description.value);\n    //const geolocation = selectedLocation;\n\n    try {\n      // Update the studio document with the new values\n      ////console.log(description,geolocation)\n      const dbPayload = {\n        studioName: event.target.studioName.value,\n        aboutStudio: event.target.aboutStudio.value,\n        founderName: event.target.founderName.value,\n        aboutFounder: event.target.aboutFounder.value,\n        mobileNumber: event.target.mobileNumber.value,\n        whatsappNumber: event.target.whatsappNumber.value,\n        mailAddress: event.target.mailAddress.value,\n        danceStyles: selectedDanceStyles.join(\",\"),\n        numberOfHalls: event.target.numberOfHalls.value,\n        maximumOccupancy: event.target.maximumOccupancy.value,\n        instructorsNames: selectedInstructors,\n        status: \"OPEN\",\n        tableData: tableData,\n        buildingName: event.target.buildingName.value,\n        street: event.target.street.value,\n        city: event.target.city.value,\n        landmark: event.target.landmark.value,\n        pincode: event.target.pincode.value,\n        state: event.target.state.value,\n        country: \"India\",\n        mapAddress,\n        geolocation: selectedLocation,\n        gstNumber: event.target.gstNumber.value,\n        enrolledId: [],\n        reviews: [],\n        author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n        UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n        addAmenities: selectedAmenities.join(\",\"),\n        enrollmentProcess: encodeToUnicode(\n          event.target.enrollmentProcess.value\n        ),\n        instagram: event.target.instagram.value,\n        facebook: event.target.facebook.value,\n        youtube: event.target.youtube.value,\n        twitter: event.target.twitter.value,\n        timings,\n      };\n\n      const response = await putData(dbPayload, COLLECTIONS.STUDIO, studioId);\n      if (response.ok) {\n        //console.log(\"Studio updated successfully\");\n        // alert(\"Studio Update successfully\");\n        showSnackbar(\"Studio Details Updated Successfully\", \"success\");\n        setShowUpdateSuccessAlert(true);\n        setShowUpdateErrorAlert(false);\n      } else {\n        setShowUpdateSuccessAlert(false);\n        setShowUpdateErrorAlert(true);\n      }\n    } catch (error) {\n      console.error(\"Error updating studio: \", error);\n      setShowUpdateSuccessAlert(false);\n      setShowUpdateErrorAlert(true);\n    } finally {\n      setIsSubmitting(false);\n    }\n    // Reset input fields to their initial values when a new studio is selected\n    document.getElementById(\"updateStudioForm\").reset();\n  };\n\n  const handleAddColumn = () => {\n    setTableData((prevData) => {\n      const newData = prevData.map((row) => ({\n        ...row,\n        [Object.keys(row).length]: \"\",\n      }));\n      return newData;\n    });\n  };\n\n  const handleAddRow = () => {\n    setTableData((prevData) => {\n      const newRowKey = Object.keys(prevData).length; // Use the current number of rows as the new row key\n      return { ...prevData, [newRowKey]: { ...tableData[0] } };\n    });\n  };\n\n  const handleRemoveRow = (index) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n      delete newData[index];\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if (field === \"days\") {\n        value = Array.isArray(value) ? value.join(\",\") : value;\n      }\n\n      return {\n        ...prevData,\n        [index]: {\n          ...prevData[index],\n          [field]: value,\n        },\n      };\n    });\n  };\n\n  const validate = () => {\n    const form = document.getElementById(\"updateStudioForm\");\n\n    if (!form.studioName.value) return \"Studio name is required\";\n    if (!form.aboutStudio.value) return \"About Studio is required\";\n    if (!form.founderName.value) return \"Founder name is required\";\n    if (!form.aboutFounder.value) return \"About Founder is required\";\n    if (!form.mobileNumber.value) return \"Mobile number is required\";\n    if (!form.whatsappNumber.value) return \"WhatsApp number is required\";\n    if (!form.numberOfHalls.value) return \"Number of halls is required\";\n    if (!form.maximumOccupancy.value) return \"Maximum occupancy is required\";\n    if (!selectedDanceStyles.length)\n      return \"At least one dance style must be selected\";\n\n    if (!Object.values(timings).every((slots) => slots.length > 0)) {\n      return \"All timing slots must be filled\";\n    }\n    if (!Object.values(tableData).length) {\n      return \"At least one class entry is required\";\n    }\n    for (const entry of Object.values(tableData)) {\n      if (!entry.className?.trim()) return \"Class name is required\";\n      if (!entry.danceForms?.trim()) return \"Dance forms are required\";\n      if (!entry.days?.trim()) return \"Days are required\";\n      if (!entry.time?.trim()) return \"Time is required\";\n      if (!entry.fee?.trim()) return \"Fee is required\";\n      if (!entry.level?.trim()) return \"Level is required\";\n      if (!entry.instructors.length)\n        return \"At least one instructor is required\";\n      if (!entry.classCategory.length || !entry.classCategory[0]?.trim())\n        return \"Class category is required\";\n    }\n\n    if (!form.buildingName.value) return \"Building name is required\";\n    if (!form.street.value) return \"Street is required\";\n    if (!form.city.value) return \"City is required\";\n    if (!form.pincode.value) return \"Pincode is required\";\n    if (!form.state.value) return \"State is required\";\n    if (!mapAddress) return \"Address is required\";\n    if (!selectedLocation) return \"Location selection is required\";\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n        color: isDarkModeOn ? \"white\" : \"black\",\n      }}\n    >\n      <br></br>\n      <Form id=\"updateStudioForm\" onSubmit={handleUpdateStudio}>\n        <Form.Group controlId=\"formBasicUpdate\">\n          <Form.Label>Id</Form.Label>\n          <Form.Control\n            as=\"select\"\n            name=\"nameId\"\n            style={{\n              backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n              color: isDarkModeOn ? \"white\" : \"black\",\n              height: \"auto\", // Let it adjust to content\n              lineHeight: \"1.5em\",\n              padding: \"8px\",\n            }}\n            onChange={handleSelectStudio}\n          >\n            <option value=\"\">Select a studio...</option>\n            {studioId && studioId.length > 0 ? (\n              studioId.map((studioItem) => (\n                <option key={studioItem} value={studioItem}>\n                  {studioItem}\n                </option>\n              ))\n            ) : (\n              <option value=\"\">No studio yet!</option>\n            )}\n          </Form.Control>\n        </Form.Group>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Basic Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Studio Name *</Form.Label>\n            <Form.Control\n              rows={1}\n              defaultValue={selectedStudio ? selectedStudio.studioName : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"textarea\"\n              placeholder=\"Enter studio name\"\n              name=\"studioName\"\n            />\n\n            <Form.Label>About Studio *</Form.Label>\n            <Form.Control\n              rows={6}\n              defaultValue={selectedStudio ? selectedStudio.aboutStudio : \"\"}\n              style={{\n                minHeight: \"150px\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              placeholder=\"Enter studio details\"\n              name=\"aboutStudio\"\n            />\n          </Col>\n          <Col md={6}>\n            <Form.Label>Founder's Name *</Form.Label>\n            <Form.Control\n              rows={1}\n              defaultValue={selectedStudio ? selectedStudio.founderName : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"textarea\"\n              placeholder=\"Enter studio name\"\n              name=\"founderName\"\n            />\n\n            <Form.Label>About Founder *</Form.Label>\n            <Form.Control\n              rows={6}\n              defaultValue={selectedStudio ? selectedStudio.aboutFounder : \"\"}\n              style={{\n                height: \"150px\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              placeholder=\"Enter studio details\"\n              name=\"aboutFounder\"\n            />\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Contact Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Mobile Number *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.mobileNumber : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Enter studio details\"\n              name=\"mobileNumber\"\n              type=\"number\"\n            />\n\n            <Form.Label>WhatsApp Number *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.whatsappNumber : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Enter studio details\"\n              name=\"whatsappNumber\"\n              type=\"number\"\n            />\n          </Col>\n          <Col md={6}>\n            <Form.Label>Mail Address</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.mailAddress : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"textarea\"\n              rows={1}\n              placeholder=\"Enter studio details\"\n              name=\"mailAddress\"\n            />\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Studio Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Dance Styles *</Form.Label>\n\n            <ThemeProvider theme={darkTheme}>\n              <CssBaseline />\n\n              <Autocomplete\n                style={{\n                  backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                  color: isDarkModeOn ? \"white\" : \"black\",\n                }}\n                multiple\n                id=\"tags-standard\"\n                options={danceStylesOptions}\n                value={selectedDanceStyles}\n                onChange={handleDanceStylesChange}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"standard\"\n                    placeholder=\"Select Dance Styles\"\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                  />\n                )}\n              />\n            </ThemeProvider>\n\n            <Form.Label>Number of Hall(s) *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.numberOfHalls : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Number of Hall(s)\"\n              name=\"numberOfHalls\"\n              type=\"number\"\n            />\n          </Col>\n          <Col md={6}>\n            <Form.Label>Maximum Occupancy *</Form.Label>\n            <Form.Control\n              defaultValue={\n                selectedStudio ? selectedStudio.maximumOccupancy : \"\"\n              }\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Maximum Occupancy\"\n              name=\"maximumOccupancy\"\n              type=\"number\"\n            />\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Instructor Details\n        </h3>\n        <Form.Label>Names of Instructors</Form.Label>\n        <Row>\n          <Col xs={6}>\n            <div\n              style={{\n                backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            >\n              <Row>\n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                  <Autocomplete\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                    multiple\n                    id=\"tags-standard\"\n                    options={instructorNamesWithIds}\n                    value={selectedInstructors}\n                    onChange={handleInstructorChange}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        variant=\"standard\"\n                        placeholder=\"Select Dance Styles\"\n                        style={{\n                          backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                          color: isDarkModeOn ? \"white\" : \"black\",\n                        }}\n                      />\n                    )}\n                  />\n                </ThemeProvider>\n                <a\n                  href=\"#/modifyInstructors\"\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                  style={{\n                    textDecoration: \"none\",\n                    color: isDarkModeOn ? \"cyan\" : \"blue\",\n                  }}\n                >\n                  Go to Instrcutors' Add/update Page?\n                </a>\n              </Row>\n            </div>\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Address Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Building Name *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.buildingName : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter building name\"\n              name=\"buildingName\"\n            />\n\n            <Form.Label>Street *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.street : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter street\"\n              name=\"street\"\n            />\n            <Form.Label>City *</Form.Label>\n            <Form.Control\n              as=\"select\"\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n                height: \"auto\", // Let it adjust to content\n                lineHeight: \"1.5em\", // Mimics rows={1}\n                padding: \"8px\",\n              }}\n              name=\"city\"\n              value={selectedStudio ? selectedStudio.city : \"\"}\n              onChange={(e) => {\n                const newCity = e.target.value;\n                setSelectedStudio((prevState) => ({\n                  ...prevState,\n                  city: newCity,\n                }));\n              }}\n            >\n              <option value=\"\">Select a city</option>\n              {locationOptions.map((city, index) => (\n                <option key={index} value={city}>\n                  {city}\n                </option>\n              ))}\n            </Form.Control>\n          </Col>\n          <Col md={6}>\n            <Form.Label>Landmark</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.landmark : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter landmark\"\n              name=\"landmark\"\n            />\n\n            <Form.Label>Pincode *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.pincode : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter pincode\"\n              name=\"pincode\"\n              type=\"number\"\n            />\n\n            <Form.Label>State *</Form.Label>\n            <Form.Control\n              as=\"select\"\n              style={{\n                padding: \"0 1.5rem\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Enter state\"\n              name=\"state\"\n              value={selectedStudio ? selectedStudio.state : \"\"}\n            >\n              <option value=\"\">Select a State</option>\n              {stateOptions.map((city, index) => (\n                <option key={index} value={city}>\n                  {city}\n                </option>\n              ))}\n            </Form.Control>\n          </Col>\n\n          <Form.Label>Save exact Address</Form.Label>\n          <MapsInput\n            selectedLocation={selectedLocation}\n            setSelectedLocation={setSelectedLocation}\n            mapAddress={mapAddress}\n            setMapAddress={setMapAddress}\n          ></MapsInput>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"white\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Additional Details\n        </h3>\n        <Row>\n          <Col md={4}>\n            <Form.Label>GST Number</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.gstNumber : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"number\"\n              rows={1}\n              placeholder=\"GST Number\"\n              name=\"gstNumber\"\n            />\n          </Col>\n          <Col md={8}>\n            <Form.Label>Add Amenities</Form.Label>\n\n            <ThemeProvider theme={darkTheme}>\n              <CssBaseline />\n\n              <Autocomplete\n                style={{\n                  backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                  color: isDarkModeOn ? \"white\" : \"black\",\n                }}\n                multiple\n                id=\"tags-standard\"\n                options={amenityKeys}\n                value={selectedAmenities}\n                onChange={handleAmenitiesChange}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"standard\"\n                    placeholder=\"Select Amenities\"\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                  />\n                )}\n              />\n            </ThemeProvider>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Form.Label>Enrollment Process</Form.Label>\n            <Form.Control\n              defaultValue={\n                selectedStudio\n                  ? decodeUnicode(selectedStudio?.enrollmentProcess)\n                  : \"\"\n              }\n              rows={6}\n              style={{\n                height: \"150px\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              placeholder=\"Enrollment Process\"\n              name=\"enrollmentProcess\"\n            />\n          </Col>\n        </Row>\n\n        <br></br>\n        <span>Time Table Of dance classes</span>\n        <div\n          style={{\n            overflowX: \"auto\",\n            whiteSpace: \"nowrap\",\n            scrollbarColor: isDarkModeOn ? \"#888 #333\" : \"#ccc #fff\",\n          }}\n        >\n          <Table bordered variant=\"light\">\n            <thead>\n              <tr>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Class Name\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"10rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Dance Form\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Days\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Time\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"20rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Instructors\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"8rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Fee (₹)\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"10rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Level\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"8rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Free Trial\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Class Category\n                </th>\n                <th style={{ padding: 0 }}>\n                  <Button variant=\"primary\" onClick={handleAddRow}>\n                    <FaPlus />\n                  </Button>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.keys(tableData).map((rowKey, index) => (\n                <tr key={rowKey}>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      type=\"text\"\n                      value={tableData[rowKey].className}\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"className\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      as=\"select\"\n                      value={tableData[rowKey].danceForms}\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"danceForms\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    >\n                      <option value=\"\">Select a dance form</option>\n                      {danceStylesOptions.map((option) => (\n                        <option key={option} value={option}>\n                          {option}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <MultiSelect\n                      value={\n                        tableData[rowKey] &&\n                        tableData[rowKey].days &&\n                        updateDaysFormat(\n                          tableData?.[rowKey]?.days\n                            ?.split?.(\",\")\n                            ?.filter?.((day) => day !== \"\")\n                        )\n                      }\n                      onChange={(event) =>\n                        handleTableChange(rowKey, \"days\", event.target.value)\n                      }\n                      options={daysOfWeek}\n                      placeholder=\"class days\"\n                      maxSelectedLabels={7}\n                      className=\"w-full md:w-20rem\"\n                      style={{ color: \"#000\", width: \"100%\" }}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      type=\"text\"\n                      value={tableData[rowKey].time}\n                      //onChange={(e) => handleTableChange(rowKey, 'time', e.target.value)}\n                      onClick={() =>\n                        handleTimePickerOpen(rowKey, tableData[rowKey].time)\n                      }\n                    />\n                    {showTimePicker && (\n                      <TimeRangePicker\n                        show={showTimePicker}\n                        handleClose={handleTimePickerClose}\n                        handleSelect={handleTimeSelect}\n                        defaultTime={\n                          tableData[selectedRowIndex]?.time || \"00:00-00:00\"\n                        } // selectedRowIndex\n                      />\n                    )}\n                  </td>\n                  <td style={{ padding: \"0rem\", width: \"20rem\" }}>\n                    <Autocomplete\n                      multiple\n                      options={instructorNamesWithIds}\n                      value={\n                        tableData[rowKey] && tableData[rowKey].instructors\n                          ? tableData[rowKey].instructors\n                          : []\n                      }\n                      onChange={(_, values) =>\n                        handleTableChange(rowKey, \"instructors\", values)\n                      }\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Instructors\"\n                        />\n                      )}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      type=\"text\"\n                      value={tableData[rowKey].fee ? tableData[rowKey].fee : \"\"}\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"fee\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      as=\"select\"\n                      value={\n                        tableData[rowKey].level ? tableData[rowKey].level : \"\"\n                      }\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"level\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    >\n                      <option value=\"\">Select a Level</option>\n                      <option value=\"Beginner\">Beginner</option>\n                      <option value=\"Intermediate\">Intermediate</option>\n                      <option value=\"Advanced\">Advanced</option>\n                      <option value=\"Misc\">Misc</option>\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\", border: \"1px solid black\" }}>\n                    <Form.Control\n                      style={{\n                        backgroundColor: \"white\",\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                      as=\"select\"\n                      value={\n                        tableData[index]?.freeTrial\n                          ? tableData[index].freeTrial\n                          : \"\"\n                      }\n                      onChange={(e) =>\n                        handleTableChange(index, \"freeTrial\", e.target.value)\n                      }\n                    >\n                      <option value=\"\">Select a value</option>\n                      <option value={true}>Yes</option>\n                      <option value={false}>No</option>\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\", width: \"20rem\" }}>\n                    <Form.Control\n                      style={{\n                        backgroundColor: \"white\",\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                      as=\"select\"\n                      value={\n                        Array.isArray(tableData[index].classCategory) &&\n                        tableData[index].classCategory?.length\n                          ? tableData[index].classCategory[0]\n                          : \"\"\n                      }\n                      onChange={(e) =>\n                        handleTableChange(index, \"classCategory\", [\n                          e.target.value,\n                        ])\n                      }\n                    >\n                      <option value=\"\">Select Class Category</option>\n                      {Object.values(categoryMap).map((value, idx) => (\n                        <option key={idx} value={value}>\n                          {value}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Button\n                      variant=\"danger\"\n                      onClick={() => handleRemoveRow(rowKey)}\n                    >\n                      <FaMinus />\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n        <br></br>\n\n        <h3\n          style={{\n            margin: \"12px 0\",\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Studio Timings *\n        </h3>\n        <StudioWeeklyTimings timings={timings} setTimings={setTimings} />\n\n        <h3\n          style={{\n            margin: \"32px 0 0 0\",\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Social Media Links\n        </h3>\n        <Row>\n          <Col md={4}>\n            <Form.Label>Instagram</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.instagram : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"Instagram Link\"\n              name=\"instagram\"\n            />\n          </Col>\n          <Col md={4}>\n            <Form.Label>Facebook</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.facebook : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"Facebook Link\"\n              name=\"facebook\"\n            />\n          </Col>\n          <Col md={4}>\n            <Form.Label>YouTube</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.youtube : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"YouTube Link\"\n              name=\"youtube\"\n            />\n          </Col>\n          <Col md={4}>\n            <Form.Label>Twitter</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.twitter : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"Twitter Link\"\n              name=\"twitter\"\n            />\n          </Col>\n        </Row>\n\n        <br></br>\n        {studioId && studioId.length > 0 && selectedStudioId && (\n          <>\n            <div>\n              <ImageUpload\n                entityId={selectedStudioId}\n                title={\"Studio Images\"}\n                storageFolder={STORAGES.STUDIOIMAGES}\n                maxImageCount={10} minImageCount={5}\n              />\n            </div>\n            <br />\n            <div>\n              <ImageUpload\n                entityId={selectedStudioId}\n                title={\"Studio Icon\"}\n                storageFolder={STORAGES.STUDIOICON}\n                maxImageCount={1} minImageCount={1}\n              />\n            </div>\n            <div>\n              <ImageUpload\n                entityId={selectedStudioId}\n                title={\"Studio Announcement Images\"}\n                storageFolder={STORAGES.STUDIOANNOUNCEMENTS}\n                maxImageCount={10} minImageCount={0}\n              />\n            </div>\n            <br />\n          </>\n        )}\n        {showUpdateSuccessAlert && (\n          <AlertPopup\n            type=\"info\"\n            message=\"Studio Updated successfully\"\n            timeOfDisplay={3000}\n            fontSize=\"10px\"\n            fontWeight=\"bold\"\n          />\n        )}\n        {showUpdateErrorAlert && (\n          <AlertPopup\n            type=\"warning\"\n            message=\"Studio Update failed\"\n            timeOfDisplay={3000}\n            fontSize=\"10px\"\n            fontWeight=\"bold\"\n          />\n        )}\n        <Button\n          style={{\n            backgroundColor: isDarkModeOn ? \"#892CDC\" : \"black\",\n            color: \"white\",\n          }}\n          type=\"submit\"\n          disabled={isSubmitting}\n        >\n          Update Studio\n        </Button>\n        {isSubmitting && <LinearProgress />}\n      </Form>\n    </div>\n  );\n}\n\nexport default StudioUpdate;\n","import React from 'react';\nimport { Row, Col  } from 'react-bootstrap';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,collection,where,getDocs,query } from \"firebase/firestore\";\nimport { COLLECTIONS } from '../constants';\nimport StudioAdd from '../Components/StudioAdd';\nimport StudioUpdate from '../Components/StudioUpdate';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { useAuth } from '../context/AuthContext';\nimport CardSliderCard from '../Components/CardSliderCard';\nimport Tab from '@mui/material/Tab';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\nimport { Box } from '@mui/material';\n\n\n\nfunction CreatorStudio() {\n  const [studio, setStudio] = useState([]);\n  const [studioId, setStudioId] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  const [instructors, setInstructors] = useState([]);\n  const [isCreator, setIsCreator] = useState(false);\n  const [premiumTill, setPremiumTill] = useState(-1);\n  const { currentUser } = useAuth();\n  const [value, setValue] = React.useState('1');\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n\n  useEffect(() => {\n    console.log(\"Creator Studio getCreatorMode\")\n    const getCreatorMode = async (event) => {\n      try{\n      const userRef = doc(db, \"User\", currentUser.uid);\n      const userSnap = await getDoc(userRef);\n      if (userSnap.exists()) {\n        console.log(\"User there\",userSnap.data(),userSnap.data().CreatorMode,JSON.parse(localStorage.getItem('userInfoFull')));\n        if(userSnap.data() != null){\n          \n          setIsCreator(userSnap.data().CreatorMode)\n          setPremiumTill(userSnap.data().isPremium)\n          console.log(\"Premium Till\",premiumTill,userSnap.data())\n        }else{\n          console.log(\"userSnap.data() null\")\n        }\n      } else {\n        console.log(\"User not found but workshop created... error\");\n      }\n      }catch(error){\n        console.log(\" error\");\n      }\n    }\n  \n    getCreatorMode();\n  }, [isCreator]); // Run once on mount\n\n    // Fetch instructors for the current user\n  useEffect(() => {\n    console.log(\"Creator Studio fetchInstructors\")\n  const fetchInstructors = async () => {\n    let userId = null;\n    if (\n      JSON.parse(localStorage.getItem('userInfo')) &&\n      JSON.parse(localStorage.getItem('userInfo')).UserId\n    ) {\n      userId = JSON.parse(localStorage.getItem('userInfo')).UserId;\n    }\n    if (!userId) {\n      console.log('User not found');\n      alert('User not found');\n      return;\n    }\n\n    const instructorRef = collection(db, COLLECTIONS.INSTRUCTORS);\n    const q = query(instructorRef, where('createdBy', '==', userId));\n    const querySnapshot = await getDocs(q);\n    \n    const instructorsList = [];\n    querySnapshot.forEach((doc) => {\n      instructorsList.push({\n        id: doc.id,\n        name: doc.data().name,      \n      });\n    });\n    console.log(\"Hiii\", instructorsList)\n    setInstructors(instructorsList);\n  };\n\n  fetchInstructors();\n  }, []);\n\n \n  useEffect(() => {\n    console.log(\"Creator Studio getStudioCreated\")\n    const getStudioCreated = async ()=>{\n      const q = query(collection(db, COLLECTIONS.STUDIO), where(\"UserId\", \"==\", JSON.parse(localStorage.getItem('userInfo')).UserId)    );\n      console.log(\"Hiiii\",JSON.parse(localStorage.getItem('userInfo')).UserId)\n      const querySnapshot = await getDocs(q);\n      console.log(\"Studios : \",querySnapshot)\n      const studiosOfUser = querySnapshot.docs.filter(doc => doc.data().studioName).map(doc => \n        { const data = doc.data();\n          return {\n            id: doc.id, // Include the document ID in the data\n            ...data\n          };\n      });\n      localStorage.setItem(\"StudioCreated\", JSON.stringify(studiosOfUser));\n      setStudio(studiosOfUser);\n      setStudioId(studiosOfUser.map((studio) => (String(studio.studioName) + \" :\" + String(studio.id))));\n      console.log(studio)\n      console.log(\"studioId\",studioId)\n    };\n      \n      getStudioCreated();\n    },[setStudio]);\n \n  useEffect(() => {\n    console.log(\"Creator Studio setStudioId\")\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser = JSON.parse(localStorage.getItem('StudioCreated')) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map((studio) => `${studio.studioName} : ${studio.id}`);\n    setStudioId(studioIdList);\n\n    console.log(\"studio:\", studio);\n    console.log(\"studioId\", studioId);\n  }, [setStudioId]);\n\n  console.log(\"studio :\",studio)\n  return (\n    <div>\n      <br></br>\n      {isCreator?(\n        \n       <>\n       <Box sx={{ width: '100%', typography: 'body1' }}>\n      <TabContext value={value}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <TabList style={{color: isDarkModeOn ? 'white' : 'black'}} onChange={handleChange} aria-label=\"lab API tabs example\">\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Add Studio\" value=\"1\" />\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Update Studio\" value=\"2\" />\n          \n          </TabList>\n        </Box>\n        <TabPanel value=\"1\">\n\n        <StudioAdd instructors={instructors} />\n        </TabPanel>\n        <TabPanel value=\"2\">\n        <>\n        <StudioUpdate\n                  studio={studio}\n                  setStudio={setStudio}\n                  instructors={instructors}\n                  studioId={studioId}\n                  setStudioId={setStudioId}\n                />\n        </>\n    \n        </TabPanel>\n        \n      </TabContext>\n    </Box>\n      </>\n      ):\"\"}\n \n      <h3 style={{color: isDarkModeOn ? 'white' : 'black'}}>Your Studios:</h3>\n       <ul>\n      <Row xs={1} md={3} lg={4} className=\"g-4\">\n        {studio.length > 0 ? (\n          studio.map((studio, index) => (\n            <Col key={index}>\n              <a href={`#/studio/${studio.studioId}`} style={{ textDecoration: \"none\" }}>\n                <CardSliderCard studio={studio}/>\n              </a>\n          </Col>\n          ))\n        ) : (\n          <p style={{color: isDarkModeOn ? 'white' : 'black'}}>No studio yet!</p>\n        )}\n      </Row>\n      <br/>\n      </ul>\n    </div>\n  )\n}\nexport default CreatorStudio"],"names":["_ref","studio","_jsx","href","concat","id","children","NStudioCard","data","img_src","ImageUpload","forwardRef","ref","entityId","storageFolder","title","maxImageCount","minImageCount","updateMode","disable","setIsLoading","useLoader","showSnackbar","useSnackbar","imageInputRef","useRef","selectedFiles","setSelectedFiles","useState","uploadedFiles","setUploadedFiles","newFiles","setNewFiles","isDarkModeOn","useSelector","selectDarkModeStatus","progressDelete","setProgressDelete","progressUpdate","setProgressUpdate","isUploadSuccessful","setIsUploadSuccessful","console","log","filesizes","bytes","decimals","arguments","length","undefined","dm","i","Math","floor","parseFloat","pow","toFixed","useEffect","fetchStudioImages","truncatedFiles","slice","alert","current","value","calculateDelta","selectedFileIds","map","file","uploadedFileIds","imagesToDelete","filter","includes","newImages","async","folderPath","folderRef","firebaseRef","storage","fileList","listAll","files","Promise","all","items","downloadURL","getDownloadURL","fileRef","name","filename","fileURL","error","useImperativeHandle","isValid","className","style","display","width","justifyContent","flex","_jsxs","backgroundColor","STORAGES","STUDIOIMAGES","type","onChange","e","Array","from","target","updatedFiles","forEach","reader","FileReader","onloadend","push","shortid","filetype","fileimage","result","datetime","lastModifiedDate","toLocaleString","filesize","size","prevFiles","readAsDataURL","multiple","position","Card","sx","maxWidth","match","src","alt","maxHeight","objectFit","IconButton","disabled","onClick","handleDeleteSelectedFile","window","confirm","top","right","DeleteIcon","color","CardContent","deleteAllImagesInFolder","uploadImages","deleteImages","hidden","max","defaultProps","studioId","cardStyle","padding","marginRight","boxShadow","transition","variant","transform","AspectRatio","ratio","iconUrl","loading","height","overflow","Stack","direction","spacing","bottom","left","danceStyles","split","form","index","Chip","marginBottom","fontSize","bgcolor","danceStylesColorChips","trim","paddingTop","freeTrialAvailable","marginLeft","COLORS","LIME","Box","columnGap","Link","alignSelf","fontWeight","textColor","underline","overlay","whiteSpace","textOverflow","studioName","avgRating","Typography","flexShrink","level","street","zIndex","borderRadius","Favorite","minFee","Button","_defaultTime$split$","show","handleClose","handleSelect","defaultTime","startTime_i","endTime_i","renderTimeOptions","defaultValue","timeOptions","generateTimeOptions","options","option_AM","option_PM","hours","minutes","formattedHours","toString","padStart","formattedMinutes","timeString","formattedHours12","_Fragment","option","Modal","onHide","Header","closeButton","Title","Body","Row","Col","Form","Group","Label","Control","as","lineHeight","Footer","dayMapping","M","T","W","Th","F","St","Sn","updateDaysFormat","records","updatedDays","day","Set","daysOfWeek","categoryMap","Kids","Adults","Women_Only","Men_Only","Seniors","All","Couples","Families","tableData","setTableData","instructorNamesWithIds","showTimePicker","setShowTimePicker","selectedRowIndex","setSelectedRowIndex","selectedRow","setSelectedRow","danceStylesOptions","setDefaultTime","handleTableChange","field","prevData","isArray","join","newData","handleTimePickerClose","handleTimeSelect","startTime","endTime","currentTime","time","currentStartTime","currentEndTime","Table","bordered","border","textAlign","minWidth","handleAddRow","danceForms","days","instructors","fee","status","freeTrial","classCategory","FaPlus","row","_row$days","_row$days$split","_row$days$split$call","_row$days$split$call$","_tableData$selectedRo","MultiSelect","call","event","placeholder","maxSelectedLabels","handleTimePickerOpen","TimeRangePicker","Autocomplete","_","values","renderInput","params","TextField","Object","idx","splice","handleRemoveRow","FaMinus","libraries","apiKey","PinMarker","FaMapMarkerAlt","selectedLocation","setSelectedLocation","mapAddress","setMapAddress","center","setCenter","lat","lng","isLoaded","loadError","useJsApiLoader","googleMapsApiKey","PlacesAutocomplete","onSelect","results","geocodeByAddress","selectedAddress","latLng","getLatLng","_ref3","getInputProps","suggestions","getSuggestionItemProps","suggestion","_createElement","key","placeId","description","GoogleMapReact","bootstrapURLKeys","defaultCenter","defaultZoom","_ref2","google","maps","Geocoder","geocode","location","formatted_address","_form$studioName","_form$street","_form$city","StudioId","navigate","useNavigate","document","getElementById","streetName","city","textTransform","marginTop","MUIButton","mt","px","jsx","timings","setTimings","updatedDayTimings","dayOrder","xs","sm","md","lg","charAt","toUpperCase","slot","open","close","removeTimeSlot","MuiButton","addTimeSlot","encodeToUnicode","text","utf8Encoded","TextEncoder","encode","String","fromCharCode","initialStudioTimings","tuesday","wednesday","thursday","friday","saturday","sunday","monday","previousDraftState","effectDraftRef","logoImageUploadRef","studioImageUploadRef","anouncementImageUploadRef","newStudioId","setNewStudioId","selectedInstructors","setSelectedInstructors","selectedDanceStyles","setSelectedDanceStyles","selectedAmenities","setSelectedAmenities","instructor","isReady","setIsReady","isSubmitting","setIsSubmitting","locationOptions","indianCities","stateOptions","indianStates","amenityKeys","keys","AMENITIES_ICONS","activeStep","setActiveStep","validateStep1","aboutStudio","founderName","aboutFounder","mobileNumber","whatsappNumber","numberOfHalls","maximumOccupancy","validateStep2","every","slots","entry","_entry$className","_entry$danceForms","_entry$days","_entry$time","_entry$fee","_entry$level","_entry$classCategory$","validateStep3","buildingName","pincode","state","handleNext","errorMessage","validateStep4","_logoImageUploadRef$c","validateStep5","_studioImageUploadRef","_anouncementImageUplo","prevActiveStep","handleBack","darkTheme","createTheme","palette","mode","saveDraft","q","query","collection","db","DRAFT_COLLECTIONS","DRAFT_STUDIOS","where","JSON","parse","localStorage","getItem","UserId","querySnapshot","getDocs","empty","studios","doc","foundStudio","studioRef","reduce","accumulator","currentState","mailAddress","instructorsNames","landmark","country","geolocation","gstNumber","enrolledId","reviews","author","displayName","isPremium","addAmenities","enrollmentProcess","creatorEmail","email","instagram","facebook","youtube","twitter","visibilty","isEqual","updateDoc","addDoc","unicodeString","c","charCodeAt","TextDecoder","decode","Uint8Array","decodeUnicode","main","previousState","setInterval","err","clearInterval","Stepper","alternativeLabel","label","Step","StepLabel","onSubmit","preventDefault","errorMessages","Boolean","_JSON$parse","currentUserEmail","studioData","notifyEmails","metaData","entity_name","response","postData","COLLECTIONS","STUDIO","ok","json","deleteDoc","resetDraft","controlId","rows","minHeight","minheight","ThemeProvider","theme","CssBaseline","handleDanceStylesChange","handleInstructorChange","rel","textDecoration","overflowX","scrollbarColor","StudioTable","handleAmentiesChange","margin","StudioWeeklyTimings","MapsInput","LinearProgress","STUDIOICON","STUDIOANNOUNCEMENTS","alignItems","SuccessMessage","message","timeOfDisplay","fontStyle","showAlert","setShowAlert","timer","setTimeout","clearTimeout","Container","Alert","onClose","dismissible","setStudio","setStudioId","selectedStudio","setSelectedStudio","selectedStudioId","setSelectedStudioId","selectedStudioFrozenClassRows","setSelectedStudioFrozenClassRows","showUpdateSuccessAlert","setShowUpdateSuccessAlert","showUpdateErrorAlert","setShowUpdateErrorAlert","studiosOfUser","studioIdList","maxIndex","Number","validate","nameIdLocal","nameId","indexOfColon","lastIndexOf","substring","dbPayload","putData","reset","selectedId","pop","studioDoc","getDoc","exists","loc","studioItem","newCity","prevState","handleAmenitiesChange","newRowKey","rowKey","_tableData$rowKey","_tableData$rowKey$day","_tableData$rowKey$day2","_tableData$rowKey$day3","_tableData$rowKey$day4","_tableData$index","_tableData$index$clas","AlertPopup","setInstructors","isCreator","setIsCreator","premiumTill","setPremiumTill","currentUser","useAuth","setValue","React","userRef","uid","userSnap","CreatorMode","getCreatorMode","userId","instructorRef","INSTRUCTORS","instructorsList","fetchInstructors","docs","setItem","stringify","getStudioCreated","typography","TabContext","borderBottom","borderColor","TabList","handleChange","newValue","Tab","TabPanel","StudioAdd","StudioUpdate","CardSliderCard"],"sourceRoot":""}