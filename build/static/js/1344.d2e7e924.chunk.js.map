{"version":3,"file":"static/js/1344.d2e7e924.chunk.js","mappings":"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","sources":["Components/CardSliderCard.js","Components/ImageUpload.js","Components/NStudioCard.js","Components/TimeRangePicker.js","Components/StudioTable.js","Components/MapsInput.js","Components/SucessPage.js","Components/StudioWeeklyTiming.jsx","Components/StudioAdd.js","Components/AlertPopup.js","Components/StudioUpdate.js","Screens/CreatorStudio.js"],"sourcesContent":["import React from 'react';\nimport NStudioCard from './NStudioCard';\n\nconst CardSliderCard = ({ studio }) => {\n  return (\n    <a href={`#/studio/${studio.id}`}>\n    <NStudioCard data={studio} img_src={\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}/>\n    </a>\n\n  );\n};\n\nexport default CardSliderCard;\n","import React, { useState,useEffect } from \"react\";\nimport shortid from \"shortid\";\nimport { ref, getDownloadURL, listAll } from 'firebase/storage';\nimport { storage } from '../config';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { deleteAllImagesInFolder,deleteImages,uploadImages} from '../utils/firebaseUtils'\nimport { Card, CardContent, IconButton } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useSnackbar } from \"../context/SnackbarContext\";\nimport { STORAGES } from \"../constants\";\n\n\nconst ImageUpload = ({entityId,storageFolder,title, maxImageCount=10, updateMode, disable }) => {\n  const showSnackbar = useSnackbar();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [newFiles, setNewFiles] = useState([]); // Track new files to be added\n  const [deletedFiles, setDeletedFiles] = useState([]); // Track deleted files\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  //console.log(\"Received props=> entityId:\", entityId, \"|storageFolder:\", storageFolder);\n  const [progressDelete, setProgressDelete] = useState(-1);\n  const [progressUpdate, setProgressUpdate] = useState(-1);\n\n  console.log(\"Kyc enitity id \",entityId, disable)\n  const filesizes = (bytes, decimals = 2) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n  };\n\n  useEffect(() => {\n   // console.log(\"Fetching image for\",entityId)\n    if(entityId){\n      fetchStudioImages(entityId); // Fetch images when component mounts\n    }\n  }, [entityId]);\n\n  useEffect(() => {\n   // console.log(\"Selected files:\", selectedFiles);\n    if (maxImageCount && selectedFiles.length > maxImageCount) {\n      const truncatedFiles = selectedFiles.slice(0, maxImageCount);\n      alert(`Exceeded maxImageCount, keeping first ${maxImageCount} files.`);\n      setSelectedFiles(truncatedFiles);\n    }\n  }, [selectedFiles, maxImageCount]);\n  \n\n  const handleInputChange = (e) => {\n    // console.log(\"handleInputChange\")\n    const files = Array.from(e.target.files);\n    const updatedFiles = [];\n    // console.log(\"file array \",files.length)\n    files.forEach((file) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        updatedFiles.push({\n          id: shortid.generate(),\n          filename: file.name,\n          filetype: file.type,\n          fileimage: reader.result,\n          datetime: file.lastModifiedDate.toLocaleString(\"en-IN\"),\n          filesize: filesizes(file.size),\n          file: file, // Store the actual file object\n        });\n\n        if (updatedFiles.length === files.length) {\n          setSelectedFiles((prevFiles) => [...prevFiles, ...updatedFiles]);\n          setNewFiles(updatedFiles);\n          // console.log(\"New files in total\",setNewFiles.length)\n        }\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleDeleteSelectedFile = (id) => {\n    if (window.confirm(\"Are you sure you want to delete this image?\")) {\n      const fileToDelete = selectedFiles.find((file) => file.id === id);\n      setDeletedFiles((prevDeletedFiles) => [...prevDeletedFiles, fileToDelete]);\n      setSelectedFiles((prevFiles) =>\n        prevFiles.filter((file) => file.id !== id)\n      );\n    }\n  };\n\n  const handleUploadSubmit = async () => {\n    if (!entityId) {\n      alert(\"No studio selected\");\n      return;\n    }\n\n    try {\n      if (maxImageCount === 1) {\n        // Delete all previous images in the folder\n        await deleteAllImagesInFolder(storageFolder, entityId);\n        await uploadImages(storageFolder,newFiles, entityId);\n      } else {\n        // Calculate images to delete and add\n        const { imagesToDelete, newImages } = calculateDelta(selectedFiles, uploadedFiles);\n\n        // Delete images if there are any\n        if (imagesToDelete.length > 0) {\n          await deleteImages(storageFolder, imagesToDelete, entityId, setProgressDelete);\n        }\n\n        // Upload new images if there are any\n        if (newImages.length > 0) {\n          await uploadImages(storageFolder, newImages, entityId, setProgressUpdate);\n        }\n\n      }\n\n      // alert(\"Images Uploaded/Deleted\");\n      //showSnackbar(\"Images Uploaded/Deleted\", \"success\");\n    } catch (error) {\n      console.error(\"Error uploading/deleting images:\", error);\n    }\n  };\n\n  // Function to calculate images to delete and new images to upload\n  const calculateDelta = (selectedFiles, uploadedFiles) => {\n    const selectedFileIds = selectedFiles.map(file => file.id);\n    const uploadedFileIds = uploadedFiles.map(file => file.id);\n\n    const imagesToDelete = uploadedFiles.filter(file => !selectedFileIds.includes(file.id));\n    const newImages = selectedFiles.filter(file => !uploadedFileIds.includes(file.id));\n\n    return { imagesToDelete, newImages };\n  };\n\n\n  const fetchStudioImages = async (entityId) => {\n    setSelectedFiles([]);\n    setNewFiles([]);\n    setDeletedFiles([]);\n    try {\n      const folderPath = `${storageFolder}/${entityId}`;\n      console.log(folderPath)\n      const folderRef = ref(storage, folderPath);\n      const fileList = await listAll(folderRef);\n\n      const files = await Promise.all(\n        fileList.items.map(async (fileRef) => {\n          const downloadURL = await getDownloadURL(fileRef);\n\n          return {\n            id: fileRef.name,\n            filename: fileRef.name,\n            fileURL: downloadURL,\n          };\n        })\n      );\n      // console.log('File fetching',files);\n      setUploadedFiles(files); // Update the uploadedFiles state with fetched data\n      setSelectedFiles(files);\n    } catch (error) {\n      console.error('Error fetching user images:', error);\n    }\n  };\n\n  return (\n    <div className=\"fileupload-view\" style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\n      <div className=\"row justify-content-center m-0\" style={{ flex: '1',justifyContent: 'center' }}>\n        <div className=\"col-md-6\" style={{ flex: '1' ,justifyContent: 'center'}}>\n          <div className=\"card mt-5\">\n            <div className=\"card-body\" style={{ backgroundColor: isDarkModeOn ? '#333333' : 'white' }}>\n              <div className=\"kb-data-box\">\n                <div className=\"kb-modal-data-title\">\n                  <div className=\"kb-data-title\" style={{justifyContent:'center',flex: '1'}}>\n                    <h4>{title}</h4>\n                    <p>Max no of image(s):{maxImageCount} {storageFolder === STORAGES.STUDIOIMAGES && <p>Add at least 5 images</p>}</p>\n                  </div>\n                </div>\n                <form style={{  backgroundColor: isDarkModeOn ? '#333333' : 'white'}}>\n                  <div className=\"kb-file-upload\">\n                    <div className=\"file-upload-box\">\n                      <input\n                        type=\"file\"\n                        id=\"fileupload\"\n                        className=\"file-upload-input\"\n                        onChange={handleInputChange}\n                        multiple\n                      />\n\n                    </div>\n                  </div>\n                  <br></br>\n                  <div className=\"kb-attach-box mb-3\">\n                  <div className=\"row\">\n                    {entityId && selectedFiles.length > 0 ? (\n                      selectedFiles.map((file) => (\n                        \n                        <div key={file.id} className=\"col-6 col-md-3 mb-3\" style={{ position: 'relative' }}>\n                          \n                          <Card sx={{ maxWidth: 345 }}>\n                            {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                              <div style={{ position: 'relative' }}>\n                                <img\n                                  src={file.fileimage ? file.fileimage : file.fileURL}\n                                  alt={file.filename}\n                                  className=\"card-img-top\"\n                                  style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                                />\n                                <IconButton\n                                  aria-label=\"delete\"\n                                  disabled={disable}\n                                  onClick={() => handleDeleteSelectedFile(file.id)}\n                                  style={{ position: 'absolute', top: 0, right: 0, backgroundColor: 'rgba(255, 255, 255, 0.5)' }}\n                                >\n                                  <DeleteIcon style={{color:\"ff0000\"}}/>\n                                </IconButton>\n                              </div>\n                            ) : (\n                              <CardContent>\n                                <i className=\"far fa-file-alt\"></i>\n                              </CardContent>\n                            )}\n                          </Card>\n                        </div>\n                        \n                      ))\n                    ) : (\n                      <div className=\"col-12 text-center\">\n                        <p>No images selected</p>\n                      </div>\n                    )}\n                  </div>\n\n                  </div>\n\n                  \n                  <div className=\"kb-buttons-box\">\n                    <button\n                      type=\"button\"\n                      className=\"btn form-submit\"\n                      style={{ backgroundColor: isDarkModeOn ? '#892CDC' : 'black', color:'white'  }}\n                      onClick={handleUploadSubmit}\n                      disabled={disable}\n                    >\n                      Image Upload\n                    </button>\n                  </div>\n                </form>\n                {selectedFiles.length > 0 && (\n                  <div className=\"kb-attach-box\" hidden>\n                    <div className=\"row\">\n                    <hr />\n                    {selectedFiles.map((file) => (\n                      <div key={file.id} className=\"col-6 col-md-3 mb-3\">\n                      <div className=\"card\">\n                        {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                          <img\n                            src={file.fileimage}\n                            alt={file.filename}\n                            className=\"card-img-top\"\n                            style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                          />\n                        ) : (\n                          <div className=\"card-body\">\n                            <i className=\"far fa-file-alt\"></i>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n              { progressDelete >= 0 && (\n                    <div>\n                        <p style={{ color: isDarkModeOn ? '#fff' : '#000' }}>\n                            Deleting images... {progressDelete.toFixed(2)}%\n                        </p>\n                        <progress \n                            value={progressDelete} \n                            max=\"100\" \n                            style={{\n                                color: isDarkModeOn ? '#fff' : '#000'\n                            }}\n                        >\n                            {progressDelete.toFixed(2)}%\n                        </progress>\n                    </div>\n                )}\n\n                { progressUpdate >= 0 && (\n                    <div>\n                        <p style={{ color: isDarkModeOn ? '#fff' : '#000' }}>\n                            Uploading images... {progressUpdate.toFixed(2)}%\n                        </p>\n                        <progress \n                            value={progressUpdate} \n                            max=\"100\" \n                            style={{\n                                color: isDarkModeOn ? '#fff' : '#000'\n                            }}\n                        >\n                            {progressUpdate.toFixed(2)}%\n                        </progress>\n                    </div>\n                )}\n\n                            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Set default prop values\nImageUpload.defaultProps = {\n  maxImageCount: 5, // Default maximum image count\n  updateMode: false,\n  disable:false,\n};\n\nexport default ImageUpload;","\nimport React from 'react';\nimport AspectRatio from '@mui/joy/AspectRatio';\nimport Card from '@mui/joy/Card';\nimport CardContent from '@mui/joy/CardContent';\nimport Chip from '@mui/joy/Chip';\nimport Box from '@mui/joy/Box';\nimport Button from '@mui/material/Button';\nimport Link from '@mui/joy/Link';\nimport Typography from '@mui/joy/Typography';\nimport { Stack } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport { CHIP_LEVELS_DESIGN, COLORS, danceStylesColorChips } from '../constants';\nimport IconButton from '@mui/joy/IconButton';\nimport Favorite from '@mui/icons-material/Favorite';\n\n\nexport default function NStudioCard({img_src,data}) {\n    const isDarkModeOn = useSelector(selectDarkModeStatus);\n    \n    const studioId = data.id?data.id:data.studioId;\n\n    const cardStyle = {\n      backgroundColor: isDarkModeOn ? '#444' : 'white',\n      padding: '0px',\n      color: isDarkModeOn ? 'white' : 'black',\n      marginRight: \"10px\",\n      width: 320,\n      maxWidth: \"100%\",\n      boxShadow: 'lg',\n      transition: 'opacity 0.3s ease',\n    };\n  \n    const cardHoverStyle = {\n      transform: 'scale(1.01)',\n    };\n  \n  return (\n    <Card variant=\"solid\" sx={{\n      ...cardStyle,\n      '&:hover': cardHoverStyle,\n    }}>\n      \n        <AspectRatio ratio=\"1.78\" style={{ position: 'relative'}}>\n          <img\n            src={data && data.iconUrl ? data.iconUrl :\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}\n            loading=\"lazy\"\n            alt=\"Studio Image\"\n            style={{ maxWidth: '100%', height: 'auto', overflow: 'hidden' }}\n            \n          />\n          <Stack direction=\"row\" spacing={2} style={{ position: 'absolute', bottom: 0, left: 0, padding: '1px' }}>\n        {data && data.danceStyles && typeof data.danceStyles === 'string' ? (data.danceStyles.split(\",\").slice(0, 3).map((form, index) => (\n        <Chip\n            key={index}\n            color={index % 2 === 0 ? \"danger\" : \"success\"}  \n            sx={{ marginBottom: \"10px\", fontSize: '0.8rem',  \n                    bgcolor: danceStylesColorChips[index].backgroundColor,\n                    color: danceStylesColorChips[index].color, \n            }}\n        >\n            {form.trim()}\n        </Chip>\n        ))):(\n            <Chip\n            key={10}\n            color={10 % 2 === 0 ? \"danger\" : \"success\"} \n            style={{ marginBottom: \"10px\", fontSize: '0.8rem' }}\n        >\n            {\"No danceforms\"}\n        </Chip>\n        )}\n\n        </Stack>\n\n        <Stack\n            direction=\"row\"\n            spacing={2}\n            style={{ position: \"absolute\", top: 0, left: 0, padding: \"1px\", paddingTop: \"1px\" }}\n          >\n            {data && data.freeTrialAvailable &&(\n            \n                <Chip\n                  key={1}\n                 \n                  sx={{\n                    marginLeft: \"10px\",\n                    marginBottom: \"10px\",\n                    fontSize: \"0.8rem\",\n                    bgcolor: COLORS.LIME.backgroundColor,  // Set the background color\n                    color: COLORS.LIME.color,  // Set the text color\n                  }}\n                >\n                  {'Free Trial Available'}\n                </Chip>\n              \n            )}\n          </Stack>\n\n        </AspectRatio>\n      <CardContent style={{ padding: '10px' }}>\n        <Box display=\"flex\" justifyContent=\"space-between\" columnGap={1}>\n          <Link\n            alignSelf=\"center\"\n            href={`#/studio/${studioId}`}\n            fontWeight=\"bold\"\n            color=\"neutral\"\n            textColor=\"text.primary\"\n            underline='none'\n            overlay\n            whiteSpace='nowrap'\n            overflow='hidden'\n            textOverflow='ellipsis'\n            style={{ color: isDarkModeOn ? 'white' : 'black' }}\n          >\n            {data && data.studioName ? data.studioName : \"    \"}\n          </Link>\n          {data && data.avgRating && data.avgRating>0 ?\n            <Typography width={52} flexShrink={0} alignSelf=\"center\" style={{ color: isDarkModeOn ? 'white' : 'black' }}>\n              ⭐ {data.avgRating.toFixed(1)}\n            </Typography> : null\n          }\n        </Box>\n        <Typography style={{ color: isDarkModeOn ? 'white' : 'black' }} level=\"body-xs\">{data.street ? data.street : \".  \"}</Typography>\n        <IconButton\n          hidden\n          aria-label=\"Like minimal photography\"\n          size=\"md\"\n          variant=\"solid\"\n          color=\"danger\"\n          sx={{\n            position: 'absolute',\n            zIndex: 2,\n            borderRadius: '50%',\n            right: '1rem',\n            bottom: '2rem',\n            transform: 'translateY(50%)',\n          }}\n        >\n          <Favorite />\n        </IconButton>\n        <Box display=\"flex\" justifyContent=\"space-between\">\n          <Typography alignSelf=\"center\" fontSize={12} style={{ color: isDarkModeOn ? 'white' : 'black' }}>\n            {data && data.minFee && data.minFee>=0 &&(`@ ₹${data.minFee} onwards`)}\n          </Typography>\n          <Button\n            size='small'\n            variant=\"contained\"\n            sx={{\n              alignSelf: \"center\",\n              color: 'white',\n              backgroundColor: '#735EAB',\n              '&:hover': {\n                backgroundColor: '#735EAB',\n                color: 'white',\n              },\n              '&.Mui-disabled': {\n                backgroundColor: isDarkModeOn ? 'rgba(115, 94, 171, 0.5)' : 'rgba(115, 94, 171, 0.3)',\n                color: 'rgba(255, 255, 255, 0.5)',\n              },\n            }}\n            type='button'\n          >\n            Explore\n          </Button>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}","import React from 'react';\nimport { Modal, Form, Row, Col, Button } from 'react-bootstrap';\n\nconst TimeRangePicker = ({ show, handleClose, handleSelect, defaultTime }) => {\n  //console.log(\"TimeRangePicker\",defaultTime)\n  const startTime_i = defaultTime.split('-')[0].trim();\n  const endTime_i = defaultTime.split('-')[1]?.trim();\n\n  //console.log(startTime_i,endTime_i,defaultTime)\n\n  const generateTimeOptions = () => {\n    const options = [];\n    let option_AM = [];\n    let option_PM = [];\n    for (let hours = 0; hours < 24; hours++) {\n      for (let minutes = 0; minutes < 60; minutes += 15) {\n        const formattedHours = hours.toString().padStart(2, '0');\n        const formattedMinutes = minutes.toString().padStart(2, '0');\n        const timeString = `${formattedHours}:${formattedMinutes}`;\n  \n        if (hours < 12) {\n          option_AM.push(`${timeString} AM`);\n        } else {\n          const formattedHours12 = (hours - 12).toString().padStart(2, '0');\n          option_PM.push(`${formattedHours12}:${formattedMinutes} PM`);\n        }\n      }\n    }\n\n    for (let i = 0; i < option_AM.length || i < option_PM.length; i++) {\n      if (i < option_AM.length) {\n        options.push(option_AM[i]);\n      }\n      if (i < option_PM.length) {\n        options.push(option_PM[i]);\n      }\n    }\n    \n\n  \n    return options;\n  };\n  \n\n  const renderTimeOptions = (defaultValue) => {\n    console.log(defaultValue);\n    const timeOptions = generateTimeOptions();\n  \n    return (\n      <>\n        <option value={defaultValue}>{defaultValue}</option>\n        {timeOptions.map((option) => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </>\n    );\n  };\n  \n  \n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Select Time</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col>\n          <Form.Group >\n          <Form.Label >\n            Start Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(e.target.value, null)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(startTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n          <Col>\n          <Form.Group>\n          <Form.Label >\n            End Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(null, e.target.value)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(endTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={handleClose}>Save</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default TimeRangePicker;\n","import React, { useState } from 'react';\nimport { Form, Table, Button } from 'react-bootstrap';\nimport { FaPlus, FaMinus } from 'react-icons/fa';\nimport './StudioTable.css'; // Import the CSS file for styling\nimport  TimeRangePicker from './TimeRangePicker';\nimport danceStyles from '../danceStyles.json';\nimport { Autocomplete, TextField } from '@mui/material';\n\nimport { MultiSelect } from 'primereact/multiselect';\nimport \"primereact/resources/primereact.css\";\nimport \"primereact/resources/themes/saga-blue/theme.css\";\n\nconst daysOfWeek = ['M','T','W','Th','F','St','Sn'];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\"\n};\n\nfunction StudioTable({ tableData = [], setTableData, instructorNamesWithIds }) {\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const danceStylesOptions = danceStyles.danceStyles;\n  const [defaultTime, setDefaultTime] =  useState('12:00 PM - 01:00 PM')\n\n  const handleAddRow = () => {\n    setTableData((prevData) => [...prevData, { className: '', danceForms: '', days: '', time: '12:00 PM - 01:00 PM', instructors: [], fee:'',level:'' ,status: '',freeTrial: false, classCategory: []  }]);\n  };\n\n  const handleRemoveRow = (index) => {\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      newData.splice(index, 1);\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if(field===\"days\"){\n        value = Array.isArray(value) ? value.join(',') : value; \n      }\n      console.log(tableData)\n      const newData = [...prevData];\n      newData[index][field] = value;\n      return newData;\n    });\n  };\n\n  const handleTimePickerOpen = (index,time) => {\n    setDefaultTime(time)\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null); // Reset selected row index when closing time picker\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      \n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n    \n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(' - ');\n    \n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n      \n      return newData;\n    });\n  \n    setSelectedRow(selectedRowIndex);\n\n  };\n\n  return (\n    <>\n      <Table bordered variant=\"light\">\n        <thead>\n          <tr style={{border: '1px solid black'}}>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Name</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Dance Form</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Days</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Time</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'20rem', border: '1px solid black'}}>Instructors</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Fee (₹)</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Level</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Free Trial</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Category</th>\n            <th style={{padding:'0rem'}}>\n              <Button variant=\"primary\" onClick={handleAddRow}>\n                <FaPlus />\n              </Button>\n            </th>\n          </tr>\n        </thead>\n        <tbody style={{border: '1px solid black'}}>\n          {tableData.map((row, index) => (\n            <tr key={index} className={selectedRow === index ? 'selected-row' : ''}>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  type=\"text\"\n                  value={row.className}\n                  onChange={(e) => handleTableChange(index, 'className', e.target.value)}\n                  \n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n              < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.danceForms}\n                  onChange={(e) => handleTableChange(index, 'danceForms', e.target.value)}\n                >\n                  <option value=\"\">Select a dance form</option>\n                  {danceStylesOptions.map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </Form.Control>\n\n              </td>\n              \n              <td style={{ padding:'0rem',minWidth:'15rem', border: '1px solid black'}} className=\"m-0 p-0\">\n                <MultiSelect value={row.days && row.days.split(',').filter(day => day !== '') } \n                    onChange={(event) => handleTableChange(index, 'days', event.target.value)}\n                    options={daysOfWeek}\n                    placeholder=\"class days\" maxSelectedLabels={7} className=\"w-full md:w-20rem\"\n                  />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.time}\n                  //onClick={() => handleTimePickerOpen(index,row.time)}\n                  onClick={() => handleTimePickerOpen(index,row.time)}\n                  \n                />\n                {showTimePicker && (\n                <TimeRangePicker\n                  show={showTimePicker}\n                  handleClose={handleTimePickerClose}\n                  handleSelect={handleTimeSelect}\n                  defaultTime={tableData[selectedRowIndex]?.time || \"00:00-00:00\"}\n                />\n              )}\n\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black', width:'20rem'}}>\n                <Autocomplete\n                  multiple\n                  id=\"tags-standard\"\n                  options={instructorNamesWithIds}\n                  value={row.instructors}\n                  onChange={(_, values) => handleTableChange(index, 'instructors', values)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Instructors\"\n                    />\n                  )}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.fee}\n                  onChange={(e) => handleTableChange(index, 'fee', e.target.value)}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.level}\n                  onChange={(e) => handleTableChange(index, 'level', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value=\"Beginner\">Beginner</option>\n                      <option value=\"Intermediate\">Intermediate</option>\n                      <option value=\"Advanced\">Advanced</option>\n                      <option value=\"Misc\">Misc</option>\n\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.freeTrial}\n                  onChange={(e) => handleTableChange(index, 'freeTrial', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value={true}>Yes</option>\n                      <option value={false}>No</option>\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem', width:'20rem'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.classCategory[0] || \"\"}\n                  onChange={(e) => handleTableChange(index, 'classCategory', [e.target.value])}\n                >\n                  <option value=\"\">Select Class Category</option>\n                  {Object.values(categoryMap).map((value, idx) => <option key={idx} value={value}>{value}</option>)}\n                </Form.Control>\n              </td>\n              <td style={{padding:'0rem'}}>\n                <Button variant=\"danger\" onClick={() => handleRemoveRow(index)}>\n                  <FaMinus />\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>      \n    </>\n  );\n}\n\nexport default StudioTable;\n\n/*\n                <Autocomplete\n                  multiple\n                  id={`days-autocomplete-${index}`}\n                  options={daysOfWeekOptions}\n                  getOptionLabel={(option) => option.value}\n                  value={row.days.split(',').filter(day => day !== '').map(day => daysOfWeekOptions.find(option => option.value === day))}\n                  onChange={(event, newValue) => handleTableChange(index, 'days', newValue.map(option => option.value).join(','))}\n                  renderInput={(params) => <TextField sx={{color:\"black\",backgroundColor:\"white\",width:\"100%\"}} {...params} />}\n                />\n              */","import React, { useState, useEffect }from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { LoadScript } from '@react-google-maps/api';\nimport { FaMapMarkerAlt } from 'react-icons/fa';\n\nconst libraries = ['places'];\n\nfunction MapsInput({selectedLocation, setSelectedLocation}) {\n    const [center, setCenter] = useState(selectedLocation? selectedLocation:{ lat: 0, lng: 0 });\n    const [address, setAddress] = useState('');\n  \n    const apiKey = \"AIzaSyAAPq5IMotbu90TZAEtyj8qgYyVJoROzsQ\"; // Replace with your API Key\n   //console.log(\"selectedLocation got in MapsInput\",selectedLocation,\"----\",center)\n    const handleSelect = async (selectedAddress) => {\n      const results = await geocodeByAddress(selectedAddress);\n      const latLng = await getLatLng(results[0]);\n  \n      setAddress(selectedAddress);\n      setCenter(latLng);\n      setSelectedLocation(latLng);\n      //console.log(latLng,\"---\",selectedLocation,'---',center,'---',address)\n    };\n\n    useEffect(() => {\n      // Check if selectedLocation is null and set it to Delhi's coordinates\n      //console.log(selectedLocation)\n      if (!selectedLocation) {\n        //console.log(\"Location changing !selectedLocation\",selectedLocation)\n      }else{\n        //console.log(\"Location changing\",selectedLocation)\n        setCenter(selectedLocation)\n        //setSelectedLocation()\n      }\n      //console.log(center,address,selectedLocation)\n    }, [selectedLocation]);\n  \n    return (\n        <LoadScript\n            googleMapsApiKey={apiKey}\n            libraries={libraries}\n            >\n      <div>\n        <div>\n        <br></br>\n        \n        <PlacesAutocomplete\n          value={address}\n          onChange={(newAddress) => setAddress(newAddress)}\n          onSelect={handleSelect}\n          >\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n            <div>\n              <input\n                {...getInputProps({\n                  placeholder: 'Enter address...',\n                  className: 'location-search-input',\n                  style: { // Add inline styles for the input element\n                    height: '40px', // Adjust the height as needed\n                    fontSize: '16px', // Adjust the font size as needed\n                    width: '100%',\n                  },\n                })}\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {loading && <div>Loading...</div>}\n                {suggestions.map((suggestion) => {\n                  const className = suggestion.active\n                    ? 'suggestion-item--active'\n                    : 'suggestion-item';\n                  return (\n                    <div\n                      {...getSuggestionItemProps(suggestion, {\n                        className,\n                      })}\n                    >\n                      <span>{suggestion.description}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </PlacesAutocomplete>\n          <br></br>\n        </div>\n        <div style={{ height: '400px', width: '100%' }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{ key: apiKey }}\n            defaultCenter={center}\n            center={center}\n            defaultZoom={16}\n            onClick={({ lat, lng }) => {\n              setSelectedLocation({ lat, lng });\n            }}\n          >\n            { (\n              <PinMarker\n              lat={selectedLocation && selectedLocation.lat ? selectedLocation.lat: 0}\n              lng={selectedLocation && selectedLocation.lng ? selectedLocation.lng: 0}\n              text=\"Selected Location\"\n            />\n            )}\n          </GoogleMapReact>\n        </div>\n      </div>\n      </LoadScript>\n    );\n}\n\nconst PinMarker = () => (\n    <div style={{ position: 'relative', textAlign: 'center' }}>\n      <FaMapMarkerAlt style={{ color: 'green', fontSize: '24px' }} />\n    </div>\n  );\n\nexport default MapsInput\n","import React from 'react';\n\nconst SuccessMessage = ({ StudioId }) => {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-12\"> {/* Change col-md-5 to col-md-12 */}\n          <div className=\"_success message-box\">\n            <i className=\"fa fa-check-circle\" aria-hidden=\"true\"></i>\n            <h3>Your Studio registration was successful</h3>\n            <p>{StudioId} is now registered 🎉</p>\n          </div>\n        </div>\n      </div>\n      <hr />\n\n      <style jsx>{`\n        ._success {\n          padding: 45px;\n          width: 100%;\n          text-align: center;\n          margin: 30px auto;\n        }\n\n        ._success i {\n          font-size: 55px;\n          color: #28a745;\n        }\n\n        ._success h2 {\n          margin-bottom: 12px;\n          font-size: 30px;\n          font-weight: 300;\n          line-height: 1.2;\n          margin-top: 10px;\n        }\n\n        ._success p {\n          margin-bottom: 0px;\n          font-size: 18px;\n          color: #495057;\n          font-weight: 100;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SuccessMessage;\n","import { useSelector } from \"react-redux\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport { Button as MuiButton } from \"@mui/material\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\n\nconst generateTimeOptions = () => {\n  const options = [];\n  let option_AM = [];\n  let option_PM = [];\n  for (let hours = 0; hours < 24; hours++) {\n    for (let minutes = 0; minutes < 60; minutes += 15) {\n      const formattedHours = hours.toString().padStart(2, \"0\");\n      const formattedMinutes = minutes.toString().padStart(2, \"0\");\n      const timeString = `${formattedHours}:${formattedMinutes}`;\n\n      if (hours < 12) {\n        option_AM.push(`${timeString} AM`);\n      } else {\n        const formattedHours12 = (hours === 12 ? 12 : hours - 12)\n          .toString()\n          .padStart(2, \"0\");\n        option_PM.push(`${formattedHours12}:${formattedMinutes} PM`);\n      }\n    }\n  }\n\n  for (let i = 0; i < option_AM.length || i < option_PM.length; i++) {\n    if (i < option_AM.length) {\n      options.push(option_AM[i]);\n    }\n    if (i < option_PM.length) {\n      options.push(option_PM[i]);\n    }\n  }\n\n  return options;\n};\n\nconst renderTimeOptions = (defaultValue) => {\n  const timeOptions = generateTimeOptions();\n  return (\n    <>\n      <option value={defaultValue}>{defaultValue}</option>\n      {timeOptions.map((option) => (\n        <option key={option} value={option}>\n          {option}\n        </option>\n      ))}\n    </>\n  );\n};\n\nconst StudioWeeklyTimings = ({ timings, setTimings }) => {\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n\n  const handleSelect = (day, index, type, value) => {\n    const updatedDayTimings = [...timings[day]];\n    updatedDayTimings[index][type] = value;\n    setTimings({ ...timings, [day]: updatedDayTimings });\n  };\n\n  const addTimeSlot = (day) => {\n    const updatedDayTimings = [...timings[day], { open: \"09:00 AM\", close: \"06:00 PM\" }];\n    setTimings({ ...timings, [day]: updatedDayTimings });\n  };\n\n  const removeTimeSlot = (day, index) => {\n    const updatedDayTimings = [...timings[day]];\n    if (updatedDayTimings.length > 1) {\n      updatedDayTimings.splice(index, 1);\n      setTimings({ ...timings, [day]: updatedDayTimings });\n    }\n  };\n\n  return (\n    <Row className=\"gy-3\">\n      {Object.entries(timings).map(([day, slots]) => (\n        <Col xs={12} sm={6} md={4} lg={3} key={day}>\n          <span className=\"mb-3\" style={{ fontWeight: 'bold' }}>{day.charAt(0).toUpperCase() + day.slice(1)}</span>\n          {slots.map((slot, index) => (\n            <Row key={index} className=\"mb-2 align-items-center\">\n              <Col xs={5}>\n                <Form.Group>\n                  <Form.Label>Start Time</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    value={slot.open}\n                    onChange={(e) =>\n                      handleSelect(day, index, \"open\", e.target.value)\n                    }\n                    style={{\n                      height: \"auto\",\n                      lineHeight: \"1.5em\",\n                      padding: \"8px\",\n                      color: isDarkModeOn ? 'white' : '#333333',\n                      backgroundColor: isDarkModeOn ? '#333333' : 'white'\n                    }}\n                  >\n                    {renderTimeOptions(slot.open)}\n                  </Form.Control>\n                </Form.Group>\n              </Col>\n              <Col xs={5}>\n                <Form.Group>\n                  <Form.Label>End Time</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    value={slot.close}\n                    onChange={(e) =>\n                      handleSelect(day, index, \"close\", e.target.value)\n                    }\n                    style={{\n                      height: \"auto\",\n                      lineHeight: \"1.5em\",\n                      padding: \"8px\",\n                      color: isDarkModeOn ? 'white' : '#333333',\n                      backgroundColor: isDarkModeOn ? '#333333' : 'white'\n                    }}\n                  >\n                    {renderTimeOptions(slot.close)}\n                  </Form.Control>\n                </Form.Group>\n              </Col>\n              <Col xs={2}>\n                <Button\n                  variant=\"danger\"\n                  size=\"sm\"\n                  onClick={() => removeTimeSlot(day, index)}\n                  className=\"mt-4\"\n                >\n                  -\n                </Button>\n              </Col>\n            </Row>\n          ))}\n          <MuiButton\n            variant=\"contained\"\n            onClick={() => addTimeSlot(day)}\n            sx={{\n              color: isDarkModeOn ? 'black' : 'white',\n              bgcolor: isDarkModeOn ? 'white' : 'black',\n              '&:hover': { bgcolor: isDarkModeOn ? 'white' : 'black', }\n            }}\n          >\n            Add Time Slot\n          </MuiButton>\n        </Col>\n      ))}\n    </Row>\n  );\n};\n\nexport default StudioWeeklyTimings;\n","import React, { useRef } from 'react'\nimport { Row, Col , Form } from 'react-bootstrap';\nimport {LinearProgress, Button as MuiButton} from '@mui/material';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,addDoc,updateDoc,collection,where,getDocs,query, deleteDoc } from \"firebase/firestore\";\nimport { COLLECTIONS, DRAFT_COLLECTIONS } from '../constants';\nimport StudioTable from './StudioTable';\nimport ImageUpload from './ImageUpload';\nimport { STORAGES } from '../constants';\nimport MapsInput from './MapsInput';\nimport { useSelector} from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport indianCities from '../cities.json';\nimport indianStates from '../states.json';\nimport danceStyles from '../danceStyles.json';\nimport { AMENITIES_ICONS } from '../constants';\nimport {Autocomplete,TextField} from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport {Stepper,Step,StepLabel} from '@mui/material';\nimport SuccessMessage from './SucessPage';\nimport { postData } from '../utils/common';\nimport { isEqual } from 'lodash';\nimport StudioWeeklyTimings from './StudioWeeklyTiming';\nimport { useSnackbar } from '../context/SnackbarContext';\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nconst initialStudioTimings = {\n  monday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  tuesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  wednesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  thursday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  friday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  saturday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  sunday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n}\n\nconst DRAFT_INTERVAL_TIME = 1000 * 10;\n\nfunction StudioAdd({instructors}) {\n    const previousDraftState = useRef(null);\n    const showSnackbar = useSnackbar();\n    const [newStudioId, setNewStudioId] = useState(\"\")\n    const [tableData, setTableData] = useState(\n      [{ className: '', danceForms: '', days: '', time: '', instructors: [], fee:'',level:'' ,status: '' ,freeTrial:false ,classCategory: []}],\n    );\n    const [selectedLocation, setSelectedLocation] = useState(null);\n    const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n    const [selectedInstructors, setSelectedInstructors] = useState([]);\n    const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n    const [selectedAmenities, setSelectedAmenities] = useState([]);\n    const instructorNamesWithIds = instructors.map((instructor) => `${instructor.name} - ${instructor.id}`);\n    const [isReady, setIsReady] = useState(false);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [timings, setTimings] = useState(initialStudioTimings);\n\n    //const [dropdownVisible, setDropdownVisible] = useState(false);\n    const locationOptions = indianCities.cities;\n    const stateOptions = indianStates.states;\n    const danceStylesOptions = danceStyles.danceStyles;\n    const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n    const [activeStep, setActiveStep] = useState(0);\n\n    const handleNext = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n\n    const darkTheme = createTheme({\n      palette: {\n        mode: isDarkModeOn?'dark':'light',\n      },\n    });\n\n    const handleDanceStylesChange = (event, value) => {\n      setSelectedDanceStyles(value);\n    };  \n\n    const handleAmentiesChange = (event, value) => {\n      setSelectedAmenities(value);\n    };\n\n    const handleInstructorChange = (event, value) => {\n      setSelectedInstructors(value);\n    };\n\n    const resetDraft = async () => {\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n\n          await deleteDoc(studioRef);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n      const handleAddStudio = async (event) => {\n        event.preventDefault();\n        const title = event.target.studioName.value;\n        if (!title) {\n          return;\n        }\n        let isPremium=true\n        const newData = tableData.reduce((accumulator, current, index) => {\n          accumulator[index] = current;\n          return accumulator;\n        }, {});\n\n        try {\n          const currentUserEmail = JSON.parse(localStorage.getItem(\"userInfo\"))?.email;\n          const studioData = {\n              studioName: event.target.studioName.value,\n              aboutStudio: event.target.aboutStudio.value,\n              founderName: event.target.founderName.value,\n              aboutFounder: event.target.aboutFounder.value,\n              mobileNumber: event.target.mobileNumber.value,\n              whatsappNumber: event.target.whatsappNumber.value,\n              mailAddress: event.target.mailAddress.value,\n              danceStyles: selectedDanceStyles.join(\",\"),\n              numberOfHalls: event.target.numberOfHalls.value,\n              maximumOccupancy: event.target.maximumOccupancy.value,\n              instructorsNames: selectedInstructors,\n              status: 'OPEN',\n              tableData: newData,\n              buildingName: event.target.buildingName.value,\n              street: event.target.street.value,\n              city: event.target.city.value,\n              landmark: event.target.landmark.value,\n              pincode: event.target.pincode.value,\n              state: event.target.state.value,\n              country: \"India\",\n              geolocation : selectedLocation,\n              gstNumber: event.target.gstNumber.value,\n              enrolledId:[],\n              reviews:[],\n              author: JSON.parse(localStorage.getItem('userInfo')).displayName,\n              UserId: JSON.parse(localStorage.getItem('userInfo')).UserId,\n              isPremium: isPremium,\n              addAmenities: selectedAmenities.join(\",\"),\n              enrollmentProcess: encodeToUnicode(event.target.enrollmentProcess.value),\n              creatorEmail: currentUserEmail,\n              instagram: event.target.instagram.value,\n              facebook: event.target.facebook.value,\n              youtube: event.target.youtube.value,\n              twitter: event.target.twitter.value,\n              visibilty:1,\n              timings\n          };\n            setIsSubmitting(true);\n            const notifyEmails = currentUserEmail\n            const metaData = {\n              entity_name: studioData.studioName,\n              city: studioData.city ,\n            }\n            const response = await postData(studioData,COLLECTIONS.STUDIO, notifyEmails, metaData) ;\n            if (response.ok) {\n              const result = await response.json();\n              setNewStudioId(result.id)\n              resetDraft();\n              handleNext();\n            }\n        } catch (error) {\n          console.error(\"Error adding studio: \", error);\n        } finally {\n          setIsSubmitting(false);\n        }\n      };\n\n  const saveDraft = async () => {\n    const form = document.getElementById(\"addStudioForm\");\n\n    try {\n      const q = query(\n        collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n        where(\n          \"UserId\",\n          \"==\",\n          JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n        )\n      );\n  \n      const querySnapshot = await getDocs(q);\n  \n      if (!querySnapshot.empty) {\n        let studios = [];\n  \n        querySnapshot.forEach((doc) => {\n          studios.push({ id: doc.id, ...doc.data() });\n        });\n  \n        let foundStudio = studios[0];\n  \n        const studioRef = doc(\n          db,\n          DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n          foundStudio.id\n        );\n  \n        const newData = tableData.reduce((accumulator, current, index) => {\n          accumulator[index] = current;\n          return accumulator;\n        }, {});\n  \n        const currentState = {\n          studioName: form.studioName.value,\n          aboutStudio: form.aboutStudio.value,\n          founderName: form.founderName.value,\n          aboutFounder: form.aboutFounder.value,\n          mobileNumber: form.mobileNumber.value,\n          whatsappNumber: form.whatsappNumber.value,\n          mailAddress: form.mailAddress.value,\n          danceStyles: selectedDanceStyles.join(\",\"),\n          numberOfHalls: form.numberOfHalls.value,\n          maximumOccupancy: form.maximumOccupancy.value,\n          instructorsNames: selectedInstructors,\n          status: \"OPEN\",\n          tableData: newData,\n          buildingName: form.buildingName.value,\n          street: form.street.value,\n          city: form.city.value,\n          landmark: form.landmark.value,\n          pincode: form.pincode.value,\n          state: form.state.value,\n          country: \"India\",\n          geolocation: selectedLocation,\n          gstNumber: form.gstNumber.value,\n          enrolledId: [],\n          reviews: [],\n          author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n          UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n          isPremium: true,\n          addAmenities: selectedAmenities.join(\",\"),\n          enrollmentProcess: encodeToUnicode(form.enrollmentProcess.value),\n          creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\")).email,\n          instagram: form.instagram.value,\n          facebook: form.facebook.value,\n          youtube: form.youtube.value,\n          twitter: form.twitter.value,\n          visibilty: 1,\n          timings,\n        };\n\n        if (!isEqual(previousDraftState.current, currentState)) {\n          await updateDoc(studioRef, currentState);\n          previousDraftState.current = currentState;\n          showSnackbar(\"Draft saved successfully!\", \"success\");\n        } else {\n          showSnackbar(\"No changes detected to save.\", \"info\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error saving draft: \", error);\n    }\n  };\n\n  useEffect(() => {\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          form.studioName.value = foundStudio.studioName;\n          form.aboutStudio.value = foundStudio.aboutStudio;\n          form.founderName.value = foundStudio.founderName;\n          form.aboutFounder.value = foundStudio.aboutFounder;\n          form.mobileNumber.value = foundStudio.mobileNumber;\n          form.whatsappNumber.value = foundStudio.whatsappNumber;\n          form.mailAddress.value = foundStudio.mailAddress;\n          setSelectedDanceStyles(\n            foundStudio.danceStyles.length\n              ? foundStudio.danceStyles.split(\",\")\n              : []\n          );\n          form.numberOfHalls.value = foundStudio.numberOfHalls;\n          form.maximumOccupancy.value = foundStudio.maximumOccupancy;\n          setSelectedInstructors(foundStudio.instructorsNames);\n          form.buildingName.value = foundStudio.buildingName;\n          form.street.value = foundStudio.street;\n          form.city.value = foundStudio.city;\n          form.landmark.value = foundStudio.landmark;\n          form.pincode.value = foundStudio.pincode;\n          form.state.value = foundStudio.state;\n          setSelectedLocation(foundStudio.geolocation);\n          // form.aadharNumber.value = foundStudio.aadharNumber;\n          form.gstNumber.value = foundStudio.gstNumber;\n          setTableData(Object.values(foundStudio.tableData));\n          setSelectedAmenities(\n            foundStudio.addAmenities.length\n              ? foundStudio.addAmenities.split(\",\")\n              : []\n          );\n          form.enrollmentProcess.value = decodeUnicode(\n            foundStudio.enrollmentProcess\n          );\n          form.instagram.value = foundStudio.instagram;\n          form.facebook.value = foundStudio.facebook;\n          form.youtube.value = foundStudio.youtube;\n          form.twitter.value = foundStudio.twitter;\n          if (foundStudio?.timings?.length) setTimings(foundStudio.timings);\n        } else {\n          await addDoc(collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS), {\n            studioName: form.studioName.value,\n            aboutStudio: form.aboutStudio.value,\n            founderName: form.founderName.value,\n            aboutFounder: form.aboutFounder.value,\n            mobileNumber: form.mobileNumber.value,\n            whatsappNumber: form.whatsappNumber.value,\n            mailAddress: form.mailAddress.value,\n            danceStyles: selectedDanceStyles.join(\",\"),\n            numberOfHalls: form.numberOfHalls.value,\n            maximumOccupancy: form.maximumOccupancy.value,\n            instructorsNames: selectedInstructors,\n            status: \"OPEN\",\n            tableData: {\n              0: {\n                className: \"\",\n                danceForms: \"\",\n                days: \"\",\n                time: \"\",\n                instructors: [],\n                fee: \"\",\n                level: \"\",freeTrial:false, \n                classCategory: []\n              },\n            },\n            buildingName: form.buildingName.value,\n            street: form.street.value,\n            city: form.city.value,\n            landmark: form.landmark.value,\n            pincode: form.pincode.value,\n            state: form.state.value,\n            country: \"India\",\n            geolocation: selectedLocation,\n            \n            gstNumber: form.gstNumber.value,\n            enrolledId: [],\n            reviews: [],\n            author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n            UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n            isPremium: true,\n            addAmenities: selectedAmenities.join(\",\"),\n            enrollmentProcess: encodeToUnicode(form.enrollmentProcess.value),\n            creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\")).email,\n            instagram: form.instagram.value,\n            facebook: form.facebook.value,\n            youtube: form.youtube.value,\n            twitter: form.twitter.value,\n            visibilty: 1,\n            timings\n          });\n        }\n\n        setIsReady(true);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    main();\n  }, []);\n\n  useEffect(() => {\n    let intervalId = null;\n    let previousState = null; \n\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n          \n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n          \n          intervalId = setInterval(async () => {\n            \n            try {\n              const newData = tableData.reduce((accumulator, current, index) => {\n                accumulator[index] = current;\n                return accumulator;\n              }, {});\n              const currentState = { \n                studioName: form.studioName.value,\n                aboutStudio: form.aboutStudio.value,\n                founderName: form.founderName.value,\n                aboutFounder: form.aboutFounder.value,\n                mobileNumber: form.mobileNumber.value,\n                whatsappNumber: form.whatsappNumber.value,\n                mailAddress: form.mailAddress.value,\n                danceStyles: selectedDanceStyles.join(\",\"),\n                numberOfHalls: form.numberOfHalls.value,\n                maximumOccupancy: form.maximumOccupancy.value,\n                instructorsNames: selectedInstructors,\n                status: \"OPEN\",\n                tableData: newData,\n                buildingName: form.buildingName.value,\n                street: form.street.value,\n                city: form.city.value,\n                landmark: form.landmark.value,\n                pincode: form.pincode.value,\n                state: form.state.value,\n                country: \"India\",\n                geolocation: selectedLocation,\n                \n                gstNumber: form.gstNumber.value,\n                enrolledId: [],\n                reviews: [],\n                author: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .displayName,\n                UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n                isPremium: true,\n                addAmenities: selectedAmenities.join(\",\"),\n                enrollmentProcess: encodeToUnicode(\n                  form.enrollmentProcess.value\n                ),\n                creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .email,\n                instagram: form.instagram.value,\n                facebook: form.facebook.value,\n                youtube: form.youtube.value,\n                twitter: form.twitter.value,\n                visibilty: 1,\n                timings\n              }\n              \n              // Check if the current state is different from the previous state\n              if (!isEqual(previousState, currentState)) {\n                try {\n                  await updateDoc(studioRef, currentState);\n                  previousState = currentState; // Update previous state after successful save\n                  console.log(\"Next AutoSave in\",DRAFT_INTERVAL_TIME)\n                } catch (error) {\n                  console.error(error);\n                }\n              }else{\n                console.log(\"Nothing for Autosave to save\")\n            }\n\n            } catch (error) {\n              console.error(error);\n            }\n          }, DRAFT_INTERVAL_TIME);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    if (isReady) main();\n\n    return () => clearInterval(intervalId);\n  }, [\n    isReady,\n    selectedDanceStyles,\n    selectedInstructors,\n    tableData,\n    selectedLocation,\n    selectedAmenities,\n  ]);\n\n  return (\n    <div >\n          <Stepper activeStep={activeStep} alternativeLabel>\n            {['Basic Studio & Owner details', 'Instructors, Classes & Social Media', 'Address & Registration', 'Studio Icon', 'Studio & Class Images'].map((label) => (\n              <Step key={label}>\n                <StepLabel ><p style={{color:isDarkModeOn?\"white\":\"black\"}}>{label}</p></StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          \n            < div hidden={activeStep > 2} >\n            <Form id=\"addStudioForm\" onSubmit={handleAddStudio} style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n              <Form.Group controlId=\"formBasicAdd\">\n             \n                  <div hidden={activeStep !== 0}>\n                  <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Basic Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Studio Name</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"studioName\" />\n                \n                <Form.Label>About Studio</Form.Label>\n                <Form.Control rows={6} style={{  minHeight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio's details\" name=\"aboutStudio\" />\n                \n                </Col>\n                <Col md={6}>\n                <Form.Label>Founder's Name</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter founder name\" name=\"founderName\" />\n                \n                <Form.Label>About Founder</Form.Label>\n                <Form.Control rows={6} style={{  minheight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter founder's details\" name=\"aboutFounder\" />\n                \n                </Col>\n                </Row>\n                <hr></hr>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Contact Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Mobile Number</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter mobile number\" name=\"mobileNumber\" type=\"number\"  />\n\n                <Form.Label>WhatsApp Number</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter whatsapp number\" name=\"whatsappNumber\" type=\"number\"  />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Mail Address</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"email\" rows={1} placeholder=\"Enter mail address\" name=\"mailAddress\" />\n                \n                  </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Details</h3>\n                <Row>\n                  <Col md={6}>\n                <Form.Label >Dance Styles</Form.Label>\n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                <Form.Label>Number of Hall(s)</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Number of Hall(s)\" name=\"numberOfHalls\" type=\"number\" />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Maximum Occupancy</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}  rows={1} placeholder=\"Maximum Occupancy\" name=\"maximumOccupancy\" type=\"number\"   />\n                </Col>\n                </Row>\n                <br></br>\n                <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}} disabled >\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end gap-3\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={saveDraft}>\n                      Save to Draft\n                    </MuiButton>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                  \n                  </div>\n\n\n               \n              \n                <div hidden={activeStep !== 1}>\n\n\n                \n            <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Instructor Details</h3>\n                <Form.Label>Names of Instructors</Form.Label>\n                <Row>\n                  <ThemeProvider theme={darkTheme}>\n                    <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={instructorNamesWithIds}\n                      value={selectedInstructors}\n                      onChange={handleInstructorChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Instructors\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                  </ThemeProvider>\n                </Row> \n                <a href=\"#/modifyInstructors\" rel=\"noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', color: isDarkModeOn ? 'cyan' : 'blue' }}>\n                      Go to Instrcutors' Add/update Page? \n                    </a>\n                <hr></hr>   \n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Class Schedule</h3>\n                  <span>Time Table Of dance classes</span>\n                    <div style={{ overflowX: 'auto', whiteSpace: 'nowrap', scrollbarColor: isDarkModeOn ? '#888 #333' : '#ccc #fff', }}>\n                      <StudioTable\n                        tableData={tableData}\n                        setTableData={setTableData}\n                        instructorNamesWithIds={instructorNamesWithIds}\n                      />\n                    </div>\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Additional Details</h3>\n                <Row>\n                <Col md={4}>\n                  <Form.Label>GST Number</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"GST Number\" name=\"gstNumber\" />\n                  \n                  \n                </Col>\n                <Col md={8}>\n                <Form.Label>Add Amenities</Form.Label>\n                  \n                  <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={amenityKeys}\n                  value={selectedAmenities}\n                  onChange={handleAmentiesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Amenities\"\n                      style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                </Col>\n                </Row>\n                <Row>\n                <Form.Label>Enrollment Process</Form.Label>\n                  <Form.Control rows={12} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enrollment Process\" name=\"enrollmentProcess\" />\n          \n                </Row>\n\n                <h3 style={{ margin: '12px 0', backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Timings</h3>\n                <StudioWeeklyTimings timings={timings} setTimings={setTimings} />\n\n                <h3 style={{ margin: '32px 0 0 0', backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Social Media Links</h3>\n               <Row>\n               <Col md={4}>\n                  <Form.Label>Instagram</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Instagram Link\" name=\"instagram\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Facebook</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Facebook Link\" name=\"facebook\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>YouTube</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"YouTube Link\" name=\"youtube\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Twitter</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Twitter Link\" name=\"twitter\" />\n                </Col>\n\n               </Row>\n\n               <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end gap-3\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={saveDraft}>\n                      Save to Draft\n                    </MuiButton>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n              </div>\n\n               \n                <div hidden={activeStep !== 2}>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Address Details</h3>\n                <Row>\n                  <Col md={6}>\n                  <Form.Label>Building Name</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter building name\" name=\"buildingName\" />\n\n                <Form.Label>Street</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter street\" name=\"street\" />\n                <Form.Label>City</Form.Label>\n                <Form.Control as=\"select\" style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black', height: 'auto', // Let it adjust to content\n                    lineHeight: '1.5em', // Mimics rows={1}\n                    padding: '8px', }} name=\"city\">\n                    <option value=\"\">Select a city</option>\n                    {locationOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n\n                </Col>\n                <Col md={6}>\n                  <Form.Label>Landmark</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter landmark\" name=\"landmark\" />\n\n                <Form.Label>Pincode</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter pincode\" name=\"pincode\" type=\"number\"  />\n               \n                <Form.Label>State</Form.Label>\n                <Form.Control as=\"select\" style={{ padding: \"0 1.5rem\", backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter state\" name=\"state\">\n                <option value=\"\">Select a State</option>\n                    {stateOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n               \n                </Col>\n\n                <Form.Label>Save exact Address</Form.Label>\n                <MapsInput selectedLocation={selectedLocation} setSelectedLocation={setSelectedLocation}></MapsInput>\n                \n                </Row>\n                \n\n                \n              <br></br>\n\n              <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end gap-3\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={saveDraft}>\n                      Save to Draft\n                    </MuiButton>\n                    <MuiButton variant=\"contained\" disabled={isSubmitting} style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\", color:'white'}} type=\"submit\">\n                      Add Studio & Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                \n                </div>\n\n                \n                </Form.Group>\n            </Form>\n            {isSubmitting && <LinearProgress />}\n            {\n              newStudioId === \"\"?(\"\"):(<p>New Studio Created with id {newStudioId}. Now u can upload images regarding them</p>)\n            }\n            \n            </div>\n          \n             \n             \n            <div hidden={activeStep !== 3}>\n              \n              <ImageUpload entityId={newStudioId} title={\"Studio Icon\"} storageFolder={STORAGES.STUDIOICON} maxImageCount={1}></ImageUpload>\n              <Row>\n                \n                <Col xs={12} className=\"d-flex justify-content-end\">\n                  <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                    Next\n                  </MuiButton>\n                </Col>\n              </Row>\n\n              </div>\n             \n            \n             <div hidden={activeStep !== 4}>\n              <ImageUpload entityId={newStudioId} title={\"Studio Images\"}  storageFolder={STORAGES.STUDIOIMAGES} ></ImageUpload>\n            </div>\n\n            <div hidden={activeStep !== 4}>\n              <ImageUpload entityId={newStudioId} title={\"Studio Announcement Images\"}  storageFolder={STORAGES.STUDIOANNOUNCEMENTSv} maxImageCount={10}></ImageUpload>\n\n              <Row className='mt-3'>\n              <Col xs={12} className=\"d-flex justify-content-end\">\n                <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                  Next\n                </MuiButton>\n              </Col>\n            </Row>\n            </div>\n\n            <div  hidden={activeStep !== 5} style={{ display: 'flex',  alignItems: 'center', height: 'auto'}}>\n          \n                <SuccessMessage StudioId={newStudioId} />\n                <br></br>\n              \n            </div>\n        \n      <br></br>\n      \n    </div>\n  )\n}\n\n\nexport default StudioAdd\n","import React, { useState, useEffect } from 'react';\nimport { Alert, Container } from 'react-bootstrap';\n\nconst AlertPopup = ({\n  type = 'info',\n  message = 'Default message',\n  timeOfDisplay = 5000,\n  fontSize = '16px',\n  fontWeight = 'normal',\n  fontStyle = 'normal',\n}) => {\n  const [showAlert, setShowAlert] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowAlert(false);\n    }, timeOfDisplay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [timeOfDisplay]);\n\n  return (\n    <Container>\n      {showAlert && (\n        <Alert\n          variant={type}\n          style={{\n            fontSize,\n            fontWeight,\n            fontStyle,\n            textAlign: 'center',\n            marginTop: '10px',\n            marginBottom: '0',\n          }}\n          onClose={() => setShowAlert(false)}\n          dismissible\n        >\n          {message}\n        </Alert>\n      )}\n    </Container>\n  );\n};\n\nexport default AlertPopup;\n","import React, { useState, useEffect } from 'react';\nimport {Button, Row, Col, Form, Table} from 'react-bootstrap';\nimport { db } from '../config';\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { COLLECTIONS } from '../constants';\nimport AlertPopup from './AlertPopup';\nimport ImageUpload from './ImageUpload';\nimport { STORAGES } from '../constants';\nimport MapsInput from './MapsInput';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport TimeRangePicker from './TimeRangePicker';\nimport indianCities from '../cities.json';\nimport indianStates from '../states.json';\nimport danceStyles from '../danceStyles.json';\nimport { AMENITIES_ICONS } from '../constants';\nimport {Autocomplete,LinearProgress,TextField} from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { FaMinus, FaPlus } from 'react-icons/fa';\nimport { MultiSelect } from 'primereact/multiselect';\nimport { putData } from '../utils/common';\nimport StudioWeeklyTimings from './StudioWeeklyTiming';\n\nconst initialStudioTimings = {\n  monday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  tuesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  wednesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  thursday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  friday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  saturday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  sunday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n}\n\nconst daysOfWeek = ['M','T','W','Th','F','St','Sn'];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\"\n};\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nfunction StudioUpdate({ studio, setStudio, studioId, setStudioId, instructors }) {\n  const [selectedStudio, setSelectedStudio] = useState(null);\n  const [selectedStudioId, setSelectedStudioId] = useState(null);\n  const [selectedInstructors, setSelectedInstructors] = useState([]);\n  const [selectedStudioFrozenClassRows, setSelectedStudioFrozenClassRows] = useState(-1);\n  const [selectedAmenities,setSelectedAmenities] = useState([]);\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [defaultTime, setDefaultTime] =  useState(\"00:00-00:00\");\n\n  const locationOptions = indianCities.cities;\n  const stateOptions = indianStates.states;\n  const danceStylesOptions = danceStyles.danceStyles;\n  const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n  const [showUpdateSuccessAlert, setShowUpdateSuccessAlert] = useState(false);\n  const [showUpdateErrorAlert, setShowUpdateErrorAlert] = useState(false);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  const [timings, setTimings] = useState(initialStudioTimings);\n\n  const instructorNamesWithIds = instructors.map((instructor) => `${instructor.name} - ${instructor.id}`);\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: isDarkModeOn?'dark':'light',\n    },\n  });\n\n  const handleDanceStylesChange = (event, value) => {\n    setSelectedDanceStyles(value);\n  };\n  \n  \n  const handleAmenitiesChange = (event, value) => {\n    setSelectedAmenities(value);\n  };\n\n  const [tableData, setTableData] = useState({\n    0:{\n      className: '',\n      danceForms: '',\n      days: '',\n      time: '',\n      instructors: [],\n      fee:'',\n      level:'',\n      freeTrial: false,\n      classCategory: []\n    }\n});\n\n  const handleTimePickerOpen = (index,time) => {\n    //console.log(\"handleTimePickerOpen\",time,index)\n    setDefaultTime(time)\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null); \n    //console.log(\"---------\")\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n  \n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n  \n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(' - ');\n  \n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n  \n      return newData;\n    });\n  \n    setSelectedRow(selectedRowIndex);\n  };\n  \n  useEffect(() => {\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser = JSON.parse(localStorage.getItem('StudioCreated')) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map((studio) => `${studio.studioName} : ${studio.id}`);\n    setStudioId(studioIdList);\n\n    //console.log(\"studio:\", studio);\n    //console.log(\"studioId\", studioId);\n  }, []);\n\n  useEffect(() => {\n    // Fetch data for the selected studio when studioId changes\n    if (selectedStudio) {\n      //console.log(\"Studio Instructors Names\",selectedStudio.instructorsNames)\n      setSelectedInstructors((selectedStudio.instructorsNames));\n      if (selectedStudio && selectedStudio.danceStyles) {\n        setSelectedDanceStyles(selectedStudio.danceStyles.split(','));\n      }\n      if (selectedStudio && selectedStudio.addAmenities) {\n        setSelectedAmenities(selectedStudio.addAmenities.split(','));\n      }    \n      if(selectedStudio && selectedStudio.tableData){\n        const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n        setSelectedStudioFrozenClassRows(maxIndex);\n      }\n      if (selectedStudio && selectedStudio?.timings?.length) {\n        setTimings(selectedStudio.timings);\n      }\n    }\n  }, [selectedStudio]);\n\n  const handleSelectStudio = async (event) => {\n    event.preventDefault();\n    const selected = event.target.value;\n    const selectedId = selected.split(\":\").pop().trim();\n    setSelectedStudioId(selectedId);\n    try {\n      const studioDoc = await getDoc(doc(db, COLLECTIONS.STUDIO, selectedId));\n      if (studioDoc.exists) {\n        setSelectedStudio(studioDoc.data());\n        if(studioDoc.data().geolocation){\n          const  loc = studioDoc.data().geolocation;\n          setSelectedLocation(loc);\n          //console.log(\"StudioUpdate Selected location\",selectedLocation,loc)\n        }\n        \n        if (studioDoc.data().tableData) {\n          setTableData(studioDoc.data().tableData);\n          //selectedStudioFrozenClassRows()\n          const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n          selectedStudioFrozenClassRows(maxIndex)\n          //console.log(\"Yo We got...\",tableData,Array.isArray(tableData),isMapOfMaps(tableData),maxIndex)\n\n        } else {\n          setTableData({\n            0:{\n              className: '',\n              danceForms: '',\n              days: '',\n              time: '',\n              instructors: [],\n              fee: '',\n              level:'',\n              freeTrial: false,\n              classCategory: []\n            }\n        });\n        }\n      } else {\n        setSelectedStudio(null); // No matching studio found\n      }\n    } catch (error) {\n      console.error(\"Error fetching studio data:\", error, selectedId);\n    }\n  };\n\n\n  const handleInstructorChange = (event, value) => {\n    setSelectedInstructors(value);\n  };\n\n\n  const handleUpdateStudio = async (event) => {\n    event.preventDefault();\n    setIsSubmitting(true);\n    const nameIdLocal = event.target.nameId.value;\n    const indexOfColon = nameIdLocal.lastIndexOf(\":\");\n    const studioId = nameIdLocal.substring(indexOfColon + 1).trim();\n    //console.log(studioId)\n\n    if (!studioId) {\n      //console.log(\"Invalid or empty studio id\")\n      return;\n    }\n\n    //const description = encodeToUnicode(event.target.description.value);\n    //const geolocation = selectedLocation;\n\n    try {\n      // Update the studio document with the new values\n      ////console.log(description,geolocation)\n        const dbPayload ={\n          studioName: event.target.studioName.value,\n          aboutStudio: event.target.aboutStudio.value,\n          founderName: event.target.founderName.value,\n          aboutFounder: event.target.aboutFounder.value,\n          mobileNumber: event.target.mobileNumber.value,\n          whatsappNumber: event.target.whatsappNumber.value,\n          mailAddress: event.target.mailAddress.value,\n          danceStyles: selectedDanceStyles.join(\",\"),\n          numberOfHalls: event.target.numberOfHalls.value,\n          maximumOccupancy: event.target.maximumOccupancy.value,\n          instructorsNames: selectedInstructors,\n          status: 'OPEN',\n          tableData: tableData,\n          buildingName: event.target.buildingName.value,\n          street: event.target.street.value,\n          city: event.target.city.value,\n          landmark: event.target.landmark.value,\n          pincode: event.target.pincode.value,\n          state: event.target.state.value,\n          country: \"India\",\n          geolocation : selectedLocation,\n          gstNumber: event.target.gstNumber.value,\n          enrolledId:[],\n          reviews:[],\n          author: JSON.parse(localStorage.getItem('userInfo')).displayName,\n          UserId: JSON.parse(localStorage.getItem('userInfo')).UserId,\n          addAmenities: selectedAmenities.join(\",\"),\n          enrollmentProcess: encodeToUnicode(event.target.enrollmentProcess.value),\n          instagram: event.target.instagram.value,\n          facebook: event.target.facebook.value,\n          youtube: event.target.youtube.value,\n          twitter: event.target.twitter.value,\n          timings\n      }\n      \n      const response = await putData(dbPayload, COLLECTIONS.STUDIO, studioId) \n      if (response.ok) {\n        //console.log(\"Studio updated successfully\");\n        alert(\"Studio Update successfully\")\n        setShowUpdateSuccessAlert(true);\n        setShowUpdateErrorAlert(false);\n      }else{\n        setShowUpdateSuccessAlert(false);\n        setShowUpdateErrorAlert(true);\n      }\n    } catch (error) {\n      console.error(\"Error updating studio: \", error);\n      setShowUpdateSuccessAlert(false);\n      setShowUpdateErrorAlert(true);\n    } finally{\n      setIsSubmitting(false);\n    }\n    // Reset input fields to their initial values when a new studio is selected\n    document.getElementById(\"updateStudioForm\").reset();\n  };\n\n  const handleAddColumn = () => {\n    setTableData((prevData) => {\n      const newData = prevData.map((row) => ({\n        ...row,\n        [Object.keys(row).length]: ''\n      }));\n      return newData;\n    });\n  };\n\n  const handleAddRow = () => {\n    setTableData((prevData) => {\n      const newRowKey = Object.keys(prevData).length; // Use the current number of rows as the new row key\n      return { ...prevData, [newRowKey]: { ...tableData[0] } };\n    });\n  };\n\n  const handleRemoveRow = (index) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n      delete newData[index];\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if(field===\"days\"){\n        value = Array.isArray(value) ? value.join(',') : value; \n      }\n\n      return {\n        ...prevData,\n        [index]: {\n          ...prevData[index],\n          [field]: value\n        }\n      };\n    });\n  };\n\n  return (\n    <div style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n      <br></br>\n            <Form id=\"updateStudioForm\" onSubmit={handleUpdateStudio}>\n              <Form.Group controlId=\"formBasicUpdate\">\n                <Form.Label>Id</Form.Label>\n                <Form.Control as=\"select\" name=\"nameId\" style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black', height: 'auto', // Let it adjust to content\n                                                        lineHeight: '1.5em', \n                                                        padding: '8px' }}  \n                  onChange={handleSelectStudio}>\n                  <option value=\"\">Select a studio...</option>\n                  {studioId && studioId.length > 0 ? (\n                    studioId.map((studioItem) => (\n                      <option key={studioItem} value={studioItem}>\n                        {studioItem}\n                      </option>\n                    ))\n                  ) : (\n                    <option value=\"\">No studio yet!</option>\n                  )}\n                </Form.Control>\n              </Form.Group>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Basic Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Studio Name</Form.Label>\n                <Form.Control rows={1} defaultValue={selectedStudio ? selectedStudio.studioName : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"studioName\" />\n                \n                <Form.Label>About Studio</Form.Label>\n                <Form.Control rows={6} defaultValue={selectedStudio ? selectedStudio.aboutStudio : ''} style={{  minHeight: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio details\" name=\"aboutStudio\" />\n                \n                </Col>\n                <Col md={6}>\n                <Form.Label>Founder's Name</Form.Label>\n                <Form.Control rows={1} defaultValue={selectedStudio ? selectedStudio.founderName : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"founderName\" />\n                \n                <Form.Label>About Founder</Form.Label>\n                <Form.Control rows={6} defaultValue={selectedStudio ? selectedStudio.aboutFounder : ''} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio details\" name=\"aboutFounder\" />\n                \n                </Col>\n                </Row>\n                <hr></hr>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Contact Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Mobile Number</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.mobileNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter studio details\" name=\"mobileNumber\" type=\"number\"  />\n\n                <Form.Label>WhatsApp Number</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.whatsappNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter studio details\" name=\"whatsappNumber\" type=\"number\"  />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Mail Address</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.mailAddress : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" rows={1} placeholder=\"Enter studio details\" name=\"mailAddress\" />\n                \n                  </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Details</h3>\n                <Row>\n                  <Col md={6}>\n                <Form.Label>Dance Styles</Form.Label>\n                \n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>      \n                \n                <Form.Label>Number of Hall(s)</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.numberOfHalls : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Number of Hall(s)\" name=\"numberOfHalls\" type=\"number\" />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Maximum Occupancy</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.maximumOccupancy : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}  rows={1} placeholder=\"Maximum Occupancy\" name=\"maximumOccupancy\" type=\"number\"   />\n                </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Instructor Details</h3>\n                <Form.Label>Names of Instructors</Form.Label>\n                <Row >\n      \n                  <Col xs={6}>\n                  <div style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n                  <Row>\n                  <ThemeProvider theme={darkTheme}>\n                    <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={instructorNamesWithIds}\n                      value={selectedInstructors}\n                      onChange={handleInstructorChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Dance Styles\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                  </ThemeProvider>\n                  <a href=\"#/modifyInstructors\" rel=\"noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', color: isDarkModeOn ? 'cyan' : 'blue' }}>\n                      Go to Instrcutors' Add/update Page? \n                    </a>\n                </Row> \n                  </div>\n                  </Col>\n                </Row>  \n                <hr></hr>\n                   \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Address Details</h3>\n                <Row>\n                  <Col md={6}>\n                  <Form.Label>Building Name</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.buildingName : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter building name\" name=\"buildingName\" />\n\n                <Form.Label>Street</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.street : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter street\" name=\"street\" />\n                <Form.Label>City</Form.Label>\n                  <Form.Control\n                      as=\"select\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black',height: 'auto', // Let it adjust to content\n                        lineHeight: '1.5em', // Mimics rows={1}\n                        padding: '8px', }}\n                      name=\"city\"\n                      value={selectedStudio ? selectedStudio.city : ''}\n                      onChange={(e) => {\n                          const newCity = e.target.value;\n                          setSelectedStudio(prevState => ({\n                              ...prevState,\n                              city: newCity\n                          }));\n                      }}\n                  >\n                      <option value=\"\">Select a city</option>\n                      {locationOptions.map((city, index) => (\n                          <option key={index} value={city}>\n                              {city}\n                          </option>\n                      ))}\n                  </Form.Control>\n                  \n\n                </Col>\n                <Col md={6}>\n                  <Form.Label>Landmark</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.landmark : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter landmark\" name=\"landmark\" />\n\n                <Form.Label>Pincode</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.pincode : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter pincode\" name=\"pincode\" type=\"number\"  />\n               \n                <Form.Label>State</Form.Label>\n                <Form.Control as=\"select\" style={{ padding: \"0 1.5rem\", backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter state\" name=\"state\">\n                <option value=\"\">Select a State</option>\n                    {stateOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n               \n                </Col>\n                \n                <Form.Label>Save exact Address</Form.Label>\n                <MapsInput selectedLocation={selectedStudio && selectedStudio.geolocation ? selectedStudio.geolocation : selectedLocation}\n                            setSelectedLocation={setSelectedLocation} />\n\n                </Row>\n                <hr></hr>\n\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : 'white', color: isDarkModeOn ? 'white' : 'black' }}>Additional Details</h3>\n                <Row>\n                  <Col md={4}>\n                      <Form.Label>GST Number</Form.Label>\n                      <Form.Control defaultValue={selectedStudio ? selectedStudio.gstNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"number\" rows={1} placeholder=\"GST Number\" name=\"gstNumber\" />\n                  </Col>\n                  <Col md={8}>\n                      <Form.Label>Add Amenities</Form.Label>\n                  \n                      <ThemeProvider theme={darkTheme}>\n                      <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={amenityKeys}\n                      value={selectedAmenities}\n                      onChange={handleAmenitiesChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Amenities\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                      </ThemeProvider>\n                </Col>\n                </Row>\n                <Row>\n                  \n                  <Col>\n                    <Form.Label>Enrollment Process</Form.Label>\n                    <Form.Control defaultValue={selectedStudio ? decodeUnicode(selectedStudio.enrollmentProcess) : ''} rows={6} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enrollment Process\" name=\"enrollmentProcess\" />\n              \n                  </Col>\n                </Row>\n\n              <br></br>\n            <span>Time Table Of dance classes</span>\n            <div style={{ overflowX: 'auto', whiteSpace: 'nowrap', scrollbarColor: isDarkModeOn ? '#888 #333' : '#ccc #fff', }}>\n              <Table bordered variant=\"light\">\n                <thead>\n                  <tr>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Name</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Dance Form</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Days</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Time</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'20rem', border: '1px solid black'}}>Instructors</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Fee (₹)</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Level</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Free Trial</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Category</th>\n                    <th style={{padding: 0 }}>\n                      <Button variant=\"primary\" onClick={handleAddRow}>\n                        <FaPlus/>\n                      </Button>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Object.keys(tableData).map((rowKey, index) => (\n                    <tr key={rowKey}\n                    >\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          type=\"text\"\n                          value={tableData[rowKey].className}\n                          onChange={(e) => handleTableChange(rowKey, 'className', e.target.value)}\n                          style={{height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          as=\"select\"\n                          value={tableData[rowKey].danceForms}\n                          onChange={(e) => handleTableChange(rowKey, 'danceForms', e.target.value)}\n                          style={{height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                        >\n                          <option value=\"\">Select a dance form</option>\n                          {danceStylesOptions.map((option) => (\n                      <option key={option} value={option}>\n                        {option}\n                      </option>\n                    ))}\n                          </Form.Control>\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <MultiSelect value={tableData[rowKey] && tableData[rowKey].days && tableData[rowKey].days.split(',').filter(day => day !== '')}\n                          onChange={(event) => handleTableChange(rowKey, 'days', event.target.value)}\n                          options={daysOfWeek}\n                          placeholder=\"class days\" maxSelectedLabels={7} className=\"w-full md:w-20rem\"\n                          style={{color: '#000', width: '100%'}}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          type=\"text\"\n                          value={tableData[rowKey].time}\n                          //onChange={(e) => handleTableChange(rowKey, 'time', e.target.value)}\n                          onClick={() => handleTimePickerOpen(rowKey,tableData[rowKey].time)}\n                        />\n                        {showTimePicker && (\n                        <TimeRangePicker\n                          show={showTimePicker}\n                          handleClose={handleTimePickerClose}\n                          handleSelect={handleTimeSelect}\n                          defaultTime={tableData[selectedRowIndex]?.time || \"00:00-00:00\"} // selectedRowIndex\n                        />\n                      )}\n                      </td>\n                      <td style={{padding:'0rem', width:'20rem'}}>\n                        <Autocomplete\n                          multiple\n                          options={instructorNamesWithIds}\n                          value={tableData[rowKey] && tableData[rowKey].instructors ? tableData[rowKey].instructors : []}\n                          onChange={(_, values) => handleTableChange(rowKey, 'instructors', values)}\n                          renderInput={(params) => (\n                            <TextField\n                              {...params}\n                              variant=\"standard\"\n                              placeholder=\"Select Instructors\"\n                            />\n                          )}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          type=\"text\"\n                          value={tableData[rowKey].fee?tableData[rowKey].fee:\"\"}\n                          onChange={(e) => handleTableChange(rowKey, 'fee', e.target.value)}\n                          style={{height: 'auto',lineHeight: '1.5em',padding: '8px'}}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          as=\"select\"\n                          value={tableData[rowKey].level?tableData[rowKey].level:\"\"}\n                          onChange={(e) => handleTableChange(rowKey, 'level', e.target.value)}\n                          style={{height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                        >\n                          <option value=\"\">Select a Level</option>\n                          <option value=\"Beginner\">Beginner</option>\n                        <option value=\"Intermediate\">Intermediate</option>\n                        <option value=\"Advanced\">Advanced</option>\n                        <option value=\"Misc\">Misc</option>\n\n                          </Form.Control>\n                      </td>\n                      <td style={{ padding: '0rem', border: '1px solid black' }}>\n                        <Form.Control\n                          style={{ backgroundColor: \"white\", height: 'auto', lineHeight: '1.5em', padding: '8px' }}\n                          as=\"select\"\n                          value={tableData[index]?.freeTrial ? tableData[index].freeTrial : \"\"}\n                          onChange={(e) => handleTableChange(index, 'freeTrial', e.target.value)}\n                        >\n                          <option value=\"\">Select a value</option>\n                          <option value={true}>Yes</option>\n                          <option value={false}>No</option>\n                        </Form.Control>\n                      </td>\n                      <td style={{ padding: '0rem', width: '20rem' }}>\n                        <Form.Control\n                          style={{ backgroundColor: \"white\", height: 'auto', lineHeight: '1.5em', padding: '8px' }}\n                          as=\"select\"\n                          value={(Array.isArray(tableData[index].classCategory) && tableData[index].classCategory?.length) ? tableData[index].classCategory[0] : \"\"}\n                          onChange={(e) => handleTableChange(index, 'classCategory', [e.target.value])}\n                        >\n                          <option value=\"\">Select Class Category</option>\n                          {Object.values(categoryMap).map((value, idx) => <option key={idx} value={value}>{value}</option>)}\n                        </Form.Control>\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Button variant=\"danger\" onClick={() => handleRemoveRow(rowKey)}>\n                          <FaMinus/>\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n\n              </Table>\n            </div>\n            <br></br>\n\n            <h3 style={{ margin: '12px 0', backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Timings</h3>\n            <StudioWeeklyTimings timings={timings} setTimings={setTimings} />\n\n            <h3 style={{ margin: '32px 0 0 0', backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Social Media Links</h3>\n               <Row>\n            <Col md={4}>\n                          <Form.Label>Instagram</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.instagram : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Instagram Link\" name=\"instagram\" />\n                        </Col>\n                        <Col md={4}>\n                          <Form.Label>Facebook</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.facebook : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Facebook Link\" name=\"facebook\" />\n                        </Col>\n                        <Col md={4}>\n                          <Form.Label>YouTube</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.youtube : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"YouTube Link\" name=\"youtube\" />\n                        </Col>\n                        <Col md={4}>\n                          <Form.Label>Twitter</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.twitter : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Twitter Link\" name=\"twitter\" />\n                        </Col>\n                        </Row>\n\n            <br></br>\n            <Button style={{ backgroundColor: isDarkModeOn ? '#892CDC' : 'black', color:'white'  }} type=\"submit\" disabled={isSubmitting}>\n              Update Studio\n            </Button>\n            {isSubmitting && <LinearProgress />}\n            </Form>\n            {studioId && studioId.length > 0 && selectedStudioId && (\n              <>\n                <div>\n                  <ImageUpload entityId={selectedStudioId} title={\"Studio Images\"} storageFolder={STORAGES.STUDIOIMAGES} maxImageCount={10} />\n                </div>\n                <br />\n                <div>\n                  <ImageUpload entityId={selectedStudioId} title={\"Studio Icon\"} storageFolder={STORAGES.STUDIOICON} maxImageCount={1} />\n                </div>\n                <div>\n                  <ImageUpload entityId={selectedStudioId} title={\"Studio Announcement Images\"} storageFolder={STORAGES.STUDIOANNOUNCEMENTS} maxImageCount={10}/>\n                </div>\n                <br />\n              </>\n            )}\n      {showUpdateSuccessAlert && (\n        <AlertPopup\n          type=\"info\"\n          message=\"Studio Updated successfully\"\n          timeOfDisplay={3000}\n          fontSize=\"10px\"\n          fontWeight=\"bold\"\n        />\n      )}\n      {showUpdateErrorAlert && (\n        <AlertPopup\n          type=\"warning\"\n          message=\"Studio Update failed\"\n          timeOfDisplay={3000}\n          fontSize=\"10px\"\n          fontWeight=\"bold\"\n        />\n      )}\n    </div>\n  );\n}\n\nexport default StudioUpdate;\n","import React from 'react';\nimport { Row, Col  } from 'react-bootstrap';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,collection,where,getDocs,query } from \"firebase/firestore\";\nimport { COLLECTIONS } from '../constants';\nimport StudioAdd from '../Components/StudioAdd';\nimport StudioUpdate from '../Components/StudioUpdate';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { useAuth } from '../context/AuthContext';\nimport CardSliderCard from '../Components/CardSliderCard';\nimport Tab from '@mui/material/Tab';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\nimport { Box } from '@mui/material';\n\n\n\nfunction CreatorStudio() {\n  const [studio, setStudio] = useState([]);\n  const [studioId, setStudioId] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  const [instructors, setInstructors] = useState([]);\n  const [isCreator, setIsCreator] = useState(false);\n  const [premiumTill, setPremiumTill] = useState(-1);\n  const { currentUser } = useAuth();\n  const [value, setValue] = React.useState('1');\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n\n  useEffect(() => {\n    console.log(\"Creator Studio getCreatorMode\")\n    const getCreatorMode = async (event) => {\n      try{\n      const userRef = doc(db, \"User\", currentUser.uid);\n      const userSnap = await getDoc(userRef);\n      if (userSnap.exists()) {\n        console.log(\"User there\",userSnap.data(),userSnap.data().CreatorMode,JSON.parse(localStorage.getItem('userInfoFull')));\n        if(userSnap.data() != null){\n          \n          setIsCreator(userSnap.data().CreatorMode)\n          setPremiumTill(userSnap.data().isPremium)\n          console.log(\"Premium Till\",premiumTill,userSnap.data())\n        }else{\n          console.log(\"userSnap.data() null\")\n        }\n      } else {\n        console.log(\"User not found but workshop created... error\");\n      }\n      }catch(error){\n        console.log(\" error\");\n      }\n    }\n  \n    getCreatorMode();\n  }, [isCreator]); // Run once on mount\n\n    // Fetch instructors for the current user\n  useEffect(() => {\n    console.log(\"Creator Studio fetchInstructors\")\n  const fetchInstructors = async () => {\n    let userId = null;\n    if (\n      JSON.parse(localStorage.getItem('userInfo')) &&\n      JSON.parse(localStorage.getItem('userInfo')).UserId\n    ) {\n      userId = JSON.parse(localStorage.getItem('userInfo')).UserId;\n    }\n    if (!userId) {\n      console.log('User not found');\n      alert('User not found');\n      return;\n    }\n\n    const instructorRef = collection(db, COLLECTIONS.INSTRUCTORS);\n    const q = query(instructorRef, where('createdBy', '==', userId));\n    const querySnapshot = await getDocs(q);\n    \n    const instructorsList = [];\n    querySnapshot.forEach((doc) => {\n      instructorsList.push({\n        id: doc.id,\n        name: doc.data().name,      \n      });\n    });\n    console.log(\"Hiii\", instructorsList)\n    setInstructors(instructorsList);\n  };\n\n  fetchInstructors();\n  }, []);\n\n \n  useEffect(() => {\n    console.log(\"Creator Studio getStudioCreated\")\n    const getStudioCreated = async ()=>{\n      const q = query(collection(db, COLLECTIONS.STUDIO), where(\"UserId\", \"==\", JSON.parse(localStorage.getItem('userInfo')).UserId)    );\n      console.log(\"Hiiii\",JSON.parse(localStorage.getItem('userInfo')).UserId)\n      const querySnapshot = await getDocs(q);\n      console.log(\"Studios : \",querySnapshot)\n      const studiosOfUser = querySnapshot.docs.filter(doc => doc.data().studioName).map(doc => \n        { const data = doc.data();\n          return {\n            id: doc.id, // Include the document ID in the data\n            ...data\n          };\n      });\n      localStorage.setItem(\"StudioCreated\", JSON.stringify(studiosOfUser));\n      setStudio(studiosOfUser);\n      setStudioId(studiosOfUser.map((studio) => (String(studio.studioName) + \" :\" + String(studio.id))));\n      console.log(studio)\n      console.log(\"studioId\",studioId)\n    };\n      \n      getStudioCreated();\n    },[setStudio]);\n \n  useEffect(() => {\n    console.log(\"Creator Studio setStudioId\")\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser = JSON.parse(localStorage.getItem('StudioCreated')) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map((studio) => `${studio.studioName} : ${studio.id}`);\n    setStudioId(studioIdList);\n\n    console.log(\"studio:\", studio);\n    console.log(\"studioId\", studioId);\n  }, [setStudioId]);\n\n  console.log(\"studio :\",studio)\n  return (\n    <div>\n      <br></br>\n      {isCreator?(\n        \n       <>\n       <Box sx={{ width: '100%', typography: 'body1' }}>\n      <TabContext value={value}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <TabList style={{color: isDarkModeOn ? 'white' : 'black'}} onChange={handleChange} aria-label=\"lab API tabs example\">\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Add Studio\" value=\"1\" />\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Update Studio\" value=\"2\" />\n          \n          </TabList>\n        </Box>\n        <TabPanel value=\"1\">\n\n        <StudioAdd instructors={instructors} />\n        </TabPanel>\n        <TabPanel value=\"2\">\n        <>\n        <StudioUpdate\n                  studio={studio}\n                  setStudio={setStudio}\n                  instructors={instructors}\n                  studioId={studioId}\n                  setStudioId={setStudioId}\n                />\n        </>\n    \n        </TabPanel>\n        \n      </TabContext>\n    </Box>\n      </>\n      ):\"\"}\n \n      <h3 style={{color: isDarkModeOn ? 'white' : 'black'}}>Your Studios:</h3>\n       <ul>\n      <Row xs={1} md={3} lg={4} className=\"g-4\">\n        {studio.length > 0 ? (\n          studio.map((studio, index) => (\n            <Col key={index}>\n              <a href={`#/studio/${studio.studioId}`} style={{ textDecoration: \"none\" }}>\n                <CardSliderCard studio={studio}/>\n              </a>\n          </Col>\n          ))\n        ) : (\n          <p style={{color: isDarkModeOn ? 'white' : 'black'}}>No studio yet!</p>\n        )}\n      </Row>\n      <br/>\n      </ul>\n    </div>\n  )\n}\nexport default CreatorStudio"],"names":["_ref","studio","_jsx","href","concat","id","children","NStudioCard","data","img_src","ImageUpload","entityId","storageFolder","title","maxImageCount","updateMode","disable","useSnackbar","selectedFiles","setSelectedFiles","useState","uploadedFiles","setUploadedFiles","newFiles","setNewFiles","deletedFiles","setDeletedFiles","isDarkModeOn","useSelector","selectDarkModeStatus","progressDelete","setProgressDelete","progressUpdate","setProgressUpdate","console","log","filesizes","bytes","decimals","arguments","length","undefined","dm","i","Math","floor","parseFloat","pow","toFixed","useEffect","fetchStudioImages","truncatedFiles","slice","alert","calculateDelta","selectedFileIds","map","file","uploadedFileIds","imagesToDelete","filter","includes","newImages","async","folderPath","folderRef","ref","storage","fileList","listAll","files","Promise","all","items","downloadURL","getDownloadURL","fileRef","name","filename","fileURL","error","className","style","display","width","justifyContent","flex","_jsxs","backgroundColor","STORAGES","STUDIOIMAGES","type","onChange","e","Array","from","target","updatedFiles","forEach","reader","FileReader","onloadend","push","shortid","filetype","fileimage","result","datetime","lastModifiedDate","toLocaleString","filesize","size","prevFiles","readAsDataURL","multiple","position","Card","sx","maxWidth","match","src","alt","maxHeight","objectFit","IconButton","disabled","onClick","window","confirm","fileToDelete","find","prevDeletedFiles","handleDeleteSelectedFile","top","right","DeleteIcon","color","CardContent","deleteAllImagesInFolder","uploadImages","deleteImages","hidden","value","max","defaultProps","studioId","cardStyle","padding","marginRight","boxShadow","transition","variant","_objectSpread","transform","AspectRatio","ratio","iconUrl","loading","height","overflow","Stack","direction","spacing","bottom","left","danceStyles","split","form","index","Chip","marginBottom","fontSize","bgcolor","danceStylesColorChips","trim","paddingTop","freeTrialAvailable","marginLeft","COLORS","LIME","Box","columnGap","Link","alignSelf","fontWeight","textColor","underline","overlay","whiteSpace","textOverflow","studioName","avgRating","Typography","flexShrink","level","street","zIndex","borderRadius","Favorite","minFee","Button","_defaultTime$split$","show","handleClose","handleSelect","defaultTime","startTime_i","endTime_i","renderTimeOptions","defaultValue","timeOptions","generateTimeOptions","options","option_AM","option_PM","hours","minutes","formattedHours","toString","padStart","formattedMinutes","timeString","formattedHours12","_Fragment","option","Modal","onHide","Header","closeButton","Title","Body","Row","Col","Form","Group","Label","Control","as","lineHeight","Footer","daysOfWeek","categoryMap","Kids","Adults","Women_Only","Men_Only","Seniors","All","Couples","Families","tableData","setTableData","instructorNamesWithIds","showTimePicker","setShowTimePicker","selectedRowIndex","setSelectedRowIndex","selectedRow","setSelectedRow","danceStylesOptions","setDefaultTime","handleTableChange","field","prevData","isArray","join","newData","handleTimePickerClose","handleTimeSelect","startTime","endTime","currentTime","time","currentStartTime","currentEndTime","Table","bordered","border","textAlign","minWidth","handleAddRow","danceForms","days","instructors","fee","status","freeTrial","classCategory","FaPlus","row","_tableData$selectedRo","MultiSelect","day","event","placeholder","maxSelectedLabels","handleTimePickerOpen","TimeRangePicker","Autocomplete","_","values","renderInput","params","TextField","Object","idx","splice","handleRemoveRow","FaMinus","libraries","PinMarker","FaMapMarkerAlt","selectedLocation","setSelectedLocation","center","setCenter","lat","lng","address","setAddress","apiKey","LoadScript","googleMapsApiKey","PlacesAutocomplete","newAddress","onSelect","results","geocodeByAddress","selectedAddress","latLng","getLatLng","_ref2","getInputProps","suggestions","getSuggestionItemProps","suggestion","active","description","GoogleMapReact","bootstrapURLKeys","key","defaultCenter","defaultZoom","_ref3","text","StudioId","jsx","timings","setTimings","updatedDayTimings","entries","slots","xs","sm","md","lg","charAt","toUpperCase","slot","open","close","removeTimeSlot","MuiButton","addTimeSlot","encodeToUnicode","utf8Encoded","TextEncoder","encode","String","fromCharCode","initialStudioTimings","monday","tuesday","wednesday","thursday","friday","saturday","sunday","previousDraftState","useRef","showSnackbar","newStudioId","setNewStudioId","selectedInstructors","setSelectedInstructors","selectedDanceStyles","setSelectedDanceStyles","selectedAmenities","setSelectedAmenities","instructor","isReady","setIsReady","isSubmitting","setIsSubmitting","locationOptions","indianCities","stateOptions","indianStates","amenityKeys","keys","AMENITIES_ICONS","activeStep","setActiveStep","handleNext","prevActiveStep","handleBack","darkTheme","createTheme","palette","mode","saveDraft","document","getElementById","q","query","collection","db","DRAFT_COLLECTIONS","DRAFT_STUDIOS","where","JSON","parse","localStorage","getItem","UserId","querySnapshot","getDocs","empty","studios","doc","foundStudio","studioRef","reduce","accumulator","current","currentState","aboutStudio","founderName","aboutFounder","mobileNumber","whatsappNumber","mailAddress","numberOfHalls","maximumOccupancy","instructorsNames","buildingName","city","landmark","pincode","state","country","geolocation","gstNumber","enrolledId","reviews","author","displayName","isPremium","addAmenities","enrollmentProcess","creatorEmail","email","instagram","facebook","youtube","twitter","visibilty","isEqual","updateDoc","addDoc","_foundStudio$timings","unicodeString","c","charCodeAt","TextDecoder","decode","Uint8Array","decodeUnicode","main","intervalId","previousState","setInterval","err","clearInterval","Stepper","alternativeLabel","label","Step","StepLabel","onSubmit","preventDefault","_JSON$parse","currentUserEmail","studioData","notifyEmails","metaData","entity_name","response","postData","COLLECTIONS","STUDIO","ok","json","deleteDoc","resetDraft","controlId","rows","minHeight","minheight","ThemeProvider","theme","CssBaseline","handleDanceStylesChange","handleInstructorChange","rel","textDecoration","overflowX","scrollbarColor","StudioTable","handleAmentiesChange","margin","StudioWeeklyTimings","MapsInput","LinearProgress","STUDIOICON","STUDIOANNOUNCEMENTSv","alignItems","SuccessMessage","message","timeOfDisplay","fontStyle","showAlert","setShowAlert","timer","setTimeout","clearTimeout","Container","Alert","marginTop","onClose","dismissible","setStudio","setStudioId","selectedStudio","setSelectedStudio","selectedStudioId","setSelectedStudioId","selectedStudioFrozenClassRows","setSelectedStudioFrozenClassRows","showUpdateSuccessAlert","setShowUpdateSuccessAlert","showUpdateErrorAlert","setShowUpdateErrorAlert","studiosOfUser","studioIdList","_selectedStudio$timin","maxIndex","Number","nameIdLocal","nameId","indexOfColon","lastIndexOf","substring","dbPayload","putData","reset","selectedId","pop","studioDoc","getDoc","exists","loc","studioItem","newCity","prevState","handleAmenitiesChange","newRowKey","rowKey","_tableData$index","_tableData$index$clas","STUDIOANNOUNCEMENTS","AlertPopup","setInstructors","isCreator","setIsCreator","premiumTill","setPremiumTill","currentUser","useAuth","setValue","React","userRef","uid","userSnap","CreatorMode","getCreatorMode","userId","instructorRef","INSTRUCTORS","instructorsList","fetchInstructors","docs","setItem","stringify","getStudioCreated","typography","TabContext","borderBottom","borderColor","TabList","handleChange","newValue","Tab","TabPanel","StudioAdd","StudioUpdate","CardSliderCard"],"sourceRoot":""}