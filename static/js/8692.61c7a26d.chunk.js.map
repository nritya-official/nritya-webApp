{"version":3,"file":"static/js/8692.61c7a26d.chunk.js","mappings":"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","sources":["Components/ImageUpload.js","Components/TimeRangePicker.js","utils/mapping.js","Components/StudioTable.js","Components/MapsInput.js","Components/SucessPage.js","Components/CustomSwitch.js","Components/StudioWeeklyTiming.jsx","Components/StudioAdd.js","Components/AlertPopup.js","Components/StudioUpdate.js","Screens/CreatorStudio.js","utils/common.js"],"sourcesContent":["import React, { useState, useEffect, forwardRef, useImperativeHandle, useRef } from \"react\";\nimport shortid from \"shortid\";\nimport { ref as firebaseRef, getDownloadURL, listAll } from 'firebase/storage';\nimport { storage } from '../config';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { deleteAllImagesInFolder,deleteImages,uploadImages} from '../utils/firebaseUtils'\nimport { Card, CardContent, IconButton } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useSnackbar } from \"../context/SnackbarContext\";\nimport { STORAGES } from \"../constants\";\nimport { useLoader } from \"../context/LoaderContext\";\n\n\nconst ImageUpload = forwardRef(({entityId,storageFolder,title, maxImageCount=10, minImageCount, updateMode, disable }, ref) => {\n  const { setIsLoading } = useLoader();\n  const showSnackbar = useSnackbar();\n  const imageInputRef = useRef(null);\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [newFiles, setNewFiles] = useState([]); // Track new files to be added\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  //console.log(\"Received props=> entityId:\", entityId, \"|storageFolder:\", storageFolder);\n  const [progressDelete, setProgressDelete] = useState(-1);\n  const [progressUpdate, setProgressUpdate] = useState(-1);\n  const [isUploadSuccessful, setIsUploadSuccessful] = useState(false);\n\n  console.log(\"Kyc enitity id \",entityId, disable)\n  const filesizes = (bytes, decimals = 2) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n  };\n\n  useEffect(() => {\n   // console.log(\"Fetching image for\",entityId)\n    if(entityId){\n      fetchStudioImages(entityId); // Fetch images when component mounts\n    }\n  }, [entityId]);\n\n  useEffect(() => {\n   // console.log(\"Selected files:\", selectedFiles);\n    if (maxImageCount && selectedFiles.length > maxImageCount) {\n      const truncatedFiles = selectedFiles.slice(0, maxImageCount);\n      alert(`Exceeded maxImageCount, keeping first ${maxImageCount} files.`);\n      imageInputRef.current.value = null;\n      setSelectedFiles(truncatedFiles);\n    }\n  }, [selectedFiles, maxImageCount]);\n  \n\n  const handleInputChange = (e) => {\n    // console.log(\"handleInputChange\")\n    const files = Array.from(e.target.files);\n    const updatedFiles = [];\n    // console.log(\"file array \",files.length)\n    files.forEach((file) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        updatedFiles.push({\n          id: shortid.generate(),\n          filename: file.name,\n          filetype: file.type,\n          fileimage: reader.result,\n          datetime: file.lastModifiedDate.toLocaleString(\"en-IN\"),\n          filesize: filesizes(file.size),\n          file: file, // Store the actual file object\n        });\n\n        if (updatedFiles.length === files.length) {\n          setSelectedFiles((prevFiles) => [...prevFiles, ...updatedFiles]);\n          setNewFiles(updatedFiles);\n          imageInputRef.current.value = null;\n          // console.log(\"New files in total\",setNewFiles.length)\n        }\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleDeleteSelectedFile = (id) => {\n    if (window.confirm(\"Are you sure you want to delete this image?\")) {\n      setSelectedFiles((prevFiles) =>\n        prevFiles.filter((file) => file.id !== id)\n      );\n    }\n  };\n\n  const handleUploadSubmit = async () => {\n    if (!entityId) {\n      alert(\"No studio selected\");\n      return;\n    }\n\n    setProgressDelete(-1);\n    setProgressUpdate(-1);\n\n    try {\n      setIsLoading(true);\n      if (maxImageCount === 1 && selectedFiles.length >= minImageCount) {\n        // Delete all previous images in the folder\n        await deleteAllImagesInFolder(storageFolder, entityId);\n        await uploadImages(storageFolder,newFiles, entityId, setProgressUpdate);\n        showSnackbar(\"Image uploaded successfully\", \"success\");\n        setIsUploadSuccessful(true);\n      } else {\n        // Calculate images to delete and add\n        const { imagesToDelete, newImages } = calculateDelta(selectedFiles, uploadedFiles);\n\n        if (minImageCount && newImages.length < minImageCount) {\n          showSnackbar(`Minimum ${minImageCount} image(s) are required`, \"error\");\n          return;\n        }\n\n        // Delete images if there are any\n        if (imagesToDelete.length > 0) {\n          await deleteImages(storageFolder, imagesToDelete, entityId, setProgressDelete);\n          showSnackbar(\"Image(s) deleted successfully\", \"success\");\n        }\n\n        // Upload new images if there are any\n        if (newImages.length > 0) {\n          await uploadImages(storageFolder, newImages, entityId, setProgressUpdate);\n          showSnackbar(\"Image(s) uploaded successfully\", \"success\");\n        }\n        setIsUploadSuccessful(true);\n      }\n\n      imageInputRef.current.value = null;\n      // alert(\"Images Uploaded/Deleted\");\n    } catch (error) {\n      setIsUploadSuccessful(false);\n      console.error(\"Error uploading/deleting images:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to calculate images to delete and new images to upload\n  const calculateDelta = (selectedFiles, uploadedFiles) => {\n    const selectedFileIds = selectedFiles.map(file => file.id);\n    const uploadedFileIds = uploadedFiles.map(file => file.id);\n\n    const imagesToDelete = uploadedFiles.filter(file => !selectedFileIds.includes(file.id));\n    const newImages = selectedFiles.filter(file => !uploadedFileIds.includes(file.id));\n\n    return { imagesToDelete, newImages };\n  };\n\n\n  const fetchStudioImages = async (entityId) => {\n    setSelectedFiles([]);\n    setNewFiles([]);\n    try {\n      const folderPath = `${storageFolder}/${entityId}`;\n      console.log(folderPath)\n      const folderRef = firebaseRef(storage, folderPath);\n      const fileList = await listAll(folderRef);\n\n      const files = await Promise.all(\n        fileList.items.map(async (fileRef) => {\n          const downloadURL = await getDownloadURL(fileRef);\n\n          return {\n            id: fileRef.name,\n            filename: fileRef.name,\n            fileURL: downloadURL,\n          };\n        })\n      );\n      // console.log('File fetching',files);\n      setUploadedFiles(files); // Update the uploadedFiles state with fetched data\n      setSelectedFiles(files);\n    } catch (error) {\n      console.error('Error fetching user images:', error);\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    isValid: () => {\n      if (minImageCount === 0) return true;\n      return isUploadSuccessful\n    },\n  }));\n\n  return (\n    <div className=\"fileupload-view\" style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\n      <div className=\"row justify-content-center m-0\" style={{ flex: '1',justifyContent: 'center' }}>\n        <div className=\"col-md-6\" style={{ flex: '1' ,justifyContent: 'center'}}>\n          <div className=\"card mt-5\">\n            <div className=\"card-body\" style={{ backgroundColor: isDarkModeOn ? '#333333' : 'white' }}>\n              <div className=\"kb-data-box\">\n                <div className=\"kb-modal-data-title\">\n                  <div className=\"kb-data-title\" style={{justifyContent:'center',flex: '1'}}>\n                    <h4>{title}</h4>\n                    <p>Max no of image(s):{maxImageCount} {storageFolder === STORAGES.STUDIOIMAGES && <p>Add at least 5 images</p>}</p>\n                  </div>\n                </div>\n                <div style={{  backgroundColor: isDarkModeOn ? '#333333' : 'white'}}>\n                  <div className=\"kb-file-upload\">\n                    <div className=\"file-upload-box\">\n                      <input\n                        ref={imageInputRef}\n                        type=\"file\"\n                        id=\"fileupload\"\n                        className=\"file-upload-input\"\n                        onChange={handleInputChange}\n                        multiple\n                      />\n\n                    </div>\n                  </div>\n                  <br></br>\n                  <div className=\"kb-attach-box mb-3\">\n                  <div className=\"row\">\n                    {entityId && selectedFiles.length > 0 ? (\n                      selectedFiles.map((file) => (\n                        \n                        <div key={file.id} className=\"col-6 col-md-3 mb-3\" style={{ position: 'relative' }}>\n                          \n                          <Card sx={{ maxWidth: 345 }}>\n                            {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                              <div style={{ position: 'relative' }}>\n                                <img\n                                  src={file.fileimage ? file.fileimage : file.fileURL}\n                                  alt={file.filename}\n                                  className=\"card-img-top\"\n                                  style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                                />\n                                <IconButton\n                                  aria-label=\"delete\"\n                                  disabled={disable}\n                                  onClick={() => handleDeleteSelectedFile(file.id)}\n                                  style={{ position: 'absolute', top: 0, right: 0, backgroundColor: 'rgba(255, 255, 255, 0.5)' }}\n                                >\n                                  <DeleteIcon style={{color:\"ff0000\"}}/>\n                                </IconButton>\n                              </div>\n                            ) : (\n                              <CardContent>\n                                <i className=\"far fa-file-alt\"></i>\n                              </CardContent>\n                            )}\n                          </Card>\n                        </div>\n                        \n                      ))\n                    ) : (\n                      <div className=\"col-12 text-center\">\n                        <p>No images selected</p>\n                      </div>\n                    )}\n                  </div>\n\n                  </div>\n\n                  \n                  <div className=\"kb-buttons-box\">\n                    <button\n                      type=\"button\"\n                      className=\"btn div-submit\"\n                      style={{ backgroundColor: isDarkModeOn ? '#892CDC' : 'black', color:'white'  }}\n                      onClick={handleUploadSubmit}\n                      disabled={disable}\n                    >\n                      Image Upload\n                    </button>\n                  </div>\n                </div>\n                {selectedFiles.length > 0 && (\n                  <div className=\"kb-attach-box\" hidden>\n                    <div className=\"row\">\n                    <hr />\n                    {selectedFiles.map((file) => (\n                      <div key={file.id} className=\"col-6 col-md-3 mb-3\">\n                      <div className=\"card\">\n                        {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                          <img\n                            src={file.fileimage}\n                            alt={file.filename}\n                            className=\"card-img-top\"\n                            style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                          />\n                        ) : (\n                          <div className=\"card-body\">\n                            <i className=\"far fa-file-alt\"></i>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n              { progressDelete >= 0 && (\n                    <div>\n                        <p style={{ color: isDarkModeOn ? '#fff' : '#000' }}>\n                            Deleting images... {progressDelete.toFixed(2)}%\n                        </p>\n                        <progress \n                            value={progressDelete} \n                            max=\"100\" \n                            style={{\n                                color: isDarkModeOn ? '#fff' : '#000'\n                            }}\n                        >\n                            {progressDelete.toFixed(2)}%\n                        </progress>\n                    </div>\n                )}\n\n                { progressUpdate >= 0 && (\n                    <div>\n                        <p style={{ color: isDarkModeOn ? '#fff' : '#000' }}>\n                            Uploading images... {progressUpdate.toFixed(2)}%\n                        </p>\n                        <progress \n                            value={progressUpdate} \n                            max=\"100\" \n                            style={{\n                                color: isDarkModeOn ? '#fff' : '#000'\n                            }}\n                        >\n                            {progressUpdate.toFixed(2)}%\n                        </progress>\n                    </div>\n                )}\n\n                            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\n// Set default prop values\nImageUpload.defaultProps = {\n  maxImageCount: 5, // Default maximum image count\n  updateMode: false,\n  disable:false,\n};\n\nexport default ImageUpload;","import React from 'react';\nimport { Modal, Form, Row, Col, Button } from 'react-bootstrap';\n\nconst TimeRangePicker = ({ show, handleClose, handleSelect, defaultTime }) => {\n  //console.log(\"TimeRangePicker\",defaultTime)\n  const startTime_i = defaultTime.split('-')[0].trim();\n  const endTime_i = defaultTime.split('-')[1]?.trim();\n\n  //console.log(startTime_i,endTime_i,defaultTime)\n\n  const generateTimeOptions = () => {\n    const options = [];\n    let option_AM = [];\n    let option_PM = [];\n    for (let hours = 0; hours < 24; hours++) {\n      for (let minutes = 0; minutes < 60; minutes += 15) {\n        const formattedHours = hours.toString().padStart(2, '0');\n        const formattedMinutes = minutes.toString().padStart(2, '0');\n        const timeString = `${formattedHours}:${formattedMinutes}`;\n  \n        if (hours < 12) {\n          option_AM.push(`${timeString} AM`);\n        } else {\n          const formattedHours12 = (hours - 12).toString().padStart(2, '0');\n          option_PM.push(`${formattedHours12}:${formattedMinutes} PM`);\n        }\n      }\n    }\n\n    for (let i = 0; i < option_AM.length || i < option_PM.length; i++) {\n      if (i < option_AM.length) {\n        options.push(option_AM[i]);\n      }\n      if (i < option_PM.length) {\n        options.push(option_PM[i]);\n      }\n    }\n    \n\n  \n    return options;\n  };\n  \n\n  const renderTimeOptions = (defaultValue) => {\n    console.log(defaultValue);\n    const timeOptions = generateTimeOptions();\n  \n    return (\n      <>\n        <option value={defaultValue}>{defaultValue}</option>\n        {timeOptions.map((option) => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </>\n    );\n  };\n  \n  \n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Select Time</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col>\n          <Form.Group >\n          <Form.Label >\n            Start Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(e.target.value, null)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(startTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n          <Col>\n          <Form.Group>\n          <Form.Label >\n            End Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(null, e.target.value)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(endTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={handleClose}>Save</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default TimeRangePicker;\n","const dayMapping = {\n  M: \"Mon\",\n  T: \"Tues\",\n  W: \"Wed\",\n  Th: \"Thurs\",\n  F: \"Fri\",\n  St: \"Sat\",\n  Sn: \"Sun\",\n};\n\nexport const updateDaysFormat = (records) => {\n  const updatedDays = records.map((day) => dayMapping[day] || day);\n\n  return [...new Set(updatedDays)];\n};\n","import React, { useState } from 'react';\nimport { Form, Table, Button } from 'react-bootstrap';\nimport { FaPlus, FaMinus } from 'react-icons/fa';\nimport './StudioTable.css'; // Import the CSS file for styling\nimport  TimeRangePicker from './TimeRangePicker';\nimport danceStyles from '../danceStyles.json';\nimport { Autocomplete, TextField } from '@mui/material';\n\nimport { MultiSelect } from 'primereact/multiselect';\nimport \"primereact/resources/primereact.css\";\nimport \"primereact/resources/themes/saga-blue/theme.css\";\nimport { updateDaysFormat } from '../utils/mapping';\n\nconst daysOfWeek = ['Mon','Tues','Wed','Thurs','Fri','Sat','Sun'];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\"\n};\n\nfunction StudioTable({ tableData = [], setTableData, instructorNamesWithIds }) {\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const danceStylesOptions = danceStyles.danceStyles;\n  const [defaultTime, setDefaultTime] =  useState('12:00 PM - 01:00 PM')\n\n  const handleAddRow = () => {\n    setTableData((prevData) => [...prevData, { className: '', danceForms: '', days: '', time: '12:00 PM - 01:00 PM', instructors: [], fee:'',level:'' ,status: '',freeTrial: false, classCategory: []  }]);\n  };\n\n  const handleRemoveRow = (index) => {\n    if (tableData.length - 1 === 0) return;\n\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      newData.splice(index, 1);\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if(field===\"days\"){\n        value = Array.isArray(value) ? value.join(',') : value; \n      }\n      console.log(tableData)\n      const newData = [...prevData];\n      newData[index][field] = value;\n      return newData;\n    });\n  };\n\n  const handleTimePickerOpen = (index,time) => {\n    setDefaultTime(time)\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null); // Reset selected row index when closing time picker\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      \n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n    \n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(' - ');\n    \n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n      \n      return newData;\n    });\n  \n    setSelectedRow(selectedRowIndex);\n\n  };\n\n  return (\n    <>\n      <Table bordered variant=\"light\">\n        <thead>\n          <tr style={{border: '1px solid black'}}>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Name</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Dance Form</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Days</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Time</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'20rem', border: '1px solid black'}}>Instructors</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Fee (₹)</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Level</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Free Trial</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Category</th>\n            <th style={{padding:'0rem'}}>\n              <Button variant=\"primary\" onClick={handleAddRow}>\n                <FaPlus />\n              </Button>\n            </th>\n          </tr>\n        </thead>\n        <tbody style={{border: '1px solid black'}}>\n          {tableData.map((row, index) => (\n            <tr key={index} className={selectedRow === index ? 'selected-row' : ''}>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  type=\"text\"\n                  value={row.className}\n                  onChange={(e) => handleTableChange(index, 'className', e.target.value)}\n                  \n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n              < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.danceForms}\n                  onChange={(e) => handleTableChange(index, 'danceForms', e.target.value)}\n                >\n                  <option value=\"\">Select a dance form</option>\n                  {danceStylesOptions.map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </Form.Control>\n\n              </td>\n              \n              <td style={{ padding:'0rem',minWidth:'15rem', border: '1px solid black'}} className=\"m-0 p-0\">\n                <MultiSelect value={row.days && updateDaysFormat(row?.days?.split?.(',')?.filter?.(day => day !== '')) } \n                    onChange={(event) => handleTableChange(index, 'days', event.target.value)}\n                    options={daysOfWeek}\n                    placeholder=\"class days\" maxSelectedLabels={7} className=\"w-full md:w-20rem\"\n                  />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.time}\n                  //onClick={() => handleTimePickerOpen(index,row.time)}\n                  onClick={() => handleTimePickerOpen(index,row.time)}\n                  \n                />\n                {showTimePicker && (\n                <TimeRangePicker\n                  show={showTimePicker}\n                  handleClose={handleTimePickerClose}\n                  handleSelect={handleTimeSelect}\n                  defaultTime={tableData[selectedRowIndex]?.time || \"00:00-00:00\"}\n                />\n              )}\n\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black', width:'20rem'}}>\n                <Autocomplete\n                  multiple\n                  id=\"tags-standard\"\n                  options={instructorNamesWithIds}\n                  value={row.instructors}\n                  onChange={(_, values) => handleTableChange(index, 'instructors', values)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Instructors\"\n                    />\n                  )}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"number\"\n                  value={row.fee}\n                  onChange={(e) => handleTableChange(index, 'fee', e.target.value)}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.level}\n                  onChange={(e) => handleTableChange(index, 'level', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value=\"Beginner\">Beginner</option>\n                      <option value=\"Intermediate\">Intermediate</option>\n                      <option value=\"Advanced\">Advanced</option>\n                      <option value=\"Misc\">Misc</option>\n\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.freeTrial}\n                  onChange={(e) => handleTableChange(index, 'freeTrial', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value={true}>Yes</option>\n                      <option value={false}>No</option>\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem', width:'20rem'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={Array.isArray(row.classCategory) && row.classCategory.length > 0 ? row.classCategory[0] : \"\"}\n                  onChange={(e) => handleTableChange(index, 'classCategory', [e.target.value])}\n                >\n                  <option value=\"\">Select Class Category</option>\n                  {Object.values(categoryMap).map((value, idx) => <option key={idx} value={value}>{value}</option>)}\n                </Form.Control>\n              </td>\n              <td style={{padding:'0rem'}}>\n                <Button variant=\"danger\" onClick={() => handleRemoveRow(index)}>\n                  <FaMinus />\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>      \n    </>\n  );\n}\n\nexport default StudioTable;\n\n/*\n                <Autocomplete\n                  multiple\n                  id={`days-autocomplete-${index}`}\n                  options={daysOfWeekOptions}\n                  getOptionLabel={(option) => option.value}\n                  value={row.days.split(',').filter(day => day !== '').map(day => daysOfWeekOptions.find(option => option.value === day))}\n                  onChange={(event, newValue) => handleTableChange(index, 'days', newValue.map(option => option.value).join(','))}\n                  renderInput={(params) => <TextField sx={{color:\"black\",backgroundColor:\"white\",width:\"100%\"}} {...params} />}\n                />\n              */","import React, { useState, useEffect } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { useJsApiLoader } from '@react-google-maps/api';\nimport { FaMapMarkerAlt } from 'react-icons/fa';\n\nconst libraries = ['places'];\nconst apiKey = \"AIzaSyAAPq5IMotbu90TZAEtyj8qgYyVJoROzsQ\";\n\nfunction MapsInput({ selectedLocation, setSelectedLocation, mapAddress, setMapAddress }) {\n    const [center, setCenter] = useState(selectedLocation || { lat: 28.6139, lng: 77.2090 });\n\n    const { isLoaded, loadError } = useJsApiLoader({\n        googleMapsApiKey: apiKey,\n        libraries,\n    });\n\n    useEffect(() => {\n        if (selectedLocation) {\n            setCenter(selectedLocation);\n        }\n    }, [selectedLocation]);\n\n    const handleSelect = async (selectedAddress) => {\n        const results = await geocodeByAddress(selectedAddress);\n        const latLng = await getLatLng(results[0]);\n\n        setMapAddress(selectedAddress);\n        setCenter(latLng);\n        setSelectedLocation(latLng);\n    };\n\n    const handleMapClick = async ({ lat, lng }) => {\n        const latLng = { lat, lng };\n        setSelectedLocation(latLng);\n        setCenter(latLng);\n\n        if (!mapAddress.trim()) {\n            try {\n                const geocoder = new window.google.maps.Geocoder();\n                geocoder.geocode({ location: latLng }, (results, status) => {\n                    if (status === 'OK' && results[0]) {\n                        setMapAddress(results[0].formatted_address);\n                    } else {\n                        console.error('Geocoder failed due to: ', status);\n                    }\n                });\n            } catch (error) {\n                console.error('Error with reverse geocoding:', error);\n            }\n        }\n    };\n\n    if (loadError) return <p>Error loading maps</p>;\n    if (!isLoaded) return <p>Loading maps...</p>;\n\n    return (\n        <div>\n            <br />\n\n            {/* Autocomplete Input */}\n            <PlacesAutocomplete\n                value={mapAddress}\n                onChange={setMapAddress}\n                onSelect={handleSelect}\n            >\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                    <div>\n                        <input\n                            {...getInputProps({\n                                placeholder: 'Enter address...',\n                                className: 'location-search-input',\n                                style: { height: '40px', fontSize: '16px', width: '100%' },\n                            })}\n                        />\n                        <div className=\"autocomplete-dropdown-container\">\n                            {loading && <div>Loading...</div>}\n                            {suggestions.map((suggestion) => (\n                                <div {...getSuggestionItemProps(suggestion, { className: 'suggestion-item' })} key={suggestion.placeId}>\n                                    <span>{suggestion.description}</span>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </PlacesAutocomplete>\n\n            <br />\n\n            {/* Google Map */}\n            <div style={{ height: '400px', width: '100%' }}>\n                <GoogleMapReact\n                    bootstrapURLKeys={{ key: apiKey }}\n                    defaultCenter={center}\n                    center={center}\n                    defaultZoom={16}\n                    onClick={handleMapClick}\n                >\n                    {selectedLocation && (\n                        <PinMarker lat={selectedLocation.lat} lng={selectedLocation.lng} />\n                    )}\n                </GoogleMapReact>\n            </div>\n        </div>\n    );\n}\n\nconst PinMarker = () => (\n    <div style={{ position: 'relative', textAlign: 'center' }}>\n        <FaMapMarkerAlt style={{ color: 'green', fontSize: '24px' }} />\n    </div>\n);\n\nexport default MapsInput;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport MUIButton from \"@mui/material/Button\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\n\nconst SuccessMessage = ({ StudioId }) => {\n  const navigate = useNavigate();\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n\n  const form = document.getElementById(\"addStudioForm\");\n\n  const studioName = form?.studioName?.value;\n  const streetName = form?.street?.value;\n  const city = form?.city?.value;\n\n  const navigateToStudio = () => {\n    navigate(`/studio/${StudioId}`);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-12\"> {/* Change col-md-5 to col-md-12 */}\n          <div className=\"_success message-box\">\n            <i className=\"fa fa-check-circle\" aria-hidden=\"true\"></i>\n            <h4\n              style={{\n                textTransform: \"none\",\n                marginTop: \"1rem\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            >\n              Your studio {studioName} (Studio ID: {StudioId}), located at {streetName} in {city} has been registered successfully 🎉\n            </h4>\n            <MUIButton\n              sx={{ mt: 1, px: 3, color: 'white', bgcolor: '#735EAB', textTransform: 'none', \"&:hover\": { bgcolor: \"#735EAB\" }, \"&:active\": { bgcolor: \"#735EAB\" } }}\n              variant=\"text\"\n              onClick={() => navigateToStudio()}\n            >\n              Check Now\n            </MUIButton>\n          </div>\n        </div>\n      </div>\n      <hr />\n\n      <style jsx>{`\n        ._success {\n          padding: 45px;\n          width: 100%;\n          text-align: center;\n          margin: 30px auto;\n        }\n\n        ._success i {\n          font-size: 55px;\n          color: #28a745;\n        }\n\n        ._success h2 {\n          margin-bottom: 12px;\n          font-size: 30px;\n          font-weight: 300;\n          line-height: 1.2;\n          margin-top: 10px;\n        }\n\n        ._success p {\n          margin-bottom: 0px;\n          font-size: 18px;\n          color: #495057;\n          font-weight: 100;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SuccessMessage;\n","import { Box } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\n\nconst CustomSwitch = ({ isOn, handleToggle }) => {\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n\n  return (\n    <Box\n      onClick={handleToggle}\n      style={{\n        width: \"40px\",\n        height: \"20px\",\n        borderRadius: \"10px\",\n        backgroundColor: isOn ? \"#f44336\" : isDarkModeOn ? \"#555\" : \"#ccc\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: isOn ? \"flex-end\" : \"flex-start\",\n        padding: \"2px\",\n        cursor: \"pointer\",\n        transition: \"background-color 0.3s\",\n      }}\n    >\n      <Box\n        style={{\n          width: \"16px\",\n          height: \"16px\",\n          borderRadius: \"50%\",\n          backgroundColor: \"#fff\",\n          boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n          transition: \"transform 0.3s\",\n        }}\n      />\n    </Box>\n  );\n};\n\nexport default CustomSwitch;\n","import { useSelector } from \"react-redux\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport { Button as MuiButton } from \"@mui/material\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\nimport dayOrder from \"../days.json\";\nimport CustomSwitch from \"./CustomSwitch\";\n\nconst generateTimeOptions = () => {\n  let option_AM = [];\n  let option_PM = [];\n  for (let hours = 0; hours < 24; hours++) {\n    for (let minutes = 0; minutes < 60; minutes += 15) {\n      const formattedHours = hours.toString().padStart(2, \"0\");\n      const formattedMinutes = minutes.toString().padStart(2, \"0\");\n      const timeString = `${formattedHours}:${formattedMinutes}`;\n\n      if (hours < 12) {\n        option_AM.push(`${timeString} AM`);\n      } else {\n        const formattedHours12 = (hours === 12 ? 12 : hours - 12)\n          .toString()\n          .padStart(2, \"0\");\n        option_PM.push(`${formattedHours12}:${formattedMinutes} PM`);\n      }\n    }\n  }\n\n  return [...option_AM, ...option_PM];\n};\n\nconst renderTimeOptions = (defaultValue) => {\n  const timeOptions = generateTimeOptions();\n  return (\n    <>\n      <option value={defaultValue}>{defaultValue}</option>\n      {timeOptions.map((option) => (\n        <option key={option} value={option}>\n          {option}\n        </option>\n      ))}\n    </>\n  );\n};\n\nconst StudioWeeklyTimings = ({ timings, setTimings }) => {\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n\n  const handleSelect = (day, index, type, value) => {\n    const updatedDayTimings = [...timings[day]];\n    updatedDayTimings[index][type] = value;\n    setTimings({ ...timings, [day]: updatedDayTimings });\n  };\n\n  const addTimeSlot = (day) => {\n    const updatedDayTimings = [\n      ...timings[day],\n      { open: \"09:00 AM\", close: \"06:00 PM\" },\n    ];\n    setTimings({ ...timings, [day]: updatedDayTimings });\n  };\n\n  const removeTimeSlot = (day, index) => {\n    const updatedDayTimings = [...timings[day]];\n    if (updatedDayTimings.length > 1) {\n      updatedDayTimings.splice(index, 1);\n      setTimings({ ...timings, [day]: updatedDayTimings });\n    }\n  };\n\n  const toggleDayClosed = (day) => {\n    const isClosed =\n      timings[day].length === 1 && timings[day][0].open === \"Closed\";\n    if (isClosed) {\n      setTimings({\n        ...timings,\n        [day]: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n      });\n    } else {\n      setTimings({\n        ...timings,\n        [day]: [{ open: \"Closed\", close: \"Closed\" }],\n      });\n    }\n  };\n\n  const isDayClosed = (day) => {\n    return timings[day].length === 1 && timings[day][0].open === \"Closed\";\n  };\n\n  return (\n    <Row className=\"gy-3\">\n      {dayOrder.map((day) => (\n        <Col xs={12} sm={6} md={4} lg={3} key={day}>\n          <div className=\"d-flex justify-content-between align-items-center mb-3\">\n            <span style={{ fontWeight: \"bold\" }}>\n              {day.charAt(0).toUpperCase() + day.slice(1)}\n            </span>\n            <div className=\"d-flex align-items-center gap-2\">\n              <span\n                style={{\n                  fontSize: \"0.8rem\",\n                  color: isDarkModeOn ? \"#aaa\" : \"#666\",\n                }}\n              >\n                {isDayClosed(day) ? \"Closed\" : \"Open\"}\n              </span>\n              <CustomSwitch\n                isOn={isDayClosed(day)}\n                handleToggle={() => toggleDayClosed(day)}\n              />\n            </div>\n          </div>\n\n          {!isDayClosed(day) ? (\n            timings[day].map((slot, index) => (\n              <Row key={index} className=\"mb-2 align-items-center\">\n                <Col xs={5}>\n                  <Form.Group>\n                    <Form.Label>Start Time</Form.Label>\n                    <Form.Control\n                      as=\"select\"\n                      value={slot.open}\n                      onChange={(e) =>\n                        handleSelect(day, index, \"open\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                        color: isDarkModeOn ? \"white\" : \"#333333\",\n                        backgroundColor: isDarkModeOn ? \"#333333\" : \"white\",\n                      }}\n                    >\n                      {renderTimeOptions(slot.open)}\n                    </Form.Control>\n                  </Form.Group>\n                </Col>\n                <Col xs={5}>\n                  <Form.Group>\n                    <Form.Label>End Time</Form.Label>\n                    <Form.Control\n                      as=\"select\"\n                      value={slot.close}\n                      onChange={(e) =>\n                        handleSelect(day, index, \"close\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                        color: isDarkModeOn ? \"white\" : \"#333333\",\n                        backgroundColor: isDarkModeOn ? \"#333333\" : \"white\",\n                      }}\n                    >\n                      {renderTimeOptions(slot.close)}\n                    </Form.Control>\n                  </Form.Group>\n                </Col>\n                <Col xs={2}>\n                  <Button\n                    variant=\"danger\"\n                    size=\"sm\"\n                    onClick={() => removeTimeSlot(day, index)}\n                    className=\"mt-4\"\n                  >\n                    -\n                  </Button>\n                </Col>\n              </Row>\n            ))\n          ) : (\n            <div className=\"text-muted mb-3\">Studio is closed on this day</div>\n          )}\n\n          {!isDayClosed(day) && (\n            <MuiButton\n              variant=\"contained\"\n              onClick={() => addTimeSlot(day)}\n              sx={{\n                color: isDarkModeOn ? \"black\" : \"white\",\n                bgcolor: isDarkModeOn ? \"white\" : \"black\",\n                \"&:hover\": { bgcolor: isDarkModeOn ? \"white\" : \"black\" },\n              }}\n            >\n              Add Time Slot\n            </MuiButton>\n          )}\n        </Col>\n      ))}\n    </Row>\n  );\n};\n\nexport default StudioWeeklyTimings;\n","import React, { useRef } from 'react'\nimport { Row, Col , Form } from 'react-bootstrap';\nimport {LinearProgress, Button as MuiButton} from '@mui/material';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,addDoc,updateDoc,collection,where,getDocs,query, deleteDoc } from \"firebase/firestore\";\nimport { COLLECTIONS, DRAFT_COLLECTIONS } from '../constants';\nimport StudioTable from './StudioTable';\nimport ImageUpload from './ImageUpload';\nimport { STORAGES } from '../constants';\nimport MapsInput from './MapsInput';\nimport { useSelector} from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport indianCities from '../cities.json';\nimport indianStates from '../states.json';\nimport danceStyles from '../danceStyles.json';\nimport { AMENITIES_ICONS } from '../constants';\nimport {Autocomplete,TextField} from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport {Stepper,Step,StepLabel} from '@mui/material';\nimport SuccessMessage from './SucessPage';\nimport { postData } from '../utils/common';\nimport { isEqual } from 'lodash';\nimport StudioWeeklyTimings from './StudioWeeklyTiming';\nimport { useSnackbar } from '../context/SnackbarContext';\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nconst initialStudioTimings = {\n  tuesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  wednesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  thursday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  friday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  saturday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  sunday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  monday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n}\n\nconst DRAFT_INTERVAL_TIME = 1000 * 10;\n\nfunction StudioAdd({instructors}) {\n    const previousDraftState = useRef(null);\n    const effectDraftRef = useRef(null);\n    const logoImageUploadRef = useRef(null);\n    const studioImageUploadRef = useRef(null);\n    const anouncementImageUploadRef = useRef(null);\n    const showSnackbar = useSnackbar();\n    const [newStudioId, setNewStudioId] = useState(\"\")\n    const [tableData, setTableData] = useState(\n      [{ className: '', danceForms: '', days: '', time: '', instructors: [], fee:'',level:'' ,status: '' ,freeTrial:false ,classCategory: []}],\n    );\n    const [selectedLocation, setSelectedLocation] = useState(null);\n    const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n    const [selectedInstructors, setSelectedInstructors] = useState([]);\n    const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n    const [selectedAmenities, setSelectedAmenities] = useState([]);\n    const instructorNamesWithIds = instructors.map((instructor) => `${instructor.name} - ${instructor.id}`);\n    const [isReady, setIsReady] = useState(false);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [timings, setTimings] = useState(initialStudioTimings);\n\n    // console.log(\"==============\");\n    // console.log(\"timings\", timings);\n    // console.log(\"==============\");\n\n    //const [dropdownVisible, setDropdownVisible] = useState(false);\n    const locationOptions = indianCities.cities;\n    const stateOptions = indianStates.states;\n    const danceStylesOptions = danceStyles.danceStyles;\n    const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n    const [activeStep, setActiveStep] = useState(0);\n    const [mapAddress, setMapAddress] = useState('');\n\n    const validateStep1 = () => {\n      const form = document.getElementById(\"addStudioForm\");\n\n      if (!form.studioName.value) return \"Studio name is required\";\n      if (!form.aboutStudio.value) return \"About Studio is required\";\n      if (!form.founderName.value) return \"Founder name is required\";\n      if (!form.aboutFounder.value) return \"About Founder is required\";\n      if (!form.mobileNumber.value) return \"Mobile number is required\";\n      if (!form.whatsappNumber.value) return \"WhatsApp number is required\";\n      if (!form.numberOfHalls.value) return \"Number of halls is required\";\n      if (!form.maximumOccupancy.value) return \"Maximum occupancy is required\";\n      if (!selectedDanceStyles.length) return \"At least one dance style must be selected\";\n    };\n\n    const validateStep2 = () => {\n      if (!Object.values(timings).every((slots) => slots.length > 0)) {\n        return \"All timing slots must be filled\";\n      }\n      if (!tableData.length) {\n        return \"At least one class entry is required\";\n      }\n      for (const entry of tableData) {\n        if (!entry.className?.trim()) return \"Class name is required\";\n        if (!entry.danceForms?.trim()) return \"Dance forms are required\";\n        if (!entry.days?.trim()) return \"Days are required\";\n        if (!entry.time?.trim()) return \"Time is required\";\n        if (!entry.fee?.trim()) return \"Fee is required\";\n        if (!entry.level?.trim()) return \"Level is required\";\n        if (!entry.instructors.length) return \"At least one instructor is required\";\n        if (!entry.classCategory.length || !entry.classCategory[0]?.trim()) return \"Class category is required\";\n      }\n    };\n\n    const validateStep3 = () => {\n      const form = document.getElementById(\"addStudioForm\");\n\n      if (!form.buildingName.value) return \"Building name is required\";\n      if (!form.street.value) return \"Street is required\";\n      if (!form.city.value) return \"City is required\";\n      if (!form.pincode.value) return \"Pincode is required\";\n      if (!form.state.value) return \"State is required\";\n      if (!mapAddress) return \"Address is required\";\n      if (!selectedLocation) return \"Location selection is required\";\n    };\n\n    const validateStep4 = () => {\n      if (!logoImageUploadRef.current?.isValid()) return \"Please upload studio logo before proceeding\"\n    };\n\n    const validateStep5 = () => {\n      if (!studioImageUploadRef.current?.isValid()) return \"Please upload studio images before proceeding\"\n      if (!anouncementImageUploadRef.current?.isValid()) return \"Please upload studio anouncement images before proceeding\"\n    };\n\n    const handleNext = () => {\n      let errorMessage = '';\n\n      if (activeStep === 0) errorMessage = validateStep1()\n\n      if (activeStep === 1) errorMessage = validateStep2()\n\n      if (activeStep === 2) errorMessage = validateStep3()\n        \n      if (activeStep === 3) errorMessage = validateStep4()\n\n      if (activeStep === 4) errorMessage = validateStep5()\n\n      if (errorMessage) {\n        return showSnackbar(errorMessage, 'error');\n      }\n\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n\n    const darkTheme = createTheme({\n      palette: {\n        mode: isDarkModeOn?'dark':'light',\n      },\n    });\n\n    const handleDanceStylesChange = (event, value) => {\n      setSelectedDanceStyles(value);\n    };  \n\n    const handleAmentiesChange = (event, value) => {\n      setSelectedAmenities(value);\n    };\n\n    const handleInstructorChange = (event, value) => {\n      setSelectedInstructors(value);\n    };\n\n    const resetDraft = async () => {\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n\n          await deleteDoc(studioRef);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n      const handleAddStudio = async (event) => {\n        event.preventDefault();\n\n        if (activeStep < 3) { // If user enter enter/return btn at any place it should validate all\n          const errorMessage1 = validateStep1();\n          const errorMessage2 = validateStep2();\n          const errorMessage3 = validateStep3();\n        \n          const errorMessages = [errorMessage1, errorMessage2, errorMessage3].filter(Boolean).join(', ');\n        \n          if (errorMessages) {\n            return showSnackbar(errorMessages, 'error');\n          }\n        }        \n\n        const title = event.target.studioName.value;\n        if (!title) {\n          return;\n        }\n        let isPremium=true\n        const newData = tableData.reduce((accumulator, current, index) => {\n          accumulator[index] = current;\n          return accumulator;\n        }, {});\n\n        try {\n          const currentUserEmail = JSON.parse(localStorage.getItem(\"userInfo\"))?.email;\n          const studioData = {\n              studioName: event.target.studioName.value,\n              aboutStudio: event.target.aboutStudio.value,\n              founderName: event.target.founderName.value,\n              aboutFounder: event.target.aboutFounder.value,\n              mobileNumber: event.target.mobileNumber.value,\n              whatsappNumber: event.target.whatsappNumber.value,\n              mailAddress: event.target.mailAddress.value,\n              danceStyles: selectedDanceStyles.join(\",\"),\n              numberOfHalls: event.target.numberOfHalls.value,\n              maximumOccupancy: event.target.maximumOccupancy.value,\n              instructorsNames: selectedInstructors,\n              status: 'OPEN',\n              tableData: newData,\n              buildingName: event.target.buildingName.value,\n              street: event.target.street.value,\n              city: event.target.city.value,\n              landmark: event.target.landmark.value,\n              pincode: event.target.pincode.value,\n              state: event.target.state.value,\n              country: \"India\",\n              mapAddress,\n              geolocation : selectedLocation,\n              gstNumber: event.target.gstNumber.value,\n              enrolledId:[],\n              reviews:[],\n              author: JSON.parse(localStorage.getItem('userInfo')).displayName,\n              UserId: JSON.parse(localStorage.getItem('userInfo')).UserId,\n              isPremium: isPremium,\n              addAmenities: selectedAmenities.join(\",\"),\n              enrollmentProcess: encodeToUnicode(event.target.enrollmentProcess.value),\n              creatorEmail: currentUserEmail,\n              instagram: event.target.instagram.value,\n              facebook: event.target.facebook.value,\n              youtube: event.target.youtube.value,\n              twitter: event.target.twitter.value,\n              visibilty:1,\n              timings\n          };\n            setIsSubmitting(true);\n            const notifyEmails = currentUserEmail\n            const metaData = {\n              entity_name: studioData.studioName,\n              city: studioData.city ,\n            }\n            const response = await postData(studioData,COLLECTIONS.STUDIO, notifyEmails, metaData) ;\n            if (response.ok) {\n              if (effectDraftRef.current) {\n                clearInterval(effectDraftRef.current);\n              }\n              const result = await response.json();\n              setNewStudioId(result.id)\n              resetDraft();\n              handleNext();\n            }\n        } catch (error) {\n          console.error(\"Error adding studio: \", error);\n        } finally {\n          setIsSubmitting(false);\n        }\n      };\n\n  const saveDraft = async () => {\n    const form = document.getElementById(\"addStudioForm\");\n\n    try {\n      const q = query(\n        collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n        where(\n          \"UserId\",\n          \"==\",\n          JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n        )\n      );\n  \n      const querySnapshot = await getDocs(q);\n  \n      if (!querySnapshot.empty) {\n        let studios = [];\n  \n        querySnapshot.forEach((doc) => {\n          studios.push({ id: doc.id, ...doc.data() });\n        });\n  \n        let foundStudio = studios[0];\n  \n        const studioRef = doc(\n          db,\n          DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n          foundStudio.id\n        );\n  \n        const newData = tableData.reduce((accumulator, current, index) => {\n          accumulator[index] = current;\n          return accumulator;\n        }, {});\n  \n        const currentState = {\n          studioName: form.studioName.value,\n          aboutStudio: form.aboutStudio.value,\n          founderName: form.founderName.value,\n          aboutFounder: form.aboutFounder.value,\n          mobileNumber: form.mobileNumber.value,\n          whatsappNumber: form.whatsappNumber.value,\n          mailAddress: form.mailAddress.value,\n          danceStyles: selectedDanceStyles.join(\",\"),\n          numberOfHalls: form.numberOfHalls.value,\n          maximumOccupancy: form.maximumOccupancy.value,\n          instructorsNames: selectedInstructors,\n          status: \"OPEN\",\n          tableData: newData,\n          buildingName: form.buildingName.value,\n          street: form.street.value,\n          city: form.city.value,\n          landmark: form.landmark.value,\n          pincode: form.pincode.value,\n          state: form.state.value,\n          country: \"India\",\n          mapAddress: mapAddress || '',\n          geolocation: selectedLocation,\n          gstNumber: form.gstNumber.value,\n          enrolledId: [],\n          reviews: [],\n          author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n          UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n          isPremium: true,\n          addAmenities: selectedAmenities.join(\",\"),\n          enrollmentProcess: encodeToUnicode(form.enrollmentProcess.value),\n          creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\")).email,\n          instagram: form.instagram.value,\n          facebook: form.facebook.value,\n          youtube: form.youtube.value,\n          twitter: form.twitter.value,\n          visibilty: 1,\n          timings,\n        };\n\n        if (!isEqual(previousDraftState.current, currentState)) {\n          await updateDoc(studioRef, currentState);\n          previousDraftState.current = currentState;\n          showSnackbar(\"Draft saved successfully!\", \"success\");\n        } else {\n          showSnackbar(\"No changes detected to save.\", \"info\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error saving draft: \", error);\n    }\n  };\n\n  useEffect(() => {\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          form.studioName.value = foundStudio.studioName;\n          form.aboutStudio.value = foundStudio.aboutStudio;\n          form.founderName.value = foundStudio.founderName;\n          form.aboutFounder.value = foundStudio.aboutFounder;\n          form.mobileNumber.value = foundStudio.mobileNumber;\n          form.whatsappNumber.value = foundStudio.whatsappNumber;\n          form.mailAddress.value = foundStudio.mailAddress;\n          setSelectedDanceStyles(\n            foundStudio.danceStyles.length\n              ? foundStudio.danceStyles.split(\",\")\n              : []\n          );\n          form.numberOfHalls.value = foundStudio.numberOfHalls;\n          form.maximumOccupancy.value = foundStudio.maximumOccupancy;\n          setSelectedInstructors(foundStudio.instructorsNames);\n          form.buildingName.value = foundStudio.buildingName;\n          form.street.value = foundStudio.street;\n          form.city.value = foundStudio.city;\n          form.landmark.value = foundStudio.landmark;\n          form.pincode.value = foundStudio.pincode;\n          form.state.value = foundStudio.state;\n          setMapAddress(foundStudio.mapAddress || '');\n          setSelectedLocation(foundStudio.geolocation);\n          // form.aadharNumber.value = foundStudio.aadharNumber;\n          form.gstNumber.value = foundStudio.gstNumber;\n          setTableData(Object.values(foundStudio.tableData));\n          setSelectedAmenities(\n            foundStudio.addAmenities.length\n              ? foundStudio.addAmenities.split(\",\")\n              : []\n          );\n          form.enrollmentProcess.value = decodeUnicode(\n            foundStudio.enrollmentProcess\n          );\n          form.instagram.value = foundStudio.instagram;\n          form.facebook.value = foundStudio.facebook;\n          form.youtube.value = foundStudio.youtube;\n          form.twitter.value = foundStudio.twitter;\n          if (foundStudio?.timings) setTimings(foundStudio.timings);\n        } else {\n          await addDoc(collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS), {\n            studioName: form.studioName.value,\n            aboutStudio: form.aboutStudio.value,\n            founderName: form.founderName.value,\n            aboutFounder: form.aboutFounder.value,\n            mobileNumber: form.mobileNumber.value,\n            whatsappNumber: form.whatsappNumber.value,\n            mailAddress: form.mailAddress.value,\n            danceStyles: selectedDanceStyles.join(\",\"),\n            numberOfHalls: form.numberOfHalls.value,\n            maximumOccupancy: form.maximumOccupancy.value,\n            instructorsNames: selectedInstructors,\n            status: \"OPEN\",\n            tableData: {\n              0: {\n                className: \"\",\n                danceForms: \"\",\n                days: \"\",\n                time: \"\",\n                instructors: [],\n                fee: \"\",\n                level: \"\",freeTrial:false, \n                classCategory: []\n              },\n            },\n            buildingName: form.buildingName.value,\n            street: form.street.value,\n            city: form.city.value,\n            landmark: form.landmark.value,\n            pincode: form.pincode.value,\n            state: form.state.value,\n            country: \"India\",\n            mapAddress: mapAddress || \"\",\n            geolocation: selectedLocation,\n            \n            gstNumber: form.gstNumber.value,\n            enrolledId: [],\n            reviews: [],\n            author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n            UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n            isPremium: true,\n            addAmenities: selectedAmenities.join(\",\"),\n            enrollmentProcess: encodeToUnicode(form.enrollmentProcess.value),\n            creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\")).email,\n            instagram: form.instagram.value,\n            facebook: form.facebook.value,\n            youtube: form.youtube.value,\n            twitter: form.twitter.value,\n            visibilty: 1,\n            timings\n          });\n        }\n\n        setIsReady(true);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    main();\n  }, []);\n\n  useEffect(() => {\n    effectDraftRef.current = null;\n    let previousState = null; \n\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n          \n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n          \n          effectDraftRef.current = setInterval(async () => {\n            \n            try {\n              const newData = tableData.reduce((accumulator, current, index) => {\n                accumulator[index] = current;\n                return accumulator;\n              }, {});\n              const currentState = { \n                studioName: form.studioName.value,\n                aboutStudio: form.aboutStudio.value,\n                founderName: form.founderName.value,\n                aboutFounder: form.aboutFounder.value,\n                mobileNumber: form.mobileNumber.value,\n                whatsappNumber: form.whatsappNumber.value,\n                mailAddress: form.mailAddress.value,\n                danceStyles: selectedDanceStyles.join(\",\"),\n                numberOfHalls: form.numberOfHalls.value,\n                maximumOccupancy: form.maximumOccupancy.value,\n                instructorsNames: selectedInstructors,\n                status: \"OPEN\",\n                tableData: newData,\n                buildingName: form.buildingName.value,\n                street: form.street.value,\n                city: form.city.value,\n                landmark: form.landmark.value,\n                pincode: form.pincode.value,\n                state: form.state.value,\n                country: \"India\",\n                mapAddress: mapAddress || \"\",\n                geolocation: selectedLocation,\n                \n                gstNumber: form.gstNumber.value,\n                enrolledId: [],\n                reviews: [],\n                author: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .displayName,\n                UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n                isPremium: true,\n                addAmenities: selectedAmenities.join(\",\"),\n                enrollmentProcess: encodeToUnicode(\n                  form.enrollmentProcess.value\n                ),\n                creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .email,\n                instagram: form.instagram.value,\n                facebook: form.facebook.value,\n                youtube: form.youtube.value,\n                twitter: form.twitter.value,\n                visibilty: 1,\n                timings\n              }\n              \n              // Check if the current state is different from the previous state\n              if (!isEqual(previousState, currentState)) {\n                try {\n                  await updateDoc(studioRef, currentState);\n                  previousState = currentState; // Update previous state after successful save\n                  // console.log(\"Next AutoSave in\",DRAFT_INTERVAL_TIME)\n                } catch (error) {\n                  console.error(error);\n                }\n              }else{\n                // console.log(\"Nothing for Autosave to save\")\n            }\n\n            } catch (error) {\n              console.error(error);\n            }\n          }, DRAFT_INTERVAL_TIME);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    if (isReady) main();\n\n    return () => clearInterval(effectDraftRef.current);\n  }, [\n    isReady,\n    selectedDanceStyles,\n    selectedInstructors,\n    tableData,\n    mapAddress,\n    selectedLocation,\n    selectedAmenities,\n  ]);\n\n  return (\n    <div >\n          <Stepper activeStep={activeStep} alternativeLabel>\n            {['Basic Studio & Owner details', 'Instructors, Classes & Social Media', 'Address & Registration', 'Studio Icon', 'Studio & Class Images'].map((label) => (\n              <Step key={label}>\n                <StepLabel ><p style={{color:isDarkModeOn?\"white\":\"black\"}}>{label}</p></StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          \n            < div hidden={activeStep > 2} >\n            <Form id=\"addStudioForm\" onSubmit={handleAddStudio} style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n              <Form.Group controlId=\"formBasicAdd\">\n             \n                  <div hidden={activeStep !== 0}>\n                  <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Basic Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Studio Name *</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"studioName\" />\n                \n                <Form.Label>About Studio *</Form.Label>\n                <Form.Control rows={6} style={{  minHeight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio's details\" name=\"aboutStudio\" />\n                \n                </Col>\n                <Col md={6}>\n                <Form.Label>Founder's Name *</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter founder name\" name=\"founderName\" />\n                \n                <Form.Label>About Founder *</Form.Label>\n                <Form.Control rows={6} style={{  minheight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter founder's details\" name=\"aboutFounder\" />\n                \n                </Col>\n                </Row>\n                <hr></hr>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Contact Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Mobile Number *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter mobile number\" name=\"mobileNumber\" type=\"number\"  />\n\n                <Form.Label>WhatsApp Number *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter whatsapp number\" name=\"whatsappNumber\" type=\"number\"  />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Mail Address</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"email\" rows={1} placeholder=\"Enter mail address\" name=\"mailAddress\" />\n                \n                  </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Details</h3>\n                <Row>\n                  <Col md={6}>\n                <Form.Label >Dance Styles *</Form.Label>\n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                <Form.Label>Number of Hall(s) *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Number of Hall(s)\" name=\"numberOfHalls\" type=\"number\" />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Maximum Occupancy *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}  rows={1} placeholder=\"Maximum Occupancy\" name=\"maximumOccupancy\" type=\"number\"   />\n                </Col>\n                </Row>\n                <br></br>\n                <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}} disabled >\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end gap-3\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={saveDraft}>\n                      Save to Draft\n                    </MuiButton>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                  \n                  </div>\n\n\n               \n              \n                <div hidden={activeStep !== 1}>\n\n\n                \n            <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Instructor Details</h3>\n                <Form.Label>Names of Instructors</Form.Label>\n                <Row>\n                  <ThemeProvider theme={darkTheme}>\n                    <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={instructorNamesWithIds}\n                      value={selectedInstructors}\n                      onChange={handleInstructorChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Instructors\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                  </ThemeProvider>\n                </Row> \n                <a href=\"#/modifyInstructors\" rel=\"noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', color: isDarkModeOn ? 'cyan' : 'blue' }}>\n                      Go to Instrcutors' Add/update Page? \n                    </a>\n                <hr></hr>   \n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Class Schedule *</h3>\n                  <span>Time Table Of dance classes</span>\n                    <div style={{ overflowX: 'auto', whiteSpace: 'nowrap', scrollbarColor: isDarkModeOn ? '#888 #333' : '#ccc #fff', }}>\n                      <StudioTable\n                        tableData={tableData}\n                        setTableData={setTableData}\n                        instructorNamesWithIds={instructorNamesWithIds}\n                      />\n                    </div>\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Additional Details</h3>\n                <Row>\n                <Col md={4}>\n                  <Form.Label>GST Number</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"GST Number\" name=\"gstNumber\" />\n                  \n                  \n                </Col>\n                <Col md={8}>\n                <Form.Label>Add Amenities</Form.Label>\n                  \n                  <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={amenityKeys}\n                  value={selectedAmenities}\n                  onChange={handleAmentiesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Amenities\"\n                      style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                </Col>\n                </Row>\n                <Row>\n                <Form.Label>Enrollment Process</Form.Label>\n                  <Form.Control rows={12} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enrollment Process\" name=\"enrollmentProcess\" />\n          \n                </Row>\n\n                <h3 style={{ margin: '12px 0', backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Timings *</h3>\n                <StudioWeeklyTimings timings={timings} setTimings={setTimings} />\n\n                <h3 style={{ margin: '32px 0 0 0', backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Social Media Links</h3>\n               <Row>\n               <Col md={4}>\n                  <Form.Label>Instagram</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Instagram Link\" name=\"instagram\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Facebook</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Facebook Link\" name=\"facebook\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>YouTube</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"YouTube Link\" name=\"youtube\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Twitter</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Twitter Link\" name=\"twitter\" />\n                </Col>\n\n               </Row>\n\n               <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end gap-3\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={saveDraft}>\n                      Save to Draft\n                    </MuiButton>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n              </div>\n\n               \n                <div hidden={activeStep !== 2}>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Address Details</h3>\n                <Row>\n                  <Col md={6}>\n                  <Form.Label>Building Name *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter building name\" name=\"buildingName\" />\n\n                <Form.Label>Street *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter street\" name=\"street\" />\n                <Form.Label>City *</Form.Label>\n                <Form.Control as=\"select\" style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black', height: 'auto', // Let it adjust to content\n                    lineHeight: '1.5em', // Mimics rows={1}\n                    padding: '8px', }} name=\"city\">\n                    <option value=\"\">Select a city</option>\n                    {locationOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n\n                </Col>\n                <Col md={6}>\n                  <Form.Label>Landmark</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter landmark\" name=\"landmark\" />\n\n                <Form.Label>Pincode *</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter pincode\" name=\"pincode\" type=\"number\"  />\n               \n                <Form.Label>State *</Form.Label>\n                <Form.Control as=\"select\" style={{ padding: \"0 1.5rem\", backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter state\" name=\"state\">\n                <option value=\"\">Select a State</option>\n                    {stateOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n               \n                </Col>\n\n                <Form.Label>Save exact Address</Form.Label>\n                <MapsInput\n                  selectedLocation={selectedLocation}\n                  setSelectedLocation={setSelectedLocation}\n                  mapAddress={mapAddress}\n                  setMapAddress={setMapAddress}\n                ></MapsInput>\n                </Row>\n                \n\n                \n              <br></br>\n\n              <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end gap-3\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={saveDraft}>\n                      Save to Draft\n                    </MuiButton>\n                    <MuiButton variant=\"contained\" disabled={isSubmitting} style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\", color:'white'}} type=\"submit\">\n                      Add Studio & Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                \n                </div>\n\n                \n                </Form.Group>\n            </Form>\n            {isSubmitting && <LinearProgress />}\n            {\n              newStudioId === \"\"?(\"\"):(<p>New Studio Created with id {newStudioId}. Now u can upload images regarding them</p>)\n            }\n            \n            </div>\n          \n             \n             \n            <div hidden={activeStep !== 3}>\n              \n              <ImageUpload entityId={newStudioId} title={\"Studio Icon\"} storageFolder={STORAGES.STUDIOICON} maxImageCount={1} minImageCount={1} ref={logoImageUploadRef}></ImageUpload>\n              <Row>\n                \n                <Col xs={12} className=\"d-flex justify-content-end\">\n                  <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                    Next\n                  </MuiButton>\n                </Col>\n              </Row>\n\n              </div>\n             \n            \n             <div hidden={activeStep !== 4}>\n              <ImageUpload entityId={newStudioId} title={\"Studio Images\"} maxImageCount={10} minImageCount={5} storageFolder={STORAGES.STUDIOIMAGES} ref={studioImageUploadRef}></ImageUpload>\n            </div>\n\n            <div hidden={activeStep !== 4}>\n              <ImageUpload entityId={newStudioId} title={\"Studio Announcement Images\"}  storageFolder={STORAGES.STUDIOANNOUNCEMENTS} maxImageCount={10} minImageCount={0} ref={anouncementImageUploadRef}></ImageUpload>\n\n              <Row className='mt-3'>\n              <Col xs={6}>\n                <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                  Prev\n                </MuiButton>\n              </Col>\n              <Col xs={6} className=\"d-flex justify-content-end\">\n                <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                  Next\n                </MuiButton>\n              </Col>\n            </Row>\n            </div>\n\n            <div  hidden={activeStep !== 5} style={{ display: 'flex',  alignItems: 'center', height: 'auto'}}>\n          \n                <SuccessMessage StudioId={newStudioId} />\n                <br></br>\n              \n            </div>\n        \n      <br></br>\n      \n    </div>\n  )\n}\n\n\nexport default StudioAdd\n","import React, { useState, useEffect } from 'react';\nimport { Alert, Container } from 'react-bootstrap';\n\nconst AlertPopup = ({\n  type = 'info',\n  message = 'Default message',\n  timeOfDisplay = 5000,\n  fontSize = '16px',\n  fontWeight = 'normal',\n  fontStyle = 'normal',\n}) => {\n  const [showAlert, setShowAlert] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowAlert(false);\n    }, timeOfDisplay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [timeOfDisplay]);\n\n  return (\n    <Container>\n      {showAlert && (\n        <Alert\n          variant={type}\n          style={{\n            fontSize,\n            fontWeight,\n            fontStyle,\n            textAlign: 'center',\n            marginTop: '10px',\n            marginBottom: '0',\n          }}\n          onClose={() => setShowAlert(false)}\n          dismissible\n        >\n          {message}\n        </Alert>\n      )}\n    </Container>\n  );\n};\n\nexport default AlertPopup;\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Row, Col, Form, Table } from \"react-bootstrap\";\nimport { db } from \"../config\";\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { COLLECTIONS } from \"../constants\";\nimport AlertPopup from \"./AlertPopup\";\nimport ImageUpload from \"./ImageUpload\";\nimport { STORAGES } from \"../constants\";\nimport MapsInput from \"./MapsInput\";\nimport { useSelector } from \"react-redux\"; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\nimport TimeRangePicker from \"./TimeRangePicker\";\nimport indianCities from \"../cities.json\";\nimport indianStates from \"../states.json\";\nimport danceStyles from \"../danceStyles.json\";\nimport { AMENITIES_ICONS } from \"../constants\";\nimport { Autocomplete, LinearProgress, TextField } from \"@mui/material\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { FaMinus, FaPlus } from \"react-icons/fa\";\nimport { MultiSelect } from \"primereact/multiselect\";\nimport { putData } from \"../utils/common\";\nimport StudioWeeklyTimings from \"./StudioWeeklyTiming\";\nimport { useSnackbar } from \"../context/SnackbarContext\";\nimport { updateDaysFormat } from \"../utils/mapping\";\n\nconst initialStudioTimings = {\n  monday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  tuesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  wednesday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  thursday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  friday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  saturday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n  sunday: [{ open: \"09:00 AM\", close: \"06:00 PM\" }],\n};\n\nconst daysOfWeek = [\"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\", \"Sun\"];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\",\n};\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString = \"\") => {\n  const utf8Encoded = unicodeString.split(\"\").map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nfunction StudioUpdate({\n  studio,\n  setStudio,\n  studioId,\n  setStudioId,\n  instructors,\n}) {\n  const showSnackbar = useSnackbar();\n  const [selectedStudio, setSelectedStudio] = useState(null);\n  const [selectedStudioId, setSelectedStudioId] = useState(null);\n  const [selectedInstructors, setSelectedInstructors] = useState([]);\n  const [selectedStudioFrozenClassRows, setSelectedStudioFrozenClassRows] =\n    useState(-1);\n  const [selectedAmenities, setSelectedAmenities] = useState([]);\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [defaultTime, setDefaultTime] = useState(\"00:00-00:00\");\n\n  const locationOptions = indianCities.cities;\n  const stateOptions = indianStates.states;\n  const danceStylesOptions = danceStyles.danceStyles;\n  const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n  const [showUpdateSuccessAlert, setShowUpdateSuccessAlert] = useState(false);\n  const [showUpdateErrorAlert, setShowUpdateErrorAlert] = useState(false);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  const [timings, setTimings] = useState(initialStudioTimings);\n  const [mapAddress, setMapAddress] = useState('');\n\n  const instructorNamesWithIds = instructors.map(\n    (instructor) => `${instructor.name} - ${instructor.id}`\n  );\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: isDarkModeOn ? \"dark\" : \"light\",\n    },\n  });\n\n  const handleDanceStylesChange = (event, value) => {\n    setSelectedDanceStyles(value);\n  };\n\n  const handleAmenitiesChange = (event, value) => {\n    setSelectedAmenities(value);\n  };\n\n  const [tableData, setTableData] = useState({\n    0: {\n      className: \"\",\n      danceForms: \"\",\n      days: \"\",\n      time: \"\",\n      instructors: [],\n      fee: \"\",\n      level: \"\",\n      freeTrial: false,\n      classCategory: [],\n    },\n  });\n\n  const handleTimePickerOpen = (index, time) => {\n    //console.log(\"handleTimePickerOpen\",time,index)\n    setDefaultTime(time);\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null);\n    //console.log(\"---------\")\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n\n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n\n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(\" - \");\n\n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n\n      return newData;\n    });\n\n    setSelectedRow(selectedRowIndex);\n  };\n\n  useEffect(() => {\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser =\n      JSON.parse(localStorage.getItem(\"StudioCreated\")) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map(\n      (studio) => `${studio.studioName} : ${studio.id}`\n    );\n    setStudioId(studioIdList);\n\n    //console.log(\"studio:\", studio);\n    //console.log(\"studioId\", studioId);\n  }, []);\n\n  useEffect(() => {\n    // Fetch data for the selected studio when studioId changes\n    if (selectedStudio) {\n      //console.log(\"Studio Instructors Names\",selectedStudio.instructorsNames)\n      setSelectedInstructors(selectedStudio.instructorsNames);\n      if (selectedStudio && selectedStudio.danceStyles) {\n        setSelectedDanceStyles(selectedStudio.danceStyles.split(\",\"));\n      }\n      if (selectedStudio && selectedStudio.addAmenities) {\n        setSelectedAmenities(selectedStudio.addAmenities.split(\",\"));\n      }\n      if (selectedStudio && selectedStudio.tableData) {\n        const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n        setSelectedStudioFrozenClassRows(maxIndex);\n      }\n      if (selectedStudio && selectedStudio?.timings) {\n        setTimings(selectedStudio.timings);\n      }\n      if (selectedStudio && selectedStudio?.mapAddress) {\n        setMapAddress(selectedStudio?.mapAddress);\n      }\n    }\n  }, [selectedStudio]);\n\n  const handleSelectStudio = async (event) => {\n    event.preventDefault();\n    const selected = event.target.value;\n    const selectedId = selected.split(\":\").pop().trim();\n    setSelectedStudioId(selectedId);\n    try {\n      const studioDoc = await getDoc(doc(db, COLLECTIONS.STUDIO, selectedId));\n      if (studioDoc.exists) {\n        setSelectedStudio(studioDoc.data());\n        if (studioDoc.data().geolocation) {\n          const loc = studioDoc.data().geolocation;\n          setSelectedLocation(loc || null);\n          //console.log(\"StudioUpdate Selected location\",selectedLocation,loc)\n        }\n\n        if (studioDoc.data().tableData) {\n          setTableData(studioDoc.data().tableData);\n          //selectedStudioFrozenClassRows()\n          const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n          setSelectedStudioFrozenClassRows(maxIndex);\n          //console.log(\"Yo We got...\",tableData,Array.isArray(tableData),isMapOfMaps(tableData),maxIndex)\n        } else {\n          setTableData({\n            0: {\n              className: \"\",\n              danceForms: \"\",\n              days: \"\",\n              time: \"\",\n              instructors: [],\n              fee: \"\",\n              level: \"\",\n              freeTrial: false,\n              classCategory: [],\n            },\n          });\n        }\n      } else {\n        setSelectedStudio(null); // No matching studio found\n      }\n    } catch (error) {\n      console.error(\"Error fetching studio data:\", error, selectedId);\n    }\n  };\n\n  const handleInstructorChange = (event, value) => {\n    setSelectedInstructors(value);\n  };\n\n  const handleUpdateStudio = async (event) => {\n    event.preventDefault();\n\n    const errorMessage = validate();\n\n    if (errorMessage) {\n      return showSnackbar(errorMessage, \"error\");\n    }\n\n    setIsSubmitting(true);\n    const nameIdLocal = event.target.nameId.value;\n    const indexOfColon = nameIdLocal.lastIndexOf(\":\");\n    const studioId = nameIdLocal.substring(indexOfColon + 1).trim();\n\n    if (!studioId) {\n      //console.log(\"Invalid or empty studio id\")\n      return;\n    }\n\n    //console.log(studioId)\n\n    if (!studioId) {\n      //console.log(\"Invalid or empty studio id\")\n      return;\n    }\n\n    //console.log(studioId)\n\n    //const description = encodeToUnicode(event.target.description.value);\n    //const geolocation = selectedLocation;\n\n    try {\n      // Update the studio document with the new values\n      ////console.log(description,geolocation)\n      const dbPayload = {\n        studioName: event.target.studioName.value,\n        aboutStudio: event.target.aboutStudio.value,\n        founderName: event.target.founderName.value,\n        aboutFounder: event.target.aboutFounder.value,\n        mobileNumber: event.target.mobileNumber.value,\n        whatsappNumber: event.target.whatsappNumber.value,\n        mailAddress: event.target.mailAddress.value,\n        danceStyles: selectedDanceStyles.join(\",\"),\n        numberOfHalls: event.target.numberOfHalls.value,\n        maximumOccupancy: event.target.maximumOccupancy.value,\n        instructorsNames: selectedInstructors,\n        status: \"OPEN\",\n        tableData: tableData,\n        buildingName: event.target.buildingName.value,\n        street: event.target.street.value,\n        city: event.target.city.value,\n        landmark: event.target.landmark.value,\n        pincode: event.target.pincode.value,\n        state: event.target.state.value,\n        country: \"India\",\n        mapAddress,\n        geolocation: selectedLocation,\n        gstNumber: event.target.gstNumber.value,\n        enrolledId: [],\n        reviews: [],\n        author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n        UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n        addAmenities: selectedAmenities.join(\",\"),\n        enrollmentProcess: encodeToUnicode(\n          event.target.enrollmentProcess.value\n        ),\n        instagram: event.target.instagram.value,\n        facebook: event.target.facebook.value,\n        youtube: event.target.youtube.value,\n        twitter: event.target.twitter.value,\n        timings,\n      };\n\n      const response = await putData(dbPayload, COLLECTIONS.STUDIO, studioId);\n      if (response.ok) {\n        //console.log(\"Studio updated successfully\");\n        // alert(\"Studio Update successfully\");\n        showSnackbar(\"Studio Details Updated Successfully\", \"success\");\n        setShowUpdateSuccessAlert(true);\n        setShowUpdateErrorAlert(false);\n      } else {\n        setShowUpdateSuccessAlert(false);\n        setShowUpdateErrorAlert(true);\n      }\n    } catch (error) {\n      console.error(\"Error updating studio: \", error);\n      setShowUpdateSuccessAlert(false);\n      setShowUpdateErrorAlert(true);\n    } finally {\n      setIsSubmitting(false);\n    }\n    // Reset input fields to their initial values when a new studio is selected\n    document.getElementById(\"updateStudioForm\").reset();\n  };\n\n  const handleAddColumn = () => {\n    setTableData((prevData) => {\n      const newData = prevData.map((row) => ({\n        ...row,\n        [Object.keys(row).length]: \"\",\n      }));\n      return newData;\n    });\n  };\n\n  const handleAddRow = () => {\n    setTableData((prevData) => {\n      const newRowKey = Object.keys(prevData).length; // Use the current number of rows as the new row key\n      return { ...prevData, [newRowKey]: { ...tableData[0] } };\n    });\n  };\n\n  const handleRemoveRow = (index) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n      delete newData[index];\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if (field === \"days\") {\n        value = Array.isArray(value) ? value.join(\",\") : value;\n      }\n\n      return {\n        ...prevData,\n        [index]: {\n          ...prevData[index],\n          [field]: value,\n        },\n      };\n    });\n  };\n\n  const validate = () => {\n    const form = document.getElementById(\"updateStudioForm\");\n\n    if (!form.studioName.value) return \"Studio name is required\";\n    if (!form.aboutStudio.value) return \"About Studio is required\";\n    if (!form.founderName.value) return \"Founder name is required\";\n    if (!form.aboutFounder.value) return \"About Founder is required\";\n    if (!form.mobileNumber.value) return \"Mobile number is required\";\n    if (!form.whatsappNumber.value) return \"WhatsApp number is required\";\n    if (!form.numberOfHalls.value) return \"Number of halls is required\";\n    if (!form.maximumOccupancy.value) return \"Maximum occupancy is required\";\n    if (!selectedDanceStyles.length)\n      return \"At least one dance style must be selected\";\n\n    if (!Object.values(timings).every((slots) => slots.length > 0)) {\n      return \"All timing slots must be filled\";\n    }\n    if (!Object.values(tableData).length) {\n      return \"At least one class entry is required\";\n    }\n    for (const entry of Object.values(tableData)) {\n      if (!entry.className?.trim()) return \"Class name is required\";\n      if (!entry.danceForms?.trim()) return \"Dance forms are required\";\n      if (!entry.days?.trim()) return \"Days are required\";\n      if (!entry.time?.trim()) return \"Time is required\";\n      if (!entry.fee?.trim()) return \"Fee is required\";\n      if (!entry.level?.trim()) return \"Level is required\";\n      if (!entry.instructors.length)\n        return \"At least one instructor is required\";\n      if (!entry.classCategory.length || !entry.classCategory[0]?.trim())\n        return \"Class category is required\";\n    }\n\n    if (!form.buildingName.value) return \"Building name is required\";\n    if (!form.street.value) return \"Street is required\";\n    if (!form.city.value) return \"City is required\";\n    if (!form.pincode.value) return \"Pincode is required\";\n    if (!form.state.value) return \"State is required\";\n    if (!mapAddress) return \"Address is required\";\n    if (!selectedLocation) return \"Location selection is required\";\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n        color: isDarkModeOn ? \"white\" : \"black\",\n      }}\n    >\n      <br></br>\n      <Form id=\"updateStudioForm\" onSubmit={handleUpdateStudio}>\n        <Form.Group controlId=\"formBasicUpdate\">\n          <Form.Label>Id</Form.Label>\n          <Form.Control\n            as=\"select\"\n            name=\"nameId\"\n            style={{\n              backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n              color: isDarkModeOn ? \"white\" : \"black\",\n              height: \"auto\", // Let it adjust to content\n              lineHeight: \"1.5em\",\n              padding: \"8px\",\n            }}\n            onChange={handleSelectStudio}\n          >\n            <option value=\"\">Select a studio...</option>\n            {studioId && studioId.length > 0 ? (\n              studioId.map((studioItem) => (\n                <option key={studioItem} value={studioItem}>\n                  {studioItem}\n                </option>\n              ))\n            ) : (\n              <option value=\"\">No studio yet!</option>\n            )}\n          </Form.Control>\n        </Form.Group>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Basic Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Studio Name *</Form.Label>\n            <Form.Control\n              rows={1}\n              defaultValue={selectedStudio ? selectedStudio.studioName : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"textarea\"\n              placeholder=\"Enter studio name\"\n              name=\"studioName\"\n            />\n\n            <Form.Label>About Studio *</Form.Label>\n            <Form.Control\n              rows={6}\n              defaultValue={selectedStudio ? selectedStudio.aboutStudio : \"\"}\n              style={{\n                minHeight: \"150px\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              placeholder=\"Enter studio details\"\n              name=\"aboutStudio\"\n            />\n          </Col>\n          <Col md={6}>\n            <Form.Label>Founder's Name *</Form.Label>\n            <Form.Control\n              rows={1}\n              defaultValue={selectedStudio ? selectedStudio.founderName : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"textarea\"\n              placeholder=\"Enter studio name\"\n              name=\"founderName\"\n            />\n\n            <Form.Label>About Founder *</Form.Label>\n            <Form.Control\n              rows={6}\n              defaultValue={selectedStudio ? selectedStudio.aboutFounder : \"\"}\n              style={{\n                height: \"150px\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              placeholder=\"Enter studio details\"\n              name=\"aboutFounder\"\n            />\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Contact Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Mobile Number *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.mobileNumber : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Enter studio details\"\n              name=\"mobileNumber\"\n              type=\"number\"\n            />\n\n            <Form.Label>WhatsApp Number *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.whatsappNumber : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Enter studio details\"\n              name=\"whatsappNumber\"\n              type=\"number\"\n            />\n          </Col>\n          <Col md={6}>\n            <Form.Label>Mail Address</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.mailAddress : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"textarea\"\n              rows={1}\n              placeholder=\"Enter studio details\"\n              name=\"mailAddress\"\n            />\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Studio Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Dance Styles *</Form.Label>\n\n            <ThemeProvider theme={darkTheme}>\n              <CssBaseline />\n\n              <Autocomplete\n                style={{\n                  backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                  color: isDarkModeOn ? \"white\" : \"black\",\n                }}\n                multiple\n                id=\"tags-standard\"\n                options={danceStylesOptions}\n                value={selectedDanceStyles}\n                onChange={handleDanceStylesChange}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"standard\"\n                    placeholder=\"Select Dance Styles\"\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                  />\n                )}\n              />\n            </ThemeProvider>\n\n            <Form.Label>Number of Hall(s) *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.numberOfHalls : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Number of Hall(s)\"\n              name=\"numberOfHalls\"\n              type=\"number\"\n            />\n          </Col>\n          <Col md={6}>\n            <Form.Label>Maximum Occupancy *</Form.Label>\n            <Form.Control\n              defaultValue={\n                selectedStudio ? selectedStudio.maximumOccupancy : \"\"\n              }\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Maximum Occupancy\"\n              name=\"maximumOccupancy\"\n              type=\"number\"\n            />\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Instructor Details\n        </h3>\n        <Form.Label>Names of Instructors</Form.Label>\n        <Row>\n          <Col xs={6}>\n            <div\n              style={{\n                backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            >\n              <Row>\n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                  <Autocomplete\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                    multiple\n                    id=\"tags-standard\"\n                    options={instructorNamesWithIds}\n                    value={selectedInstructors}\n                    onChange={handleInstructorChange}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        variant=\"standard\"\n                        placeholder=\"Select Dance Styles\"\n                        style={{\n                          backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                          color: isDarkModeOn ? \"white\" : \"black\",\n                        }}\n                      />\n                    )}\n                  />\n                </ThemeProvider>\n                <a\n                  href=\"#/modifyInstructors\"\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                  style={{\n                    textDecoration: \"none\",\n                    color: isDarkModeOn ? \"cyan\" : \"blue\",\n                  }}\n                >\n                  Go to Instrcutors' Add/update Page?\n                </a>\n              </Row>\n            </div>\n          </Col>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Address Details\n        </h3>\n        <Row>\n          <Col md={6}>\n            <Form.Label>Building Name *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.buildingName : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter building name\"\n              name=\"buildingName\"\n            />\n\n            <Form.Label>Street *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.street : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter street\"\n              name=\"street\"\n            />\n            <Form.Label>City *</Form.Label>\n            <Form.Control\n              as=\"select\"\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n                height: \"auto\", // Let it adjust to content\n                lineHeight: \"1.5em\", // Mimics rows={1}\n                padding: \"8px\",\n              }}\n              name=\"city\"\n              value={selectedStudio ? selectedStudio.city : \"\"}\n              onChange={(e) => {\n                const newCity = e.target.value;\n                setSelectedStudio((prevState) => ({\n                  ...prevState,\n                  city: newCity,\n                }));\n              }}\n            >\n              <option value=\"\">Select a city</option>\n              {locationOptions.map((city, index) => (\n                <option key={index} value={city}>\n                  {city}\n                </option>\n              ))}\n            </Form.Control>\n          </Col>\n          <Col md={6}>\n            <Form.Label>Landmark</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.landmark : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter landmark\"\n              name=\"landmark\"\n            />\n\n            <Form.Label>Pincode *</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.pincode : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              rows={1}\n              placeholder=\"Enter pincode\"\n              name=\"pincode\"\n              type=\"number\"\n            />\n\n            <Form.Label>State *</Form.Label>\n            <Form.Control\n              as=\"select\"\n              style={{\n                padding: \"0 1.5rem\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              rows={1}\n              placeholder=\"Enter state\"\n              name=\"state\"\n              value={selectedStudio ? selectedStudio.state : \"\"}\n            >\n              <option value=\"\">Select a State</option>\n              {stateOptions.map((city, index) => (\n                <option key={index} value={city}>\n                  {city}\n                </option>\n              ))}\n            </Form.Control>\n          </Col>\n\n          <Form.Label>Save exact Address</Form.Label>\n          <MapsInput\n            selectedLocation={selectedLocation}\n            setSelectedLocation={setSelectedLocation}\n            mapAddress={mapAddress}\n            setMapAddress={setMapAddress}\n          ></MapsInput>\n        </Row>\n        <hr></hr>\n\n        <h3\n          style={{\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"white\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Additional Details\n        </h3>\n        <Row>\n          <Col md={4}>\n            <Form.Label>GST Number</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.gstNumber : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"number\"\n              rows={1}\n              placeholder=\"GST Number\"\n              name=\"gstNumber\"\n            />\n          </Col>\n          <Col md={8}>\n            <Form.Label>Add Amenities</Form.Label>\n\n            <ThemeProvider theme={darkTheme}>\n              <CssBaseline />\n\n              <Autocomplete\n                style={{\n                  backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                  color: isDarkModeOn ? \"white\" : \"black\",\n                }}\n                multiple\n                id=\"tags-standard\"\n                options={amenityKeys}\n                value={selectedAmenities}\n                onChange={handleAmenitiesChange}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"standard\"\n                    placeholder=\"Select Amenities\"\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                  />\n                )}\n              />\n            </ThemeProvider>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Form.Label>Enrollment Process</Form.Label>\n            <Form.Control\n              defaultValue={\n                selectedStudio\n                  ? decodeUnicode(selectedStudio?.enrollmentProcess)\n                  : \"\"\n              }\n              rows={6}\n              style={{\n                height: \"150px\",\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              as=\"textarea\"\n              placeholder=\"Enrollment Process\"\n              name=\"enrollmentProcess\"\n            />\n          </Col>\n        </Row>\n\n        <br></br>\n        <span>Time Table Of dance classes</span>\n        <div\n          style={{\n            overflowX: \"auto\",\n            whiteSpace: \"nowrap\",\n            scrollbarColor: isDarkModeOn ? \"#888 #333\" : \"#ccc #fff\",\n          }}\n        >\n          <Table bordered variant=\"light\">\n            <thead>\n              <tr>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Class Name\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"10rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Dance Form\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Days\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Time\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"20rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Instructors\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"8rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Fee (₹)\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"10rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Level\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"8rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Free Trial\n                </th>\n                <th\n                  style={{\n                    padding: \"0rem\",\n                    textAlign: \"center\",\n                    minWidth: \"15rem\",\n                    border: \"1px solid black\",\n                  }}\n                >\n                  Class Category\n                </th>\n                <th style={{ padding: 0 }}>\n                  <Button variant=\"primary\" onClick={handleAddRow}>\n                    <FaPlus />\n                  </Button>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.keys(tableData).map((rowKey, index) => (\n                <tr key={rowKey}>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      type=\"text\"\n                      value={tableData[rowKey].className}\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"className\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      as=\"select\"\n                      value={tableData[rowKey].danceForms}\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"danceForms\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    >\n                      <option value=\"\">Select a dance form</option>\n                      {danceStylesOptions.map((option) => (\n                        <option key={option} value={option}>\n                          {option}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <MultiSelect\n                      value={\n                        tableData[rowKey] &&\n                        tableData[rowKey].days &&\n                        updateDaysFormat(\n                          tableData?.[rowKey]?.days\n                            ?.split?.(\",\")\n                            ?.filter?.((day) => day !== \"\")\n                        )\n                      }\n                      onChange={(event) =>\n                        handleTableChange(rowKey, \"days\", event.target.value)\n                      }\n                      options={daysOfWeek}\n                      placeholder=\"class days\"\n                      maxSelectedLabels={7}\n                      className=\"w-full md:w-20rem\"\n                      style={{ color: \"#000\", width: \"100%\" }}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      type=\"text\"\n                      value={tableData[rowKey].time}\n                      //onChange={(e) => handleTableChange(rowKey, 'time', e.target.value)}\n                      onClick={() =>\n                        handleTimePickerOpen(rowKey, tableData[rowKey].time)\n                      }\n                    />\n                    {showTimePicker && (\n                      <TimeRangePicker\n                        show={showTimePicker}\n                        handleClose={handleTimePickerClose}\n                        handleSelect={handleTimeSelect}\n                        defaultTime={\n                          tableData[selectedRowIndex]?.time || \"00:00-00:00\"\n                        } // selectedRowIndex\n                      />\n                    )}\n                  </td>\n                  <td style={{ padding: \"0rem\", width: \"20rem\" }}>\n                    <Autocomplete\n                      multiple\n                      options={instructorNamesWithIds}\n                      value={\n                        tableData[rowKey] && tableData[rowKey].instructors\n                          ? tableData[rowKey].instructors\n                          : []\n                      }\n                      onChange={(_, values) =>\n                        handleTableChange(rowKey, \"instructors\", values)\n                      }\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Instructors\"\n                        />\n                      )}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      type=\"number\"\n                      value={tableData[rowKey].fee ? tableData[rowKey].fee : \"\"}\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"fee\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    />\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Form.Control\n                      as=\"select\"\n                      value={\n                        tableData[rowKey].level ? tableData[rowKey].level : \"\"\n                      }\n                      onChange={(e) =>\n                        handleTableChange(rowKey, \"level\", e.target.value)\n                      }\n                      style={{\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                    >\n                      <option value=\"\">Select a Level</option>\n                      <option value=\"Beginner\">Beginner</option>\n                      <option value=\"Intermediate\">Intermediate</option>\n                      <option value=\"Advanced\">Advanced</option>\n                      <option value=\"Misc\">Misc</option>\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\", border: \"1px solid black\" }}>\n                    <Form.Control\n                      style={{\n                        backgroundColor: \"white\",\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                      as=\"select\"\n                      value={\n                        tableData[index]?.freeTrial\n                          ? tableData[index].freeTrial\n                          : \"\"\n                      }\n                      onChange={(e) =>\n                        handleTableChange(index, \"freeTrial\", e.target.value)\n                      }\n                    >\n                      <option value=\"\">Select a value</option>\n                      <option value={true}>Yes</option>\n                      <option value={false}>No</option>\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\", width: \"20rem\" }}>\n                    <Form.Control\n                      style={{\n                        backgroundColor: \"white\",\n                        height: \"auto\",\n                        lineHeight: \"1.5em\",\n                        padding: \"8px\",\n                      }}\n                      as=\"select\"\n                      value={\n                        Array.isArray(tableData[index].classCategory) &&\n                        tableData[index].classCategory?.length\n                          ? tableData[index].classCategory[0]\n                          : \"\"\n                      }\n                      onChange={(e) =>\n                        handleTableChange(index, \"classCategory\", [\n                          e.target.value,\n                        ])\n                      }\n                    >\n                      <option value=\"\">Select Class Category</option>\n                      {Object.values(categoryMap).map((value, idx) => (\n                        <option key={idx} value={value}>\n                          {value}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </td>\n                  <td style={{ padding: \"0rem\" }}>\n                    <Button\n                      variant=\"danger\"\n                      onClick={() => handleRemoveRow(rowKey)}\n                    >\n                      <FaMinus />\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n        <br></br>\n\n        <h3\n          style={{\n            margin: \"12px 0\",\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Studio Timings *\n        </h3>\n        <StudioWeeklyTimings timings={timings} setTimings={setTimings} />\n\n        <h3\n          style={{\n            margin: \"32px 0 0 0\",\n            backgroundColor: isDarkModeOn ? \"#202020\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        >\n          Social Media Links\n        </h3>\n        <Row>\n          <Col md={4}>\n            <Form.Label>Instagram</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.instagram : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"Instagram Link\"\n              name=\"instagram\"\n            />\n          </Col>\n          <Col md={4}>\n            <Form.Label>Facebook</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.facebook : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"Facebook Link\"\n              name=\"facebook\"\n            />\n          </Col>\n          <Col md={4}>\n            <Form.Label>YouTube</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.youtube : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"YouTube Link\"\n              name=\"youtube\"\n            />\n          </Col>\n          <Col md={4}>\n            <Form.Label>Twitter</Form.Label>\n            <Form.Control\n              defaultValue={selectedStudio ? selectedStudio.twitter : \"\"}\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n              type=\"text\"\n              rows={1}\n              placeholder=\"Twitter Link\"\n              name=\"twitter\"\n            />\n          </Col>\n        </Row>\n\n        <br></br>\n        {studioId && studioId.length > 0 && selectedStudioId && (\n          <>\n            <div>\n              <ImageUpload\n                entityId={selectedStudioId}\n                title={\"Studio Images\"}\n                storageFolder={STORAGES.STUDIOIMAGES}\n                maxImageCount={10} minImageCount={5}\n              />\n            </div>\n            <br />\n            <div>\n              <ImageUpload\n                entityId={selectedStudioId}\n                title={\"Studio Icon\"}\n                storageFolder={STORAGES.STUDIOICON}\n                maxImageCount={1} minImageCount={1}\n              />\n            </div>\n            <div>\n              <ImageUpload\n                entityId={selectedStudioId}\n                title={\"Studio Announcement Images\"}\n                storageFolder={STORAGES.STUDIOANNOUNCEMENTS}\n                maxImageCount={10} minImageCount={0}\n              />\n            </div>\n            <br />\n          </>\n        )}\n        {showUpdateSuccessAlert && (\n          <AlertPopup\n            type=\"info\"\n            message=\"Studio Updated successfully\"\n            timeOfDisplay={3000}\n            fontSize=\"10px\"\n            fontWeight=\"bold\"\n          />\n        )}\n        {showUpdateErrorAlert && (\n          <AlertPopup\n            type=\"warning\"\n            message=\"Studio Update failed\"\n            timeOfDisplay={3000}\n            fontSize=\"10px\"\n            fontWeight=\"bold\"\n          />\n        )}\n        <Button\n          style={{\n            backgroundColor: isDarkModeOn ? \"#892CDC\" : \"black\",\n            color: \"white\",\n          }}\n          type=\"submit\"\n          disabled={isSubmitting}\n        >\n          Update Studio\n        </Button>\n        {isSubmitting && <LinearProgress />}\n      </Form>\n    </div>\n  );\n}\n\nexport default StudioUpdate;\n","import React from 'react';\nimport { Row, Col  } from 'react-bootstrap';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,collection,where,getDocs,query } from \"firebase/firestore\";\nimport { COLLECTIONS } from '../constants';\nimport StudioAdd from '../Components/StudioAdd';\nimport StudioUpdate from '../Components/StudioUpdate';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { useAuth } from '../context/AuthContext';\nimport CardSliderCard from '../Components/CardSliderCard';\nimport Tab from '@mui/material/Tab';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\nimport { Box } from '@mui/material';\n\n\n\nfunction CreatorStudio() {\n  const [studio, setStudio] = useState([]);\n  const [studioId, setStudioId] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  const [instructors, setInstructors] = useState([]);\n  const [isCreator, setIsCreator] = useState(false);\n  const [premiumTill, setPremiumTill] = useState(-1);\n  const { currentUser } = useAuth();\n  const [value, setValue] = React.useState('1');\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n\n  useEffect(() => {\n    console.log(\"Creator Studio getCreatorMode\")\n    const getCreatorMode = async (event) => {\n      try{\n      const userRef = doc(db, \"User\", currentUser.uid);\n      const userSnap = await getDoc(userRef);\n      if (userSnap.exists()) {\n        console.log(\"User there\",userSnap.data(),userSnap.data().CreatorMode,JSON.parse(localStorage.getItem('userInfoFull')));\n        if(userSnap.data() != null){\n          \n          setIsCreator(userSnap.data().CreatorMode)\n          setPremiumTill(userSnap.data().isPremium)\n          console.log(\"Premium Till\",premiumTill,userSnap.data())\n        }else{\n          console.log(\"userSnap.data() null\")\n        }\n      } else {\n        console.log(\"User not found but workshop created... error\");\n      }\n      }catch(error){\n        console.log(\" error\");\n      }\n    }\n  \n    getCreatorMode();\n  }, [isCreator]); // Run once on mount\n\n    // Fetch instructors for the current user\n  useEffect(() => {\n    console.log(\"Creator Studio fetchInstructors\")\n  const fetchInstructors = async () => {\n    let userId = null;\n    if (\n      JSON.parse(localStorage.getItem('userInfo')) &&\n      JSON.parse(localStorage.getItem('userInfo')).UserId\n    ) {\n      userId = JSON.parse(localStorage.getItem('userInfo')).UserId;\n    }\n    if (!userId) {\n      console.log('User not found');\n      alert('User not found');\n      return;\n    }\n\n    const instructorRef = collection(db, COLLECTIONS.INSTRUCTORS);\n    const q = query(instructorRef, where('createdBy', '==', userId));\n    const querySnapshot = await getDocs(q);\n    \n    const instructorsList = [];\n    querySnapshot.forEach((doc) => {\n      instructorsList.push({\n        id: doc.id,\n        name: doc.data().name,      \n      });\n    });\n    console.log(\"Hiii\", instructorsList)\n    setInstructors(instructorsList);\n  };\n\n  fetchInstructors();\n  }, []);\n\n \n  useEffect(() => {\n    console.log(\"Creator Studio getStudioCreated\")\n    const getStudioCreated = async ()=>{\n      const q = query(collection(db, COLLECTIONS.STUDIO), where(\"UserId\", \"==\", JSON.parse(localStorage.getItem('userInfo')).UserId)    );\n      console.log(\"Hiiii\",JSON.parse(localStorage.getItem('userInfo')).UserId)\n      const querySnapshot = await getDocs(q);\n      console.log(\"Studios : \",querySnapshot)\n      const studiosOfUser = querySnapshot.docs.filter(doc => doc.data().studioName).map(doc => \n        { const data = doc.data();\n          return {\n            id: doc.id, // Include the document ID in the data\n            ...data\n          };\n      });\n      localStorage.setItem(\"StudioCreated\", JSON.stringify(studiosOfUser));\n      setStudio(studiosOfUser);\n      setStudioId(studiosOfUser.map((studio) => (String(studio.studioName) + \" :\" + String(studio.id))));\n      console.log(studio)\n      console.log(\"studioId\",studioId)\n    };\n      \n      getStudioCreated();\n    },[setStudio]);\n \n  useEffect(() => {\n    console.log(\"Creator Studio setStudioId\")\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser = JSON.parse(localStorage.getItem('StudioCreated')) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map((studio) => `${studio.studioName} : ${studio.id}`);\n    setStudioId(studioIdList);\n\n    console.log(\"studio:\", studio);\n    console.log(\"studioId\", studioId);\n  }, [setStudioId]);\n\n  console.log(\"studio :\",studio)\n  return (\n    <div>\n      <br></br>\n      {isCreator?(\n        \n       <>\n       <Box sx={{ width: '100%', typography: 'body1' }}>\n      <TabContext value={value}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <TabList style={{color: isDarkModeOn ? 'white' : 'black'}} onChange={handleChange} aria-label=\"lab API tabs example\">\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Add Studio\" value=\"1\" />\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Update Studio\" value=\"2\" />\n          \n          </TabList>\n        </Box>\n        <TabPanel value=\"1\">\n\n        <StudioAdd instructors={instructors} />\n        </TabPanel>\n        <TabPanel value=\"2\">\n        <>\n        <StudioUpdate\n                  studio={studio}\n                  setStudio={setStudio}\n                  instructors={instructors}\n                  studioId={studioId}\n                  setStudioId={setStudioId}\n                />\n        </>\n    \n        </TabPanel>\n        \n      </TabContext>\n    </Box>\n      </>\n      ):\"\"}\n \n      <h3 style={{color: isDarkModeOn ? 'white' : 'black'}}>Your Studios:</h3>\n       <ul>\n      <Row xs={1} md={3} lg={4} className=\"g-4\">\n        {studio.length > 0 ? (\n          studio.map((studio, index) => (\n            <Col key={index}>\n              <a href={`#/studio/${studio.studioId}`} style={{ textDecoration: \"none\" }}>\n                <CardSliderCard studio={studio}/>\n              </a>\n          </Col>\n          ))\n        ) : (\n          <p style={{color: isDarkModeOn ? 'white' : 'black'}}>No studio yet!</p>\n        )}\n      </Row>\n      <br/>\n      </ul>\n    </div>\n  )\n}\nexport default CreatorStudio","import { COLORS, SERVER_URLS,BASEURL_DEV,BASEURL_PROD } from \"../constants\";\n\nexport async function postData(dbPayload, collection_name, notify, metadata) {\n  const BASEURL = BASEURL_PROD;\n  const endpoint = 'crud/newEntity/'; // Define your endpoint here\n  const authToken = localStorage.getItem(\"authToken\");\n  try {\n    const response = await fetch(BASEURL + endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        data: dbPayload,\n        collection_name: collection_name,\n        notify: notify,\n        metadata : metadata,\n      }),\n    });\n\n    if (!response.ok) {\n      console.log('Error in postData:', response);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response;\n  } catch (error) {\n    console.error('Error in postData:', error);\n    throw error;\n  }\n}\n\nexport async function putData(dbPayload, collection_name, entity_id, notify = null, metadata = null) {\n  const BASEURL = BASEURL_PROD;\n  const endpoint = `crud/updateEntity/${entity_id}`;\n  const authToken = localStorage.getItem(\"authToken\");\n  try {\n    const response = await fetch(BASEURL + endpoint, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        data: dbPayload,\n        collection_name: collection_name,\n        notify: notify,\n        metadata : metadata,\n      }),\n    });\n\n    if (!response.ok) {\n      console.log('Error in postData:', response);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response;\n  } catch (error) {\n    console.error('Error in postData:', error);\n    throw error;\n  }\n}\n\nexport const getRandomColor = () => {\n  const colorKeys = Object.keys(COLORS);\n  const randomKey = colorKeys[Math.floor(Math.random() * colorKeys.length)];\n  return COLORS[randomKey];\n};\n\nexport const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const bookEntity = async (bookingData) => {\n  const url = `${SERVER_URLS.CLOUD}bookings/bookEntity/`; \n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        userId: bookingData.userId,\n        entityType: bookingData.entityType,\n        entityId: bookingData.entityId,\n        associatedStudioId: bookingData.associatedStudioId,\n        emailLearner: bookingData.emailLearner,\n        personsAllowed: bookingData.personsAllowed,\n        pricePerPerson: bookingData.pricePerPerson,\n      })\n    });\n\n    const result = await response.json();\n    \n    if (response.ok) {\n      console.log('Booking successful:', result);\n      return result;  // Return the successful result\n    } else {\n      console.error('Booking failed:', result);\n      return result;  // Return null or an error message\n    }\n    \n  } catch (error) {\n    console.error('Error occurred while booking:', error);\n    return null;  // Return null or an error message\n  }\n};\n\n\n// Function to decode a Unicode (UTF-8) encoded string back to the original text\nexport const decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nexport const convertToHtmlEntities= (text) =>{\n  return text.replace(/[\\u00A0-\\u9999<>\\&]/gim, function(i) {\n      return '&#' + i.charCodeAt(0) + ';';\n  });\n}\n\nexport const getYoutubeVideoId = (link)=> {\n  console.log(\"MediaDisplay\", link)\n  if (!link){\n    return null\n  }\n  const text = link.trim();\n  const youtubeRegExp = /(?:https?:\\/\\/)?(?:www\\.|m\\.)?(?:youtube\\.com\\/(?:watch\\?v=|embed\\/|v\\/|shorts\\/)|youtu\\.be\\/)([\\w\\-]+)/;\n  const match = text.match(youtubeRegExp);\n  let videoId = null;\n\n  if (match) {\n    videoId = match[1];\n  }\n  console.log(\"MediaDisplay\", videoId)\n  return videoId\n}\n\nexport const formatDateString = (dateString = \"\") => {\n  // Split the input date string\n  const [year, month, day] = dateString.split('-');\n\n  // Create an array of month names\n  const monthNames = [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n  ];\n\n  // Determine the ordinal suffix for the day\n  const daySuffix = (day) => {\n      const lastDigit = day % 10;\n      const suffix = (lastDigit === 1 && day !== '11') ? 'st' :\n                     (lastDigit === 2 && day !== '12') ? 'nd' :\n                     (lastDigit === 3 && day !== '13') ? 'rd' : 'th';\n      return `${day}${suffix}`;\n  };\n\n  // Format and return the final date string\n  return `${daySuffix(day)} ${monthNames[parseInt(month) - 1]}, ${year}`;\n}\n\nexport const gradientStyles = [\n  { background: 'linear-gradient(to bottom right, #FFD700, #FFA500)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #00BFFF, #1E90FF)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #32CD32, #008000)', color: 'white' },\n  { background: 'linear-gradient(to bottom right, #FFA500, #FF4500)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #DC143C, #8B0000)', color: 'white' },\n  { background: 'linear-gradient(to bottom right, #000000, #2F4F4F)', color: 'white' },\n];"],"names":["ImageUpload","forwardRef","_ref","ref","entityId","storageFolder","title","maxImageCount","minImageCount","updateMode","disable","setIsLoading","useLoader","showSnackbar","useSnackbar","imageInputRef","useRef","selectedFiles","setSelectedFiles","useState","uploadedFiles","setUploadedFiles","newFiles","setNewFiles","isDarkModeOn","useSelector","selectDarkModeStatus","progressDelete","setProgressDelete","progressUpdate","setProgressUpdate","isUploadSuccessful","setIsUploadSuccessful","console","log","filesizes","bytes","decimals","arguments","length","undefined","dm","i","Math","floor","parseFloat","pow","toFixed","useEffect","fetchStudioImages","truncatedFiles","slice","alert","concat","current","value","calculateDelta","selectedFileIds","map","file","id","uploadedFileIds","imagesToDelete","filter","includes","newImages","async","folderPath","folderRef","firebaseRef","storage","fileList","listAll","files","Promise","all","items","downloadURL","getDownloadURL","fileRef","name","filename","fileURL","error","useImperativeHandle","isValid","_jsx","className","style","display","width","justifyContent","children","flex","_jsxs","backgroundColor","STORAGES","STUDIOIMAGES","type","onChange","e","Array","from","target","updatedFiles","forEach","reader","FileReader","onloadend","push","shortid","filetype","fileimage","result","datetime","lastModifiedDate","toLocaleString","filesize","size","prevFiles","readAsDataURL","multiple","position","Card","sx","maxWidth","match","src","alt","maxHeight","objectFit","IconButton","disabled","onClick","handleDeleteSelectedFile","window","confirm","top","right","DeleteIcon","color","CardContent","deleteAllImagesInFolder","uploadImages","deleteImages","hidden","max","defaultProps","_defaultTime$split$","show","handleClose","handleSelect","defaultTime","startTime_i","split","trim","endTime_i","renderTimeOptions","defaultValue","timeOptions","generateTimeOptions","options","option_AM","option_PM","hours","minutes","formattedHours","toString","padStart","formattedMinutes","timeString","formattedHours12","_Fragment","option","Modal","onHide","Header","closeButton","Title","Body","Row","Col","Form","Group","Label","Control","as","height","lineHeight","padding","Footer","Button","dayMapping","M","T","W","Th","F","St","Sn","updateDaysFormat","records","updatedDays","day","Set","daysOfWeek","categoryMap","Kids","Adults","Women_Only","Men_Only","Seniors","All","Couples","Families","tableData","setTableData","instructorNamesWithIds","showTimePicker","setShowTimePicker","selectedRowIndex","setSelectedRowIndex","selectedRow","setSelectedRow","danceStylesOptions","danceStyles","setDefaultTime","handleTableChange","index","field","prevData","isArray","join","newData","handleTimePickerClose","handleTimeSelect","startTime","endTime","currentTime","time","currentStartTime","currentEndTime","Table","bordered","variant","border","textAlign","minWidth","handleAddRow","danceForms","days","instructors","fee","level","status","freeTrial","classCategory","FaPlus","row","_row$days","_row$days$split","_row$days$split$call","_row$days$split$call$","_tableData$selectedRo","MultiSelect","call","event","placeholder","maxSelectedLabels","handleTimePickerOpen","TimeRangePicker","Autocomplete","_","values","renderInput","params","TextField","Object","idx","splice","handleRemoveRow","FaMinus","libraries","apiKey","PinMarker","FaMapMarkerAlt","fontSize","selectedLocation","setSelectedLocation","mapAddress","setMapAddress","center","setCenter","lat","lng","isLoaded","loadError","useJsApiLoader","googleMapsApiKey","PlacesAutocomplete","onSelect","results","geocodeByAddress","selectedAddress","latLng","getLatLng","_ref3","getInputProps","suggestions","getSuggestionItemProps","loading","suggestion","_createElement","key","placeId","description","GoogleMapReact","bootstrapURLKeys","defaultCenter","defaultZoom","_ref2","google","maps","Geocoder","geocode","location","formatted_address","_form$studioName","_form$street","_form$city","StudioId","navigate","useNavigate","form","document","getElementById","studioName","streetName","street","city","textTransform","marginTop","MUIButton","mt","px","bgcolor","jsx","isOn","handleToggle","Box","borderRadius","alignItems","cursor","transition","boxShadow","timings","setTimings","updatedDayTimings","isDayClosed","open","dayOrder","xs","sm","md","lg","fontWeight","charAt","toUpperCase","CustomSwitch","isClosed","close","toggleDayClosed","slot","removeTimeSlot","MuiButton","addTimeSlot","encodeToUnicode","text","utf8Encoded","TextEncoder","encode","String","fromCharCode","initialStudioTimings","tuesday","wednesday","thursday","friday","saturday","sunday","monday","previousDraftState","effectDraftRef","logoImageUploadRef","studioImageUploadRef","anouncementImageUploadRef","newStudioId","setNewStudioId","selectedInstructors","setSelectedInstructors","selectedDanceStyles","setSelectedDanceStyles","selectedAmenities","setSelectedAmenities","instructor","isReady","setIsReady","isSubmitting","setIsSubmitting","locationOptions","indianCities","stateOptions","indianStates","amenityKeys","keys","AMENITIES_ICONS","activeStep","setActiveStep","validateStep1","aboutStudio","founderName","aboutFounder","mobileNumber","whatsappNumber","numberOfHalls","maximumOccupancy","validateStep2","every","slots","entry","_entry$className","_entry$danceForms","_entry$days","_entry$time","_entry$fee","_entry$level","_entry$classCategory$","validateStep3","buildingName","pincode","state","handleNext","errorMessage","validateStep4","_logoImageUploadRef$c","validateStep5","_studioImageUploadRef","_anouncementImageUplo","prevActiveStep","handleBack","darkTheme","createTheme","palette","mode","saveDraft","q","query","collection","db","DRAFT_COLLECTIONS","DRAFT_STUDIOS","where","JSON","parse","localStorage","getItem","UserId","querySnapshot","getDocs","empty","studios","doc","data","foundStudio","studioRef","reduce","accumulator","currentState","mailAddress","instructorsNames","landmark","country","geolocation","gstNumber","enrolledId","reviews","author","displayName","isPremium","addAmenities","enrollmentProcess","creatorEmail","email","instagram","facebook","youtube","twitter","visibilty","isEqual","updateDoc","addDoc","unicodeString","c","charCodeAt","TextDecoder","decode","Uint8Array","decodeUnicode","main","previousState","setInterval","err","clearInterval","Stepper","alternativeLabel","label","Step","StepLabel","onSubmit","preventDefault","errorMessages","Boolean","_JSON$parse","currentUserEmail","studioData","notifyEmails","metaData","entity_name","response","postData","COLLECTIONS","STUDIO","ok","json","deleteDoc","resetDraft","controlId","rows","minHeight","minheight","ThemeProvider","theme","CssBaseline","handleDanceStylesChange","handleInstructorChange","href","rel","textDecoration","overflowX","whiteSpace","scrollbarColor","StudioTable","handleAmentiesChange","margin","StudioWeeklyTimings","MapsInput","LinearProgress","STUDIOICON","STUDIOANNOUNCEMENTS","SuccessMessage","message","timeOfDisplay","fontStyle","showAlert","setShowAlert","timer","setTimeout","clearTimeout","Container","Alert","marginBottom","onClose","dismissible","studio","setStudio","studioId","setStudioId","selectedStudio","setSelectedStudio","selectedStudioId","setSelectedStudioId","selectedStudioFrozenClassRows","setSelectedStudioFrozenClassRows","showUpdateSuccessAlert","setShowUpdateSuccessAlert","showUpdateErrorAlert","setShowUpdateErrorAlert","studiosOfUser","studioIdList","maxIndex","Number","validate","nameIdLocal","nameId","indexOfColon","lastIndexOf","substring","dbPayload","putData","reset","selectedId","pop","studioDoc","getDoc","exists","loc","studioItem","newCity","prevState","handleAmenitiesChange","newRowKey","rowKey","_tableData$rowKey","_tableData$rowKey$day","_tableData$rowKey$day2","_tableData$rowKey$day3","_tableData$rowKey$day4","_tableData$index","_tableData$index$clas","AlertPopup","setInstructors","isCreator","setIsCreator","premiumTill","setPremiumTill","currentUser","useAuth","setValue","React","userRef","uid","userSnap","CreatorMode","getCreatorMode","userId","instructorRef","INSTRUCTORS","instructorsList","fetchInstructors","docs","setItem","stringify","getStudioCreated","typography","TabContext","borderBottom","borderColor","TabList","handleChange","newValue","Tab","TabPanel","StudioAdd","StudioUpdate","CardSliderCard","collection_name","notify","metadata","BASEURL","BASEURL_PROD","authToken","fetch","method","headers","body","Error","entity_id","endpoint","bookEntity","url","SERVER_URLS","CLOUD","bookingData","entityType","associatedStudioId","emailLearner","personsAllowed","pricePerPerson","getYoutubeVideoId","link","videoId","formatDateString","dateString","year","month","lastDigit","suffix","daySuffix","parseInt"],"sourceRoot":""}