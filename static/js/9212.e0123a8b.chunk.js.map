{"version":3,"file":"static/js/9212.e0123a8b.chunk.js","mappings":"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","sources":["Components/SideMenu.js","constants.js","utils/firebaseUtils.js"],"sourcesContent":["import { Offcanvas, Button } from 'react-bootstrap';\nimport { auth } from '../config';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport { useSelector } from 'react-redux';\nimport logo from './../logo.png';\nimport './SideMenu.css';\nimport {useEffect} from \"react\";\nimport secureLocalStorage from 'react-secure-storage';\nimport { setCreatorMode } from '../utils/firebaseUtils';\n\nfunction SideMenu({ showProfileOffcanvas, closeProfileOffcanvas }) {\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n\n  const handleLogout = async () => {\n    console.log(\"Logging out SideMenu\")\n    try {\n    await auth.signOut();\n    localStorage.clear()\n    secureLocalStorage.clear()\n     \n    } catch (error) {\n      console.error('Error during logout:', error.message);\n    }\n  };\n\n  const trySetCreatorMode = () => {\n    let attempts = 0;\n    const userInfoFull = JSON.parse(localStorage.getItem('userInfoFull'));\n    const userId = userInfoFull?.uid;\n\n    while (attempts < 2) {\n          const creatorMode = secureLocalStorage.getItem('CreatorMode');\n\n          if (creatorMode == null) {\n            setCreatorMode(userId);\n            attempts += 1;\n          } else {\n            break;\n          }\n        \n      }\n  };\n\n  useEffect(() => {\n    trySetCreatorMode();\n  }, []);\n\n  const regularMenuItems = [\n    { action: () => window.location.hash = '#/profile', name: 'Profile', show: true },\n    { action: () => window.location.hash = '#/transactions', name: 'Transactions',show:true },\n    { action: () => window.location.hash = '#/creatorDashboard', name: 'Dashboard',show: secureLocalStorage.getItem('CreatorMode')  },\n    { action: () => window.location.hash = '#/myBookings', name: 'Bookings',show:true },\n    { action: handleLogout, name: 'Sign Out',show:true },\n  ];\n\n  return (\n    <Offcanvas\n      style={{\n        width: '20rem',\n        backgroundColor: isDarkModeOn ? 'black' : 'white',\n        color: isDarkModeOn ? 'white' : 'black'\n      }}\n      show={showProfileOffcanvas}\n      onHide={closeProfileOffcanvas}\n    >\n      <Offcanvas.Header closeButton>\n        <img style={{ width: '6rem', height: '6rem', borderRadius: '50%' }} src={logo} alt=\"Logo\" />\n      </Offcanvas.Header>\n      <Offcanvas.Body>\n        <ul className=\"menu\">\n          <ul className=\"vertical-menu\">\n            {regularMenuItems.map(({ action, name,show }, index) => (\n              <li key={index} hidden={!show}>\n                <Button\n                  variant=\"outline-warning\"\n                  className=\"rounded-pill menu-button\"\n                  onClick={action}\n                >\n                  {name}\n                </Button>\n              </li>\n            ))}\n          </ul>\n        </ul>\n      </Offcanvas.Body>\n    </Offcanvas>\n  );\n}\n\nexport default SideMenu;\n","import { FaSnowflake, FaWifi, FaTint, FaToilet, FaPlug, FaFireExtinguisher, FaFirstAid, FaVideo, FaCreditCard, FaParking  } from 'react-icons/fa';\n\nexport const STATUSES = {\n    SUBMITTED: \"Submitted\",\n    UNDER_REVIEW: \"Under Review\",\n    REVIEWED: \"Reviewed\",\n    VERIFIED: \"Verified\",\n    VERIFICATION_FAILED: \"Verification Failed\",\n};\n\nexport const DRAFT_COLLECTIONS = {\n    DRAFT_STUDIOS: 'DraftStudios',\n    DRAFT_WORKSHOPS: 'DraftWorkshops',\n    DRAFT_OPEN_CLASSES: 'DraftOpenClasses',\n    DRAFT_COURSES: 'DraftCourses'\n};\n\nexport const LEVELS = {\n    ALL : \"All\",\n    BEGINNERS : \"Beginner\", \n    INTERMEDIATE :\"Intermediate\", \n    ADVANCED :\"Advanced\"\n}\nexport const ENTITY_FLAG = {\n    INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR : 30,\n    WORKSHOPS_BOOKING_LIMIT : 10,\n    OPEN_CLASSES_BOOKING_LIMIT : 2,\n    COURSES_BOOKING_LIMIT : 10,\n}\n\n\nexport const SERVER_URLS = {\n    CLOUD : process.env.REACT_APP_BACKEND_URL,\n    LOCAL : 'http://127.0.0.1:8000/'\n}\n\nexport const COLORS = {\n    GREEN: { backgroundColor: \"#28a745\", color: \"#fff\" },     // Green background, white text\n    BLUE: { backgroundColor: \"#007bff\", color: \"#fff\" },      // Blue background, white text\n    YELLOW: { backgroundColor: \"#ffc107\", color: \"#000\" },    // Yellow background, black text\n    RED: { backgroundColor: \"#dc3545\", color: \"#fff\" },       // Red background, white text\n    PURPLE: { backgroundColor: \"#6f42c1\", color: \"#fff\" },    // Purple background, white text\n    ORANGE: { backgroundColor: \"#fd7e14\", color: \"#fff\" },    // Orange background, white text\n    TEAL: { backgroundColor: \"#20c997\", color: \"#fff\" },      // Teal background, white text\n    PINK: { backgroundColor: \"#e83e8c\", color: \"#fff\" },      // Pink background, white text\n    GRAY: { backgroundColor: \"#6c757d\", color: \"#fff\" },       // Gray background, white text\n\n    LIGHTBLUE: { backgroundColor: \"#17a2b8\", color: \"#fff\" }, // Light blue background, white text\n    DARKBLUE: { backgroundColor: \"#343a40\", color: \"#fff\" },  // Dark blue background, white text\n    CYAN: { backgroundColor: \"#00bcd4\", color: \"#fff\" },      // Cyan background, white text\n    INDIGO: { backgroundColor: \"#6610f2\", color: \"#fff\" },    // Indigo background, white text\n    LIME: { backgroundColor: \"#cddc39\", color: \"#000\" },      // Lime background, black text\n    AMBER: { backgroundColor: \"#ffca28\", color: \"#000\" },     // Amber background, black text\n    BROWN: { backgroundColor: \"#795548\", color: \"#fff\" },     // Brown background, white text\n    LIGHTGREEN: { backgroundColor: \"#8bc34a\", color: \"#000\" },// Light green background, black text\n    DEEPPURPLE: { backgroundColor: \"#673ab7\", color: \"#fff\" },// Deep purple background, white text\n    DEEPORANGE: { backgroundColor: \"#ff5722\", color: \"#fff\" },// Deep orange background, white text\n    BLACK: { backgroundColor: \"#000000\", color: \"#fff\" },     // Black background, white text\n    WHITE: { backgroundColor: \"#ffffff\", color: \"#000\" },     // White background, black text\n    SILVER: { backgroundColor: \"#c0c0c0\", color: \"#000\" },    // Silver background, black text\n    GOLD: { backgroundColor: \"#ffd700\", color: \"#000\" },      // Gold background, black text\n    NAVY: { backgroundColor: \"#001f3f\", color: \"#fff\" },      // Navy background, white text\n    OLIVE: { backgroundColor: \"#3d9970\", color: \"#fff\" },     // Olive background, white text\n\n  };\n\nexport const CHIP_LEVELS_DESIGN = {\n    [LEVELS.ALL]: COLORS.GREEN,           // Green background, white text\n    [LEVELS.BEGINNERS]: COLORS.BLUE,     // Blue background, white text\n    [LEVELS.INTERMEDIATE]: COLORS.YELLOW,  // Yellow background, black text\n    [LEVELS.ADVANCED]: COLORS.RED      // Red background, white text\n  };\n  \n\n  \nexport const danceStylesColorChips = [COLORS.PURPLE,COLORS.ORANGE,COLORS.TEAL,COLORS.LIME]\n\nexport const COLLECTIONS = {\n    USER: \"User\",\n    USER_KYC:\"UserKyc\",\n    ADMIN:\"Admin\",\n    REVIEWS: \"Reviews\",\n    TRANSACTIONS: \"Transactions\",\n    STUDIO: \"Studio\",\n    INSTRUCTORS: \"Instructors\",\n    FREE_TRIAL_BOOKINGS:\"FreeTrialBookings\",\n    WORKSHOPS: 'Workshops',\n    OPEN_CLASSES: 'OpenClasses',\n    COURSES: 'Courses',\n    BOOKINGS: 'Bookings',\n}\n\nexport const STORAGES ={\n    STUDIOIMAGES:'StudioImages',\n    STUDIOICON:'StudioIcon',\n    STUDIOANNOUNCEMENTS :'StudioAnnouncements',\n    USERIMAGE:'UserImage',\n    INSTRUCTORIMAGES: 'InstructorImages',\n    WORKSHOPICON :\"WorkshopIcon\",\n    WORKSHOPIMAGES :\"WorkshopImages\",\n    OPENCLASSICON :\"OpenClassIcon\",\n    COURSEICON :\"CourseIcon\",\n    CREATORS_KYC_DOCUMENTS :\"CreatorKycDocuments\"\n}\n\nexport const SEARCH_FILTERS ={\n    DANCEFORMS:'danceforms',\n    DISTANCES:'distances',\n}\n\nexport const BASEURL_DEV = \"http://0.0.0.0:8000/\"\nexport const BASEURL_PROD= process.env.REACT_APP_BACKEND_URL\nexport const STUDIO_ICON_DEFAULT = \"https://firebasestorage.googleapis.com/v0/b/nritya-7e526.appspot.com/o/RichEmailImages%2FDance3.jpg?alt=media&token=d7d41929-39c1-40d1-ad6a-1b2281769e84\"\n\nexport const AMENITIES_ICONS = {\n    \"AC\": <FaSnowflake />,\n    \"Free Wifi\": <FaWifi />,\n    \"RO Water\": <FaTint />,\n    \"Toilet\": <FaToilet />,\n    \"Power Backup\": <FaPlug />,\n    \"Fire Extinguisher\": <FaFireExtinguisher />,\n    \"First Aid Kit\": <FaFirstAid />,\n    \"CCTV Camera\": <FaVideo />,\n    \"Card Payment\": <FaCreditCard />,\n    \"Parking Space\": <FaParking />,\n};\n\n","import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, query, getDocs, where, getCountFromServer } from 'firebase/firestore';\nimport { db } from '../config';\nimport {ref,listAll,getDownloadURL,uploadBytes, deleteObject, uploadBytesResumable  } from \"firebase/storage\";\nimport { storage } from '../config';\nimport { BASEURL_DEV, BASEURL_PROD } from '../constants';\nimport secureLocalStorage from 'react-secure-storage';\n\nexport const setCreatorMode = async (uid) => {\n  const BASEURL = BASEURL_PROD;\n  const url = `${BASEURL}crud/getUserMode/${uid}`;\n  //console.log(\"creatorMode uid\", uid, url);\n  \n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.success) {\n      let mode = false;\n      if (data.data === true) {\n        mode = true;\n      }\n      //console.log(\"setCreatorMode: Is User a creator?\", mode);\n      secureLocalStorage.setItem('CreatorMode', mode);\n    } else {\n      console.log(\"Error: \", data.message || \"Unknown error\");\n      //secureLocalStorage.setItem('CreatorMode', false);\n    }\n    \n  } catch (error) {\n    console.log(\"Error fetching user mode: \", error);\n    secureLocalStorage.setItem('CreatorMode', false);\n  }\n}\n\nexport const fetchStudioEntities = async (studioId, entityType, setState) => {\n  const BASE_URL = BASEURL_PROD;\n  try {\n    const url = `${BASE_URL}crud/${studioId}/${entityType}/`;\n    console.log(url)\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.success) {\n      setState(data.data);\n    } else {\n      console.error(`Error fetching ${entityType}:`, data.error);\n    }\n  } catch (error) {\n    console.error(`Error fetching ${entityType}:`, error);\n  }\n};\n\n\nexport const getCreatorMode = async () => {\n  try{\n    const mode = secureLocalStorage.getItem('CreatorMode');\n    console.log(\"getCreatorMode \",mode)\n    if (mode){\n      return mode\n    }else{\n      return false\n    }\n  } \n  catch(error){\n    console.log(\" error\");\n    return false\n  }\n}\n\nexport const setGetCreatorModeOnMount = async (uid) => {\n  await setCreatorMode(uid);\n  return await getCreatorMode();\n};\n\n\n// Read operation with image URL\nexport const readDocumentWithImageUrl = async (collectionName, productId) => {\n    console.log(\"Debug \",`${collectionName}/${productId}`)\n    const storagePath = `${collectionName}/${productId}`;\n    const folderRef = ref(storage,storagePath);\n    try {\n        const result = await listAll(folderRef);\n        if (result.items.length > 0) {\n            const firstFileRef = result.items[0];\n            const url = await getDownloadURL(firstFileRef);\n            console.log('Debug URL:', url);\n            return url;\n          } else {\n            console.log('Debug No files found in the folder.');\n            return null;\n          }\n    } catch (error) {\n      console.error('Error getting image URL:', error);\n      return null;\n    }\n  };\n\n// Read operation\nexport const readDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    const docSnapshot = await getDoc(docRef);\n    return docSnapshot.exists() ? docSnapshot.data() : null;\n};\n\n// Create or Update operation\nexport const saveDocument = async (collectionName, documentId, data) => {\n    const docRef = doc(db, collectionName, documentId);\n    await setDoc(docRef, data, { merge: true });\n    return data;\n};\n\n\nexport const handleSavePostOTPSuccess = async (collectionName, documentId, phoneNumber) => {\n  const docRef = doc(db, collectionName, documentId);\n  await updateDoc(docRef, {isPhoneNumberVerified:true,phoneNumber});\n  return true;\n};\n\n// Update specific fields in a document\nexport const updateDocumentFields = async (collectionName, documentId, fields) => {\n    const docRef = doc(db, collectionName, documentId);\n    await updateDoc(docRef, fields);\n    return { id: documentId, ...fields };\n};\n\n// Delete operation\nexport const deleteDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    await deleteDoc(docRef);\n    return { id: documentId };\n};\n\n// Query operation\nexport const queryDocuments = async (collectionName, conditions) => {\n    const q = query(collection(db, collectionName, conditions));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const queryDocumentsCount = async (collectionName,field,operation,value) => {\n    console.log(\"Hiii \",collectionName,field,operation,value)\n    const q = query(collection(db, collectionName), where(field,operation,value));\n    const snapshot = await getCountFromServer(q);\n    return snapshot.data().count;\n};\n\n\n  // Function to delete all images in a folder\nexport  const deleteAllImagesInFolder = async (storageFolder, entityId) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n    // Function to delete all images in a folder\n  export  const deleteAllImagesInFolder2 = async (storageFolder, entityId,subfolder) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}/${subfolder}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n  // Function to delete images\nexport const deleteImages = async (storageFolder,imagesToDelete,entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Deletes specific images associated with the given entityId.\n\n    Args:\n      imagesToDelete <array>: An array of image objects to be deleted.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n    const total = imagesToDelete.length;\n    let done = 0;\n    await Promise.all(imagesToDelete.map(async (file) => {\n      let folderPath = `${storageFolder}/${entityId}/${file.filename}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}/${file.filename}`;\n      }\n      const fileRefToDelete = ref(storage, folderPath);\n      await deleteObject(fileRefToDelete);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  // Function to upload new images\nexport const uploadImages = async (storageFolder, newImages, entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n\n    Args:\n      newImages <array>: An array of new image objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n   console.log(storageFolder,entityId)\n   const total = newImages.length;\n    let done = 0;\n    await Promise.all(newImages.map(async (newFileData) => {\n      let folderPath = `${storageFolder}/${entityId}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n      }\n      const fileRef = ref(storage, `${folderPath}/${newFileData.file.name}`);\n      await uploadBytes(fileRef, newFileData.file);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  export const uploadImages2 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    uploadBytesResumable(storageRef, newImages).then((snapshot) => {\n      console.log('Uploaded a blob or file!');\n    });\n  };\n\n  export const uploadImages3 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n        });\n      }\n    );\n    \n  };\n\n\n  export const uploadImages4 = async (storageFolder, newImages, entityId, thirdFolder = null, onProgress, onComplete) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages,newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const totalBytes = snapshot.totalBytes;\n        const bytesTransferred = snapshot.bytesTransferred;\n        const progress = totalBytes > 0 ? ((bytesTransferred / totalBytes) * 100).toFixed(2) : -1;\n        onProgress(progress);\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n          onComplete(downloadURL);\n        });\n\n      }\n    );\n    \n  };\n\n\n export const uploadOneImageAndGetURL = async (storageFolder, file, entityId) => {\n    try {\n      const folderPath = `${storageFolder}/${entityId}/${file.name}`;\n      console.log(folderPath)\n      const fileRef = ref(storage, folderPath);\n      \n      await uploadBytes(fileRef, file);\n  \n      const imageUrl = await getDownloadURL(fileRef);\n      console.log(imageUrl)\n      return imageUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error; \n    }\n  };\n  \n  export const getAllFilesFromFolder = async (storageFolder) => {\n    const folderPath = `${storageFolder}`;\n    const folderRef = ref(storage, folderPath);\n    \n    try {\n        const fileList = await listAll(folderRef);\n\n        const imageUrlsComprehensive = await Promise.all(\n          fileList.items.map(async (fileRef) => {\n            const downloadURL = await getDownloadURL(fileRef);\n  \n            return {\n              id: fileRef.name,\n              filename: fileRef.name,\n              fileURL: downloadURL,\n            };\n          })\n        );\n\n        // return imageUrls;\n        return imageUrlsComprehensive\n    } catch (error) {\n        console.error('Error retrieving images:', error);\n        throw error;\n    }\n};\n\n"],"names":["_ref","showProfileOffcanvas","closeProfileOffcanvas","isDarkModeOn","useSelector","selectDarkModeStatus","useEffect","trySetCreatorMode","attempts","userInfoFull","JSON","parse","localStorage","getItem","userId","uid","secureLocalStorage","setCreatorMode","regularMenuItems","action","window","location","hash","name","show","async","console","log","auth","signOut","clear","error","message","_jsxs","Offcanvas","style","width","backgroundColor","color","onHide","children","_jsx","Header","closeButton","height","borderRadius","src","logo","alt","Body","className","map","_ref2","index","hidden","Button","variant","onClick","STATUSES","SUBMITTED","UNDER_REVIEW","REVIEWED","VERIFIED","VERIFICATION_FAILED","DRAFT_COLLECTIONS","DRAFT_STUDIOS","DRAFT_WORKSHOPS","DRAFT_OPEN_CLASSES","DRAFT_COURSES","LEVELS","ALL","BEGINNERS","INTERMEDIATE","ADVANCED","ENTITY_FLAG","INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR","WORKSHOPS_BOOKING_LIMIT","OPEN_CLASSES_BOOKING_LIMIT","COURSES_BOOKING_LIMIT","SERVER_URLS","CLOUD","process","LOCAL","COLORS","GREEN","BLUE","YELLOW","RED","PURPLE","ORANGE","TEAL","PINK","GRAY","LIGHTBLUE","DARKBLUE","CYAN","INDIGO","LIME","AMBER","BROWN","LIGHTGREEN","DEEPPURPLE","DEEPORANGE","BLACK","WHITE","SILVER","GOLD","NAVY","OLIVE","CHIP_LEVELS_DESIGN","danceStylesColorChips","COLLECTIONS","USER","USER_KYC","ADMIN","REVIEWS","TRANSACTIONS","STUDIO","INSTRUCTORS","FREE_TRIAL_BOOKINGS","WORKSHOPS","OPEN_CLASSES","COURSES","BOOKINGS","STORAGES","STUDIOIMAGES","STUDIOICON","STUDIOANNOUNCEMENTS","USERIMAGE","INSTRUCTORIMAGES","WORKSHOPICON","WORKSHOPIMAGES","OPENCLASSICON","COURSEICON","CREATORS_KYC_DOCUMENTS","BASEURL_PROD","STUDIO_ICON_DEFAULT","AMENITIES_ICONS","FaSnowflake","FaWifi","FaTint","FaToilet","FaPlug","FaFireExtinguisher","FaFirstAid","FaVideo","FaCreditCard","FaParking","BASEURL","url","concat","response","fetch","data","json","success","mode","setItem","fetchStudioEntities","studioId","entityType","setState","BASE_URL","setGetCreatorModeOnMount","getCreatorMode","readDocumentWithImageUrl","collectionName","productId","storagePath","folderRef","ref","storage","result","listAll","items","length","firstFileRef","getDownloadURL","readDocument","documentId","docRef","doc","db","docSnapshot","getDoc","exists","saveDocument","setDoc","merge","handleSavePostOTPSuccess","phoneNumber","updateDoc","isPhoneNumberVerified","updateDocumentFields","fields","id","queryDocumentsCount","field","operation","value","q","query","collection","where","getCountFromServer","count","deleteAllImagesInFolder","storageFolder","entityId","folderPath","fileList","Promise","all","deleteObject","fileRef","deleteAllImagesInFolder2","subfolder","deleteImages","imagesToDelete","setProgress","thirdFolder","arguments","undefined","total","done","file","filename","fileRefToDelete","uploadImages","newImages","newFileData","uploadBytes","uploadImages4","onProgress","onComplete","storageRef","uploadTask","uploadBytesResumable","on","snapshot","totalBytes","bytesTransferred","progress","toFixed","state","code","then","downloadURL","getAllFilesFromFolder","fileURL"],"sourceRoot":""}