{"version":3,"file":"static/js/8393.fb8d4d97.chunk.js","mappings":"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","sources":["Screens/LoginPage.js","constants.js","utils/firebaseUtils.js"],"sourcesContent":["import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {auth , provider}  from './../config.js';\nimport { signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { db } from '../config';\nimport { doc, getDoc,setDoc } from \"firebase/firestore\";\nimport { COLLECTIONS } from \"./../constants.js\";\nimport {  Row, Col } from 'react-bootstrap';\nimport { useSelector } from 'react-redux'; \nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { Button, Container } from '@mui/material';\nimport { setCreatorMode } from '../utils/firebaseUtils.js';\n\n\n\nfunction LoginPage({onLogin,setIsLoggedIn}) {\n  \n  const [loginFailed, setLoginFailed] = useState(false);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n\n  const navigate = useNavigate();\n\n    const addUserIfMissing = async (user) => {\n      try {\n        const userRef = doc(db, COLLECTIONS.USER, user.uid);\n        const userSnap = await getDoc(userRef);\n        if (userSnap.exists()) {\n          console.log(\"User there\");\n        } else {\n          // docSnap.data() will be undefined in this case\n          console.log(\"No such document!\");\n          await setDoc(doc(db, COLLECTIONS.USER, user.uid), {\n            Name: user.displayName,\n            Email: user.email,\n            DoB: null, // You may want to add user's date of birth here\n            UserId: user.uid,\n            WorkshopCreated: [],\n            WorkshopEnrolled: [],\n            Cart: [],\n            CreatorMode: false,\n            KycIdList:{},\n            StudioCreated:[],\n            premiumTill: false,\n            TransactionIDs:[],\n            recentlyWatched:{0:\"\",1:\"\",2:\"\",3:\"\",4:\"\"},\n          });\n          console.log(\"User added successfully\");\n        }\n\n        const userRef2 = doc(db, COLLECTIONS.USER, user.uid);\n        const userSnap2 = await getDoc(userRef2);\n        localStorage.setItem('userDetails',JSON.stringify({\"UserId\":user.uid,\"email\":user.email,\"isPremium\":userSnap2.data().isPremium,\"displayName\":userSnap2.data().displayName,\"WorkshopCreated\":userSnap2.data().WorkshopCreated,\"WorkshopEnrolled\":userSnap2.data().WorkshopEnrolled}));\n       \n\n        \n      } catch (error) {\n        console.error(\"Error adding user: \", error);\n      }\n    };\n\n    const signin = async () => {\n      try {\n        const result = await signInWithPopup(auth, provider);\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n        const accessToken = credential.accessToken;\n        const idToken = credential.idToken;\n        console.log(\"Access token\",accessToken)\n        console.log(\"Id token\",idToken)\n        const user = result.user;\n        console.log(\"Post login :\",user);\n        console.log(\"UserId\",user.uid);\n        console.log(\"Result \", result)\n        if (result) {\n          let token = await auth.currentUser?.getIdToken();\n          console.log(\"token\", token);\n          localStorage.setItem(\"authToken\", token);\n        }\n        onLogin({\"UserId\":user.uid,\"email\":user.email,\"isPremium\":user.isPremium,\"displayName\":user.displayName,\"WorkshopCreated\":user.WorkshopCreated,\"WorkshopEnrolled\":user.WorkshopEnrolled,\"CreatorMode\":false,\"photoURL\":user.photoURL},user);\n        setIsLoggedIn(true);\n        await addUserIfMissing(user);\n        await setCreatorMode(user.uid);\n        navigate(`/`);\n      } catch (error) {\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        console.log('Invalid username or password');\n        setLoginFailed(true);\n      }\n    };\n    \n      \n    return (\n      <Container fluid className='custom-container-main'>\n          <Row>\n            <Col xs={12} md={12}>\n              <div>\n              <form\n                className='custom-login-form'\n                onSubmit={(e) => {\n                  e.preventDefault(); // Prevent form submission\n                  signin(); // Call your signin function on form submission\n                  //alert(\"Form Submitted\")\n                }}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  padding: '15px 0'\n                }}\n              >\n                <Button\n                  type=\"submit\" // Add a type to the button to trigger form submission\n                  style={{\n                    backgroundColor: \"#D9D9D9\",\n                    color: '#000',\n                    borderRadius: '6px',\n                    textTransform: 'none',\n                    border: '1px solid #777',\n                    padding: '8px 16px'\n                  }}\n                >\n                  <img\n                    src=\"https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg\"\n                    alt=\"Google Icon\"\n                    style={{ marginRight: '10px', height: '20px' }}\n                  />\n                  Sign In with Google\n                </Button>\n              </form>\n              </div>\n            </Col>\n          </Row>\n      </Container>\n    );\n}\n\nexport default LoginPage;\n","import { FaSnowflake, FaWifi, FaTint, FaToilet, FaPlug, FaFireExtinguisher, FaFirstAid, FaVideo, FaCreditCard, FaParking  } from 'react-icons/fa';\n\nexport const STATUSES = {\n    SUBMITTED: \"Submitted\",\n    UNDER_REVIEW: \"Under Review\",\n    REVIEWED: \"Reviewed\",\n    VERIFIED: \"Verified\",\n    VERIFICATION_FAILED: \"Verification Failed\",\n};\n\nexport const DRAFT_COLLECTIONS = {\n    DRAFT_STUDIOS: 'DraftStudios',\n    DRAFT_WORKSHOPS: 'DraftWorkshops',\n    DRAFT_OPEN_CLASSES: 'DraftOpenClasses',\n    DRAFT_COURSES: 'DraftCourses'\n};\n\nexport const LEVELS = {\n    ALL : \"All\",\n    BEGINNERS : \"Beginner\", \n    INTERMEDIATE :\"Intermediate\", \n    ADVANCED :\"Advanced\"\n}\nexport const INTERNET_CONV_CHARGES = 30;\nexport const SERVER_URLS = {\n    PROD : 'https://nrityaserver-2b241e0a97e5.herokuapp.com/',\n    LOCAL : 'http://127.0.0.1:8000/'\n}\n\nexport const COLORS = {\n    GREEN: { backgroundColor: \"#28a745\", color: \"#fff\" },     // Green background, white text\n    BLUE: { backgroundColor: \"#007bff\", color: \"#fff\" },      // Blue background, white text\n    YELLOW: { backgroundColor: \"#ffc107\", color: \"#000\" },    // Yellow background, black text\n    RED: { backgroundColor: \"#dc3545\", color: \"#fff\" },       // Red background, white text\n    PURPLE: { backgroundColor: \"#6f42c1\", color: \"#fff\" },    // Purple background, white text\n    ORANGE: { backgroundColor: \"#fd7e14\", color: \"#fff\" },    // Orange background, white text\n    TEAL: { backgroundColor: \"#20c997\", color: \"#fff\" },      // Teal background, white text\n    PINK: { backgroundColor: \"#e83e8c\", color: \"#fff\" },      // Pink background, white text\n    GRAY: { backgroundColor: \"#6c757d\", color: \"#fff\" },       // Gray background, white text\n\n    LIGHTBLUE: { backgroundColor: \"#17a2b8\", color: \"#fff\" }, // Light blue background, white text\n    DARKBLUE: { backgroundColor: \"#343a40\", color: \"#fff\" },  // Dark blue background, white text\n    CYAN: { backgroundColor: \"#00bcd4\", color: \"#fff\" },      // Cyan background, white text\n    INDIGO: { backgroundColor: \"#6610f2\", color: \"#fff\" },    // Indigo background, white text\n    LIME: { backgroundColor: \"#cddc39\", color: \"#000\" },      // Lime background, black text\n    AMBER: { backgroundColor: \"#ffca28\", color: \"#000\" },     // Amber background, black text\n    BROWN: { backgroundColor: \"#795548\", color: \"#fff\" },     // Brown background, white text\n    LIGHTGREEN: { backgroundColor: \"#8bc34a\", color: \"#000\" },// Light green background, black text\n    DEEPPURPLE: { backgroundColor: \"#673ab7\", color: \"#fff\" },// Deep purple background, white text\n    DEEPORANGE: { backgroundColor: \"#ff5722\", color: \"#fff\" },// Deep orange background, white text\n    BLACK: { backgroundColor: \"#000000\", color: \"#fff\" },     // Black background, white text\n    WHITE: { backgroundColor: \"#ffffff\", color: \"#000\" },     // White background, black text\n    SILVER: { backgroundColor: \"#c0c0c0\", color: \"#000\" },    // Silver background, black text\n    GOLD: { backgroundColor: \"#ffd700\", color: \"#000\" },      // Gold background, black text\n    NAVY: { backgroundColor: \"#001f3f\", color: \"#fff\" },      // Navy background, white text\n    OLIVE: { backgroundColor: \"#3d9970\", color: \"#fff\" },     // Olive background, white text\n\n  };\n\nexport const CHIP_LEVELS_DESIGN = {\n    [LEVELS.ALL]: COLORS.GREEN,           // Green background, white text\n    [LEVELS.BEGINNERS]: COLORS.BLUE,     // Blue background, white text\n    [LEVELS.INTERMEDIATE]: COLORS.YELLOW,  // Yellow background, black text\n    [LEVELS.ADVANCED]: COLORS.RED      // Red background, white text\n  };\n  \n\n  \nexport const danceStylesColorChips = [COLORS.PURPLE,COLORS.ORANGE,COLORS.TEAL,COLORS.LIME]\n\nexport const COLLECTIONS = {\n    USER: \"User\",\n    USER_KYC:\"UserKyc\",\n    ADMIN:\"Admin\",\n    REVIEWS: \"Reviews\",\n    TRANSACTIONS: \"Transactions\",\n    STUDIO: \"Studio\",\n    INSTRUCTORS: \"Instructors\",\n    FREE_TRIAL_BOOKINGS:\"FreeTrialBookings\",\n    WORKSHOPS: 'Workshops',\n    OPEN_CLASSES: 'OpenClasses',\n    COURSES: 'Courses',\n    BOOKINGS: 'Bookings',\n}\n\nexport const STORAGES ={\n    STUDIOIMAGES:'StudioImages',\n    STUDIOICON:'StudioIcon',\n    STUDIOANNOUNCEMENTS :'StudioAnnouncements',\n    USERIMAGE:'UserImage',\n    INSTRUCTORIMAGES: 'InstructorImages',\n    WORKSHOPICON :\"WorkshopIcon\",\n    WORKSHOPIMAGES :\"WorkshopImages\",\n    OPENCLASSICON :\"OpenClassIcon\",\n    COURSEICON :\"CourseIcon\",\n    CREATORS_KYC_DOCUMENTS :\"CreatorKycDocuments\"\n}\n\nexport const SEARCH_FILTERS ={\n    DANCEFORMS:'danceforms',\n    DISTANCES:'distances',\n}\n\nexport const BASEURL_DEV = \"http://127.0.0.1:8000/\"\nexport const BASEURL_PROD= \"https://nrityaserver-2b241e0a97e5.herokuapp.com/\"\n\nexport const AMENITIES_ICONS = {\n    \"AC\": <FaSnowflake />,\n    \"Free Wifi\": <FaWifi />,\n    \"RO Water\": <FaTint />,\n    \"Toilet\": <FaToilet />,\n    \"Power Backup\": <FaPlug />,\n    \"Fire Extinguisher\": <FaFireExtinguisher />,\n    \"First Aid Kit\": <FaFirstAid />,\n    \"CCTV Camera\": <FaVideo />,\n    \"Card Payment\": <FaCreditCard />,\n    \"Parking Space\": <FaParking />,\n};\n\n","import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, query, getDocs, where, getCountFromServer } from 'firebase/firestore';\nimport { db } from '../config';\nimport {ref,listAll,getDownloadURL,uploadBytes, deleteObject, uploadBytesResumable  } from \"firebase/storage\";\nimport { storage } from '../config';\nimport { COLLECTIONS } from '../constants';\nimport secureLocalStorage from 'react-secure-storage';\n\nexport const setCreatorMode = async (uid) => {\n  console.log(\"creatorMode uid\",uid)\n  try{\n  const userRef = doc(db, COLLECTIONS.USER, uid);\n  const userSnap = await getDoc(userRef);\n  if (userSnap.exists()) {\n    if(userSnap.data() != null){\n      const mode = userSnap.data().CreatorMode\n      console.log(\"setCreatorMode: Is User a creator?\",mode)\n      secureLocalStorage.setItem('CreatorMode', mode);\n        \n    }else{\n      console.log(\"userSnap.data() null\")\n      \n    }\n  } else {\n    console.log(\"User not found\");\n  }\n  }catch(error){\n    console.log(\" error\",error);\n  }\n}\n\nexport const getCreatorMode = async () => {\n  try{\n    const mode = secureLocalStorage.getItem('CreatorMode');\n    console.log(\"getCreatorMode \",mode)\n    if (mode){\n      return mode\n    }else{\n      return false\n    }\n  } \n  catch(error){\n    console.log(\" error\");\n    return false\n  }\n}\n\n// Read operation with image URL\nexport const readDocumentWithImageUrl = async (collectionName, productId) => {\n    console.log(\"Debug \",`${collectionName}/${productId}`)\n    const storagePath = `${collectionName}/${productId}`;\n    const folderRef = ref(storage,storagePath);\n    try {\n        const result = await listAll(folderRef);\n        if (result.items.length > 0) {\n            const firstFileRef = result.items[0];\n            const url = await getDownloadURL(firstFileRef);\n            console.log('Debug URL:', url);\n            return url;\n          } else {\n            console.log('Debug No files found in the folder.');\n            return null;\n          }\n    } catch (error) {\n      console.error('Error getting image URL:', error);\n      return null;\n    }\n  };\n\n// Read operation\nexport const readDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    const docSnapshot = await getDoc(docRef);\n    return docSnapshot.exists() ? docSnapshot.data() : null;\n};\n\n// Create or Update operation\nexport const saveDocument = async (collectionName, documentId, data) => {\n    const docRef = doc(db, collectionName, documentId);\n    await setDoc(docRef, data, { merge: true });\n    return data;\n};\n\n\nexport const handleSavePostOTPSuccess = async (collectionName, documentId, phoneNumber) => {\n  const docRef = doc(db, collectionName, documentId);\n  await updateDoc(docRef, {isPhoneNumberVerified:true,phoneNumber});\n  return true;\n};\n\n// Update specific fields in a document\nexport const updateDocumentFields = async (collectionName, documentId, fields) => {\n    const docRef = doc(db, collectionName, documentId);\n    await updateDoc(docRef, fields);\n    return { id: documentId, ...fields };\n};\n\n// Delete operation\nexport const deleteDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    await deleteDoc(docRef);\n    return { id: documentId };\n};\n\n// Query operation\nexport const queryDocuments = async (collectionName, conditions) => {\n    const q = query(collection(db, collectionName, conditions));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const queryDocumentsCount = async (collectionName,field,operation,value) => {\n    console.log(\"Hiii \",collectionName,field,operation,value)\n    const q = query(collection(db, collectionName), where(field,operation,value));\n    const snapshot = await getCountFromServer(q);\n    return snapshot.data().count;\n};\n\n\n  // Function to delete all images in a folder\nexport  const deleteAllImagesInFolder = async (storageFolder, entityId) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n    // Function to delete all images in a folder\n  export  const deleteAllImagesInFolder2 = async (storageFolder, entityId,subfolder) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}/${subfolder}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n  // Function to delete images\nexport const deleteImages = async (storageFolder,imagesToDelete,entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Deletes specific images associated with the given entityId.\n\n    Args:\n      imagesToDelete <array>: An array of image objects to be deleted.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n    const total = imagesToDelete.length;\n    let done = 0;\n    await Promise.all(imagesToDelete.map(async (file) => {\n      let folderPath = `${storageFolder}/${entityId}/${file.filename}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}/${file.filename}`;\n      }\n      const fileRefToDelete = ref(storage, folderPath);\n      await deleteObject(fileRefToDelete);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  // Function to upload new images\nexport const uploadImages = async (storageFolder, newImages, entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n\n    Args:\n      newImages <array>: An array of new image objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n   console.log(storageFolder,entityId)\n   const total = newImages.length;\n    let done = 0;\n    await Promise.all(newImages.map(async (newFileData) => {\n      let folderPath = `${storageFolder}/${entityId}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n      }\n      const fileRef = ref(storage, `${folderPath}/${newFileData.file.name}`);\n      await uploadBytes(fileRef, newFileData.file);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  export const uploadImages2 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    uploadBytesResumable(storageRef, newImages).then((snapshot) => {\n      console.log('Uploaded a blob or file!');\n    });\n  };\n\n  export const uploadImages3 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n        });\n      }\n    );\n    \n  };\n\n\n  export const uploadImages4 = async (storageFolder, newImages, entityId, thirdFolder = null, onProgress, onComplete) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages,newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const totalBytes = snapshot.totalBytes;\n        const bytesTransferred = snapshot.bytesTransferred;\n        const progress = totalBytes > 0 ? ((bytesTransferred / totalBytes) * 100).toFixed(2) : -1;\n        onProgress(progress);\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n          onComplete(downloadURL);\n        });\n\n      }\n    );\n    \n  };\n\n\n export const uploadOneImageAndGetURL = async (storageFolder, file, entityId) => {\n    try {\n      const folderPath = `${storageFolder}/${entityId}/${file.name}`;\n      console.log(folderPath)\n      const fileRef = ref(storage, folderPath);\n      \n      await uploadBytes(fileRef, file);\n  \n      const imageUrl = await getDownloadURL(fileRef);\n      console.log(imageUrl)\n      return imageUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error; \n    }\n  };\n  \n  export const getAllFilesFromFolder = async (storageFolder) => {\n    const folderPath = `${storageFolder}`;\n    const folderRef = ref(storage, folderPath);\n    \n    try {\n        const fileList = await listAll(folderRef);\n\n        const imageUrlsComprehensive = await Promise.all(\n          fileList.items.map(async (fileRef) => {\n            const downloadURL = await getDownloadURL(fileRef);\n  \n            return {\n              id: fileRef.name,\n              filename: fileRef.name,\n              fileURL: downloadURL,\n            };\n          })\n        );\n\n        // return imageUrls;\n        return imageUrlsComprehensive\n    } catch (error) {\n        console.error('Error retrieving images:', error);\n        throw error;\n    }\n};\n\n"],"names":["_ref","onLogin","setIsLoggedIn","loginFailed","setLoginFailed","useState","navigate","useSelector","selectDarkModeStatus","useNavigate","signin","async","result","signInWithPopup","auth","provider","credential","GoogleAuthProvider","credentialFromResult","accessToken","idToken","console","log","user","uid","_auth$currentUser","token","currentUser","getIdToken","localStorage","setItem","email","isPremium","displayName","WorkshopCreated","WorkshopEnrolled","photoURL","userRef","doc","db","COLLECTIONS","USER","getDoc","exists","setDoc","Name","Email","DoB","UserId","Cart","CreatorMode","KycIdList","StudioCreated","premiumTill","TransactionIDs","recentlyWatched","userRef2","userSnap2","JSON","stringify","data","error","addUserIfMissing","setCreatorMode","code","message","_jsx","Container","fluid","className","children","Row","Col","xs","md","onSubmit","e","preventDefault","style","display","alignItems","justifyContent","padding","_jsxs","Button","type","backgroundColor","color","borderRadius","textTransform","border","src","alt","marginRight","height","STATUSES","SUBMITTED","UNDER_REVIEW","REVIEWED","VERIFIED","VERIFICATION_FAILED","DRAFT_COLLECTIONS","DRAFT_STUDIOS","DRAFT_WORKSHOPS","DRAFT_OPEN_CLASSES","DRAFT_COURSES","LEVELS","ALL","BEGINNERS","INTERMEDIATE","ADVANCED","INTERNET_CONV_CHARGES","SERVER_URLS","PROD","LOCAL","COLORS","GREEN","BLUE","YELLOW","RED","PURPLE","ORANGE","TEAL","PINK","GRAY","LIGHTBLUE","DARKBLUE","CYAN","INDIGO","LIME","AMBER","BROWN","LIGHTGREEN","DEEPPURPLE","DEEPORANGE","BLACK","WHITE","SILVER","GOLD","NAVY","OLIVE","CHIP_LEVELS_DESIGN","danceStylesColorChips","USER_KYC","ADMIN","REVIEWS","TRANSACTIONS","STUDIO","INSTRUCTORS","FREE_TRIAL_BOOKINGS","WORKSHOPS","OPEN_CLASSES","COURSES","BOOKINGS","STORAGES","STUDIOIMAGES","STUDIOICON","STUDIOANNOUNCEMENTS","USERIMAGE","INSTRUCTORIMAGES","WORKSHOPICON","WORKSHOPIMAGES","OPENCLASSICON","COURSEICON","CREATORS_KYC_DOCUMENTS","BASEURL_PROD","AMENITIES_ICONS","FaSnowflake","FaWifi","FaTint","FaToilet","FaPlug","FaFireExtinguisher","FaFirstAid","FaVideo","FaCreditCard","FaParking","userSnap","mode","secureLocalStorage","readDocumentWithImageUrl","collectionName","productId","storagePath","folderRef","ref","storage","listAll","items","length","firstFileRef","url","getDownloadURL","readDocument","documentId","docRef","docSnapshot","saveDocument","merge","handleSavePostOTPSuccess","phoneNumber","updateDoc","isPhoneNumberVerified","updateDocumentFields","fields","id","queryDocumentsCount","field","operation","value","q","query","collection","where","getCountFromServer","count","deleteAllImagesInFolder","storageFolder","entityId","folderPath","fileList","Promise","all","map","deleteObject","fileRef","deleteAllImagesInFolder2","subfolder","deleteImages","imagesToDelete","setProgress","thirdFolder","arguments","undefined","total","done","file","filename","fileRefToDelete","uploadImages","newImages","newFileData","name","uploadBytes","uploadImages4","onProgress","onComplete","storageRef","uploadTask","uploadBytesResumable","on","snapshot","totalBytes","bytesTransferred","progress","toFixed","state","then","downloadURL","getAllFilesFromFolder","fileURL"],"sourceRoot":""}