{"version":3,"file":"static/js/5399.8862e1b8.chunk.js","mappings":"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","sources":["Components/ShareButton.js","constants.js","utils/common.js","utils/firebaseUtils.js"],"sourcesContent":["import React, { useState } from 'react'\n\nimport { Modal, Button, Form, InputGroup } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport {\n    FacebookShareButton,\n    FacebookIcon,\n    TwitterShareButton,\n    TwitterIcon,\n    WhatsappShareButton,\n    WhatsappIcon,\n    EmailShareButton,\n    LinkedinShareButton,\n    RedditShareButton,\n    TelegramShareButton,\n    EmailIcon,\n    LinkedinIcon,\n    RedditIcon,\n    TelegramIcon,\n} from 'react-share';\nimport ShareIcon from '@mui/icons-material/Share';\nimport {Button as MuiButton} from '@mui/material';\n\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\n\nconst ShareButton = ({ shareUrl }) => {\n    const isDarkModeOn = useSelector(selectDarkModeStatus);\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const copyToClipboard = () => {\n        navigator.clipboard.writeText(shareUrl);\n        alert('Link copied to clipboard!');\n    };\n\n    return (\n        <>\n\n            {/* Share Button */}\n            <ShareIcon\n                variant=\"filled\" \n                onClick={handleShow}\n                sx={{\n                    color: isDarkModeOn ? \"white\" : \"black\",\n                    '&:hover': {\n                        color: isDarkModeOn ? \"grey.400\" : \"grey.700\",\n                    },\n                }}\n            />\n\n    \n            {/* Share Popup Modal */}\n            <Modal show={show} onHide={handleClose} backdrop={false} centered style={{zIndex:50}}>\n                <Modal.Header closeButton>\n                    <Modal.Title style={{textTransform: 'none' }}>Share with your friends</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n\n                    <div className=\"d-flex justify-content-around mb-3 \">\n                        <FacebookShareButton url={shareUrl} quote=\"Check out this video!\">\n                            <FacebookIcon size={35} round />\n                        </FacebookShareButton>\n\n                        <TwitterShareButton url={shareUrl} title=\"Check out this video!\">\n                            <TwitterIcon size={35} round />\n                        </TwitterShareButton>\n\n                        <WhatsappShareButton url={shareUrl}>\n                            <WhatsappIcon size={35} round />\n                        </WhatsappShareButton>\n\n                        <EmailShareButton url={shareUrl}>\n                            <EmailIcon size={35} round />\n                        </EmailShareButton>\n\n                        <LinkedinShareButton url={shareUrl}>\n                            <LinkedinIcon size={35} round />\n                        </LinkedinShareButton>\n\n                        <RedditShareButton url={shareUrl}>\n                            <RedditIcon size={35} round />\n                        </RedditShareButton>\n\n                        <TelegramShareButton url={shareUrl}>\n                            <TelegramIcon size={35} round />\n                        </TelegramShareButton>\n                    </div>\n                    <InputGroup className=\"mb-3\">\n                        <Form.Control type=\"text\" value={shareUrl} readOnly />\n                        <button variant=\"outline-dark\" onClick={copyToClipboard}>\n                            Copy Link\n                        </button>\n                    </InputGroup>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"dark\" onClick={handleClose}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\n\nexport default ShareButton\n","import { FaSnowflake, FaWifi, FaTint, FaToilet, FaPlug, FaFireExtinguisher, FaFirstAid, FaVideo, FaCreditCard, FaParking  } from 'react-icons/fa';\n\nexport const STATUSES = {\n    SUBMITTED: \"Submitted\",\n    UNDER_REVIEW: \"Under Review\",\n    REVIEWED: \"Reviewed\",\n    VERIFIED: \"Verified\",\n    VERIFICATION_FAILED: \"Verification Failed\",\n};\n\nexport const DRAFT_COLLECTIONS = {\n    DRAFT_STUDIOS: 'DraftStudios',\n    DRAFT_WORKSHOPS: 'DraftWorkshops',\n    DRAFT_OPEN_CLASSES: 'DraftOpenClasses',\n    DRAFT_COURSES: 'DraftCourses'\n};\n\nexport const LEVELS = {\n    ALL : \"All\",\n    BEGINNERS : \"Beginner\", \n    INTERMEDIATE :\"Intermediate\", \n    ADVANCED :\"Advanced\"\n}\nexport const ENTITY_FLAG = {\n    INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR : 30,\n    WORKSHOPS_BOOKING_LIMIT : 10,\n    OPEN_CLASSES_BOOKING_LIMIT : 2,\n    COURSES_BOOKING_LIMIT : 10,\n}\n\n\nexport const SERVER_URLS = {\n    PROD : 'https://nrityaserver-2b241e0a97e5.herokuapp.com/',\n    LOCAL : 'http://127.0.0.1:8000/'\n}\n\nexport const COLORS = {\n    GREEN: { backgroundColor: \"#28a745\", color: \"#fff\" },     // Green background, white text\n    BLUE: { backgroundColor: \"#007bff\", color: \"#fff\" },      // Blue background, white text\n    YELLOW: { backgroundColor: \"#ffc107\", color: \"#000\" },    // Yellow background, black text\n    RED: { backgroundColor: \"#dc3545\", color: \"#fff\" },       // Red background, white text\n    PURPLE: { backgroundColor: \"#6f42c1\", color: \"#fff\" },    // Purple background, white text\n    ORANGE: { backgroundColor: \"#fd7e14\", color: \"#fff\" },    // Orange background, white text\n    TEAL: { backgroundColor: \"#20c997\", color: \"#fff\" },      // Teal background, white text\n    PINK: { backgroundColor: \"#e83e8c\", color: \"#fff\" },      // Pink background, white text\n    GRAY: { backgroundColor: \"#6c757d\", color: \"#fff\" },       // Gray background, white text\n\n    LIGHTBLUE: { backgroundColor: \"#17a2b8\", color: \"#fff\" }, // Light blue background, white text\n    DARKBLUE: { backgroundColor: \"#343a40\", color: \"#fff\" },  // Dark blue background, white text\n    CYAN: { backgroundColor: \"#00bcd4\", color: \"#fff\" },      // Cyan background, white text\n    INDIGO: { backgroundColor: \"#6610f2\", color: \"#fff\" },    // Indigo background, white text\n    LIME: { backgroundColor: \"#cddc39\", color: \"#000\" },      // Lime background, black text\n    AMBER: { backgroundColor: \"#ffca28\", color: \"#000\" },     // Amber background, black text\n    BROWN: { backgroundColor: \"#795548\", color: \"#fff\" },     // Brown background, white text\n    LIGHTGREEN: { backgroundColor: \"#8bc34a\", color: \"#000\" },// Light green background, black text\n    DEEPPURPLE: { backgroundColor: \"#673ab7\", color: \"#fff\" },// Deep purple background, white text\n    DEEPORANGE: { backgroundColor: \"#ff5722\", color: \"#fff\" },// Deep orange background, white text\n    BLACK: { backgroundColor: \"#000000\", color: \"#fff\" },     // Black background, white text\n    WHITE: { backgroundColor: \"#ffffff\", color: \"#000\" },     // White background, black text\n    SILVER: { backgroundColor: \"#c0c0c0\", color: \"#000\" },    // Silver background, black text\n    GOLD: { backgroundColor: \"#ffd700\", color: \"#000\" },      // Gold background, black text\n    NAVY: { backgroundColor: \"#001f3f\", color: \"#fff\" },      // Navy background, white text\n    OLIVE: { backgroundColor: \"#3d9970\", color: \"#fff\" },     // Olive background, white text\n\n  };\n\nexport const CHIP_LEVELS_DESIGN = {\n    [LEVELS.ALL]: COLORS.GREEN,           // Green background, white text\n    [LEVELS.BEGINNERS]: COLORS.BLUE,     // Blue background, white text\n    [LEVELS.INTERMEDIATE]: COLORS.YELLOW,  // Yellow background, black text\n    [LEVELS.ADVANCED]: COLORS.RED      // Red background, white text\n  };\n  \n\n  \nexport const danceStylesColorChips = [COLORS.PURPLE,COLORS.ORANGE,COLORS.TEAL,COLORS.LIME]\n\nexport const COLLECTIONS = {\n    USER: \"User\",\n    USER_KYC:\"UserKyc\",\n    ADMIN:\"Admin\",\n    REVIEWS: \"Reviews\",\n    TRANSACTIONS: \"Transactions\",\n    STUDIO: \"Studio\",\n    INSTRUCTORS: \"Instructors\",\n    FREE_TRIAL_BOOKINGS:\"FreeTrialBookings\",\n    WORKSHOPS: 'Workshops',\n    OPEN_CLASSES: 'OpenClasses',\n    COURSES: 'Courses',\n    BOOKINGS: 'Bookings',\n}\n\nexport const STORAGES ={\n    STUDIOIMAGES:'StudioImages',\n    STUDIOICON:'StudioIcon',\n    STUDIOANNOUNCEMENTS :'StudioAnnouncements',\n    USERIMAGE:'UserImage',\n    INSTRUCTORIMAGES: 'InstructorImages',\n    WORKSHOPICON :\"WorkshopIcon\",\n    WORKSHOPIMAGES :\"WorkshopImages\",\n    OPENCLASSICON :\"OpenClassIcon\",\n    COURSEICON :\"CourseIcon\",\n    CREATORS_KYC_DOCUMENTS :\"CreatorKycDocuments\"\n}\n\nexport const SEARCH_FILTERS ={\n    DANCEFORMS:'danceforms',\n    DISTANCES:'distances',\n}\n\nexport const BASEURL_DEV = \"http://127.0.0.1:8000/\"\nexport const BASEURL_PROD= \"https://nrityaserver-2b241e0a97e5.herokuapp.com/\"\n\nexport const AMENITIES_ICONS = {\n    \"AC\": <FaSnowflake />,\n    \"Free Wifi\": <FaWifi />,\n    \"RO Water\": <FaTint />,\n    \"Toilet\": <FaToilet />,\n    \"Power Backup\": <FaPlug />,\n    \"Fire Extinguisher\": <FaFireExtinguisher />,\n    \"First Aid Kit\": <FaFirstAid />,\n    \"CCTV Camera\": <FaVideo />,\n    \"Card Payment\": <FaCreditCard />,\n    \"Parking Space\": <FaParking />,\n};\n\n","import { COLORS, SERVER_URLS,BASEURL_DEV,BASEURL_PROD } from \"../constants\";\n\nexport async function postData(dbPayload, collection_name, notify, metadata) {\n  const BASEURL = BASEURL_PROD;\n  const endpoint = 'crud/newEntity/'; // Define your endpoint here\n  const authToken = localStorage.getItem(\"authToken\");\n  try {\n    const response = await fetch(BASEURL + endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        data: dbPayload,\n        collection_name: collection_name,\n        notify: notify,\n        metadata : metadata,\n      }),\n    });\n\n    if (!response.ok) {\n      console.log('Error in postData:', response);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response;\n  } catch (error) {\n    console.error('Error in postData:', error);\n    throw error;\n  }\n}\n\n\nexport const getRandomColor = () => {\n  const colorKeys = Object.keys(COLORS);\n  const randomKey = colorKeys[Math.floor(Math.random() * colorKeys.length)];\n  return COLORS[randomKey];\n};\n\nexport const bookEntity = async (bookingData) => {\n  const url = `${SERVER_URLS.PROD}bookings/bookEntity/`; \n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        userId: bookingData.userId,\n        entityType: bookingData.entityType,\n        entityId: bookingData.entityId,\n        associatedStudioId: bookingData.associatedStudioId,\n        emailLearner: bookingData.emailLearner,\n        personsAllowed: bookingData.personsAllowed,\n        pricePerPerson: bookingData.pricePerPerson,\n      })\n    });\n\n    const result = await response.json();\n    \n    if (response.ok) {\n      console.log('Booking successful:', result);\n      return result;  // Return the successful result\n    } else {\n      console.error('Booking failed:', result);\n      return result;  // Return null or an error message\n    }\n    \n  } catch (error) {\n    console.error('Error occurred while booking:', error);\n    return null;  // Return null or an error message\n  }\n};\n\n\n// Function to decode a Unicode (UTF-8) encoded string back to the original text\nexport const decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nexport const convertToHtmlEntities= (text) =>{\n  return text.replace(/[\\u00A0-\\u9999<>\\&]/gim, function(i) {\n      return '&#' + i.charCodeAt(0) + ';';\n  });\n}\n\nexport const getYoutubeVideoId = (link)=> {\n  console.log(\"MediaDisplay\", link)\n  if (!link){\n    return null\n  }\n  const text = link.trim();\n  const youtubeRegExp = /(?:https?:\\/\\/)?(?:www\\.|m\\.)?(?:youtube\\.com\\/(?:watch\\?v=|embed\\/|v\\/|shorts\\/)|youtu\\.be\\/)([\\w\\-]+)/;\n  const match = text.match(youtubeRegExp);\n  let videoId = null;\n\n  if (match) {\n    videoId = match[1];\n  }\n  console.log(\"MediaDisplay\", videoId)\n  return videoId\n}\n\nexport const gradientStyles = [\n  { background: 'linear-gradient(to bottom right, #FFD700, #FFA500)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #00BFFF, #1E90FF)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #32CD32, #008000)', color: 'white' },\n  { background: 'linear-gradient(to bottom right, #FFA500, #FF4500)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #DC143C, #8B0000)', color: 'white' },\n  { background: 'linear-gradient(to bottom right, #000000, #2F4F4F)', color: 'white' },\n];","import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, query, getDocs, where, getCountFromServer } from 'firebase/firestore';\nimport { db } from '../config';\nimport {ref,listAll,getDownloadURL,uploadBytes, deleteObject, uploadBytesResumable  } from \"firebase/storage\";\nimport { storage } from '../config';\nimport { COLLECTIONS } from '../constants';\nimport secureLocalStorage from 'react-secure-storage';\n\nexport const setCreatorMode = async (uid) => {\n  console.log(\"creatorMode uid\",uid)\n  try{\n  const userRef = doc(db, COLLECTIONS.USER, uid);\n  const userSnap = await getDoc(userRef);\n  if (userSnap.exists()) {\n    if(userSnap.data() != null){\n      const mode = userSnap.data().CreatorMode\n      console.log(\"setCreatorMode: Is User a creator?\",mode)\n      secureLocalStorage.setItem('CreatorMode', mode);\n        \n    }else{\n      console.log(\"userSnap.data() null\")\n      \n    }\n  } else {\n    console.log(\"User not found\");\n  }\n  }catch(error){\n    console.log(\" error\",error);\n  }\n}\n\nexport const getCreatorMode = async () => {\n  try{\n    const mode = secureLocalStorage.getItem('CreatorMode');\n    console.log(\"getCreatorMode \",mode)\n    if (mode){\n      return mode\n    }else{\n      return false\n    }\n  } \n  catch(error){\n    console.log(\" error\");\n    return false\n  }\n}\n\n// Read operation with image URL\nexport const readDocumentWithImageUrl = async (collectionName, productId) => {\n    console.log(\"Debug \",`${collectionName}/${productId}`)\n    const storagePath = `${collectionName}/${productId}`;\n    const folderRef = ref(storage,storagePath);\n    try {\n        const result = await listAll(folderRef);\n        if (result.items.length > 0) {\n            const firstFileRef = result.items[0];\n            const url = await getDownloadURL(firstFileRef);\n            console.log('Debug URL:', url);\n            return url;\n          } else {\n            console.log('Debug No files found in the folder.');\n            return null;\n          }\n    } catch (error) {\n      console.error('Error getting image URL:', error);\n      return null;\n    }\n  };\n\n// Read operation\nexport const readDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    const docSnapshot = await getDoc(docRef);\n    return docSnapshot.exists() ? docSnapshot.data() : null;\n};\n\n// Create or Update operation\nexport const saveDocument = async (collectionName, documentId, data) => {\n    const docRef = doc(db, collectionName, documentId);\n    await setDoc(docRef, data, { merge: true });\n    return data;\n};\n\n\nexport const handleSavePostOTPSuccess = async (collectionName, documentId, phoneNumber) => {\n  const docRef = doc(db, collectionName, documentId);\n  await updateDoc(docRef, {isPhoneNumberVerified:true,phoneNumber});\n  return true;\n};\n\n// Update specific fields in a document\nexport const updateDocumentFields = async (collectionName, documentId, fields) => {\n    const docRef = doc(db, collectionName, documentId);\n    await updateDoc(docRef, fields);\n    return { id: documentId, ...fields };\n};\n\n// Delete operation\nexport const deleteDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    await deleteDoc(docRef);\n    return { id: documentId };\n};\n\n// Query operation\nexport const queryDocuments = async (collectionName, conditions) => {\n    const q = query(collection(db, collectionName, conditions));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const queryDocumentsCount = async (collectionName,field,operation,value) => {\n    console.log(\"Hiii \",collectionName,field,operation,value)\n    const q = query(collection(db, collectionName), where(field,operation,value));\n    const snapshot = await getCountFromServer(q);\n    return snapshot.data().count;\n};\n\n\n  // Function to delete all images in a folder\nexport  const deleteAllImagesInFolder = async (storageFolder, entityId) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n    // Function to delete all images in a folder\n  export  const deleteAllImagesInFolder2 = async (storageFolder, entityId,subfolder) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}/${subfolder}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n  // Function to delete images\nexport const deleteImages = async (storageFolder,imagesToDelete,entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Deletes specific images associated with the given entityId.\n\n    Args:\n      imagesToDelete <array>: An array of image objects to be deleted.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n    const total = imagesToDelete.length;\n    let done = 0;\n    await Promise.all(imagesToDelete.map(async (file) => {\n      let folderPath = `${storageFolder}/${entityId}/${file.filename}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}/${file.filename}`;\n      }\n      const fileRefToDelete = ref(storage, folderPath);\n      await deleteObject(fileRefToDelete);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  // Function to upload new images\nexport const uploadImages = async (storageFolder, newImages, entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n\n    Args:\n      newImages <array>: An array of new image objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n   console.log(storageFolder,entityId)\n   const total = newImages.length;\n    let done = 0;\n    await Promise.all(newImages.map(async (newFileData) => {\n      let folderPath = `${storageFolder}/${entityId}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n      }\n      const fileRef = ref(storage, `${folderPath}/${newFileData.file.name}`);\n      await uploadBytes(fileRef, newFileData.file);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  export const uploadImages2 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    uploadBytesResumable(storageRef, newImages).then((snapshot) => {\n      console.log('Uploaded a blob or file!');\n    });\n  };\n\n  export const uploadImages3 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n        });\n      }\n    );\n    \n  };\n\n\n  export const uploadImages4 = async (storageFolder, newImages, entityId, thirdFolder = null, onProgress, onComplete) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages,newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const totalBytes = snapshot.totalBytes;\n        const bytesTransferred = snapshot.bytesTransferred;\n        const progress = totalBytes > 0 ? ((bytesTransferred / totalBytes) * 100).toFixed(2) : -1;\n        onProgress(progress);\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n          onComplete(downloadURL);\n        });\n\n      }\n    );\n    \n  };\n\n\n export const uploadOneImageAndGetURL = async (storageFolder, file, entityId) => {\n    try {\n      const folderPath = `${storageFolder}/${entityId}/${file.name}`;\n      console.log(folderPath)\n      const fileRef = ref(storage, folderPath);\n      \n      await uploadBytes(fileRef, file);\n  \n      const imageUrl = await getDownloadURL(fileRef);\n      console.log(imageUrl)\n      return imageUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error; \n    }\n  };\n  \n  export const getAllFilesFromFolder = async (storageFolder) => {\n    const folderPath = `${storageFolder}`;\n    const folderRef = ref(storage, folderPath);\n    \n    try {\n        const fileList = await listAll(folderRef);\n\n        const imageUrlsComprehensive = await Promise.all(\n          fileList.items.map(async (fileRef) => {\n            const downloadURL = await getDownloadURL(fileRef);\n  \n            return {\n              id: fileRef.name,\n              filename: fileRef.name,\n              fileURL: downloadURL,\n            };\n          })\n        );\n\n        // return imageUrls;\n        return imageUrlsComprehensive\n    } catch (error) {\n        console.error('Error retrieving images:', error);\n        throw error;\n    }\n};\n\n"],"names":["_ref","shareUrl","isDarkModeOn","useSelector","selectDarkModeStatus","show","setShow","useState","handleClose","_jsxs","_Fragment","children","_jsx","ShareIcon","variant","onClick","handleShow","sx","color","Modal","onHide","backdrop","centered","style","zIndex","Header","closeButton","Title","textTransform","Body","className","FacebookShareButton","url","quote","FacebookIcon","size","round","TwitterShareButton","title","TwitterIcon","WhatsappShareButton","WhatsappIcon","EmailShareButton","EmailIcon","LinkedinShareButton","LinkedinIcon","RedditShareButton","RedditIcon","TelegramShareButton","TelegramIcon","InputGroup","Form","Control","type","value","readOnly","copyToClipboard","navigator","clipboard","writeText","alert","Footer","Button","STATUSES","SUBMITTED","UNDER_REVIEW","REVIEWED","VERIFIED","VERIFICATION_FAILED","DRAFT_COLLECTIONS","DRAFT_STUDIOS","DRAFT_WORKSHOPS","DRAFT_OPEN_CLASSES","DRAFT_COURSES","LEVELS","ALL","BEGINNERS","INTERMEDIATE","ADVANCED","ENTITY_FLAG","INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR","WORKSHOPS_BOOKING_LIMIT","OPEN_CLASSES_BOOKING_LIMIT","COURSES_BOOKING_LIMIT","SERVER_URLS","PROD","LOCAL","COLORS","GREEN","backgroundColor","BLUE","YELLOW","RED","PURPLE","ORANGE","TEAL","PINK","GRAY","LIGHTBLUE","DARKBLUE","CYAN","INDIGO","LIME","AMBER","BROWN","LIGHTGREEN","DEEPPURPLE","DEEPORANGE","BLACK","WHITE","SILVER","GOLD","NAVY","OLIVE","CHIP_LEVELS_DESIGN","danceStylesColorChips","COLLECTIONS","USER","USER_KYC","ADMIN","REVIEWS","TRANSACTIONS","STUDIO","INSTRUCTORS","FREE_TRIAL_BOOKINGS","WORKSHOPS","OPEN_CLASSES","COURSES","BOOKINGS","STORAGES","STUDIOIMAGES","STUDIOICON","STUDIOANNOUNCEMENTS","USERIMAGE","INSTRUCTORIMAGES","WORKSHOPICON","WORKSHOPIMAGES","OPENCLASSICON","COURSEICON","CREATORS_KYC_DOCUMENTS","BASEURL_PROD","AMENITIES_ICONS","FaSnowflake","FaWifi","FaTint","FaToilet","FaPlug","FaFireExtinguisher","FaFirstAid","FaVideo","FaCreditCard","FaParking","async","postData","dbPayload","collection_name","notify","metadata","BASEURL","authToken","localStorage","getItem","response","fetch","method","headers","concat","body","JSON","stringify","data","ok","console","log","Error","status","error","bookEntity","userId","bookingData","entityType","entityId","associatedStudioId","emailLearner","personsAllowed","pricePerPerson","result","json","getYoutubeVideoId","link","match","trim","videoId","setCreatorMode","uid","userRef","doc","db","userSnap","getDoc","exists","mode","CreatorMode","secureLocalStorage","setItem","readDocumentWithImageUrl","collectionName","productId","storagePath","folderRef","ref","storage","listAll","items","length","firstFileRef","getDownloadURL","readDocument","documentId","docRef","docSnapshot","saveDocument","setDoc","merge","handleSavePostOTPSuccess","phoneNumber","updateDoc","isPhoneNumberVerified","updateDocumentFields","fields","id","queryDocumentsCount","field","operation","q","query","collection","where","getCountFromServer","count","deleteAllImagesInFolder","storageFolder","folderPath","fileList","Promise","all","map","deleteObject","fileRef","deleteAllImagesInFolder2","subfolder","deleteImages","imagesToDelete","setProgress","thirdFolder","arguments","undefined","total","done","file","filename","fileRefToDelete","uploadImages","newImages","newFileData","name","uploadBytes","uploadImages4","onProgress","onComplete","storageRef","uploadTask","uploadBytesResumable","on","snapshot","totalBytes","bytesTransferred","progress","toFixed","state","code","then","downloadURL","getAllFilesFromFolder","fileURL"],"sourceRoot":""}