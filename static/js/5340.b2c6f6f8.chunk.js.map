{"version":3,"file":"static/js/5340.b2c6f6f8.chunk.js","mappings":"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","sources":["Components/CardSliderCard.js","Components/ImageUpload.js","Components/NStudioCard.js","Components/TimeRangePicker.js","Components/StudioTable.js","Components/MapsInput.js","Components/SucessPage.js","Components/StudioAdd.js","Components/AlertPopup.js","Components/StudioUpdate.js","Screens/CreatorStudio.js","constants.js","utils/common.js","utils/firebaseUtils.js"],"sourcesContent":["import React from 'react';\nimport NStudioCard from './NStudioCard';\n\nconst CardSliderCard = ({ studio }) => {\n  return (\n    <a href={`#/studio/${studio.id}`}>\n    <NStudioCard data={studio} img_src={\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}/>\n    </a>\n\n  );\n};\n\nexport default CardSliderCard;\n","import React, { useState,useEffect } from \"react\";\nimport shortid from \"shortid\";\nimport { ref, getDownloadURL, listAll } from 'firebase/storage';\nimport { storage } from '../config';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { deleteAllImagesInFolder,deleteImages,uploadImages} from '../utils/firebaseUtils'\nimport { Card, CardContent, IconButton } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useSnackbar } from \"../context/SnackbarContext\";\nimport { STORAGES } from \"../constants\";\n\n\nconst ImageUpload = ({entityId,storageFolder,title, maxImageCount=10, updateMode, disable }) => {\n  const showSnackbar = useSnackbar();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [newFiles, setNewFiles] = useState([]); // Track new files to be added\n  const [deletedFiles, setDeletedFiles] = useState([]); // Track deleted files\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  //console.log(\"Received props=> entityId:\", entityId, \"|storageFolder:\", storageFolder);\n  const [progressDelete, setProgressDelete] = useState(-1);\n  const [progressUpdate, setProgressUpdate] = useState(-1);\n\n  console.log(\"Kyc enitity id \",entityId, disable)\n  const filesizes = (bytes, decimals = 2) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n  };\n\n  useEffect(() => {\n   // console.log(\"Fetching image for\",entityId)\n    if(entityId){\n      fetchStudioImages(entityId); // Fetch images when component mounts\n    }\n  }, [entityId]);\n\n  useEffect(() => {\n   // console.log(\"Selected files:\", selectedFiles);\n    if (maxImageCount && selectedFiles.length > maxImageCount) {\n      const truncatedFiles = selectedFiles.slice(0, maxImageCount);\n      alert(`Exceeded maxImageCount, keeping first ${maxImageCount} files.`);\n      setSelectedFiles(truncatedFiles);\n    }\n  }, [selectedFiles, maxImageCount]);\n  \n\n  const handleInputChange = (e) => {\n    // console.log(\"handleInputChange\")\n    const files = Array.from(e.target.files);\n    const updatedFiles = [];\n    // console.log(\"file array \",files.length)\n    files.forEach((file) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        updatedFiles.push({\n          id: shortid.generate(),\n          filename: file.name,\n          filetype: file.type,\n          fileimage: reader.result,\n          datetime: file.lastModifiedDate.toLocaleString(\"en-IN\"),\n          filesize: filesizes(file.size),\n          file: file, // Store the actual file object\n        });\n\n        if (updatedFiles.length === files.length) {\n          setSelectedFiles((prevFiles) => [...prevFiles, ...updatedFiles]);\n          setNewFiles(updatedFiles);\n          // console.log(\"New files in total\",setNewFiles.length)\n        }\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleDeleteSelectedFile = (id) => {\n    if (window.confirm(\"Are you sure you want to delete this image?\")) {\n      const fileToDelete = selectedFiles.find((file) => file.id === id);\n      setDeletedFiles((prevDeletedFiles) => [...prevDeletedFiles, fileToDelete]);\n      setSelectedFiles((prevFiles) =>\n        prevFiles.filter((file) => file.id !== id)\n      );\n    }\n  };\n\n  const handleUploadSubmit = async () => {\n    if (!entityId) {\n      alert(\"No studio selected\");\n      return;\n    }\n\n    try {\n      if (maxImageCount === 1) {\n        // Delete all previous images in the folder\n        await deleteAllImagesInFolder(storageFolder, entityId);\n        await uploadImages(storageFolder,newFiles, entityId);\n      } else {\n        // Calculate images to delete and add\n        const { imagesToDelete, newImages } = calculateDelta(selectedFiles, uploadedFiles);\n\n        // Delete images if there are any\n        if (imagesToDelete.length > 0) {\n          await deleteImages(storageFolder, imagesToDelete, entityId, setProgressDelete);\n        }\n\n        // Upload new images if there are any\n        if (newImages.length > 0) {\n          await uploadImages(storageFolder, newImages, entityId, setProgressUpdate);\n        }\n\n      }\n\n      // alert(\"Images Uploaded/Deleted\");\n      //showSnackbar(\"Images Uploaded/Deleted\", \"success\");\n    } catch (error) {\n      console.error(\"Error uploading/deleting images:\", error);\n    }\n  };\n\n  // Function to calculate images to delete and new images to upload\n  const calculateDelta = (selectedFiles, uploadedFiles) => {\n    const selectedFileIds = selectedFiles.map(file => file.id);\n    const uploadedFileIds = uploadedFiles.map(file => file.id);\n\n    const imagesToDelete = uploadedFiles.filter(file => !selectedFileIds.includes(file.id));\n    const newImages = selectedFiles.filter(file => !uploadedFileIds.includes(file.id));\n\n    return { imagesToDelete, newImages };\n  };\n\n\n  const fetchStudioImages = async (entityId) => {\n    setSelectedFiles([]);\n    setNewFiles([]);\n    setDeletedFiles([]);\n    try {\n      const folderPath = `${storageFolder}/${entityId}`;\n      console.log(folderPath)\n      const folderRef = ref(storage, folderPath);\n      const fileList = await listAll(folderRef);\n\n      const files = await Promise.all(\n        fileList.items.map(async (fileRef) => {\n          const downloadURL = await getDownloadURL(fileRef);\n\n          return {\n            id: fileRef.name,\n            filename: fileRef.name,\n            fileURL: downloadURL,\n          };\n        })\n      );\n      // console.log('File fetching',files);\n      setUploadedFiles(files); // Update the uploadedFiles state with fetched data\n      setSelectedFiles(files);\n    } catch (error) {\n      console.error('Error fetching user images:', error);\n    }\n  };\n\n  return (\n    <div className=\"fileupload-view\" style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\n      <div className=\"row justify-content-center m-0\" style={{ flex: '1',justifyContent: 'center' }}>\n        <div className=\"col-md-6\" style={{ flex: '1' ,justifyContent: 'center'}}>\n          <div className=\"card mt-5\">\n            <div className=\"card-body\" style={{ backgroundColor: isDarkModeOn ? '#333333' : 'white' }}>\n              <div className=\"kb-data-box\">\n                <div className=\"kb-modal-data-title\">\n                  <div className=\"kb-data-title\" style={{justifyContent:'center',flex: '1'}}>\n                    <h4>{title}</h4>\n                    <p>Max no of image(s):{maxImageCount} {storageFolder === STORAGES.STUDIOIMAGES && <p>Add at least 5 images</p>}</p>\n                  </div>\n                </div>\n                <form style={{  backgroundColor: isDarkModeOn ? '#333333' : 'white'}}>\n                  <div className=\"kb-file-upload\">\n                    <div className=\"file-upload-box\">\n                      <input\n                        type=\"file\"\n                        id=\"fileupload\"\n                        className=\"file-upload-input\"\n                        onChange={handleInputChange}\n                        multiple\n                      />\n\n                    </div>\n                  </div>\n                  <br></br>\n                  <div className=\"kb-attach-box mb-3\">\n                  <div className=\"row\">\n                    {entityId && selectedFiles.length > 0 ? (\n                      selectedFiles.map((file) => (\n                        \n                        <div key={file.id} className=\"col-6 col-md-3 mb-3\" style={{ position: 'relative' }}>\n                          \n                          <Card sx={{ maxWidth: 345 }}>\n                            {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                              <div style={{ position: 'relative' }}>\n                                <img\n                                  src={file.fileimage ? file.fileimage : file.fileURL}\n                                  alt={file.filename}\n                                  className=\"card-img-top\"\n                                  style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                                />\n                                <IconButton\n                                  aria-label=\"delete\"\n                                  disabled={disable}\n                                  onClick={() => handleDeleteSelectedFile(file.id)}\n                                  style={{ position: 'absolute', top: 0, right: 0, backgroundColor: 'rgba(255, 255, 255, 0.5)' }}\n                                >\n                                  <DeleteIcon style={{color:\"ff0000\"}}/>\n                                </IconButton>\n                              </div>\n                            ) : (\n                              <CardContent>\n                                <i className=\"far fa-file-alt\"></i>\n                              </CardContent>\n                            )}\n                          </Card>\n                        </div>\n                        \n                      ))\n                    ) : (\n                      <div className=\"col-12 text-center\">\n                        <p>No images selected</p>\n                      </div>\n                    )}\n                  </div>\n\n                  </div>\n\n                  \n                  <div className=\"kb-buttons-box\">\n                    <button\n                      type=\"button\"\n                      className=\"btn form-submit\"\n                      style={{ backgroundColor: isDarkModeOn ? '#892CDC' : 'black', color:'white'  }}\n                      onClick={handleUploadSubmit}\n                      disabled={disable}\n                    >\n                      Image Upload\n                    </button>\n                  </div>\n                </form>\n                {selectedFiles.length > 0 && (\n                  <div className=\"kb-attach-box\" hidden>\n                    <div className=\"row\">\n                    <hr />\n                    {selectedFiles.map((file) => (\n                      <div key={file.id} className=\"col-6 col-md-3 mb-3\">\n                      <div className=\"card\">\n                        {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                          <img\n                            src={file.fileimage}\n                            alt={file.filename}\n                            className=\"card-img-top\"\n                            style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                          />\n                        ) : (\n                          <div className=\"card-body\">\n                            <i className=\"far fa-file-alt\"></i>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n              { progressDelete >= 0 && (\n                    <div>\n                        <p style={{ color: isDarkModeOn ? '#fff' : '#000' }}>\n                            Deleting images... {progressDelete.toFixed(2)}%\n                        </p>\n                        <progress \n                            value={progressDelete} \n                            max=\"100\" \n                            style={{\n                                color: isDarkModeOn ? '#fff' : '#000'\n                            }}\n                        >\n                            {progressDelete.toFixed(2)}%\n                        </progress>\n                    </div>\n                )}\n\n                { progressUpdate >= 0 && (\n                    <div>\n                        <p style={{ color: isDarkModeOn ? '#fff' : '#000' }}>\n                            Uploading images... {progressUpdate.toFixed(2)}%\n                        </p>\n                        <progress \n                            value={progressUpdate} \n                            max=\"100\" \n                            style={{\n                                color: isDarkModeOn ? '#fff' : '#000'\n                            }}\n                        >\n                            {progressUpdate.toFixed(2)}%\n                        </progress>\n                    </div>\n                )}\n\n                            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Set default prop values\nImageUpload.defaultProps = {\n  maxImageCount: 5, // Default maximum image count\n  updateMode: false,\n  disable:false,\n};\n\nexport default ImageUpload;","\nimport React from 'react';\nimport AspectRatio from '@mui/joy/AspectRatio';\nimport Card from '@mui/joy/Card';\nimport CardContent from '@mui/joy/CardContent';\nimport Chip from '@mui/joy/Chip';\nimport Link from '@mui/joy/Link';\nimport Typography from '@mui/joy/Typography';\nimport { Stack } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport { CHIP_LEVELS_DESIGN, COLORS, danceStylesColorChips } from '../constants';\nimport IconButton from '@mui/joy/IconButton';\nimport Favorite from '@mui/icons-material/Favorite';\n\n\nexport default function NStudioCard({img_src,data}) {\n    const isDarkModeOn = useSelector(selectDarkModeStatus);\n    \n    const studioId = data.id?data.id:data.studioId;\n\n    const cardStyle = {\n      backgroundColor: isDarkModeOn ? '#444' : 'white',\n      padding: '0px',\n      color: isDarkModeOn ? 'white' : 'black',\n      marginRight: \"10px\",\n      width: 320,\n      maxWidth: \"100%\",\n      boxShadow: 'lg',\n      transition: 'opacity 0.3s ease',\n    };\n  \n    const cardHoverStyle = {\n      transform: 'scale(1.01)',\n    };\n  \n  return (\n    <Card variant=\"solid\" sx={{\n      ...cardStyle,\n      '&:hover': cardHoverStyle,\n    }}>\n      \n        <AspectRatio ratio=\"1.78\" style={{ position: 'relative'}}>\n          <img\n            src={data && data.iconUrl ? data.iconUrl :\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}\n            loading=\"lazy\"\n            alt=\"Studio Image\"\n            style={{ maxWidth: '100%', height: 'auto', overflow: 'hidden' }}\n            \n          />\n          <Stack direction=\"row\" spacing={2} style={{ position: 'absolute', bottom: 0, left: 0, padding: '1px' }}>\n        {data && data.danceStyles && typeof data.danceStyles === 'string' ? (data.danceStyles.split(\",\").slice(0, 3).map((form, index) => (\n        <Chip\n            key={index}\n            color={index % 2 === 0 ? \"danger\" : \"success\"}  \n            sx={{ marginBottom: \"10px\", fontSize: '0.8rem',  \n                    bgcolor: danceStylesColorChips[index].backgroundColor,\n                    color: danceStylesColorChips[index].color, \n            }}\n        >\n            {form.trim()}\n        </Chip>\n        ))):(\n            <Chip\n            key={10}\n            color={10 % 2 === 0 ? \"danger\" : \"success\"} \n            style={{ marginBottom: \"10px\", fontSize: '0.8rem' }}\n        >\n            {\"No danceforms\"}\n        </Chip>\n        )}\n\n        </Stack>\n\n        <Stack\n            direction=\"row\"\n            spacing={2}\n            style={{ position: \"absolute\", top: 0, left: 0, padding: \"1px\", paddingTop: \"1px\" }}\n          >\n            {data && data.freeTrialAvailable &&(\n            \n                <Chip\n                  key={1}\n                 \n                  sx={{\n                    marginLeft: \"10px\",\n                    marginBottom: \"10px\",\n                    fontSize: \"0.8rem\",\n                    bgcolor: COLORS.LIME.backgroundColor,  // Set the background color\n                    color: COLORS.LIME.color,  // Set the text color\n                  }}\n                >\n                  {'Free Trial Available'}\n                </Chip>\n              \n            )}\n          </Stack>\n\n        </AspectRatio>\n      <CardContent style={{padding:'10px'}}>\n        <Link\n          href={`#/studio/${studioId}`}\n          fontWeight=\"bold\"\n          color=\"neutral\"\n          textColor=\"text.primary\"\n          underline='none'\n          overlay\n          style={{color: isDarkModeOn?'white':'black'}}\n        >\n          {data && data.studioName?data.studioName:\"    \"}\n        </Link>\n        <Typography style={{color: isDarkModeOn?'white':'black'}} level=\"body-xs\">{data.street?data.street:\".  \"}</Typography>\n        <IconButton\n          hidden\n          aria-label=\"Like minimal photography\"\n          size=\"md\"\n          variant=\"solid\"\n          color=\"danger\"\n          sx={{\n            position: 'absolute',\n            zIndex: 2,\n            borderRadius: '50%',\n            right: '1rem',\n            bottom: '2rem',\n            transform: 'translateY(50%)',\n          }}\n        >\n          <Favorite />\n        </IconButton>\n        <Typography style={{color: isDarkModeOn ? 'white' : 'black'}}>\n            <span>⭐ {data && data.avgRating ? data.avgRating.toFixed(1) : \"Not rated yet\"}</span>\n            {data && data.minFee && (\n              <span style={{position: \"absolute\", right: 2}}>  Starts @₹{data.minFee}</span>\n            )}\n          </Typography>\n\n      </CardContent>\n    </Card>\n  );\n}","import React from 'react';\nimport { Modal, Form, Row, Col, Button } from 'react-bootstrap';\n\nconst TimeRangePicker = ({ show, handleClose, handleSelect, defaultTime }) => {\n  //console.log(\"TimeRangePicker\",defaultTime)\n  const startTime_i = defaultTime.split('-')[0].trim();\n  const endTime_i = defaultTime.split('-')[1]?.trim();\n\n  //console.log(startTime_i,endTime_i,defaultTime)\n\n  const generateTimeOptions = () => {\n    const options = [];\n    let option_AM = [];\n    let option_PM = [];\n    for (let hours = 0; hours < 24; hours++) {\n      for (let minutes = 0; minutes < 60; minutes += 15) {\n        const formattedHours = hours.toString().padStart(2, '0');\n        const formattedMinutes = minutes.toString().padStart(2, '0');\n        const timeString = `${formattedHours}:${formattedMinutes}`;\n  \n        if (hours < 12) {\n          option_AM.push(`${timeString} AM`);\n        } else {\n          const formattedHours12 = (hours - 12).toString().padStart(2, '0');\n          option_PM.push(`${formattedHours12}:${formattedMinutes} PM`);\n        }\n      }\n    }\n\n    for (let i = 0; i < option_AM.length || i < option_PM.length; i++) {\n      if (i < option_AM.length) {\n        options.push(option_AM[i]);\n      }\n      if (i < option_PM.length) {\n        options.push(option_PM[i]);\n      }\n    }\n    \n\n  \n    return options;\n  };\n  \n\n  const renderTimeOptions = (defaultValue) => {\n    console.log(defaultValue);\n    const timeOptions = generateTimeOptions();\n  \n    return (\n      <>\n        <option value={defaultValue}>{defaultValue}</option>\n        {timeOptions.map((option) => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </>\n    );\n  };\n  \n  \n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Select Time</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col>\n          <Form.Group >\n          <Form.Label >\n            Start Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(e.target.value, null)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(startTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n          <Col>\n          <Form.Group>\n          <Form.Label >\n            End Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(null, e.target.value)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(endTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={handleClose}>Save</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default TimeRangePicker;\n","import React, { useState } from 'react';\nimport { Form, Table, Button } from 'react-bootstrap';\nimport { FaPlus, FaMinus } from 'react-icons/fa';\nimport './StudioTable.css'; // Import the CSS file for styling\nimport  TimeRangePicker from './TimeRangePicker';\nimport danceStyles from '../danceStyles.json';\nimport { Autocomplete, TextField } from '@mui/material';\n\nimport { MultiSelect } from 'primereact/multiselect';\nimport \"primereact/resources/primereact.css\";\nimport \"primereact/resources/themes/saga-blue/theme.css\";\n\nconst daysOfWeek = ['M','T','W','Th','F','St','Sn'];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\"\n};\n\nfunction StudioTable({ tableData = [], setTableData, instructorNamesWithIds }) {\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const danceStylesOptions = danceStyles.danceStyles;\n  const [defaultTime, setDefaultTime] =  useState(\"00:00-00:00\")\n\n  const handleAddRow = () => {\n    setTableData((prevData) => [...prevData, { className: '', danceForms: '', days: '', time: '00:00 - 00:00', instructors: [], fee:'',level:'' ,status: '',freeTrial: false, classCategory: []  }]);\n  };\n\n  const handleRemoveRow = (index) => {\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      newData.splice(index, 1);\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if(field===\"days\"){\n        value = Array.isArray(value) ? value.join(',') : value; \n      }\n      console.log(tableData)\n      const newData = [...prevData];\n      newData[index][field] = value;\n      return newData;\n    });\n  };\n\n  const handleTimePickerOpen = (index,time) => {\n    setDefaultTime(time)\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null); // Reset selected row index when closing time picker\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      \n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n    \n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(' - ');\n    \n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n      \n      return newData;\n    });\n  \n    setSelectedRow(selectedRowIndex);\n\n  };\n\n  return (\n    <>\n      <Table bordered variant=\"light\">\n        <thead>\n          <tr style={{border: '1px solid black'}}>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Name</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Dance Form</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Days</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Time</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'20rem', border: '1px solid black'}}>Instructors</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Fee (₹)</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Level</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Free Trial</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Category</th>\n            <th style={{padding:'0rem'}}>\n              <Button variant=\"primary\" onClick={handleAddRow}>\n                <FaPlus />\n              </Button>\n            </th>\n          </tr>\n        </thead>\n        <tbody style={{border: '1px solid black'}}>\n          {tableData.map((row, index) => (\n            <tr key={index} className={selectedRow === index ? 'selected-row' : ''}>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  type=\"text\"\n                  value={row.className}\n                  onChange={(e) => handleTableChange(index, 'className', e.target.value)}\n                  \n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n              < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.danceForms}\n                  onChange={(e) => handleTableChange(index, 'danceForms', e.target.value)}\n                >\n                  <option value=\"\">Select a dance form</option>\n                  {danceStylesOptions.map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </Form.Control>\n\n              </td>\n              \n              <td style={{ padding:'0rem',minWidth:'15rem', border: '1px solid black'}} className=\"m-0 p-0\">\n                <MultiSelect value={row.days && row.days.split(',').filter(day => day !== '') } \n                    onChange={(event) => handleTableChange(index, 'days', event.target.value)}\n                    options={daysOfWeek}\n                    placeholder=\"class days\" maxSelectedLabels={7} className=\"w-full md:w-20rem\"\n                  />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.time}\n                  //onClick={() => handleTimePickerOpen(index,row.time)}\n                  onClick={() => handleTimePickerOpen(index,row.time)}\n                  \n                />\n                {showTimePicker && (\n                <TimeRangePicker\n                  show={showTimePicker}\n                  handleClose={handleTimePickerClose}\n                  handleSelect={handleTimeSelect}\n                  defaultTime={tableData[selectedRowIndex]?.time || \"00:00-00:00\"}\n                />\n              )}\n\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black', width:'20rem'}}>\n                <Autocomplete\n                  multiple\n                  id=\"tags-standard\"\n                  options={instructorNamesWithIds}\n                  value={row.instructors}\n                  onChange={(_, values) => handleTableChange(index, 'instructors', values)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Instructors\"\n                    />\n                  )}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.fee}\n                  onChange={(e) => handleTableChange(index, 'fee', e.target.value)}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.level}\n                  onChange={(e) => handleTableChange(index, 'level', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value=\"Beginner\">Beginner</option>\n                      <option value=\"Intermediate\">Intermediate</option>\n                      <option value=\"Advanced\">Advanced</option>\n                      <option value=\"Misc\">Misc</option>\n\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.level}\n                  onChange={(e) => handleTableChange(index, 'level', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value={true}>Yes</option>\n                      <option value={false}>No</option>\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem', width:'20rem'}}>\n                <Autocomplete\n                  multiple\n                  id=\"tags-standard\"\n                  options={Object.values(categoryMap)} \n                  value={row.classCategory.map(key => categoryMap[key])} \n                  onChange={(_, values) => {\n\n                    const selectedKeys = values.map(value => \n                      Object.keys(categoryMap).find(key => categoryMap[key] === value)\n                    );\n                    handleTableChange(index, 'classCategory', selectedKeys);\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Class Category\"\n                    />\n                  )}\n                />\n              </td>\n              <td style={{padding:'0rem'}}>\n                <Button variant=\"danger\" onClick={() => handleRemoveRow(index)}>\n                  <FaMinus />\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>      \n    </>\n  );\n}\n\nexport default StudioTable;\n\n/*\n                <Autocomplete\n                  multiple\n                  id={`days-autocomplete-${index}`}\n                  options={daysOfWeekOptions}\n                  getOptionLabel={(option) => option.value}\n                  value={row.days.split(',').filter(day => day !== '').map(day => daysOfWeekOptions.find(option => option.value === day))}\n                  onChange={(event, newValue) => handleTableChange(index, 'days', newValue.map(option => option.value).join(','))}\n                  renderInput={(params) => <TextField sx={{color:\"black\",backgroundColor:\"white\",width:\"100%\"}} {...params} />}\n                />\n              */","import React, { useState, useEffect }from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { LoadScript } from '@react-google-maps/api';\nimport { FaMapMarkerAlt } from 'react-icons/fa';\n\nconst libraries = ['places'];\n\nfunction MapsInput({selectedLocation, setSelectedLocation}) {\n    const [center, setCenter] = useState(selectedLocation? selectedLocation:{ lat: 0, lng: 0 });\n    const [address, setAddress] = useState('');\n  \n    const apiKey = \"AIzaSyAAPq5IMotbu90TZAEtyj8qgYyVJoROzsQ\"; // Replace with your API Key\n   //console.log(\"selectedLocation got in MapsInput\",selectedLocation,\"----\",center)\n    const handleSelect = async (selectedAddress) => {\n      const results = await geocodeByAddress(selectedAddress);\n      const latLng = await getLatLng(results[0]);\n  \n      setAddress(selectedAddress);\n      setCenter(latLng);\n      setSelectedLocation(latLng);\n      //console.log(latLng,\"---\",selectedLocation,'---',center,'---',address)\n    };\n\n    useEffect(() => {\n      // Check if selectedLocation is null and set it to Delhi's coordinates\n      //console.log(selectedLocation)\n      if (!selectedLocation) {\n        //console.log(\"Location changing !selectedLocation\",selectedLocation)\n      }else{\n        //console.log(\"Location changing\",selectedLocation)\n        setCenter(selectedLocation)\n        //setSelectedLocation()\n      }\n      //console.log(center,address,selectedLocation)\n    }, [selectedLocation]);\n  \n    return (\n        <LoadScript\n            googleMapsApiKey={apiKey}\n            libraries={libraries}\n            >\n      <div>\n        <div>\n        <br></br>\n        \n        <PlacesAutocomplete\n          value={address}\n          onChange={(newAddress) => setAddress(newAddress)}\n          onSelect={handleSelect}\n          >\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n            <div>\n              <input\n                {...getInputProps({\n                  placeholder: 'Enter address...',\n                  className: 'location-search-input',\n                  style: { // Add inline styles for the input element\n                    height: '40px', // Adjust the height as needed\n                    fontSize: '16px', // Adjust the font size as needed\n                    width: '100%',\n                  },\n                })}\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {loading && <div>Loading...</div>}\n                {suggestions.map((suggestion) => {\n                  const className = suggestion.active\n                    ? 'suggestion-item--active'\n                    : 'suggestion-item';\n                  return (\n                    <div\n                      {...getSuggestionItemProps(suggestion, {\n                        className,\n                      })}\n                    >\n                      <span>{suggestion.description}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </PlacesAutocomplete>\n          <br></br>\n        </div>\n        <div style={{ height: '400px', width: '100%' }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{ key: apiKey }}\n            defaultCenter={center}\n            center={center}\n            defaultZoom={16}\n            onClick={({ lat, lng }) => {\n              setSelectedLocation({ lat, lng });\n            }}\n          >\n            { (\n              <PinMarker\n              lat={selectedLocation && selectedLocation.lat ? selectedLocation.lat: 0}\n              lng={selectedLocation && selectedLocation.lng ? selectedLocation.lng: 0}\n              text=\"Selected Location\"\n            />\n            )}\n          </GoogleMapReact>\n        </div>\n      </div>\n      </LoadScript>\n    );\n}\n\nconst PinMarker = () => (\n    <div style={{ position: 'relative', textAlign: 'center' }}>\n      <FaMapMarkerAlt style={{ color: 'green', fontSize: '24px' }} />\n    </div>\n  );\n\nexport default MapsInput\n","import React from 'react';\n\nconst SuccessMessage = ({ StudioId }) => {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-12\"> {/* Change col-md-5 to col-md-12 */}\n          <div className=\"_success message-box\">\n            <i className=\"fa fa-check-circle\" aria-hidden=\"true\"></i>\n            <h3>Your Studio registration was successful</h3>\n            <p>{StudioId} is now registered 🎉</p>\n          </div>\n        </div>\n      </div>\n      <hr />\n\n      <style jsx>{`\n        ._success {\n          padding: 45px;\n          width: 100%;\n          text-align: center;\n          margin: 30px auto;\n        }\n\n        ._success i {\n          font-size: 55px;\n          color: #28a745;\n        }\n\n        ._success h2 {\n          margin-bottom: 12px;\n          font-size: 30px;\n          font-weight: 300;\n          line-height: 1.2;\n          margin-top: 10px;\n        }\n\n        ._success p {\n          margin-bottom: 0px;\n          font-size: 18px;\n          color: #495057;\n          font-weight: 100;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SuccessMessage;\n","import React from 'react'\nimport { Row, Col , Form } from 'react-bootstrap';\nimport {LinearProgress, Button as MuiButton} from '@mui/material';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,addDoc,updateDoc,collection,where,getDocs,query, deleteDoc } from \"firebase/firestore\";\nimport { COLLECTIONS, DRAFT_COLLECTIONS } from '../constants';\nimport StudioTable from './StudioTable';\nimport ImageUpload from './ImageUpload';\nimport { STORAGES } from '../constants';\nimport MapsInput from './MapsInput';\nimport { useSelector} from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport indianCities from '../cities.json';\nimport danceStyles from '../danceStyles.json';\nimport { AMENITIES_ICONS } from '../constants';\nimport {Autocomplete,TextField} from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport {Stepper,Step,StepLabel} from '@mui/material';\nimport SuccessMessage from './SucessPage';\nimport { postData } from '../utils/common';\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nconst DRAFT_INTERVAL_TIME = 1000 * 10;\n\nfunction StudioAdd({instructors}) {\n    const [newStudioId, setNewStudioId] = useState(\"\")\n    const [tableData, setTableData] = useState(\n      [{ className: '', danceForms: '', days: '', time: '', instructors: [], fee:'',level:'' ,status: '' ,freeTrial:false ,classCategory: []}],\n    );\n    const [selectedLocation, setSelectedLocation] = useState(null);\n    const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n    const [selectedInstructors, setSelectedInstructors] = useState([]);\n    const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n    const [selectedAmenities, setSelectedAmenities] = useState([]);\n    const instructorNamesWithIds = instructors.map((instructor) => `${instructor.name} - ${instructor.id}`);\n    const [isReady, setIsReady] = useState(false);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    //const [dropdownVisible, setDropdownVisible] = useState(false);\n    const locationOptions = indianCities.cities;\n    const danceStylesOptions = danceStyles.danceStyles;\n    const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n    const [activeStep, setActiveStep] = useState(0);\n\n    const handleNext = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n\n    const darkTheme = createTheme({\n      palette: {\n        mode: isDarkModeOn?'dark':'light',\n      },\n    });\n\n    const handleDanceStylesChange = (event, value) => {\n      setSelectedDanceStyles(value);\n    };  \n\n    const handleAmentiesChange = (event, value) => {\n      setSelectedAmenities(value);\n    };\n\n    const handleInstructorChange = (event, value) => {\n      setSelectedInstructors(value);\n    };\n\n    const resetDraft = async () => {\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n\n          await deleteDoc(studioRef);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n      const handleAddStudio = async (event) => {\n        event.preventDefault();\n        const title = event.target.studioName.value;\n        if (!title) {\n          return;\n        }\n        let isPremium=true\n        const newData = tableData.reduce((accumulator, current, index) => {\n          accumulator[index] = current;\n          return accumulator;\n        }, {});\n\n        try {\n          const currentUserEmail = JSON.parse(localStorage.getItem(\"userInfo\"))?.email;\n          const studioData = {\n              studioName: event.target.studioName.value,\n              aboutStudio: event.target.aboutStudio.value,\n              founderName: event.target.founderName.value,\n              aboutFounder: event.target.aboutFounder.value,\n              mobileNumber: event.target.mobileNumber.value,\n              whatsappNumber: event.target.whatsappNumber.value,\n              mailAddress: event.target.mailAddress.value,\n              danceStyles: selectedDanceStyles.join(\",\"),\n              numberOfHalls: event.target.numberOfHalls.value,\n              maximumOccupancy: event.target.maximumOccupancy.value,\n              instructorsNames: selectedInstructors,\n              status: 'OPEN',\n              tableData: newData,\n              buildingName: event.target.buildingName.value,\n              street: event.target.street.value,\n              city: event.target.city.value,\n              landmark: event.target.landmark.value,\n              pincode: event.target.pincode.value,\n              state: event.target.state.value,\n              country: \"India\",\n              geolocation : selectedLocation,\n              gstNumber: event.target.gstNumber.value,\n              enrolledId:[],\n              reviews:[],\n              author: JSON.parse(localStorage.getItem('userInfo')).displayName,\n              UserId: JSON.parse(localStorage.getItem('userInfo')).UserId,\n              isPremium: isPremium,\n              addAmenities: selectedAmenities.join(\",\"),\n              enrollmentProcess: encodeToUnicode(event.target.enrollmentProcess.value),\n              creatorEmail: currentUserEmail,\n              instagram: event.target.instagram.value,\n              facebook: event.target.facebook.value,\n              youtube: event.target.youtube.value,\n              twitter: event.target.twitter.value,\n              visibilty:1,\n          };\n            setIsSubmitting(true);\n            const notifyEmails = currentUserEmail\n            const metaData = {\n              entity_name: studioData.studioName,\n              city: studioData.city ,\n            }\n            const response = await postData(studioData,COLLECTIONS.STUDIO, notifyEmails, metaData) ;\n            if (response.ok) {\n              const result = await response.json();\n              setNewStudioId(result.id)\n              resetDraft();\n              handleNext();\n            }\n        } catch (error) {\n          console.error(\"Error adding studio: \", error);\n        } finally {\n          setIsSubmitting(false);\n        }\n      };\n\n  useEffect(() => {\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          form.studioName.value = foundStudio.studioName;\n          form.aboutStudio.value = foundStudio.aboutStudio;\n          form.founderName.value = foundStudio.founderName;\n          form.aboutFounder.value = foundStudio.aboutFounder;\n          form.mobileNumber.value = foundStudio.mobileNumber;\n          form.whatsappNumber.value = foundStudio.whatsappNumber;\n          form.mailAddress.value = foundStudio.mailAddress;\n          setSelectedDanceStyles(\n            foundStudio.danceStyles.length\n              ? foundStudio.danceStyles.split(\",\")\n              : []\n          );\n          form.numberOfHalls.value = foundStudio.numberOfHalls;\n          form.maximumOccupancy.value = foundStudio.maximumOccupancy;\n          setSelectedInstructors(foundStudio.instructorsNames);\n          form.buildingName.value = foundStudio.buildingName;\n          form.street.value = foundStudio.street;\n          form.city.value = foundStudio.city;\n          form.landmark.value = foundStudio.landmark;\n          form.pincode.value = foundStudio.pincode;\n          form.state.value = foundStudio.state;\n          setSelectedLocation(foundStudio.geolocation);\n          form.aadharNumber.value = foundStudio.aadharNumber;\n          form.gstNumber.value = foundStudio.gstNumber;\n          setTableData(Object.values(foundStudio.tableData));\n          setSelectedAmenities(\n            foundStudio.addAmenities.length\n              ? foundStudio.addAmenities.split(\",\")\n              : []\n          );\n          form.enrollmentProcess.value = decodeUnicode(\n            foundStudio.enrollmentProcess\n          );\n          form.instagram.value = foundStudio.instagram;\n          form.facebook.value = foundStudio.facebook;\n          form.youtube.value = foundStudio.youtube;\n          form.twitter.value = foundStudio.twitter;\n        } else {\n          await addDoc(collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS), {\n            studioName: form.studioName.value,\n            aboutStudio: form.aboutStudio.value,\n            founderName: form.founderName.value,\n            aboutFounder: form.aboutFounder.value,\n            mobileNumber: form.mobileNumber.value,\n            whatsappNumber: form.whatsappNumber.value,\n            mailAddress: form.mailAddress.value,\n            danceStyles: selectedDanceStyles.join(\",\"),\n            numberOfHalls: form.numberOfHalls.value,\n            maximumOccupancy: form.maximumOccupancy.value,\n            instructorsNames: selectedInstructors,\n            status: \"OPEN\",\n            tableData: {\n              0: {\n                className: \"\",\n                danceForms: \"\",\n                days: \"\",\n                time: \"\",\n                instructors: [],\n                fee: \"\",\n                level: \"\",freeTrial:false, \n                classCategory: []\n              },\n            },\n            buildingName: form.buildingName.value,\n            street: form.street.value,\n            city: form.city.value,\n            landmark: form.landmark.value,\n            pincode: form.pincode.value,\n            state: form.state.value,\n            country: \"India\",\n            geolocation: selectedLocation,\n            aadharNumber: form.aadharNumber.value,\n            gstNumber: form.gstNumber.value,\n            enrolledId: [],\n            reviews: [],\n            author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n            UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n            isPremium: true,\n            addAmenities: selectedAmenities.join(\",\"),\n            enrollmentProcess: encodeToUnicode(form.enrollmentProcess.value),\n            creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\")).email,\n            instagram: form.instagram.value,\n            facebook: form.facebook.value,\n            youtube: form.youtube.value,\n            twitter: form.twitter.value,\n            visibilty: 1,\n          });\n        }\n\n        setIsReady(true);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    main();\n  }, []);\n\n  useEffect(() => {\n    let intervalId = null;\n\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n          \n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n          \n          intervalId = setInterval(async () => {\n            try {\n              const newData = tableData.reduce((accumulator, current, index) => {\n                accumulator[index] = current;\n                return accumulator;\n              }, {});\n\n              await updateDoc(studioRef, {\n                studioName: form.studioName.value,\n                aboutStudio: form.aboutStudio.value,\n                founderName: form.founderName.value,\n                aboutFounder: form.aboutFounder.value,\n                mobileNumber: form.mobileNumber.value,\n                whatsappNumber: form.whatsappNumber.value,\n                mailAddress: form.mailAddress.value,\n                danceStyles: selectedDanceStyles.join(\",\"),\n                numberOfHalls: form.numberOfHalls.value,\n                maximumOccupancy: form.maximumOccupancy.value,\n                instructorsNames: selectedInstructors,\n                status: \"OPEN\",\n                tableData: newData,\n                buildingName: form.buildingName.value,\n                street: form.street.value,\n                city: form.city.value,\n                landmark: form.landmark.value,\n                pincode: form.pincode.value,\n                state: form.state.value,\n                country: \"India\",\n                geolocation: selectedLocation,\n                aadharNumber: form.aadharNumber.value,\n                gstNumber: form.gstNumber.value,\n                enrolledId: [],\n                reviews: [],\n                author: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .displayName,\n                UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n                isPremium: true,\n                addAmenities: selectedAmenities.join(\",\"),\n                enrollmentProcess: encodeToUnicode(\n                  form.enrollmentProcess.value\n                ),\n                creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .email,\n                instagram: form.instagram.value,\n                facebook: form.facebook.value,\n                youtube: form.youtube.value,\n                twitter: form.twitter.value,\n                visibilty: 1,\n              });\n            } catch (error) {\n              console.error(error);\n            }\n          }, DRAFT_INTERVAL_TIME);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    if (isReady) main();\n\n    return () => clearInterval(intervalId);\n  }, [\n    isReady,\n    selectedDanceStyles,\n    selectedInstructors,\n    tableData,\n    selectedLocation,\n    selectedAmenities,\n  ]);\n\n  return (\n    <div >\n          <Stepper activeStep={activeStep} alternativeLabel>\n            {['Basic Studio & Owner details', 'Instructors, Classes & Social Media', 'Address & Registration', 'Studio Icon', 'Studio & Class Images'].map((label) => (\n              <Step key={label}>\n                <StepLabel ><p style={{color:isDarkModeOn?\"white\":\"black\"}}>{label}</p></StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          \n            < div hidden={activeStep > 2} >\n            <Form id=\"addStudioForm\" onSubmit={handleAddStudio} style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n              <Form.Group controlId=\"formBasicAdd\">\n             \n                  <div hidden={activeStep !== 0}>\n                  <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Basic Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Studio Name</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"studioName\" />\n                \n                <Form.Label>About Studio</Form.Label>\n                <Form.Control rows={6} style={{  minHeight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio's details\" name=\"aboutStudio\" />\n                \n                </Col>\n                <Col md={6}>\n                <Form.Label>Founder's Name</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter founder name\" name=\"founderName\" />\n                \n                <Form.Label>About Founder</Form.Label>\n                <Form.Control rows={6} style={{  minheight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter founder's details\" name=\"aboutFounder\" />\n                \n                </Col>\n                </Row>\n                <hr></hr>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Contact Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Mobile Number</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter mobile number\" name=\"mobileNumber\" type=\"number\"  />\n\n                <Form.Label>WhatsApp Number</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter whatsapp number\" name=\"whatsappNumber\" type=\"number\"  />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Mail Address</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"email\" rows={1} placeholder=\"Enter mail address\" name=\"mailAddress\" />\n                \n                  </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Details</h3>\n                <Row>\n                  <Col md={6}>\n                <Form.Label >Dance Styles</Form.Label>\n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                <Form.Label>Number of Hall(s)</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Number of Hall(s)\" name=\"numberOfHalls\" type=\"number\" />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Maximum Occupancy</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}  rows={1} placeholder=\"Maximum Occupancy\" name=\"maximumOccupancy\" type=\"number\"   />\n                </Col>\n                </Row>\n                <br></br>\n                <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}} disabled >\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                  \n                  </div>\n\n\n               \n              \n                <div hidden={activeStep !== 1}>\n\n\n                \n            <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Instructor Details</h3>\n                <Form.Label>Names of Instructors</Form.Label>\n                <Row>\n                  <ThemeProvider theme={darkTheme}>\n                    <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={instructorNamesWithIds}\n                      value={selectedInstructors}\n                      onChange={handleInstructorChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Instructors\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                  </ThemeProvider>\n                </Row> \n                <a href=\"#/modifyInstructors\" rel=\"noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', color: isDarkModeOn ? 'cyan' : 'blue' }}>\n                      Go to Instrcutors' Add/update Page? \n                    </a>\n                <hr></hr>   \n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Class Schedule</h3>\n                  <span>Time Table Of dance classes</span>\n                    <div style={{ overflowX: 'auto', whiteSpace: 'nowrap', scrollbarColor: isDarkModeOn ? '#888 #333' : '#ccc #fff', }}>\n                      <StudioTable\n                        tableData={tableData}\n                        setTableData={setTableData}\n                        instructorNamesWithIds={instructorNamesWithIds}\n                      />\n                    </div>\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Additional Details</h3>\n                <Row>\n                <Col md={4}>\n                  <Form.Label>GST Number</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"GST Number\" name=\"gstNumber\" />\n                  \n                  \n                </Col>\n                <Col md={8}>\n                <Form.Label>Add Amenities</Form.Label>\n                  \n                  <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={amenityKeys}\n                  value={selectedAmenities}\n                  onChange={handleAmentiesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Amenities\"\n                      style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                </Col>\n                </Row>\n                <Row>\n                <Form.Label>Enrollment Process</Form.Label>\n                  <Form.Control rows={12} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enrollment Process\" name=\"enrollmentProcess\" />\n          \n                </Row>\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Social Media Links</h3>\n               <Row>\n               <Col md={4}>\n                  <Form.Label>Instagram</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Instagram Link\" name=\"instagram\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Facebook</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Facebook Link\" name=\"facebook\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>YouTube</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"YouTube Link\" name=\"youtube\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Twitter</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Twitter Link\" name=\"twitter\" />\n                </Col>\n\n               </Row>\n\n               <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n              </div>\n\n               \n                <div hidden={activeStep !== 2}>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Address Details</h3>\n                <Row>\n                  <Col md={6}>\n                  <Form.Label>Building Name</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter building name\" name=\"buildingName\" />\n\n                <Form.Label>Street</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter street\" name=\"street\" />\n                <Form.Label>City</Form.Label>\n                <Form.Control as=\"select\" style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black', height: 'auto', // Let it adjust to content\n                    lineHeight: '1.5em', // Mimics rows={1}\n                    padding: '8px', }} name=\"city\">\n                    <option value=\"\">Select a city</option>\n                    {locationOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n\n                </Col>\n                <Col md={6}>\n                  <Form.Label>Landmark</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter landmark\" name=\"landmark\" />\n\n                <Form.Label>Pincode</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter pincode\" name=\"pincode\" type=\"number\"  />\n               \n                <Form.Label>State</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter state\" name=\"state\" />\n               \n                </Col>\n\n                <Form.Label>Save exact Address</Form.Label>\n                <MapsInput selectedLocation={selectedLocation} setSelectedLocation={setSelectedLocation}></MapsInput>\n                \n                </Row>\n                \n\n                \n              <br></br>\n\n              <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end\">\n                    \n                    <MuiButton variant=\"contained\" disabled={isSubmitting} style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\", color:'white'}} type=\"submit\">\n                      Add Studio & Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                \n                </div>\n\n                \n                </Form.Group>\n            </Form>\n            {isSubmitting && <LinearProgress />}\n            {\n              newStudioId === \"\"?(\"\"):(<p>New Studio Created with id {newStudioId}. Now u can upload images regarding them</p>)\n            }\n            \n            </div>\n          \n             \n             \n            <div hidden={activeStep !== 3}>\n              \n              <ImageUpload entityId={newStudioId} title={\"Studio Icon\"} storageFolder={STORAGES.STUDIOICON} maxImageCount={1}></ImageUpload>\n              <Row>\n                \n                <Col xs={12} className=\"d-flex justify-content-end\">\n                  <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                    Next\n                  </MuiButton>\n                </Col>\n              </Row>\n\n              </div>\n             \n            \n             <div hidden={activeStep !== 4}>\n              <ImageUpload entityId={newStudioId} title={\"Studio Images\"}  storageFolder={STORAGES.STUDIOIMAGES} ></ImageUpload>\n              <Row>\n                \n                <Col xs={12} className=\"d-flex justify-content-end\">\n                  <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                    Next\n                  </MuiButton>\n                </Col>\n              </Row>\n            </div>\n\n            <div  hidden={activeStep !== 5} style={{ display: 'flex',  alignItems: 'center', height: 'auto'}}>\n          \n                <SuccessMessage StudioId={newStudioId} />\n                <br></br>\n              \n            </div>\n        \n      <br></br>\n      \n    </div>\n  )\n}\n\n\nexport default StudioAdd\n","import React, { useState, useEffect } from 'react';\nimport { Alert, Container } from 'react-bootstrap';\n\nconst AlertPopup = ({\n  type = 'info',\n  message = 'Default message',\n  timeOfDisplay = 5000,\n  fontSize = '16px',\n  fontWeight = 'normal',\n  fontStyle = 'normal',\n}) => {\n  const [showAlert, setShowAlert] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowAlert(false);\n    }, timeOfDisplay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [timeOfDisplay]);\n\n  return (\n    <Container>\n      {showAlert && (\n        <Alert\n          variant={type}\n          style={{\n            fontSize,\n            fontWeight,\n            fontStyle,\n            textAlign: 'center',\n            marginTop: '10px',\n            marginBottom: '0',\n          }}\n          onClose={() => setShowAlert(false)}\n          dismissible\n        >\n          {message}\n        </Alert>\n      )}\n    </Container>\n  );\n};\n\nexport default AlertPopup;\n","import React, { useState, useEffect } from 'react';\nimport {Button, Row, Col, Form, Table} from 'react-bootstrap';\nimport { db } from '../config';\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { COLLECTIONS } from '../constants';\nimport AlertPopup from './AlertPopup';\nimport ImageUpload from './ImageUpload';\nimport { STORAGES } from '../constants';\nimport MapsInput from './MapsInput';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport TimeRangePicker from './TimeRangePicker';\nimport indianCities from '../cities.json';\nimport danceStyles from '../danceStyles.json';\nimport { AMENITIES_ICONS } from '../constants';\nimport {Autocomplete,TextField} from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { FaMinus, FaPlus } from 'react-icons/fa';\nimport { MultiSelect } from 'primereact/multiselect';\n\nconst daysOfWeek = ['M','T','W','Th','F','St','Sn'];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\"\n};\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nfunction StudioUpdate({ studio, setStudio, studioId, setStudioId, instructors }) {\n  const [selectedStudio, setSelectedStudio] = useState(null);\n  const [selectedStudioId, setSelectedStudioId] = useState(null);\n  const [selectedInstructors, setSelectedInstructors] = useState([]);\n  const [selectedStudioFrozenClassRows, setSelectedStudioFrozenClassRows] = useState(-1);\n  const [selectedAmenities,setSelectedAmenities] = useState([]);\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [defaultTime, setDefaultTime] =  useState(\"00:00-00:00\");\n\n  const locationOptions = indianCities.cities;\n  const danceStylesOptions = danceStyles.danceStyles;\n  const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n  const [showUpdateSuccessAlert, setShowUpdateSuccessAlert] = useState(false);\n  const [showUpdateErrorAlert, setShowUpdateErrorAlert] = useState(false);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n\n  const instructorNamesWithIds = instructors.map((instructor) => `${instructor.name} - ${instructor.id}`);\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: isDarkModeOn?'dark':'light',\n    },\n  });\n\n  const handleDanceStylesChange = (event, value) => {\n    setSelectedDanceStyles(value);\n  };\n  \n  \n  const handleAmenitiesChange = (event, value) => {\n    setSelectedAmenities(value);\n  };\n\n  const [tableData, setTableData] = useState({\n    0:{\n      className: '',\n      danceForms: '',\n      days: '',\n      time: '',\n      instructors: [],\n      fee:'',\n      level:'',\n      freeTrial: false,\n      classCategory: []\n    }\n});\n\n  const handleTimePickerOpen = (index,time) => {\n    //console.log(\"handleTimePickerOpen\",time,index)\n    setDefaultTime(time)\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null); \n    //console.log(\"---------\")\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n  \n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n  \n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(' - ');\n  \n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n  \n      return newData;\n    });\n  \n    setSelectedRow(selectedRowIndex);\n  };\n  \n  useEffect(() => {\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser = JSON.parse(localStorage.getItem('StudioCreated')) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map((studio) => `${studio.studioName} : ${studio.id}`);\n    setStudioId(studioIdList);\n\n    //console.log(\"studio:\", studio);\n    //console.log(\"studioId\", studioId);\n  }, []);\n\n  useEffect(() => {\n    // Fetch data for the selected studio when studioId changes\n    if (selectedStudio) {\n      //console.log(\"Studio Instructors Names\",selectedStudio.instructorsNames)\n      setSelectedInstructors((selectedStudio.instructorsNames));\n      if (selectedStudio && selectedStudio.danceStyles) {\n        setSelectedDanceStyles(selectedStudio.danceStyles.split(','));\n      }\n      if (selectedStudio && selectedStudio.addAmenities) {\n        setSelectedAmenities(selectedStudio.addAmenities.split(','));\n      }    \n      if(selectedStudio && selectedStudio.tableData){\n        const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n        setSelectedStudioFrozenClassRows(maxIndex);\n      }\n    }\n  }, [selectedStudio]);\n\n  const handleSelectStudio = async (event) => {\n    event.preventDefault();\n    const selected = event.target.value;\n    const selectedId = selected.split(\":\").pop().trim();\n    setSelectedStudioId(selectedId);\n    try {\n      const studioDoc = await getDoc(doc(db, COLLECTIONS.STUDIO, selectedId));\n      if (studioDoc.exists) {\n        setSelectedStudio(studioDoc.data());\n        if(studioDoc.data().geolocation){\n          const  loc = studioDoc.data().geolocation;\n          setSelectedLocation(loc);\n          //console.log(\"StudioUpdate Selected location\",selectedLocation,loc)\n        }\n        \n        if (studioDoc.data().tableData) {\n          setTableData(studioDoc.data().tableData);\n          //selectedStudioFrozenClassRows()\n          const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n          selectedStudioFrozenClassRows(maxIndex)\n          //console.log(\"Yo We got...\",tableData,Array.isArray(tableData),isMapOfMaps(tableData),maxIndex)\n\n        } else {\n          setTableData({\n            0:{\n              className: '',\n              danceForms: '',\n              days: '',\n              time: '',\n              instructors: [],\n              fee: '',\n              level:'',\n              freeTrial: false,\n              classCategory: []\n            }\n        });\n        }\n      } else {\n        setSelectedStudio(null); // No matching studio found\n      }\n    } catch (error) {\n      console.error(\"Error fetching studio data:\", error, selectedId);\n    }\n  };\n\n\n  const handleInstructorChange = (event, value) => {\n    setSelectedInstructors(value);\n  };\n\n\n  const handleUpdateStudio = async (event) => {\n    event.preventDefault();\n    const nameIdLocal = event.target.nameId.value;\n    const indexOfColon = nameIdLocal.lastIndexOf(\":\");\n    const studioId = nameIdLocal.substring(indexOfColon + 1).trim();\n    //console.log(studioId)\n\n    if (!studioId) {\n      //console.log(\"Invalid or empty studio id\")\n      return;\n    }\n\n    //const description = encodeToUnicode(event.target.description.value);\n    //const geolocation = selectedLocation;\n\n    try {\n      // Update the studio document with the new values\n      ////console.log(description,geolocation)\n      const studioRef = doc(db, COLLECTIONS.STUDIO, studioId);\n      console.log(tableData)\n      await updateDoc(studioRef, {\n              studioName: event.target.studioName.value,\n              aboutStudio: event.target.aboutStudio.value,\n              founderName: event.target.founderName.value,\n              aboutFounder: event.target.aboutFounder.value,\n              mobileNumber: event.target.mobileNumber.value,\n              whatsappNumber: event.target.whatsappNumber.value,\n              mailAddress: event.target.mailAddress.value,\n              danceStyles: selectedDanceStyles.join(\",\"),\n              numberOfHalls: event.target.numberOfHalls.value,\n              maximumOccupancy: event.target.maximumOccupancy.value,\n              instructorsNames: selectedInstructors,\n              status: 'OPEN',\n              tableData: tableData,\n              buildingName: event.target.buildingName.value,\n              street: event.target.street.value,\n              city: event.target.city.value,\n              landmark: event.target.landmark.value,\n              pincode: event.target.pincode.value,\n              state: event.target.state.value,\n              country: \"India\",\n              geolocation : selectedLocation,\n              gstNumber: event.target.gstNumber.value,\n              enrolledId:[],\n              reviews:[],\n              author: JSON.parse(localStorage.getItem('userInfo')).displayName,\n              UserId: JSON.parse(localStorage.getItem('userInfo')).UserId,\n              addAmenities: selectedAmenities.join(\",\"),\n              enrollmentProcess: encodeToUnicode(event.target.enrollmentProcess.value),\n              instagram: event.target.instagram.value,\n              facebook: event.target.facebook.value,\n              youtube: event.target.youtube.value,\n              twitter: event.target.twitter.value,\n      });\n\n      //console.log(\"Studio updated successfully\");\n      alert(\"Studio Update successfully\")\n      setShowUpdateSuccessAlert(true);\n      setShowUpdateErrorAlert(false);\n    } catch (error) {\n      console.error(\"Error updating studio: \", error);\n      setShowUpdateSuccessAlert(false);\n      setShowUpdateErrorAlert(true);\n    }\n    // Reset input fields to their initial values when a new studio is selected\n    document.getElementById(\"updateStudioForm\").reset();\n  };\n\n  const handleAddColumn = () => {\n    setTableData((prevData) => {\n      const newData = prevData.map((row) => ({\n        ...row,\n        [Object.keys(row).length]: ''\n      }));\n      return newData;\n    });\n  };\n\n  const handleAddRow = () => {\n    setTableData((prevData) => {\n      const newRowKey = Object.keys(prevData).length; // Use the current number of rows as the new row key\n      return { ...prevData, [newRowKey]: { ...tableData[0] } };\n    });\n  };\n\n  const handleRemoveRow = (index) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n      delete newData[index];\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if(field===\"days\"){\n        value = Array.isArray(value) ? value.join(',') : value; \n      }\n\n      return {\n        ...prevData,\n        [index]: {\n          ...prevData[index],\n          [field]: value\n        }\n      };\n    });\n  };\n\n  return (\n    <div style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n      <br></br>\n            <Form id=\"updateStudioForm\" onSubmit={handleUpdateStudio}>\n              <Form.Group controlId=\"formBasicUpdate\">\n                <Form.Label>Id</Form.Label>\n                <Form.Control as=\"select\" name=\"nameId\" style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black', height: 'auto', // Let it adjust to content\n                                                        lineHeight: '1.5em', \n                                                        padding: '8px' }}  \n                  onChange={handleSelectStudio}>\n                  <option value=\"\">Select a studio...</option>\n                  {studioId && studioId.length > 0 ? (\n                    studioId.map((studioItem) => (\n                      <option key={studioItem} value={studioItem}>\n                        {studioItem}\n                      </option>\n                    ))\n                  ) : (\n                    <option value=\"\">No studio yet!</option>\n                  )}\n                </Form.Control>\n              </Form.Group>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Basic Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Studio Name</Form.Label>\n                <Form.Control rows={1} defaultValue={selectedStudio ? selectedStudio.studioName : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"studioName\" />\n                \n                <Form.Label>About Studio</Form.Label>\n                <Form.Control rows={6} defaultValue={selectedStudio ? selectedStudio.aboutStudio : ''} style={{  minHeight: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio details\" name=\"aboutStudio\" />\n                \n                </Col>\n                <Col md={6}>\n                <Form.Label>Founder's Name</Form.Label>\n                <Form.Control rows={1} defaultValue={selectedStudio ? selectedStudio.founderName : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"founderName\" />\n                \n                <Form.Label>About Founder</Form.Label>\n                <Form.Control rows={6} defaultValue={selectedStudio ? selectedStudio.aboutFounder : ''} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio details\" name=\"aboutFounder\" />\n                \n                </Col>\n                </Row>\n                <hr></hr>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Contact Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Mobile Number</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.mobileNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter studio details\" name=\"mobileNumber\" type=\"number\"  />\n\n                <Form.Label>WhatsApp Number</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.whatsappNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter studio details\" name=\"whatsappNumber\" type=\"number\"  />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Mail Address</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.mailAddress : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" rows={1} placeholder=\"Enter studio details\" name=\"mailAddress\" />\n                \n                  </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Details</h3>\n                <Row>\n                  <Col md={6}>\n                <Form.Label>Dance Styles</Form.Label>\n                \n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>      \n                \n                <Form.Label>Number of Hall(s)</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.numberOfHalls : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Number of Hall(s)\" name=\"numberOfHalls\" type=\"number\" />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Maximum Occupancy</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.maximumOccupancy : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}  rows={1} placeholder=\"Maximum Occupancy\" name=\"maximumOccupancy\" type=\"number\"   />\n                </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Instructor Details</h3>\n                <Form.Label>Names of Instructors</Form.Label>\n                <Row >\n      \n                  <Col xs={6}>\n                  <div style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n                  <Row>\n                  <ThemeProvider theme={darkTheme}>\n                    <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={instructorNamesWithIds}\n                      value={selectedInstructors}\n                      onChange={handleInstructorChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Dance Styles\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                  </ThemeProvider>\n                  <a href=\"#/modifyInstructors\" rel=\"noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', color: isDarkModeOn ? 'cyan' : 'blue' }}>\n                      Go to Instrcutors' Add/update Page? \n                    </a>\n                </Row> \n                  </div>\n                  </Col>\n                </Row>  \n                <hr></hr>\n                   \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Address Details</h3>\n                <Row>\n                  <Col md={6}>\n                  <Form.Label>Building Name</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.buildingName : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter building name\" name=\"buildingName\" />\n\n                <Form.Label>Street</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.street : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter street\" name=\"street\" />\n                <Form.Label>City</Form.Label>\n                  <Form.Control\n                      as=\"select\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black',height: 'auto', // Let it adjust to content\n                        lineHeight: '1.5em', // Mimics rows={1}\n                        padding: '8px', }}\n                      name=\"city\"\n                      value={selectedStudio ? selectedStudio.city : ''}\n                      onChange={(e) => {\n                          const newCity = e.target.value;\n                          setSelectedStudio(prevState => ({\n                              ...prevState,\n                              city: newCity\n                          }));\n                      }}\n                  >\n                      <option value=\"\">Select a city</option>\n                      {locationOptions.map((city, index) => (\n                          <option key={index} value={city}>\n                              {city}\n                          </option>\n                      ))}\n                  </Form.Control>\n                  \n\n                </Col>\n                <Col md={6}>\n                  <Form.Label>Landmark</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.landmark : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter landmark\" name=\"landmark\" />\n\n                <Form.Label>Pincode</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.pincode : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter pincode\" name=\"pincode\" type=\"number\"  />\n               \n                <Form.Label>State</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.state : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter state\" name=\"state\" />\n               \n                </Col>\n                \n                <Form.Label>Save exact Address</Form.Label>\n                <MapsInput selectedLocation={selectedStudio && selectedStudio.geolocation ? selectedStudio.geolocation : selectedLocation}\n                            setSelectedLocation={setSelectedLocation} />\n\n                </Row>\n                <hr></hr>\n\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : 'white', color: isDarkModeOn ? 'white' : 'black' }}>Additional Details</h3>\n                <Row>\n                  <Col md={4}>\n                      <Form.Label>GST Number</Form.Label>\n                      <Form.Control defaultValue={selectedStudio ? selectedStudio.gstNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"number\" rows={1} placeholder=\"GST Number\" name=\"gstNumber\" />\n                  </Col>\n                  <Col md={8}>\n                      <Form.Label>Add Amenities</Form.Label>\n                  \n                      <ThemeProvider theme={darkTheme}>\n                      <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={amenityKeys}\n                      value={selectedAmenities}\n                      onChange={handleAmenitiesChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Amenities\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                      </ThemeProvider>\n                </Col>\n                </Row>\n                <Row>\n                  \n                  <Col>\n                    <Form.Label>Enrollment Process</Form.Label>\n                    <Form.Control defaultValue={selectedStudio ? decodeUnicode(selectedStudio.enrollmentProcess) : ''} rows={6} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enrollment Process\" name=\"enrollmentProcess\" />\n              \n                  </Col>\n                </Row>\n\n              <br></br>\n            <span>Time Table Of dance classes</span>\n            <div style={{ overflowX: 'auto', whiteSpace: 'nowrap', scrollbarColor: isDarkModeOn ? '#888 #333' : '#ccc #fff', }}>\n              <Table bordered variant=\"light\">\n                <thead>\n                  <tr>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Name</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Dance Form</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Days</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Time</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'20rem', border: '1px solid black'}}>Instructors</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Fee (₹)</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Level</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Free Trial</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Category</th>\n                    <th style={{padding: 0 }}>\n                      <Button variant=\"primary\" onClick={handleAddRow}>\n                        <FaPlus/>\n                      </Button>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Object.keys(tableData).map((rowKey, index) => (\n                    <tr key={rowKey}\n                    >\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          type=\"text\"\n                          value={tableData[rowKey].className}\n                          onChange={(e) => handleTableChange(rowKey, 'className', e.target.value)}\n                          style={{height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          as=\"select\"\n                          value={tableData[rowKey].danceForms}\n                          onChange={(e) => handleTableChange(rowKey, 'danceForms', e.target.value)}\n                          style={{height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                        >\n                          <option value=\"\">Select a dance form</option>\n                          {danceStylesOptions.map((option) => (\n                      <option key={option} value={option}>\n                        {option}\n                      </option>\n                    ))}\n                          </Form.Control>\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <MultiSelect value={tableData[rowKey] && tableData[rowKey].days && tableData[rowKey].days.split(',').filter(day => day !== '')}\n                          onChange={(event) => handleTableChange(rowKey, 'days', event.target.value)}\n                          options={daysOfWeek}\n                          placeholder=\"class days\" maxSelectedLabels={7} className=\"w-full md:w-20rem\"\n                          style={{color: '#000', width: '100%'}}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          type=\"text\"\n                          value={tableData[rowKey].time}\n                          //onChange={(e) => handleTableChange(rowKey, 'time', e.target.value)}\n                          onClick={() => handleTimePickerOpen(rowKey,tableData[rowKey].time)}\n                        />\n                        {showTimePicker && (\n                        <TimeRangePicker\n                          show={showTimePicker}\n                          handleClose={handleTimePickerClose}\n                          handleSelect={handleTimeSelect}\n                          defaultTime={tableData[selectedRowIndex]?.time || \"00:00-00:00\"} // selectedRowIndex\n                        />\n                      )}\n                      </td>\n                      <td style={{padding:'0rem', width:'20rem'}}>\n                        <Autocomplete\n                          multiple\n                          options={instructorNamesWithIds}\n                          value={tableData[rowKey] && tableData[rowKey].instructors ? tableData[rowKey].instructors : []}\n                          onChange={(_, values) => handleTableChange(rowKey, 'instructors', values)}\n                          renderInput={(params) => (\n                            <TextField\n                              {...params}\n                              variant=\"standard\"\n                              placeholder=\"Select Instructors\"\n                            />\n                          )}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          type=\"text\"\n                          value={tableData[rowKey].fee?tableData[rowKey].fee:\"\"}\n                          onChange={(e) => handleTableChange(rowKey, 'fee', e.target.value)}\n                          style={{height: 'auto',lineHeight: '1.5em',padding: '8px'}}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          as=\"select\"\n                          value={tableData[rowKey].level?tableData[rowKey].level:\"\"}\n                          onChange={(e) => handleTableChange(rowKey, 'level', e.target.value)}\n                          style={{height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                        >\n                          <option value=\"\">Select a Level</option>\n                          <option value=\"Beginner\">Beginner</option>\n                        <option value=\"Intermediate\">Intermediate</option>\n                        <option value=\"Advanced\">Advanced</option>\n                        <option value=\"Misc\">Misc</option>\n\n                          </Form.Control>\n                      </td>\n                      <td style={{ padding: '0rem', border: '1px solid black' }}>\n                        <Form.Control\n                          style={{ backgroundColor: \"white\", height: 'auto', lineHeight: '1.5em', padding: '8px' }}\n                          as=\"select\"\n                          value={tableData[index]?.freeTrial ? tableData[index].freeTrial : \"\"}\n                          onChange={(e) => handleTableChange(index, 'freeTrial', e.target.value)}\n                        >\n                          <option value=\"\">Select a value</option>\n                          <option value={true}>Yes</option>\n                          <option value={false}>No</option>\n                        </Form.Control>\n                      </td>\n                      <td style={{ padding: '0rem', width: '20rem' }}>\n                        <Autocomplete\n                          multiple\n                          id=\"tags-standard\"\n                          options={Object.values(categoryMap)}\n                          value={tableData[index]?.classCategory && tableData[index].classCategory.length > 0 \n                            ? tableData[index].classCategory.map(key => categoryMap[key]) \n                            : []}\n                          onChange={(_, values) => {\n                            const selectedKeys = values.map(value =>\n                              Object.keys(categoryMap).find(key => categoryMap[key] === value)\n                            );\n                            handleTableChange(index, 'classCategory', selectedKeys);\n                          }}\n                          renderInput={(params) => (\n                            <TextField\n                              {...params}\n                              variant=\"standard\"\n                              placeholder=\"Select Class Category\"\n                            />\n                          )}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Button variant=\"danger\" onClick={() => handleRemoveRow(rowKey)}>\n                          <FaMinus/>\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n\n              </Table>\n            </div>\n            <br></br>\n            <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Social Media Links</h3>\n               <Row>\n            <Col md={4}>\n                          <Form.Label>Instagram</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.instagram : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Instagram Link\" name=\"instagram\" />\n                        </Col>\n                        <Col md={4}>\n                          <Form.Label>Facebook</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.facebook : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Facebook Link\" name=\"facebook\" />\n                        </Col>\n                        <Col md={4}>\n                          <Form.Label>YouTube</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.youtube : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"YouTube Link\" name=\"youtube\" />\n                        </Col>\n                        <Col md={4}>\n                          <Form.Label>Twitter</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.twitter : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Twitter Link\" name=\"twitter\" />\n                        </Col>\n                        </Row>\n\n            <br></br>\n            <Button style={{ backgroundColor: isDarkModeOn ? '#892CDC' : 'black', color:'white'  }} type=\"submit\">\n              Update Studio\n            </Button>\n            </Form>\n            {studioId && studioId.length > 0 && selectedStudioId && (\n              <>\n                <div>\n                  <ImageUpload entityId={selectedStudioId} title={\"Studio Images\"} storageFolder={STORAGES.STUDIOIMAGES} maxImageCount={10} />\n                </div>\n                <br />\n                <div>\n                  <ImageUpload entityId={selectedStudioId} title={\"Studio Icon\"} storageFolder={STORAGES.STUDIOICON} maxImageCount={1} />\n                </div>\n                <div>\n                  <ImageUpload entityId={selectedStudioId} title={\"Studio Announcement Images\"} storageFolder={STORAGES.STUDIOANNOUNCEMENTS} maxImageCount={10}/>\n                </div>\n                <br />\n              </>\n            )}\n      {showUpdateSuccessAlert && (\n        <AlertPopup\n          type=\"info\"\n          message=\"Studio Updated successfully\"\n          timeOfDisplay={3000}\n          fontSize=\"10px\"\n          fontWeight=\"bold\"\n        />\n      )}\n      {showUpdateErrorAlert && (\n        <AlertPopup\n          type=\"warning\"\n          message=\"Studio Update failed\"\n          timeOfDisplay={3000}\n          fontSize=\"10px\"\n          fontWeight=\"bold\"\n        />\n      )}\n    </div>\n  );\n}\n\nexport default StudioUpdate;\n","import React from 'react';\nimport { Row, Col  } from 'react-bootstrap';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,collection,where,getDocs,query } from \"firebase/firestore\";\nimport { COLLECTIONS } from '../constants';\nimport StudioAdd from '../Components/StudioAdd';\nimport StudioUpdate from '../Components/StudioUpdate';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { useAuth } from '../context/AuthContext';\nimport CardSliderCard from '../Components/CardSliderCard';\nimport Tab from '@mui/material/Tab';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\nimport { Box } from '@mui/material';\n\n\n\nfunction CreatorStudio() {\n  const [studio, setStudio] = useState([]);\n  const [studioId, setStudioId] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  const [instructors, setInstructors] = useState([]);\n  const [isCreator, setIsCreator] = useState(false);\n  const [premiumTill, setPremiumTill] = useState(-1);\n  const { currentUser } = useAuth();\n  const [value, setValue] = React.useState('1');\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n\n  useEffect(() => {\n    console.log(\"Creator Studio getCreatorMode\")\n    const getCreatorMode = async (event) => {\n      try{\n      const userRef = doc(db, \"User\", currentUser.uid);\n      const userSnap = await getDoc(userRef);\n      if (userSnap.exists()) {\n        console.log(\"User there\",userSnap.data(),userSnap.data().CreatorMode,JSON.parse(localStorage.getItem('userInfoFull')));\n        if(userSnap.data() != null){\n          \n          setIsCreator(userSnap.data().CreatorMode)\n          setPremiumTill(userSnap.data().isPremium)\n          console.log(\"Premium Till\",premiumTill,userSnap.data())\n        }else{\n          console.log(\"userSnap.data() null\")\n        }\n      } else {\n        console.log(\"User not found but workshop created... error\");\n      }\n      }catch(error){\n        console.log(\" error\");\n      }\n    }\n  \n    getCreatorMode();\n  }, [isCreator]); // Run once on mount\n\n    // Fetch instructors for the current user\n  useEffect(() => {\n    console.log(\"Creator Studio fetchInstructors\")\n  const fetchInstructors = async () => {\n    let userId = null;\n    if (\n      JSON.parse(localStorage.getItem('userInfo')) &&\n      JSON.parse(localStorage.getItem('userInfo')).UserId\n    ) {\n      userId = JSON.parse(localStorage.getItem('userInfo')).UserId;\n    }\n    if (!userId) {\n      console.log('User not found');\n      alert('User not found');\n      return;\n    }\n\n    const instructorRef = collection(db, COLLECTIONS.INSTRUCTORS);\n    const q = query(instructorRef, where('createdBy', '==', userId));\n    const querySnapshot = await getDocs(q);\n    \n    const instructorsList = [];\n    querySnapshot.forEach((doc) => {\n      instructorsList.push({\n        id: doc.id,\n        name: doc.data().name,      \n      });\n    });\n    console.log(\"Hiii\", instructorsList)\n    setInstructors(instructorsList);\n  };\n\n  fetchInstructors();\n  }, []);\n\n \n  useEffect(() => {\n    console.log(\"Creator Studio getStudioCreated\")\n    const getStudioCreated = async ()=>{\n      const q = query(collection(db, COLLECTIONS.STUDIO), where(\"UserId\", \"==\", JSON.parse(localStorage.getItem('userInfo')).UserId)    );\n      console.log(\"Hiiii\",JSON.parse(localStorage.getItem('userInfo')).UserId)\n      const querySnapshot = await getDocs(q);\n      console.log(\"Studios : \",querySnapshot)\n      const studiosOfUser = querySnapshot.docs.filter(doc => doc.data().studioName).map(doc => \n        { const data = doc.data();\n          return {\n            id: doc.id, // Include the document ID in the data\n            ...data\n          };\n      });\n      localStorage.setItem(\"StudioCreated\", JSON.stringify(studiosOfUser));\n      setStudio(studiosOfUser);\n      setStudioId(studiosOfUser.map((studio) => (String(studio.studioName) + \" :\" + String(studio.id))));\n      console.log(studio)\n      console.log(\"studioId\",studioId)\n    };\n      \n      getStudioCreated();\n    },[setStudio]);\n \n  useEffect(() => {\n    console.log(\"Creator Studio setStudioId\")\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser = JSON.parse(localStorage.getItem('StudioCreated')) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map((studio) => `${studio.studioName} : ${studio.id}`);\n    setStudioId(studioIdList);\n\n    console.log(\"studio:\", studio);\n    console.log(\"studioId\", studioId);\n  }, [setStudioId]);\n\n  console.log(\"studio :\",studio)\n  return (\n    <div>\n      <br></br>\n      {isCreator?(\n        \n       <>\n       <Box sx={{ width: '100%', typography: 'body1' }}>\n      <TabContext value={value}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <TabList style={{color: isDarkModeOn ? 'white' : 'black'}} onChange={handleChange} aria-label=\"lab API tabs example\">\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Add Studio\" value=\"1\" />\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Update Studio\" value=\"2\" />\n          \n          </TabList>\n        </Box>\n        <TabPanel value=\"1\">\n\n        <StudioAdd instructors={instructors} />\n        </TabPanel>\n        <TabPanel value=\"2\">\n        <>\n        <StudioUpdate\n                  studio={studio}\n                  setStudio={setStudio}\n                  instructors={instructors}\n                  studioId={studioId}\n                  setStudioId={setStudioId}\n                />\n        </>\n    \n        </TabPanel>\n        \n      </TabContext>\n    </Box>\n      </>\n      ):\"\"}\n \n      <h3 style={{color: isDarkModeOn ? 'white' : 'black'}}>Your Studios:</h3>\n       <ul>\n      <Row xs={1} md={3} lg={4} className=\"g-4\">\n        {studio.length > 0 ? (\n          studio.map((studio, index) => (\n            <Col key={index}>\n              <a href={`#/studio/${studio.studioId}`} style={{ textDecoration: \"none\" }}>\n                <CardSliderCard studio={studio}/>\n              </a>\n          </Col>\n          ))\n        ) : (\n          <p style={{color: isDarkModeOn ? 'white' : 'black'}}>No studio yet!</p>\n        )}\n      </Row>\n      <br/>\n      </ul>\n    </div>\n  )\n}\nexport default CreatorStudio","import { FaSnowflake, FaWifi, FaTint, FaToilet, FaPlug, FaFireExtinguisher, FaFirstAid, FaVideo, FaCreditCard, FaParking  } from 'react-icons/fa';\n\nexport const STATUSES = {\n    SUBMITTED: \"Submitted\",\n    UNDER_REVIEW: \"Under Review\",\n    REVIEWED: \"Reviewed\",\n    VERIFIED: \"Verified\",\n    VERIFICATION_FAILED: \"Verification Failed\",\n};\n\nexport const DRAFT_COLLECTIONS = {\n    DRAFT_STUDIOS: 'DraftStudios',\n    DRAFT_WORKSHOPS: 'DraftWorkshops',\n    DRAFT_OPEN_CLASSES: 'DraftOpenClasses',\n    DRAFT_COURSES: 'DraftCourses'\n};\n\nexport const LEVELS = {\n    ALL : \"All\",\n    BEGINNERS : \"Beginner\", \n    INTERMEDIATE :\"Intermediate\", \n    ADVANCED :\"Advanced\"\n}\nexport const ENTITY_FLAG = {\n    INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR : 30,\n    WORKSHOPS_BOOKING_LIMIT : 10,\n    OPEN_CLASSES_BOOKING_LIMIT : 2,\n    COURSES_BOOKING_LIMIT : 10,\n}\n\n\nexport const SERVER_URLS = {\n    PROD : 'https://nrityaserver-2b241e0a97e5.herokuapp.com/',\n    LOCAL : 'http://127.0.0.1:8000/'\n}\n\nexport const COLORS = {\n    GREEN: { backgroundColor: \"#28a745\", color: \"#fff\" },     // Green background, white text\n    BLUE: { backgroundColor: \"#007bff\", color: \"#fff\" },      // Blue background, white text\n    YELLOW: { backgroundColor: \"#ffc107\", color: \"#000\" },    // Yellow background, black text\n    RED: { backgroundColor: \"#dc3545\", color: \"#fff\" },       // Red background, white text\n    PURPLE: { backgroundColor: \"#6f42c1\", color: \"#fff\" },    // Purple background, white text\n    ORANGE: { backgroundColor: \"#fd7e14\", color: \"#fff\" },    // Orange background, white text\n    TEAL: { backgroundColor: \"#20c997\", color: \"#fff\" },      // Teal background, white text\n    PINK: { backgroundColor: \"#e83e8c\", color: \"#fff\" },      // Pink background, white text\n    GRAY: { backgroundColor: \"#6c757d\", color: \"#fff\" },       // Gray background, white text\n\n    LIGHTBLUE: { backgroundColor: \"#17a2b8\", color: \"#fff\" }, // Light blue background, white text\n    DARKBLUE: { backgroundColor: \"#343a40\", color: \"#fff\" },  // Dark blue background, white text\n    CYAN: { backgroundColor: \"#00bcd4\", color: \"#fff\" },      // Cyan background, white text\n    INDIGO: { backgroundColor: \"#6610f2\", color: \"#fff\" },    // Indigo background, white text\n    LIME: { backgroundColor: \"#cddc39\", color: \"#000\" },      // Lime background, black text\n    AMBER: { backgroundColor: \"#ffca28\", color: \"#000\" },     // Amber background, black text\n    BROWN: { backgroundColor: \"#795548\", color: \"#fff\" },     // Brown background, white text\n    LIGHTGREEN: { backgroundColor: \"#8bc34a\", color: \"#000\" },// Light green background, black text\n    DEEPPURPLE: { backgroundColor: \"#673ab7\", color: \"#fff\" },// Deep purple background, white text\n    DEEPORANGE: { backgroundColor: \"#ff5722\", color: \"#fff\" },// Deep orange background, white text\n    BLACK: { backgroundColor: \"#000000\", color: \"#fff\" },     // Black background, white text\n    WHITE: { backgroundColor: \"#ffffff\", color: \"#000\" },     // White background, black text\n    SILVER: { backgroundColor: \"#c0c0c0\", color: \"#000\" },    // Silver background, black text\n    GOLD: { backgroundColor: \"#ffd700\", color: \"#000\" },      // Gold background, black text\n    NAVY: { backgroundColor: \"#001f3f\", color: \"#fff\" },      // Navy background, white text\n    OLIVE: { backgroundColor: \"#3d9970\", color: \"#fff\" },     // Olive background, white text\n\n  };\n\nexport const CHIP_LEVELS_DESIGN = {\n    [LEVELS.ALL]: COLORS.GREEN,           // Green background, white text\n    [LEVELS.BEGINNERS]: COLORS.BLUE,     // Blue background, white text\n    [LEVELS.INTERMEDIATE]: COLORS.YELLOW,  // Yellow background, black text\n    [LEVELS.ADVANCED]: COLORS.RED      // Red background, white text\n  };\n  \n\n  \nexport const danceStylesColorChips = [COLORS.PURPLE,COLORS.ORANGE,COLORS.TEAL,COLORS.LIME]\n\nexport const COLLECTIONS = {\n    USER: \"User\",\n    USER_KYC:\"UserKyc\",\n    ADMIN:\"Admin\",\n    REVIEWS: \"Reviews\",\n    TRANSACTIONS: \"Transactions\",\n    STUDIO: \"Studio\",\n    INSTRUCTORS: \"Instructors\",\n    FREE_TRIAL_BOOKINGS:\"FreeTrialBookings\",\n    WORKSHOPS: 'Workshops',\n    OPEN_CLASSES: 'OpenClasses',\n    COURSES: 'Courses',\n    BOOKINGS: 'Bookings',\n}\n\nexport const STORAGES ={\n    STUDIOIMAGES:'StudioImages',\n    STUDIOICON:'StudioIcon',\n    STUDIOANNOUNCEMENTS :'StudioAnnouncements',\n    USERIMAGE:'UserImage',\n    INSTRUCTORIMAGES: 'InstructorImages',\n    WORKSHOPICON :\"WorkshopIcon\",\n    WORKSHOPIMAGES :\"WorkshopImages\",\n    OPENCLASSICON :\"OpenClassIcon\",\n    COURSEICON :\"CourseIcon\",\n    CREATORS_KYC_DOCUMENTS :\"CreatorKycDocuments\"\n}\n\nexport const SEARCH_FILTERS ={\n    DANCEFORMS:'danceforms',\n    DISTANCES:'distances',\n}\n\nexport const BASEURL_DEV = \"http://127.0.0.1:8000/\"\nexport const BASEURL_PROD= \"https://nrityaserver-2b241e0a97e5.herokuapp.com/\"\n\nexport const AMENITIES_ICONS = {\n    \"AC\": <FaSnowflake />,\n    \"Free Wifi\": <FaWifi />,\n    \"RO Water\": <FaTint />,\n    \"Toilet\": <FaToilet />,\n    \"Power Backup\": <FaPlug />,\n    \"Fire Extinguisher\": <FaFireExtinguisher />,\n    \"First Aid Kit\": <FaFirstAid />,\n    \"CCTV Camera\": <FaVideo />,\n    \"Card Payment\": <FaCreditCard />,\n    \"Parking Space\": <FaParking />,\n};\n\n","import { COLORS, SERVER_URLS,BASEURL_DEV,BASEURL_PROD } from \"../constants\";\n\nexport async function postData(dbPayload, collection_name, notify, metadata) {\n  const BASEURL = BASEURL_PROD;\n  const endpoint = 'crud/newEntity/'; // Define your endpoint here\n  const authToken = localStorage.getItem(\"authToken\");\n  try {\n    const response = await fetch(BASEURL + endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        data: dbPayload,\n        collection_name: collection_name,\n        notify: notify,\n        metadata : metadata,\n      }),\n    });\n\n    if (!response.ok) {\n      console.log('Error in postData:', response);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response;\n  } catch (error) {\n    console.error('Error in postData:', error);\n    throw error;\n  }\n}\n\n\nexport const getRandomColor = () => {\n  const colorKeys = Object.keys(COLORS);\n  const randomKey = colorKeys[Math.floor(Math.random() * colorKeys.length)];\n  return COLORS[randomKey];\n};\n\nexport const bookEntity = async (bookingData) => {\n  const url = `${SERVER_URLS.PROD}bookings/bookEntity/`; \n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        userId: bookingData.userId,\n        entityType: bookingData.entityType,\n        entityId: bookingData.entityId,\n        associatedStudioId: bookingData.associatedStudioId,\n        emailLearner: bookingData.emailLearner,\n        personsAllowed: bookingData.personsAllowed,\n        pricePerPerson: bookingData.pricePerPerson,\n      })\n    });\n\n    const result = await response.json();\n    \n    if (response.ok) {\n      console.log('Booking successful:', result);\n      return result;  // Return the successful result\n    } else {\n      console.error('Booking failed:', result);\n      return result;  // Return null or an error message\n    }\n    \n  } catch (error) {\n    console.error('Error occurred while booking:', error);\n    return null;  // Return null or an error message\n  }\n};\n\n\n// Function to decode a Unicode (UTF-8) encoded string back to the original text\nexport const decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nexport const convertToHtmlEntities= (text) =>{\n  return text.replace(/[\\u00A0-\\u9999<>\\&]/gim, function(i) {\n      return '&#' + i.charCodeAt(0) + ';';\n  });\n}\n\nexport const getYoutubeVideoId = (link)=> {\n  console.log(\"MediaDisplay\", link)\n  if (!link){\n    return null\n  }\n  const text = link.trim();\n  const youtubeRegExp = /(?:https?:\\/\\/)?(?:www\\.|m\\.)?(?:youtube\\.com\\/(?:watch\\?v=|embed\\/|v\\/|shorts\\/)|youtu\\.be\\/)([\\w\\-]+)/;\n  const match = text.match(youtubeRegExp);\n  let videoId = null;\n\n  if (match) {\n    videoId = match[1];\n  }\n  console.log(\"MediaDisplay\", videoId)\n  return videoId\n}\n\nexport const gradientStyles = [\n  { background: 'linear-gradient(to bottom right, #FFD700, #FFA500)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #00BFFF, #1E90FF)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #32CD32, #008000)', color: 'white' },\n  { background: 'linear-gradient(to bottom right, #FFA500, #FF4500)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #DC143C, #8B0000)', color: 'white' },\n  { background: 'linear-gradient(to bottom right, #000000, #2F4F4F)', color: 'white' },\n];","import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, query, getDocs, where, getCountFromServer } from 'firebase/firestore';\nimport { db } from '../config';\nimport {ref,listAll,getDownloadURL,uploadBytes, deleteObject, uploadBytesResumable  } from \"firebase/storage\";\nimport { storage } from '../config';\nimport { COLLECTIONS } from '../constants';\nimport secureLocalStorage from 'react-secure-storage';\n\nexport const setCreatorMode = async (uid) => {\n  console.log(\"creatorMode uid\",uid)\n  try{\n  const userRef = doc(db, COLLECTIONS.USER, uid);\n  const userSnap = await getDoc(userRef);\n  if (userSnap.exists()) {\n    if(userSnap.data() != null){\n      const mode = userSnap.data().CreatorMode\n      console.log(\"setCreatorMode: Is User a creator?\",mode)\n      secureLocalStorage.setItem('CreatorMode', mode);\n        \n    }else{\n      console.log(\"userSnap.data() null\")\n      \n    }\n  } else {\n    console.log(\"User not found\");\n  }\n  }catch(error){\n    console.log(\" error\",error);\n  }\n}\n\nexport const getCreatorMode = async () => {\n  try{\n    const mode = secureLocalStorage.getItem('CreatorMode');\n    console.log(\"getCreatorMode \",mode)\n    if (mode){\n      return mode\n    }else{\n      return false\n    }\n  } \n  catch(error){\n    console.log(\" error\");\n    return false\n  }\n}\n\n// Read operation with image URL\nexport const readDocumentWithImageUrl = async (collectionName, productId) => {\n    console.log(\"Debug \",`${collectionName}/${productId}`)\n    const storagePath = `${collectionName}/${productId}`;\n    const folderRef = ref(storage,storagePath);\n    try {\n        const result = await listAll(folderRef);\n        if (result.items.length > 0) {\n            const firstFileRef = result.items[0];\n            const url = await getDownloadURL(firstFileRef);\n            console.log('Debug URL:', url);\n            return url;\n          } else {\n            console.log('Debug No files found in the folder.');\n            return null;\n          }\n    } catch (error) {\n      console.error('Error getting image URL:', error);\n      return null;\n    }\n  };\n\n// Read operation\nexport const readDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    const docSnapshot = await getDoc(docRef);\n    return docSnapshot.exists() ? docSnapshot.data() : null;\n};\n\n// Create or Update operation\nexport const saveDocument = async (collectionName, documentId, data) => {\n    const docRef = doc(db, collectionName, documentId);\n    await setDoc(docRef, data, { merge: true });\n    return data;\n};\n\n\nexport const handleSavePostOTPSuccess = async (collectionName, documentId, phoneNumber) => {\n  const docRef = doc(db, collectionName, documentId);\n  await updateDoc(docRef, {isPhoneNumberVerified:true,phoneNumber});\n  return true;\n};\n\n// Update specific fields in a document\nexport const updateDocumentFields = async (collectionName, documentId, fields) => {\n    const docRef = doc(db, collectionName, documentId);\n    await updateDoc(docRef, fields);\n    return { id: documentId, ...fields };\n};\n\n// Delete operation\nexport const deleteDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    await deleteDoc(docRef);\n    return { id: documentId };\n};\n\n// Query operation\nexport const queryDocuments = async (collectionName, conditions) => {\n    const q = query(collection(db, collectionName, conditions));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const queryDocumentsCount = async (collectionName,field,operation,value) => {\n    console.log(\"Hiii \",collectionName,field,operation,value)\n    const q = query(collection(db, collectionName), where(field,operation,value));\n    const snapshot = await getCountFromServer(q);\n    return snapshot.data().count;\n};\n\n\n  // Function to delete all images in a folder\nexport  const deleteAllImagesInFolder = async (storageFolder, entityId) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n    // Function to delete all images in a folder\n  export  const deleteAllImagesInFolder2 = async (storageFolder, entityId,subfolder) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}/${subfolder}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n  // Function to delete images\nexport const deleteImages = async (storageFolder,imagesToDelete,entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Deletes specific images associated with the given entityId.\n\n    Args:\n      imagesToDelete <array>: An array of image objects to be deleted.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n    const total = imagesToDelete.length;\n    let done = 0;\n    await Promise.all(imagesToDelete.map(async (file) => {\n      let folderPath = `${storageFolder}/${entityId}/${file.filename}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}/${file.filename}`;\n      }\n      const fileRefToDelete = ref(storage, folderPath);\n      await deleteObject(fileRefToDelete);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  // Function to upload new images\nexport const uploadImages = async (storageFolder, newImages, entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n\n    Args:\n      newImages <array>: An array of new image objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n   console.log(storageFolder,entityId)\n   const total = newImages.length;\n    let done = 0;\n    await Promise.all(newImages.map(async (newFileData) => {\n      let folderPath = `${storageFolder}/${entityId}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n      }\n      const fileRef = ref(storage, `${folderPath}/${newFileData.file.name}`);\n      await uploadBytes(fileRef, newFileData.file);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  export const uploadImages2 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    uploadBytesResumable(storageRef, newImages).then((snapshot) => {\n      console.log('Uploaded a blob or file!');\n    });\n  };\n\n  export const uploadImages3 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n        });\n      }\n    );\n    \n  };\n\n\n  export const uploadImages4 = async (storageFolder, newImages, entityId, thirdFolder = null, onProgress, onComplete) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages,newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const totalBytes = snapshot.totalBytes;\n        const bytesTransferred = snapshot.bytesTransferred;\n        const progress = totalBytes > 0 ? ((bytesTransferred / totalBytes) * 100).toFixed(2) : -1;\n        onProgress(progress);\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n          onComplete(downloadURL);\n        });\n\n      }\n    );\n    \n  };\n\n\n export const uploadOneImageAndGetURL = async (storageFolder, file, entityId) => {\n    try {\n      const folderPath = `${storageFolder}/${entityId}/${file.name}`;\n      console.log(folderPath)\n      const fileRef = ref(storage, folderPath);\n      \n      await uploadBytes(fileRef, file);\n  \n      const imageUrl = await getDownloadURL(fileRef);\n      console.log(imageUrl)\n      return imageUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error; \n    }\n  };\n  \n  export const getAllFilesFromFolder = async (storageFolder) => {\n    const folderPath = `${storageFolder}`;\n    const folderRef = ref(storage, folderPath);\n    \n    try {\n        const fileList = await listAll(folderRef);\n\n        const imageUrlsComprehensive = await Promise.all(\n          fileList.items.map(async (fileRef) => {\n            const downloadURL = await getDownloadURL(fileRef);\n  \n            return {\n              id: fileRef.name,\n              filename: fileRef.name,\n              fileURL: downloadURL,\n            };\n          })\n        );\n\n        // return imageUrls;\n        return imageUrlsComprehensive\n    } catch (error) {\n        console.error('Error retrieving images:', error);\n        throw error;\n    }\n};\n\n"],"names":["_ref","studio","_jsx","href","id","children","NStudioCard","data","img_src","ImageUpload","entityId","storageFolder","title","maxImageCount","updateMode","disable","useSnackbar","selectedFiles","setSelectedFiles","useState","uploadedFiles","setUploadedFiles","newFiles","setNewFiles","deletedFiles","setDeletedFiles","isDarkModeOn","useSelector","selectDarkModeStatus","progressDelete","setProgressDelete","progressUpdate","setProgressUpdate","console","log","filesizes","bytes","decimals","arguments","length","undefined","dm","i","Math","floor","parseFloat","pow","toFixed","useEffect","fetchStudioImages","truncatedFiles","slice","alert","calculateDelta","selectedFileIds","map","file","uploadedFileIds","imagesToDelete","filter","includes","newImages","async","folderPath","folderRef","ref","storage","fileList","listAll","files","Promise","all","items","downloadURL","getDownloadURL","fileRef","name","filename","fileURL","error","className","style","display","width","justifyContent","flex","_jsxs","backgroundColor","STORAGES","STUDIOIMAGES","type","onChange","e","Array","from","target","updatedFiles","forEach","reader","FileReader","onloadend","push","shortid","filetype","fileimage","result","datetime","lastModifiedDate","toLocaleString","filesize","size","prevFiles","readAsDataURL","multiple","position","Card","sx","maxWidth","match","src","alt","maxHeight","objectFit","IconButton","disabled","onClick","window","confirm","fileToDelete","find","prevDeletedFiles","handleDeleteSelectedFile","top","right","DeleteIcon","color","CardContent","deleteAllImagesInFolder","uploadImages","deleteImages","hidden","value","max","defaultProps","studioId","cardStyle","padding","marginRight","boxShadow","transition","variant","transform","AspectRatio","ratio","iconUrl","loading","height","overflow","Stack","direction","spacing","bottom","left","danceStyles","split","form","index","Chip","marginBottom","fontSize","bgcolor","danceStylesColorChips","trim","paddingTop","freeTrialAvailable","marginLeft","COLORS","LIME","Link","fontWeight","textColor","underline","overlay","studioName","Typography","level","street","zIndex","borderRadius","Favorite","avgRating","minFee","_defaultTime$split$","show","handleClose","handleSelect","defaultTime","startTime_i","endTime_i","renderTimeOptions","defaultValue","timeOptions","generateTimeOptions","options","option_AM","option_PM","hours","minutes","formattedHours","toString","padStart","formattedMinutes","timeString","formattedHours12","_Fragment","option","Modal","onHide","Header","closeButton","Title","Body","Row","Col","Form","Group","Label","Control","as","lineHeight","Footer","Button","daysOfWeek","categoryMap","Kids","Adults","Women_Only","Men_Only","Seniors","All","Couples","Families","tableData","setTableData","instructorNamesWithIds","showTimePicker","setShowTimePicker","selectedRowIndex","setSelectedRowIndex","selectedRow","setSelectedRow","danceStylesOptions","setDefaultTime","handleTableChange","field","prevData","isArray","join","newData","handleTimePickerClose","handleTimeSelect","startTime","endTime","currentTime","time","currentStartTime","currentEndTime","Table","bordered","border","textAlign","minWidth","handleAddRow","danceForms","days","instructors","fee","status","freeTrial","classCategory","FaPlus","row","_tableData$selectedRo","MultiSelect","day","event","placeholder","maxSelectedLabels","handleTimePickerOpen","TimeRangePicker","Autocomplete","_","values","renderInput","params","TextField","Object","key","selectedKeys","keys","splice","handleRemoveRow","FaMinus","libraries","PinMarker","FaMapMarkerAlt","selectedLocation","setSelectedLocation","center","setCenter","lat","lng","address","setAddress","apiKey","LoadScript","googleMapsApiKey","PlacesAutocomplete","newAddress","onSelect","results","geocodeByAddress","selectedAddress","latLng","getLatLng","_ref2","getInputProps","suggestions","getSuggestionItemProps","suggestion","active","description","GoogleMapReact","bootstrapURLKeys","defaultCenter","defaultZoom","_ref3","text","StudioId","jsx","encodeToUnicode","utf8Encoded","TextEncoder","encode","String","fromCharCode","newStudioId","setNewStudioId","selectedInstructors","setSelectedInstructors","selectedDanceStyles","setSelectedDanceStyles","selectedAmenities","setSelectedAmenities","instructor","isReady","setIsReady","isSubmitting","setIsSubmitting","locationOptions","indianCities","amenityKeys","AMENITIES_ICONS","activeStep","setActiveStep","handleNext","prevActiveStep","handleBack","darkTheme","createTheme","palette","mode","document","getElementById","q","query","collection","db","DRAFT_COLLECTIONS","DRAFT_STUDIOS","where","JSON","parse","localStorage","getItem","UserId","querySnapshot","getDocs","empty","addDoc","aboutStudio","founderName","aboutFounder","mobileNumber","whatsappNumber","mailAddress","numberOfHalls","maximumOccupancy","instructorsNames","buildingName","city","landmark","pincode","state","country","geolocation","aadharNumber","gstNumber","enrolledId","reviews","author","displayName","isPremium","addAmenities","enrollmentProcess","creatorEmail","email","instagram","facebook","youtube","twitter","visibilty","studios","doc","foundStudio","unicodeString","c","charCodeAt","TextDecoder","decode","Uint8Array","decodeUnicode","main","intervalId","studioRef","setInterval","reduce","accumulator","current","updateDoc","err","clearInterval","Stepper","alternativeLabel","label","Step","StepLabel","onSubmit","preventDefault","_JSON$parse","currentUserEmail","studioData","notifyEmails","metaData","entity_name","response","postData","COLLECTIONS","STUDIO","ok","json","deleteDoc","resetDraft","controlId","md","rows","minHeight","minheight","ThemeProvider","theme","CssBaseline","handleDanceStylesChange","xs","MuiButton","handleInstructorChange","rel","textDecoration","overflowX","whiteSpace","scrollbarColor","StudioTable","handleAmentiesChange","MapsInput","LinearProgress","STUDIOICON","alignItems","SuccessMessage","message","timeOfDisplay","fontStyle","showAlert","setShowAlert","timer","setTimeout","clearTimeout","Container","Alert","marginTop","onClose","dismissible","setStudio","setStudioId","selectedStudio","setSelectedStudio","selectedStudioId","setSelectedStudioId","selectedStudioFrozenClassRows","setSelectedStudioFrozenClassRows","showUpdateSuccessAlert","setShowUpdateSuccessAlert","showUpdateErrorAlert","setShowUpdateErrorAlert","studiosOfUser","studioIdList","maxIndex","Number","nameIdLocal","nameId","indexOfColon","lastIndexOf","substring","reset","selectedId","pop","studioDoc","getDoc","exists","loc","studioItem","newCity","prevState","handleAmenitiesChange","newRowKey","rowKey","_tableData$index","_tableData$index2","STUDIOANNOUNCEMENTS","AlertPopup","setInstructors","isCreator","setIsCreator","premiumTill","setPremiumTill","currentUser","useAuth","setValue","React","userRef","uid","userSnap","CreatorMode","getCreatorMode","userId","instructorRef","INSTRUCTORS","instructorsList","fetchInstructors","docs","setItem","stringify","getStudioCreated","Box","typography","TabContext","borderBottom","borderColor","TabList","handleChange","newValue","Tab","TabPanel","StudioAdd","StudioUpdate","lg","CardSliderCard","STATUSES","SUBMITTED","UNDER_REVIEW","REVIEWED","VERIFIED","VERIFICATION_FAILED","DRAFT_WORKSHOPS","DRAFT_OPEN_CLASSES","DRAFT_COURSES","LEVELS","ALL","BEGINNERS","INTERMEDIATE","ADVANCED","ENTITY_FLAG","INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR","WORKSHOPS_BOOKING_LIMIT","OPEN_CLASSES_BOOKING_LIMIT","COURSES_BOOKING_LIMIT","SERVER_URLS","PROD","LOCAL","GREEN","BLUE","YELLOW","RED","PURPLE","ORANGE","TEAL","PINK","GRAY","LIGHTBLUE","DARKBLUE","CYAN","INDIGO","AMBER","BROWN","LIGHTGREEN","DEEPPURPLE","DEEPORANGE","BLACK","WHITE","SILVER","GOLD","NAVY","OLIVE","CHIP_LEVELS_DESIGN","USER","USER_KYC","ADMIN","REVIEWS","TRANSACTIONS","FREE_TRIAL_BOOKINGS","WORKSHOPS","OPEN_CLASSES","COURSES","BOOKINGS","USERIMAGE","INSTRUCTORIMAGES","WORKSHOPICON","WORKSHOPIMAGES","OPENCLASSICON","COURSEICON","CREATORS_KYC_DOCUMENTS","BASEURL_PROD","FaSnowflake","FaWifi","FaTint","FaToilet","FaPlug","FaFireExtinguisher","FaFirstAid","FaVideo","FaCreditCard","FaParking","dbPayload","collection_name","notify","metadata","BASEURL","authToken","fetch","method","headers","body","Error","bookEntity","url","bookingData","entityType","associatedStudioId","emailLearner","personsAllowed","pricePerPerson","getYoutubeVideoId","link","videoId","setCreatorMode","secureLocalStorage","readDocumentWithImageUrl","collectionName","productId","storagePath","firstFileRef","readDocument","documentId","docRef","docSnapshot","saveDocument","setDoc","merge","handleSavePostOTPSuccess","phoneNumber","isPhoneNumberVerified","updateDocumentFields","fields","queryDocumentsCount","operation","getCountFromServer","count","deleteObject","deleteAllImagesInFolder2","subfolder","setProgress","thirdFolder","total","done","fileRefToDelete","newFileData","uploadBytes","uploadImages4","onProgress","onComplete","storageRef","uploadTask","uploadBytesResumable","on","snapshot","totalBytes","bytesTransferred","progress","code","then","getAllFilesFromFolder"],"sourceRoot":""}