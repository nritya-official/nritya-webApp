{"version":3,"file":"static/js/1701.e81c0037.chunk.js","mappings":"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","sources":["Components/CardSliderCard.js","Components/NStudioCard.js","constants.js","utils/firebaseUtils.js"],"sourcesContent":["import React from 'react';\nimport NStudioCard from './NStudioCard';\n\nconst CardSliderCard = ({ studio }) => {\n  return (\n    <a href={`#/studio/${studio.id}`}>\n    <NStudioCard data={studio} img_src={\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}/>\n    </a>\n\n  );\n};\n\nexport default CardSliderCard;\n","\nimport React from 'react';\nimport AspectRatio from '@mui/joy/AspectRatio';\nimport Card from '@mui/joy/Card';\nimport CardContent from '@mui/joy/CardContent';\nimport Chip from '@mui/joy/Chip';\nimport Link from '@mui/joy/Link';\nimport Typography from '@mui/joy/Typography';\nimport { Stack } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport { CHIP_LEVELS_DESIGN, COLORS, danceStylesColorChips } from '../constants';\nimport IconButton from '@mui/joy/IconButton';\nimport Favorite from '@mui/icons-material/Favorite';\n\n\nexport default function NStudioCard({img_src,data}) {\n    const isDarkModeOn = useSelector(selectDarkModeStatus);\n    \n    const studioId = data.id?data.id:data.studioId;\n\n    const cardStyle = {\n      backgroundColor: isDarkModeOn ? '#444' : 'white',\n      padding: '0px',\n      color: isDarkModeOn ? 'white' : 'black',\n      marginRight: \"10px\",\n      width: 320,\n      maxWidth: \"100%\",\n      boxShadow: 'lg',\n      transition: 'opacity 0.3s ease',\n    };\n  \n    const cardHoverStyle = {\n      transform: 'scale(1.01)',\n    };\n  \n  return (\n    <Card variant=\"solid\" sx={{\n      ...cardStyle,\n      '&:hover': cardHoverStyle,\n    }}>\n      \n        <AspectRatio ratio=\"1.78\" style={{ position: 'relative'}}>\n          <img\n            src={data && data.iconUrl ? data.iconUrl :\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}\n            loading=\"lazy\"\n            alt=\"Studio Image\"\n            style={{ maxWidth: '100%', height: 'auto', overflow: 'hidden' }}\n            \n          />\n          <Stack direction=\"row\" spacing={2} style={{ position: 'absolute', bottom: 0, left: 0, padding: '1px' }}>\n        {data && data.danceStyles && typeof data.danceStyles === 'string' ? (data.danceStyles.split(\",\").slice(0, 3).map((form, index) => (\n        <Chip\n            key={index}\n            color={index % 2 === 0 ? \"danger\" : \"success\"}  \n            sx={{ marginBottom: \"10px\", fontSize: '0.8rem',  \n                    bgcolor: danceStylesColorChips[index].backgroundColor,\n                    color: danceStylesColorChips[index].color, \n            }}\n        >\n            {form.trim()}\n        </Chip>\n        ))):(\n            <Chip\n            key={10}\n            color={10 % 2 === 0 ? \"danger\" : \"success\"} \n            style={{ marginBottom: \"10px\", fontSize: '0.8rem' }}\n        >\n            {\"No danceforms\"}\n        </Chip>\n        )}\n\n        </Stack>\n\n        <Stack\n            direction=\"row\"\n            spacing={2}\n            style={{ position: \"absolute\", top: 0, left: 0, padding: \"1px\", paddingTop: \"1px\" }}\n          >\n            {data && data.freeTrialAvailable &&(\n            \n                <Chip\n                  key={1}\n                 \n                  sx={{\n                    marginLeft: \"10px\",\n                    marginBottom: \"10px\",\n                    fontSize: \"0.8rem\",\n                    bgcolor: COLORS.LIME.backgroundColor,  // Set the background color\n                    color: COLORS.LIME.color,  // Set the text color\n                  }}\n                >\n                  {'Free Trial Available'}\n                </Chip>\n              \n            )}\n          </Stack>\n\n        </AspectRatio>\n      <CardContent style={{padding:'10px'}}>\n        <Link\n          href={`#/studio/${studioId}`}\n          fontWeight=\"bold\"\n          color=\"neutral\"\n          textColor=\"text.primary\"\n          underline='none'\n          overlay\n          style={{color: isDarkModeOn?'white':'black'}}\n        >\n          {data && data.studioName?data.studioName:\"    \"}\n        </Link>\n        <Typography style={{color: isDarkModeOn?'white':'black'}} level=\"body-xs\">{data.street?data.street:\".  \"}</Typography>\n        <IconButton\n          hidden\n          aria-label=\"Like minimal photography\"\n          size=\"md\"\n          variant=\"solid\"\n          color=\"danger\"\n          sx={{\n            position: 'absolute',\n            zIndex: 2,\n            borderRadius: '50%',\n            right: '1rem',\n            bottom: '2rem',\n            transform: 'translateY(50%)',\n          }}\n        >\n          <Favorite />\n        </IconButton>\n        <Typography style={{color: isDarkModeOn ? 'white' : 'black'}}>\n            <span>⭐ {data && data.avgRating ? data.avgRating.toFixed(1) : \"Not rated yet\"}</span>\n            {data && data.minFee && (\n              <span style={{position: \"absolute\", right: 2}}>  Starts @₹{data.minFee}</span>\n            )}\n          </Typography>\n\n      </CardContent>\n    </Card>\n  );\n}","import { FaSnowflake, FaWifi, FaTint, FaToilet, FaPlug, FaFireExtinguisher, FaFirstAid, FaVideo, FaCreditCard, FaParking  } from 'react-icons/fa';\n\nexport const STATUSES = {\n    SUBMITTED: \"Submitted\",\n    UNDER_REVIEW: \"Under Review\",\n    REVIEWED: \"Reviewed\",\n    VERIFIED: \"Verified\",\n    VERIFICATION_FAILED: \"Verification Failed\",\n};\n\nexport const DRAFT_COLLECTIONS = {\n    DRAFT_STUDIOS: 'DraftStudios',\n    DRAFT_WORKSHOPS: 'DraftWorkshops',\n    DRAFT_OPEN_CLASSES: 'DraftOpenClasses',\n    DRAFT_COURSES: 'DraftCourses'\n};\n\nexport const LEVELS = {\n    ALL : \"All\",\n    BEGINNERS : \"Beginner\", \n    INTERMEDIATE :\"Intermediate\", \n    ADVANCED :\"Advanced\"\n}\nexport const ENTITY_FLAG = {\n    INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR : 30,\n    WORKSHOPS_BOOKING_LIMIT : 10,\n    OPEN_CLASSES_BOOKING_LIMIT : 2,\n    COURSES_BOOKING_LIMIT : 10,\n}\n\n\nexport const SERVER_URLS = {\n    CLOUD : process.env.REACT_APP_BACKEND_URL,\n    LOCAL : 'http://127.0.0.1:8000/'\n}\n\nexport const COLORS = {\n    GREEN: { backgroundColor: \"#28a745\", color: \"#fff\" },     // Green background, white text\n    BLUE: { backgroundColor: \"#007bff\", color: \"#fff\" },      // Blue background, white text\n    YELLOW: { backgroundColor: \"#ffc107\", color: \"#000\" },    // Yellow background, black text\n    RED: { backgroundColor: \"#dc3545\", color: \"#fff\" },       // Red background, white text\n    PURPLE: { backgroundColor: \"#6f42c1\", color: \"#fff\" },    // Purple background, white text\n    ORANGE: { backgroundColor: \"#fd7e14\", color: \"#fff\" },    // Orange background, white text\n    TEAL: { backgroundColor: \"#20c997\", color: \"#fff\" },      // Teal background, white text\n    PINK: { backgroundColor: \"#e83e8c\", color: \"#fff\" },      // Pink background, white text\n    GRAY: { backgroundColor: \"#6c757d\", color: \"#fff\" },       // Gray background, white text\n\n    LIGHTBLUE: { backgroundColor: \"#17a2b8\", color: \"#fff\" }, // Light blue background, white text\n    DARKBLUE: { backgroundColor: \"#343a40\", color: \"#fff\" },  // Dark blue background, white text\n    CYAN: { backgroundColor: \"#00bcd4\", color: \"#fff\" },      // Cyan background, white text\n    INDIGO: { backgroundColor: \"#6610f2\", color: \"#fff\" },    // Indigo background, white text\n    LIME: { backgroundColor: \"#cddc39\", color: \"#000\" },      // Lime background, black text\n    AMBER: { backgroundColor: \"#ffca28\", color: \"#000\" },     // Amber background, black text\n    BROWN: { backgroundColor: \"#795548\", color: \"#fff\" },     // Brown background, white text\n    LIGHTGREEN: { backgroundColor: \"#8bc34a\", color: \"#000\" },// Light green background, black text\n    DEEPPURPLE: { backgroundColor: \"#673ab7\", color: \"#fff\" },// Deep purple background, white text\n    DEEPORANGE: { backgroundColor: \"#ff5722\", color: \"#fff\" },// Deep orange background, white text\n    BLACK: { backgroundColor: \"#000000\", color: \"#fff\" },     // Black background, white text\n    WHITE: { backgroundColor: \"#ffffff\", color: \"#000\" },     // White background, black text\n    SILVER: { backgroundColor: \"#c0c0c0\", color: \"#000\" },    // Silver background, black text\n    GOLD: { backgroundColor: \"#ffd700\", color: \"#000\" },      // Gold background, black text\n    NAVY: { backgroundColor: \"#001f3f\", color: \"#fff\" },      // Navy background, white text\n    OLIVE: { backgroundColor: \"#3d9970\", color: \"#fff\" },     // Olive background, white text\n\n  };\n\nexport const CHIP_LEVELS_DESIGN = {\n    [LEVELS.ALL]: COLORS.GREEN,           // Green background, white text\n    [LEVELS.BEGINNERS]: COLORS.BLUE,     // Blue background, white text\n    [LEVELS.INTERMEDIATE]: COLORS.YELLOW,  // Yellow background, black text\n    [LEVELS.ADVANCED]: COLORS.RED      // Red background, white text\n  };\n  \n\n  \nexport const danceStylesColorChips = [COLORS.PURPLE,COLORS.ORANGE,COLORS.TEAL,COLORS.LIME]\n\nexport const COLLECTIONS = {\n    USER: \"User\",\n    USER_KYC:\"UserKyc\",\n    ADMIN:\"Admin\",\n    REVIEWS: \"Reviews\",\n    TRANSACTIONS: \"Transactions\",\n    STUDIO: \"Studio\",\n    INSTRUCTORS: \"Instructors\",\n    FREE_TRIAL_BOOKINGS:\"FreeTrialBookings\",\n    WORKSHOPS: 'Workshops',\n    OPEN_CLASSES: 'OpenClasses',\n    COURSES: 'Courses',\n    BOOKINGS: 'Bookings',\n}\n\nexport const STORAGES ={\n    STUDIOIMAGES:'StudioImages',\n    STUDIOICON:'StudioIcon',\n    STUDIOANNOUNCEMENTS :'StudioAnnouncements',\n    USERIMAGE:'UserImage',\n    INSTRUCTORIMAGES: 'InstructorImages',\n    WORKSHOPICON :\"WorkshopIcon\",\n    WORKSHOPIMAGES :\"WorkshopImages\",\n    OPENCLASSICON :\"OpenClassIcon\",\n    COURSEICON :\"CourseIcon\",\n    CREATORS_KYC_DOCUMENTS :\"CreatorKycDocuments\"\n}\n\nexport const SEARCH_FILTERS ={\n    DANCEFORMS:'danceforms',\n    DISTANCES:'distances',\n}\n\nexport const BASEURL_DEV = \"http://127.0.0.1:8000/\"\nexport const BASEURL_PROD= process.env.REACT_APP_BACKEND_URL\n\nexport const AMENITIES_ICONS = {\n    \"AC\": <FaSnowflake />,\n    \"Free Wifi\": <FaWifi />,\n    \"RO Water\": <FaTint />,\n    \"Toilet\": <FaToilet />,\n    \"Power Backup\": <FaPlug />,\n    \"Fire Extinguisher\": <FaFireExtinguisher />,\n    \"First Aid Kit\": <FaFirstAid />,\n    \"CCTV Camera\": <FaVideo />,\n    \"Card Payment\": <FaCreditCard />,\n    \"Parking Space\": <FaParking />,\n};\n\n","import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, query, getDocs, where, getCountFromServer } from 'firebase/firestore';\nimport { db } from '../config';\nimport {ref,listAll,getDownloadURL,uploadBytes, deleteObject, uploadBytesResumable  } from \"firebase/storage\";\nimport { storage } from '../config';\nimport { COLLECTIONS } from '../constants';\nimport secureLocalStorage from 'react-secure-storage';\n\nexport const setCreatorMode = async (uid) => {\n  console.log(\"creatorMode uid\",uid)\n  try{\n  const userRef = doc(db, COLLECTIONS.USER, uid);\n  const userSnap = await getDoc(userRef);\n  if (userSnap.exists()) {\n    if(userSnap.data() != null){\n      const mode = userSnap.data().CreatorMode\n      console.log(\"setCreatorMode: Is User a creator?\",mode)\n      secureLocalStorage.setItem('CreatorMode', mode);\n        \n    }else{\n      console.log(\"userSnap.data() null\")\n      \n    }\n  } else {\n    console.log(\"User not found\");\n  }\n  }catch(error){\n    console.log(\" error\",error);\n  }\n}\n\nexport const getCreatorMode = async () => {\n  try{\n    const mode = secureLocalStorage.getItem('CreatorMode');\n    console.log(\"getCreatorMode \",mode)\n    if (mode){\n      return mode\n    }else{\n      return false\n    }\n  } \n  catch(error){\n    console.log(\" error\");\n    return false\n  }\n}\n\n// Read operation with image URL\nexport const readDocumentWithImageUrl = async (collectionName, productId) => {\n    console.log(\"Debug \",`${collectionName}/${productId}`)\n    const storagePath = `${collectionName}/${productId}`;\n    const folderRef = ref(storage,storagePath);\n    try {\n        const result = await listAll(folderRef);\n        if (result.items.length > 0) {\n            const firstFileRef = result.items[0];\n            const url = await getDownloadURL(firstFileRef);\n            console.log('Debug URL:', url);\n            return url;\n          } else {\n            console.log('Debug No files found in the folder.');\n            return null;\n          }\n    } catch (error) {\n      console.error('Error getting image URL:', error);\n      return null;\n    }\n  };\n\n// Read operation\nexport const readDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    const docSnapshot = await getDoc(docRef);\n    return docSnapshot.exists() ? docSnapshot.data() : null;\n};\n\n// Create or Update operation\nexport const saveDocument = async (collectionName, documentId, data) => {\n    const docRef = doc(db, collectionName, documentId);\n    await setDoc(docRef, data, { merge: true });\n    return data;\n};\n\n\nexport const handleSavePostOTPSuccess = async (collectionName, documentId, phoneNumber) => {\n  const docRef = doc(db, collectionName, documentId);\n  await updateDoc(docRef, {isPhoneNumberVerified:true,phoneNumber});\n  return true;\n};\n\n// Update specific fields in a document\nexport const updateDocumentFields = async (collectionName, documentId, fields) => {\n    const docRef = doc(db, collectionName, documentId);\n    await updateDoc(docRef, fields);\n    return { id: documentId, ...fields };\n};\n\n// Delete operation\nexport const deleteDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    await deleteDoc(docRef);\n    return { id: documentId };\n};\n\n// Query operation\nexport const queryDocuments = async (collectionName, conditions) => {\n    const q = query(collection(db, collectionName, conditions));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const queryDocumentsCount = async (collectionName,field,operation,value) => {\n    console.log(\"Hiii \",collectionName,field,operation,value)\n    const q = query(collection(db, collectionName), where(field,operation,value));\n    const snapshot = await getCountFromServer(q);\n    return snapshot.data().count;\n};\n\n\n  // Function to delete all images in a folder\nexport  const deleteAllImagesInFolder = async (storageFolder, entityId) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n    // Function to delete all images in a folder\n  export  const deleteAllImagesInFolder2 = async (storageFolder, entityId,subfolder) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}/${subfolder}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n  // Function to delete images\nexport const deleteImages = async (storageFolder,imagesToDelete,entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Deletes specific images associated with the given entityId.\n\n    Args:\n      imagesToDelete <array>: An array of image objects to be deleted.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n    const total = imagesToDelete.length;\n    let done = 0;\n    await Promise.all(imagesToDelete.map(async (file) => {\n      let folderPath = `${storageFolder}/${entityId}/${file.filename}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}/${file.filename}`;\n      }\n      const fileRefToDelete = ref(storage, folderPath);\n      await deleteObject(fileRefToDelete);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  // Function to upload new images\nexport const uploadImages = async (storageFolder, newImages, entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n\n    Args:\n      newImages <array>: An array of new image objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n   console.log(storageFolder,entityId)\n   const total = newImages.length;\n    let done = 0;\n    await Promise.all(newImages.map(async (newFileData) => {\n      let folderPath = `${storageFolder}/${entityId}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n      }\n      const fileRef = ref(storage, `${folderPath}/${newFileData.file.name}`);\n      await uploadBytes(fileRef, newFileData.file);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  export const uploadImages2 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    uploadBytesResumable(storageRef, newImages).then((snapshot) => {\n      console.log('Uploaded a blob or file!');\n    });\n  };\n\n  export const uploadImages3 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n        });\n      }\n    );\n    \n  };\n\n\n  export const uploadImages4 = async (storageFolder, newImages, entityId, thirdFolder = null, onProgress, onComplete) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages,newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const totalBytes = snapshot.totalBytes;\n        const bytesTransferred = snapshot.bytesTransferred;\n        const progress = totalBytes > 0 ? ((bytesTransferred / totalBytes) * 100).toFixed(2) : -1;\n        onProgress(progress);\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n          onComplete(downloadURL);\n        });\n\n      }\n    );\n    \n  };\n\n\n export const uploadOneImageAndGetURL = async (storageFolder, file, entityId) => {\n    try {\n      const folderPath = `${storageFolder}/${entityId}/${file.name}`;\n      console.log(folderPath)\n      const fileRef = ref(storage, folderPath);\n      \n      await uploadBytes(fileRef, file);\n  \n      const imageUrl = await getDownloadURL(fileRef);\n      console.log(imageUrl)\n      return imageUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error; \n    }\n  };\n  \n  export const getAllFilesFromFolder = async (storageFolder) => {\n    const folderPath = `${storageFolder}`;\n    const folderRef = ref(storage, folderPath);\n    \n    try {\n        const fileList = await listAll(folderRef);\n\n        const imageUrlsComprehensive = await Promise.all(\n          fileList.items.map(async (fileRef) => {\n            const downloadURL = await getDownloadURL(fileRef);\n  \n            return {\n              id: fileRef.name,\n              filename: fileRef.name,\n              fileURL: downloadURL,\n            };\n          })\n        );\n\n        // return imageUrls;\n        return imageUrlsComprehensive\n    } catch (error) {\n        console.error('Error retrieving images:', error);\n        throw error;\n    }\n};\n\n"],"names":["_ref","studio","_jsx","href","concat","id","children","NStudioCard","data","img_src","isDarkModeOn","useSelector","selectDarkModeStatus","studioId","cardStyle","backgroundColor","padding","color","marginRight","width","maxWidth","boxShadow","transition","_jsxs","Card","variant","sx","transform","AspectRatio","ratio","style","position","src","iconUrl","loading","alt","height","overflow","Stack","direction","spacing","bottom","left","danceStyles","split","slice","map","form","index","Chip","marginBottom","fontSize","bgcolor","danceStylesColorChips","trim","top","paddingTop","freeTrialAvailable","marginLeft","COLORS","LIME","CardContent","Link","fontWeight","textColor","underline","overlay","studioName","Typography","level","street","IconButton","hidden","size","zIndex","borderRadius","right","Favorite","avgRating","toFixed","minFee","STATUSES","SUBMITTED","UNDER_REVIEW","REVIEWED","VERIFIED","VERIFICATION_FAILED","DRAFT_COLLECTIONS","DRAFT_STUDIOS","DRAFT_WORKSHOPS","DRAFT_OPEN_CLASSES","DRAFT_COURSES","LEVELS","ALL","BEGINNERS","INTERMEDIATE","ADVANCED","ENTITY_FLAG","INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR","WORKSHOPS_BOOKING_LIMIT","OPEN_CLASSES_BOOKING_LIMIT","COURSES_BOOKING_LIMIT","SERVER_URLS","CLOUD","process","LOCAL","GREEN","BLUE","YELLOW","RED","PURPLE","ORANGE","TEAL","PINK","GRAY","LIGHTBLUE","DARKBLUE","CYAN","INDIGO","AMBER","BROWN","LIGHTGREEN","DEEPPURPLE","DEEPORANGE","BLACK","WHITE","SILVER","GOLD","NAVY","OLIVE","CHIP_LEVELS_DESIGN","COLLECTIONS","USER","USER_KYC","ADMIN","REVIEWS","TRANSACTIONS","STUDIO","INSTRUCTORS","FREE_TRIAL_BOOKINGS","WORKSHOPS","OPEN_CLASSES","COURSES","BOOKINGS","STORAGES","STUDIOIMAGES","STUDIOICON","STUDIOANNOUNCEMENTS","USERIMAGE","INSTRUCTORIMAGES","WORKSHOPICON","WORKSHOPIMAGES","OPENCLASSICON","COURSEICON","CREATORS_KYC_DOCUMENTS","BASEURL_PROD","AMENITIES_ICONS","FaSnowflake","FaWifi","FaTint","FaToilet","FaPlug","FaFireExtinguisher","FaFirstAid","FaVideo","FaCreditCard","FaParking","setCreatorMode","async","console","log","uid","userRef","doc","db","userSnap","getDoc","exists","mode","CreatorMode","secureLocalStorage","setItem","error","readDocumentWithImageUrl","collectionName","productId","storagePath","folderRef","ref","storage","result","listAll","items","length","firstFileRef","url","getDownloadURL","readDocument","documentId","docRef","docSnapshot","saveDocument","setDoc","merge","handleSavePostOTPSuccess","phoneNumber","updateDoc","isPhoneNumberVerified","updateDocumentFields","fields","queryDocumentsCount","field","operation","value","q","query","collection","where","getCountFromServer","count","deleteAllImagesInFolder","storageFolder","entityId","folderPath","fileList","Promise","all","deleteObject","fileRef","deleteAllImagesInFolder2","subfolder","deleteImages","imagesToDelete","setProgress","thirdFolder","arguments","undefined","total","done","file","filename","fileRefToDelete","uploadImages","newImages","newFileData","name","uploadBytes","uploadImages4","onProgress","onComplete","storageRef","uploadTask","uploadBytesResumable","on","snapshot","totalBytes","bytesTransferred","progress","state","code","then","downloadURL","getAllFilesFromFolder","fileURL"],"sourceRoot":""}