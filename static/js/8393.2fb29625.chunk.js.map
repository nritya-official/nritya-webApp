{"version":3,"file":"static/js/8393.2fb29625.chunk.js","mappings":"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","sources":["Screens/LoginPage.js","constants.js","utils/common.js","utils/firebaseUtils.js","../node_modules/react-bootstrap/esm/Col.js","../node_modules/react-bootstrap/esm/Row.js"],"sourcesContent":["import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {auth , provider}  from './../config.js';\nimport { signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { db } from '../config';\nimport { doc, getDoc,setDoc } from \"firebase/firestore\";\nimport { COLLECTIONS } from \"./../constants.js\";\nimport {  Row, Col } from 'react-bootstrap';\nimport { useSelector } from 'react-redux'; \nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { Button, Container } from '@mui/material';\nimport { setCreatorMode } from '../utils/firebaseUtils.js';\nimport { postData } from '../utils/common.js';\n\n\n\nfunction LoginPage({onLogin,setIsLoggedIn}) {\n  \n  const [loginFailed, setLoginFailed] = useState(false);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n\n  const navigate = useNavigate();\n\n    const addUserIfMissing = async (user) => {\n      try {\n        const userRef = doc(db, COLLECTIONS.USER, user.uid);\n        const userSnap = await getDoc(userRef);\n        if (userSnap.exists()) {\n          console.log(\"User there\");\n        } else {\n          // docSnap.data() will be undefined in this case\n          console.log(\"No such document!\");\n          const dbPayload = {\n            Name: user.displayName,\n            Email: user.email,\n            DoB: null, // You may want to add user's date of birth here\n            UserId: user.uid,\n            WorkshopCreated: [],\n            WorkshopEnrolled: [],\n            Cart: [],\n            CreatorMode: false,\n            KycIdList:{},\n            StudioCreated:[],\n            premiumTill: false,\n            TransactionIDs:[],\n            recentlyWatched:{0:\"\",1:\"\",2:\"\",3:\"\",4:\"\"},\n          }\n          const notifyEmails = user.email\n          const metadata = {\n            \"user_id\":user.uid\n          }\n          const response = await postData(dbPayload, COLLECTIONS.USER, notifyEmails, metadata) ;\n          if (response.ok) {\n            console.log(\"User added successfully\");\n          }else{\n            console.error(response);\n          }\n        }\n\n        const userRef2 = doc(db, COLLECTIONS.USER, user.uid);\n        const userSnap2 = await getDoc(userRef2);\n        localStorage.setItem('userDetails',JSON.stringify({\"UserId\":user.uid,\"email\":user.email,\"isPremium\":userSnap2.data().isPremium,\"displayName\":userSnap2.data().displayName,\"WorkshopCreated\":userSnap2.data().WorkshopCreated,\"WorkshopEnrolled\":userSnap2.data().WorkshopEnrolled}));\n       \n\n        \n      } catch (error) {\n        console.error(\"Error adding user: \", error);\n      }\n    };\n\n    const signin = async () => {\n      try {\n        const result = await signInWithPopup(auth, provider);\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n        const accessToken = credential.accessToken;\n        const idToken = credential.idToken;\n        console.log(\"Access token\",accessToken)\n        console.log(\"Id token\",idToken)\n        const user = result.user;\n        console.log(\"Post login :\",user);\n        console.log(\"UserId\",user.uid);\n        console.log(\"Result \", result)\n        if (result) {\n          let token = await auth.currentUser?.getIdToken();\n          console.log(\"token\", token);\n          localStorage.setItem(\"authToken\", token);\n        }\n        onLogin({\"UserId\":user.uid,\"email\":user.email,\"isPremium\":user.isPremium,\"displayName\":user.displayName,\"WorkshopCreated\":user.WorkshopCreated,\"WorkshopEnrolled\":user.WorkshopEnrolled,\"CreatorMode\":false,\"photoURL\":user.photoURL},user);\n        setIsLoggedIn(true);\n        await addUserIfMissing(user);\n        await setCreatorMode(user.uid);\n        navigate(`/`);\n      } catch (error) {\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        console.log('Invalid username or password');\n        setLoginFailed(true);\n      }\n    };\n    \n      \n    return (\n      <Container fluid className='custom-container-main'>\n          <Row>\n            <Col xs={12} md={12}>\n              <div>\n              <form\n                className='custom-login-form'\n                onSubmit={(e) => {\n                  e.preventDefault(); // Prevent form submission\n                  signin(); // Call your signin function on form submission\n                  //alert(\"Form Submitted\")\n                }}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  padding: '15px 0'\n                }}\n              >\n                <Button\n                  type=\"submit\" // Add a type to the button to trigger form submission\n                  style={{\n                    backgroundColor: \"#D9D9D9\",\n                    color: '#000',\n                    borderRadius: '6px',\n                    textTransform: 'none',\n                    border: '1px solid #777',\n                    padding: '8px 16px'\n                  }}\n                >\n                  <img\n                    src=\"https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg\"\n                    alt=\"Google Icon\"\n                    style={{ marginRight: '10px', height: '20px' }}\n                  />\n                  Sign In with Google\n                </Button>\n              </form>\n              </div>\n            </Col>\n          </Row>\n      </Container>\n    );\n}\n\nexport default LoginPage;\n","import { FaSnowflake, FaWifi, FaTint, FaToilet, FaPlug, FaFireExtinguisher, FaFirstAid, FaVideo, FaCreditCard, FaParking  } from 'react-icons/fa';\n\nexport const STATUSES = {\n    SUBMITTED: \"Submitted\",\n    UNDER_REVIEW: \"Under Review\",\n    REVIEWED: \"Reviewed\",\n    VERIFIED: \"Verified\",\n    VERIFICATION_FAILED: \"Verification Failed\",\n};\n\nexport const DRAFT_COLLECTIONS = {\n    DRAFT_STUDIOS: 'DraftStudios',\n    DRAFT_WORKSHOPS: 'DraftWorkshops',\n    DRAFT_OPEN_CLASSES: 'DraftOpenClasses',\n    DRAFT_COURSES: 'DraftCourses'\n};\n\nexport const LEVELS = {\n    ALL : \"All\",\n    BEGINNERS : \"Beginner\", \n    INTERMEDIATE :\"Intermediate\", \n    ADVANCED :\"Advanced\"\n}\nexport const ENTITY_FLAG = {\n    INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR : 30,\n    WORKSHOPS_BOOKING_LIMIT : 10,\n    OPEN_CLASSES_BOOKING_LIMIT : 2,\n    COURSES_BOOKING_LIMIT : 10,\n}\n\n\nexport const SERVER_URLS = {\n    CLOUD : process.env.REACT_APP_BACKEND_URL,\n    LOCAL : 'http://127.0.0.1:8000/'\n}\n\nexport const COLORS = {\n    GREEN: { backgroundColor: \"#28a745\", color: \"#fff\" },     // Green background, white text\n    BLUE: { backgroundColor: \"#007bff\", color: \"#fff\" },      // Blue background, white text\n    YELLOW: { backgroundColor: \"#ffc107\", color: \"#000\" },    // Yellow background, black text\n    RED: { backgroundColor: \"#dc3545\", color: \"#fff\" },       // Red background, white text\n    PURPLE: { backgroundColor: \"#6f42c1\", color: \"#fff\" },    // Purple background, white text\n    ORANGE: { backgroundColor: \"#fd7e14\", color: \"#fff\" },    // Orange background, white text\n    TEAL: { backgroundColor: \"#20c997\", color: \"#fff\" },      // Teal background, white text\n    PINK: { backgroundColor: \"#e83e8c\", color: \"#fff\" },      // Pink background, white text\n    GRAY: { backgroundColor: \"#6c757d\", color: \"#fff\" },       // Gray background, white text\n\n    LIGHTBLUE: { backgroundColor: \"#17a2b8\", color: \"#fff\" }, // Light blue background, white text\n    DARKBLUE: { backgroundColor: \"#343a40\", color: \"#fff\" },  // Dark blue background, white text\n    CYAN: { backgroundColor: \"#00bcd4\", color: \"#fff\" },      // Cyan background, white text\n    INDIGO: { backgroundColor: \"#6610f2\", color: \"#fff\" },    // Indigo background, white text\n    LIME: { backgroundColor: \"#cddc39\", color: \"#000\" },      // Lime background, black text\n    AMBER: { backgroundColor: \"#ffca28\", color: \"#000\" },     // Amber background, black text\n    BROWN: { backgroundColor: \"#795548\", color: \"#fff\" },     // Brown background, white text\n    LIGHTGREEN: { backgroundColor: \"#8bc34a\", color: \"#000\" },// Light green background, black text\n    DEEPPURPLE: { backgroundColor: \"#673ab7\", color: \"#fff\" },// Deep purple background, white text\n    DEEPORANGE: { backgroundColor: \"#ff5722\", color: \"#fff\" },// Deep orange background, white text\n    BLACK: { backgroundColor: \"#000000\", color: \"#fff\" },     // Black background, white text\n    WHITE: { backgroundColor: \"#ffffff\", color: \"#000\" },     // White background, black text\n    SILVER: { backgroundColor: \"#c0c0c0\", color: \"#000\" },    // Silver background, black text\n    GOLD: { backgroundColor: \"#ffd700\", color: \"#000\" },      // Gold background, black text\n    NAVY: { backgroundColor: \"#001f3f\", color: \"#fff\" },      // Navy background, white text\n    OLIVE: { backgroundColor: \"#3d9970\", color: \"#fff\" },     // Olive background, white text\n\n  };\n\nexport const CHIP_LEVELS_DESIGN = {\n    [LEVELS.ALL]: COLORS.GREEN,           // Green background, white text\n    [LEVELS.BEGINNERS]: COLORS.BLUE,     // Blue background, white text\n    [LEVELS.INTERMEDIATE]: COLORS.YELLOW,  // Yellow background, black text\n    [LEVELS.ADVANCED]: COLORS.RED      // Red background, white text\n  };\n  \n\n  \nexport const danceStylesColorChips = [COLORS.PURPLE,COLORS.ORANGE,COLORS.TEAL,COLORS.LIME]\n\nexport const COLLECTIONS = {\n    USER: \"User\",\n    USER_KYC:\"UserKyc\",\n    ADMIN:\"Admin\",\n    REVIEWS: \"Reviews\",\n    TRANSACTIONS: \"Transactions\",\n    STUDIO: \"Studio\",\n    INSTRUCTORS: \"Instructors\",\n    FREE_TRIAL_BOOKINGS:\"FreeTrialBookings\",\n    WORKSHOPS: 'Workshops',\n    OPEN_CLASSES: 'OpenClasses',\n    COURSES: 'Courses',\n    BOOKINGS: 'Bookings',\n}\n\nexport const STORAGES ={\n    STUDIOIMAGES:'StudioImages',\n    STUDIOICON:'StudioIcon',\n    STUDIOANNOUNCEMENTS :'StudioAnnouncements',\n    USERIMAGE:'UserImage',\n    INSTRUCTORIMAGES: 'InstructorImages',\n    WORKSHOPICON :\"WorkshopIcon\",\n    WORKSHOPIMAGES :\"WorkshopImages\",\n    OPENCLASSICON :\"OpenClassIcon\",\n    COURSEICON :\"CourseIcon\",\n    CREATORS_KYC_DOCUMENTS :\"CreatorKycDocuments\"\n}\n\nexport const SEARCH_FILTERS ={\n    DANCEFORMS:'danceforms',\n    DISTANCES:'distances',\n}\n\nexport const BASEURL_DEV = \"http://0.0.0.0:8000/\"\nexport const BASEURL_PROD= process.env.REACT_APP_BACKEND_URL\nexport const STUDIO_ICON_DEFAULT = \"https://firebasestorage.googleapis.com/v0/b/nritya-7e526.appspot.com/o/RichEmailImages%2FDance3.jpg?alt=media&token=d7d41929-39c1-40d1-ad6a-1b2281769e84\"\n\nexport const AMENITIES_ICONS = {\n    \"AC\": <FaSnowflake />,\n    \"Free Wifi\": <FaWifi />,\n    \"RO Water\": <FaTint />,\n    \"Toilet\": <FaToilet />,\n    \"Power Backup\": <FaPlug />,\n    \"Fire Extinguisher\": <FaFireExtinguisher />,\n    \"First Aid Kit\": <FaFirstAid />,\n    \"CCTV Camera\": <FaVideo />,\n    \"Card Payment\": <FaCreditCard />,\n    \"Parking Space\": <FaParking />,\n};\n\n","import { COLORS, SERVER_URLS,BASEURL_DEV,BASEURL_PROD } from \"../constants\";\n\nexport async function postData(dbPayload, collection_name, notify, metadata) {\n  const BASEURL = BASEURL_PROD;\n  const endpoint = 'crud/newEntity/'; // Define your endpoint here\n  const authToken = localStorage.getItem(\"authToken\");\n  try {\n    const response = await fetch(BASEURL + endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        data: dbPayload,\n        collection_name: collection_name,\n        notify: notify,\n        metadata : metadata,\n      }),\n    });\n\n    if (!response.ok) {\n      console.log('Error in postData:', response);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response;\n  } catch (error) {\n    console.error('Error in postData:', error);\n    throw error;\n  }\n}\n\nexport async function putData(dbPayload, collection_name, entity_id, notify = null, metadata = null) {\n  const BASEURL = BASEURL_PROD;\n  const endpoint = `crud/updateEntity/${entity_id}`;\n  const authToken = localStorage.getItem(\"authToken\");\n  try {\n    const response = await fetch(BASEURL + endpoint, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        data: dbPayload,\n        collection_name: collection_name,\n        notify: notify,\n        metadata : metadata,\n      }),\n    });\n\n    if (!response.ok) {\n      console.log('Error in postData:', response);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response;\n  } catch (error) {\n    console.error('Error in postData:', error);\n    throw error;\n  }\n}\n\nexport const getRandomColor = () => {\n  const colorKeys = Object.keys(COLORS);\n  const randomKey = colorKeys[Math.floor(Math.random() * colorKeys.length)];\n  return COLORS[randomKey];\n};\n\nexport const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const bookEntity = async (bookingData) => {\n  const url = `${SERVER_URLS.CLOUD}bookings/bookEntity/`; \n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        userId: bookingData.userId,\n        entityType: bookingData.entityType,\n        entityId: bookingData.entityId,\n        associatedStudioId: bookingData.associatedStudioId,\n        emailLearner: bookingData.emailLearner,\n        personsAllowed: bookingData.personsAllowed,\n        pricePerPerson: bookingData.pricePerPerson,\n      })\n    });\n\n    const result = await response.json();\n    \n    if (response.ok) {\n      console.log('Booking successful:', result);\n      return result;  // Return the successful result\n    } else {\n      console.error('Booking failed:', result);\n      return result;  // Return null or an error message\n    }\n    \n  } catch (error) {\n    console.error('Error occurred while booking:', error);\n    return null;  // Return null or an error message\n  }\n};\n\n\n// Function to decode a Unicode (UTF-8) encoded string back to the original text\nexport const decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nexport const convertToHtmlEntities= (text) =>{\n  return text.replace(/[\\u00A0-\\u9999<>\\&]/gim, function(i) {\n      return '&#' + i.charCodeAt(0) + ';';\n  });\n}\n\nexport const getYoutubeVideoId = (link)=> {\n  console.log(\"MediaDisplay\", link)\n  if (!link){\n    return null\n  }\n  const text = link.trim();\n  const youtubeRegExp = /(?:https?:\\/\\/)?(?:www\\.|m\\.)?(?:youtube\\.com\\/(?:watch\\?v=|embed\\/|v\\/|shorts\\/)|youtu\\.be\\/)([\\w\\-]+)/;\n  const match = text.match(youtubeRegExp);\n  let videoId = null;\n\n  if (match) {\n    videoId = match[1];\n  }\n  console.log(\"MediaDisplay\", videoId)\n  return videoId\n}\n\nexport const formatDateString = (dateString = \"\") => {\n  // Split the input date string\n  const [year, month, day] = dateString.split('-');\n\n  // Create an array of month names\n  const monthNames = [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n  ];\n\n  // Determine the ordinal suffix for the day\n  const daySuffix = (day) => {\n      const lastDigit = day % 10;\n      const suffix = (lastDigit === 1 && day !== '11') ? 'st' :\n                     (lastDigit === 2 && day !== '12') ? 'nd' :\n                     (lastDigit === 3 && day !== '13') ? 'rd' : 'th';\n      return `${day}${suffix}`;\n  };\n\n  // Format and return the final date string\n  return `${daySuffix(day)} ${monthNames[parseInt(month) - 1]}, ${year}`;\n}\n\nexport const gradientStyles = [\n  { background: 'linear-gradient(to bottom right, #FFD700, #FFA500)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #00BFFF, #1E90FF)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #32CD32, #008000)', color: 'white' },\n  { background: 'linear-gradient(to bottom right, #FFA500, #FF4500)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #DC143C, #8B0000)', color: 'white' },\n  { background: 'linear-gradient(to bottom right, #000000, #2F4F4F)', color: 'white' },\n];","import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, query, getDocs, where, getCountFromServer } from 'firebase/firestore';\nimport { db } from '../config';\nimport {ref,listAll,getDownloadURL,uploadBytes, deleteObject, uploadBytesResumable  } from \"firebase/storage\";\nimport { storage } from '../config';\nimport { BASEURL_DEV, BASEURL_PROD } from '../constants';\nimport secureLocalStorage from 'react-secure-storage';\n\nexport const setCreatorMode = async (uid) => {\n  const BASEURL = BASEURL_PROD;\n  const url = `${BASEURL}crud/getUserMode/${uid}`;\n  //console.log(\"creatorMode uid\", uid, url);\n  \n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.success) {\n      let mode = false;\n      if (data.data === true) {\n        mode = true;\n      }\n      //console.log(\"setCreatorMode: Is User a creator?\", mode);\n      secureLocalStorage.setItem('CreatorMode', mode);\n    } else {\n      console.log(\"Error: \", data.message || \"Unknown error\");\n      //secureLocalStorage.setItem('CreatorMode', false);\n    }\n    \n  } catch (error) {\n    console.log(\"Error fetching user mode: \", error);\n    secureLocalStorage.setItem('CreatorMode', false);\n  }\n}\n\nexport const fetchStudioEntities = async (studioId, entityType, setState) => {\n  const BASE_URL = BASEURL_PROD;\n  try {\n    const url = `${BASE_URL}crud/${studioId}/${entityType}/`;\n    console.log(url)\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.success) {\n      setState(data.data);\n    } else {\n      console.error(`Error fetching ${entityType}:`, data.error);\n    }\n  } catch (error) {\n    console.error(`Error fetching ${entityType}:`, error);\n  }\n};\n\n\nexport const getCreatorMode = async () => {\n  try{\n    const mode = secureLocalStorage.getItem('CreatorMode');\n    console.log(\"getCreatorMode \",mode)\n    if (mode){\n      return mode\n    }else{\n      return false\n    }\n  } \n  catch(error){\n    console.log(\" error\");\n    return false\n  }\n}\n\nexport const setGetCreatorModeOnMount = async (uid) => {\n  await setCreatorMode(uid);\n  return await getCreatorMode();\n};\n\n\n// Read operation with image URL\nexport const readDocumentWithImageUrl = async (collectionName, productId) => {\n    console.log(\"Debug \",`${collectionName}/${productId}`)\n    const storagePath = `${collectionName}/${productId}`;\n    const folderRef = ref(storage,storagePath);\n    try {\n        const result = await listAll(folderRef);\n        if (result.items.length > 0) {\n            const firstFileRef = result.items[0];\n            const url = await getDownloadURL(firstFileRef);\n            console.log('Debug URL:', url);\n            return url;\n          } else {\n            console.log('Debug No files found in the folder.');\n            return null;\n          }\n    } catch (error) {\n      console.error('Error getting image URL:', error);\n      return null;\n    }\n  };\n\n// Read operation\nexport const readDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    const docSnapshot = await getDoc(docRef);\n    return docSnapshot.exists() ? docSnapshot.data() : null;\n};\n\n// Create or Update operation\nexport const saveDocument = async (collectionName, documentId, data) => {\n    const docRef = doc(db, collectionName, documentId);\n    await setDoc(docRef, data, { merge: true });\n    return data;\n};\n\n\nexport const handleSavePostOTPSuccess = async (collectionName, documentId, phoneNumber) => {\n  const docRef = doc(db, collectionName, documentId);\n  await updateDoc(docRef, {isPhoneNumberVerified:true,phoneNumber});\n  return true;\n};\n\n// Update specific fields in a document\nexport const updateDocumentFields = async (collectionName, documentId, fields) => {\n    const docRef = doc(db, collectionName, documentId);\n    await updateDoc(docRef, fields);\n    return { id: documentId, ...fields };\n};\n\n// Delete operation\nexport const deleteDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    await deleteDoc(docRef);\n    return { id: documentId };\n};\n\n// Query operation\nexport const queryDocuments = async (collectionName, conditions) => {\n    const q = query(collection(db, collectionName, conditions));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const queryDocumentsCount = async (collectionName,field,operation,value) => {\n    console.log(\"Hiii \",collectionName,field,operation,value)\n    const q = query(collection(db, collectionName), where(field,operation,value));\n    const snapshot = await getCountFromServer(q);\n    return snapshot.data().count;\n};\n\n\n  // Function to delete all images in a folder\nexport  const deleteAllImagesInFolder = async (storageFolder, entityId) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n    // Function to delete all images in a folder\n  export  const deleteAllImagesInFolder2 = async (storageFolder, entityId,subfolder) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}/${subfolder}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n  // Function to delete images\nexport const deleteImages = async (storageFolder,imagesToDelete,entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Deletes specific images associated with the given entityId.\n\n    Args:\n      imagesToDelete <array>: An array of image objects to be deleted.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n    const total = imagesToDelete.length;\n    let done = 0;\n    await Promise.all(imagesToDelete.map(async (file) => {\n      let folderPath = `${storageFolder}/${entityId}/${file.filename}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}/${file.filename}`;\n      }\n      const fileRefToDelete = ref(storage, folderPath);\n      await deleteObject(fileRefToDelete);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  // Function to upload new images\nexport const uploadImages = async (storageFolder, newImages, entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n\n    Args:\n      newImages <array>: An array of new image objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n   console.log(storageFolder,entityId)\n   const total = newImages.length;\n    let done = 0;\n    await Promise.all(newImages.map(async (newFileData) => {\n      let folderPath = `${storageFolder}/${entityId}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n      }\n      const fileRef = ref(storage, `${folderPath}/${newFileData.file.name}`);\n      await uploadBytes(fileRef, newFileData.file);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  export const uploadImages2 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    uploadBytesResumable(storageRef, newImages).then((snapshot) => {\n      console.log('Uploaded a blob or file!');\n    });\n  };\n\n  export const uploadImages3 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n        });\n      }\n    );\n    \n  };\n\n\n  export const uploadImages4 = async (storageFolder, newImages, entityId, thirdFolder = null, onProgress, onComplete) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages,newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const totalBytes = snapshot.totalBytes;\n        const bytesTransferred = snapshot.bytesTransferred;\n        const progress = totalBytes > 0 ? ((bytesTransferred / totalBytes) * 100).toFixed(2) : -1;\n        onProgress(progress);\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n          onComplete(downloadURL);\n        });\n\n      }\n    );\n    \n  };\n\n\n export const uploadOneImageAndGetURL = async (storageFolder, file, entityId) => {\n    try {\n      const folderPath = `${storageFolder}/${entityId}/${file.name}`;\n      console.log(folderPath)\n      const fileRef = ref(storage, folderPath);\n      \n      await uploadBytes(fileRef, file);\n  \n      const imageUrl = await getDownloadURL(fileRef);\n      console.log(imageUrl)\n      return imageUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error; \n    }\n  };\n  \n  export const getAllFilesFromFolder = async (storageFolder) => {\n    const folderPath = `${storageFolder}`;\n    const folderRef = ref(storage, folderPath);\n    \n    try {\n        const fileList = await listAll(folderRef);\n\n        const imageUrlsComprehensive = await Promise.all(\n          fileList.items.map(async (fileRef) => {\n            const downloadURL = await getDownloadURL(fileRef);\n  \n            return {\n              id: fileRef.name,\n              filename: fileRef.name,\n              fileURL: downloadURL,\n            };\n          })\n        );\n\n        // return imageUrls;\n        return imageUrlsComprehensive\n    } catch (error) {\n        console.error('Error retrieving images:', error);\n        throw error;\n    }\n};\n\n","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useCol({\n  as,\n  bsPrefix,\n  className,\n  ...props\n}) {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'col');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const spans = [];\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let span;\n    let offset;\n    let order;\n    if (typeof propValue === 'object' && propValue != null) {\n      ({\n        span,\n        offset,\n        order\n      } = propValue);\n    } else {\n      span = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (span) spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);\n    if (order != null) classes.push(`order${infix}-${order}`);\n    if (offset != null) classes.push(`offset${infix}-${offset}`);\n  });\n  return [{\n    ...props,\n    className: classNames(className, ...spans, ...classes)\n  }, {\n    as,\n    bsPrefix,\n    spans\n  }];\n}\nconst Col = /*#__PURE__*/React.forwardRef(\n// Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n(props, ref) => {\n  const [{\n    className,\n    ...colProps\n  }, {\n    as: Component = 'div',\n    bsPrefix,\n    spans\n  }] = useCol(props);\n  return /*#__PURE__*/_jsx(Component, {\n    ...colProps,\n    ref: ref,\n    className: classNames(className, !spans.length && bsPrefix)\n  });\n});\nCol.displayName = 'Col';\nexport default Col;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"names":["_ref","onLogin","setIsLoggedIn","loginFailed","setLoginFailed","useState","navigate","useSelector","selectDarkModeStatus","useNavigate","signin","async","result","signInWithPopup","auth","provider","credential","GoogleAuthProvider","credentialFromResult","accessToken","idToken","console","log","user","uid","_auth$currentUser","token","currentUser","getIdToken","localStorage","setItem","email","isPremium","displayName","WorkshopCreated","WorkshopEnrolled","photoURL","userRef","doc","db","COLLECTIONS","USER","getDoc","exists","dbPayload","Name","Email","DoB","UserId","Cart","CreatorMode","KycIdList","StudioCreated","premiumTill","TransactionIDs","recentlyWatched","notifyEmails","metadata","response","postData","ok","error","userRef2","userSnap2","JSON","stringify","data","addUserIfMissing","setCreatorMode","code","message","_jsx","Container","fluid","className","children","Row","Col","xs","md","onSubmit","e","preventDefault","style","display","alignItems","justifyContent","padding","_jsxs","Button","type","backgroundColor","color","borderRadius","textTransform","border","src","alt","marginRight","height","STATUSES","SUBMITTED","UNDER_REVIEW","REVIEWED","VERIFIED","VERIFICATION_FAILED","DRAFT_COLLECTIONS","DRAFT_STUDIOS","DRAFT_WORKSHOPS","DRAFT_OPEN_CLASSES","DRAFT_COURSES","LEVELS","ALL","BEGINNERS","INTERMEDIATE","ADVANCED","ENTITY_FLAG","INTERNET_CONV_CHARGES_WORKSHOPS_COURSES_INR","WORKSHOPS_BOOKING_LIMIT","OPEN_CLASSES_BOOKING_LIMIT","COURSES_BOOKING_LIMIT","SERVER_URLS","CLOUD","process","LOCAL","COLORS","GREEN","BLUE","YELLOW","RED","PURPLE","ORANGE","TEAL","PINK","GRAY","LIGHTBLUE","DARKBLUE","CYAN","INDIGO","LIME","AMBER","BROWN","LIGHTGREEN","DEEPPURPLE","DEEPORANGE","BLACK","WHITE","SILVER","GOLD","NAVY","OLIVE","CHIP_LEVELS_DESIGN","danceStylesColorChips","USER_KYC","ADMIN","REVIEWS","TRANSACTIONS","STUDIO","INSTRUCTORS","FREE_TRIAL_BOOKINGS","WORKSHOPS","OPEN_CLASSES","COURSES","BOOKINGS","STORAGES","STUDIOIMAGES","STUDIOICON","STUDIOANNOUNCEMENTS","USERIMAGE","INSTRUCTORIMAGES","WORKSHOPICON","WORKSHOPIMAGES","OPENCLASSICON","COURSEICON","CREATORS_KYC_DOCUMENTS","BASEURL_PROD","STUDIO_ICON_DEFAULT","AMENITIES_ICONS","FaSnowflake","FaWifi","FaTint","FaToilet","FaPlug","FaFireExtinguisher","FaFirstAid","FaVideo","FaCreditCard","FaParking","collection_name","notify","BASEURL","authToken","getItem","fetch","method","headers","concat","body","Error","status","putData","entity_id","arguments","length","undefined","endpoint","bookEntity","url","userId","bookingData","entityType","entityId","associatedStudioId","emailLearner","personsAllowed","pricePerPerson","json","getYoutubeVideoId","link","match","trim","videoId","formatDateString","dateString","year","month","day","split","lastDigit","suffix","daySuffix","parseInt","success","mode","secureLocalStorage","fetchStudioEntities","studioId","setState","BASE_URL","setGetCreatorModeOnMount","getCreatorMode","readDocumentWithImageUrl","collectionName","productId","storagePath","folderRef","ref","storage","listAll","items","firstFileRef","getDownloadURL","readDocument","documentId","docRef","docSnapshot","saveDocument","setDoc","merge","handleSavePostOTPSuccess","phoneNumber","updateDoc","isPhoneNumberVerified","updateDocumentFields","fields","id","queryDocumentsCount","field","operation","value","q","query","collection","where","getCountFromServer","count","deleteAllImagesInFolder","storageFolder","folderPath","fileList","Promise","all","map","deleteObject","fileRef","deleteAllImagesInFolder2","subfolder","deleteImages","imagesToDelete","setProgress","thirdFolder","total","done","file","filename","fileRefToDelete","uploadImages","newImages","newFileData","name","uploadBytes","uploadImages4","onProgress","onComplete","storageRef","uploadTask","uploadBytesResumable","on","snapshot","totalBytes","bytesTransferred","progress","toFixed","state","then","downloadURL","getAllFilesFromFolder","fileURL","React","props","colProps","as","Component","bsPrefix","spans","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","classes","forEach","brkPoint","propValue","span","offset","order","infix","push","classNames","useCol","decoratedBsPrefix","sizePrefix","cols"],"sourceRoot":""}