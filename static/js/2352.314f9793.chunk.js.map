{"version":3,"file":"static/js/2352.314f9793.chunk.js","mappings":"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","sources":["Components/ImageUpload.js","constants.js","utils/firebaseUtils.js"],"sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport shortid from \"shortid\";\nimport { ref, getDownloadURL, listAll } from 'firebase/storage';\nimport { storage } from '../config';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { deleteAllImagesInFolder,deleteImages,uploadImages} from '../utils/firebaseUtils'\nimport { Card, CardContent, IconButton } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useSnackbar } from \"../context/SnackbarContext\";\nimport { STORAGES } from \"../constants\";\n\n\nconst ImageUpload = ({entityId,storageFolder,title, maxImageCount=10, updateMode, disable }) => {\n  const showSnackbar = useSnackbar();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [newFiles, setNewFiles] = useState([]); // Track new files to be added\n  const [deletedFiles, setDeletedFiles] = useState([]); // Track deleted files\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  //console.log(\"Received props=> entityId:\", entityId, \"|storageFolder:\", storageFolder);\n  console.log(\"Kyc enitity id \",entityId, disable)\n  const filesizes = (bytes, decimals = 2) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n  };\n\n  useEffect(() => {\n   // console.log(\"Fetching image for\",entityId)\n    if(entityId){\n      fetchStudioImages(entityId); // Fetch images when component mounts\n    }\n  }, [entityId]);\n\n  useEffect(() => {\n   // console.log(\"Selected files:\", selectedFiles);\n    if (maxImageCount && selectedFiles.length > maxImageCount) {\n      const truncatedFiles = selectedFiles.slice(0, maxImageCount);\n      alert(`Exceeded maxImageCount, keeping first ${maxImageCount} files.`);\n      setSelectedFiles(truncatedFiles);\n    }\n  }, [selectedFiles, maxImageCount]);\n  \n\n  const handleInputChange = (e) => {\n    // console.log(\"handleInputChange\")\n    const files = Array.from(e.target.files);\n    const updatedFiles = [];\n    // console.log(\"file array \",files.length)\n    files.forEach((file) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        updatedFiles.push({\n          id: shortid.generate(),\n          filename: file.name,\n          filetype: file.type,\n          fileimage: reader.result,\n          datetime: file.lastModifiedDate.toLocaleString(\"en-IN\"),\n          filesize: filesizes(file.size),\n          file: file, // Store the actual file object\n        });\n\n        if (updatedFiles.length === files.length) {\n          setSelectedFiles((prevFiles) => [...prevFiles, ...updatedFiles]);\n          setNewFiles(updatedFiles);\n          // console.log(\"New files in total\",setNewFiles.length)\n        }\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleDeleteSelectedFile = (id) => {\n    if (window.confirm(\"Are you sure you want to delete this image?\")) {\n      const fileToDelete = selectedFiles.find((file) => file.id === id);\n      setDeletedFiles((prevDeletedFiles) => [...prevDeletedFiles, fileToDelete]);\n      setSelectedFiles((prevFiles) =>\n        prevFiles.filter((file) => file.id !== id)\n      );\n    }\n  };\n\n  const handleUploadSubmit = async () => {\n    if (!entityId) {\n      alert(\"No studio selected\");\n      return;\n    }\n\n    try {\n      if (maxImageCount === 1) {\n        // Delete all previous images in the folder\n        await deleteAllImagesInFolder(storageFolder, entityId);\n        await uploadImages(storageFolder,newFiles, entityId);\n      } else {\n        // Calculate images to delete and add\n        const { imagesToDelete, newImages } = calculateDelta(selectedFiles, uploadedFiles);\n\n        // Delete images if there are any\n        if (imagesToDelete.length > 0) {\n          await deleteImages(storageFolder, imagesToDelete, entityId);\n        }\n\n        // Upload new images if there are any\n        if (newImages.length > 0) {\n          await uploadImages(storageFolder, newImages, entityId);\n        }\n\n      }\n\n      // alert(\"Images Uploaded/Deleted\");\n      showSnackbar(\"Images Uploaded/Deleted\", \"success\");\n    } catch (error) {\n      console.error(\"Error uploading/deleting images:\", error);\n    }\n  };\n\n  // Function to calculate images to delete and new images to upload\n  const calculateDelta = (selectedFiles, uploadedFiles) => {\n    const selectedFileIds = selectedFiles.map(file => file.id);\n    const uploadedFileIds = uploadedFiles.map(file => file.id);\n\n    const imagesToDelete = uploadedFiles.filter(file => !selectedFileIds.includes(file.id));\n    const newImages = selectedFiles.filter(file => !uploadedFileIds.includes(file.id));\n\n    return { imagesToDelete, newImages };\n  };\n\n\n  const fetchStudioImages = async (entityId) => {\n    setSelectedFiles([]);\n    setNewFiles([]);\n    setDeletedFiles([]);\n    try {\n      const folderPath = `${storageFolder}/${entityId}`;\n      console.log(folderPath)\n      const folderRef = ref(storage, folderPath);\n      const fileList = await listAll(folderRef);\n\n      const files = await Promise.all(\n        fileList.items.map(async (fileRef) => {\n          const downloadURL = await getDownloadURL(fileRef);\n\n          return {\n            id: fileRef.name,\n            filename: fileRef.name,\n            fileURL: downloadURL,\n          };\n        })\n      );\n      // console.log('File fetching',files);\n      setUploadedFiles(files); // Update the uploadedFiles state with fetched data\n      setSelectedFiles(files);\n    } catch (error) {\n      console.error('Error fetching user images:', error);\n    }\n  };\n\n  return (\n    <div className=\"fileupload-view\" style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\n      <div className=\"row justify-content-center m-0\" style={{ flex: '1',justifyContent: 'center' }}>\n        <div className=\"col-md-6\" style={{ flex: '1' ,justifyContent: 'center'}}>\n          <div className=\"card mt-5\">\n            <div className=\"card-body\" style={{ backgroundColor: isDarkModeOn ? '#333333' : 'white' }}>\n              <div className=\"kb-data-box\">\n                <div className=\"kb-modal-data-title\">\n                  <div className=\"kb-data-title\" style={{justifyContent:'center',flex: '1'}}>\n                    <h4>{title}</h4>\n                    <p>Max no of image(s):{maxImageCount} {storageFolder === STORAGES.STUDIOIMAGES && <p>Add at least 5 images</p>}</p>\n                  </div>\n                </div>\n                <form style={{  backgroundColor: isDarkModeOn ? '#333333' : 'white'}}>\n                  <div className=\"kb-file-upload\">\n                    <div className=\"file-upload-box\">\n                      <input\n                        type=\"file\"\n                        id=\"fileupload\"\n                        className=\"file-upload-input\"\n                        onChange={handleInputChange}\n                        multiple\n                      />\n\n                    </div>\n                  </div>\n                  <br></br>\n                  <div className=\"kb-attach-box mb-3\">\n                  <div className=\"row\">\n                    {entityId && selectedFiles.length > 0 ? (\n                      selectedFiles.map((file) => (\n                        \n                        <div key={file.id} className=\"col-6 col-md-3 mb-3\" style={{ position: 'relative' }}>\n                          \n                          <Card sx={{ maxWidth: 345 }}>\n                            {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                              <div style={{ position: 'relative' }}>\n                                <img\n                                  src={file.fileimage ? file.fileimage : file.fileURL}\n                                  alt={file.filename}\n                                  className=\"card-img-top\"\n                                  style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                                />\n                                <IconButton\n                                  aria-label=\"delete\"\n                                  disabled={disable}\n                                  onClick={() => handleDeleteSelectedFile(file.id)}\n                                  style={{ position: 'absolute', top: 0, right: 0, backgroundColor: 'rgba(255, 255, 255, 0.5)' }}\n                                >\n                                  <DeleteIcon style={{color:\"ff0000\"}}/>\n                                </IconButton>\n                              </div>\n                            ) : (\n                              <CardContent>\n                                <i className=\"far fa-file-alt\"></i>\n                              </CardContent>\n                            )}\n                          </Card>\n                        </div>\n                        \n                      ))\n                    ) : (\n                      <div className=\"col-12 text-center\">\n                        <p>No images selected</p>\n                      </div>\n                    )}\n                  </div>\n\n                  </div>\n\n                  \n                  <div className=\"kb-buttons-box\">\n                    <button\n                      type=\"button\"\n                      className=\"btn form-submit\"\n                      style={{ backgroundColor: isDarkModeOn ? '#892CDC' : 'black', color:'white'  }}\n                      onClick={handleUploadSubmit}\n                      disabled={disable}\n                    >\n                      Image Upload\n                    </button>\n                  </div>\n                </form>\n                {selectedFiles.length > 0 && (\n                  <div className=\"kb-attach-box\" hidden>\n                    <div className=\"row\">\n                    <hr />\n                    {selectedFiles.map((file) => (\n                      <div key={file.id} className=\"col-6 col-md-3 mb-3\">\n                      <div className=\"card\">\n                        {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                          <img\n                            src={file.fileimage}\n                            alt={file.filename}\n                            className=\"card-img-top\"\n                            style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                          />\n                        ) : (\n                          <div className=\"card-body\">\n                            <i className=\"far fa-file-alt\"></i>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Set default prop values\nImageUpload.defaultProps = {\n  maxImageCount: 5, // Default maximum image count\n  updateMode: false,\n  disable:false,\n};\n\nexport default ImageUpload;","import { FaSnowflake, FaWifi, FaTint, FaToilet, FaPlug, FaFireExtinguisher, FaFirstAid, FaVideo, FaCreditCard, FaParking  } from 'react-icons/fa';\n\nexport const STATUSES = {\n    SUBMITTED: \"Submitted\",\n    UNDER_REVIEW: \"Under Review\",\n    REVIEWED: \"Reviewed\",\n    VERIFIED: \"Verified\",\n    VERIFICATION_FAILED: \"Verification Failed\",\n};\n\nexport const DRAFT_COLLECTIONS = {\n    DRAFT_STUDIOS: 'DraftStudios',\n    DRAFT_WORKSHOPS: 'DraftWorkshops',\n    DRAFT_OPEN_CLASSES: 'DraftOpenClasses',\n    DRAFT_COURSES: 'DraftCourses'\n};\n\nexport const LEVELS = {\n    ALL : \"All\",\n    BEGINNERS : \"Beginner\", \n    INTERMEDIATE :\"Intermediate\", \n    ADVANCED :\"Advanced\"\n}\n\nexport const SERVER_URLS = {\n    PROD : 'https://nrityaserver-2b241e0a97e5.herokuapp.com/',\n    LOCAL : 'http://127.0.0.1:8000/'\n}\n\nexport const COLORS = {\n    GREEN: { backgroundColor: \"#28a745\", color: \"#fff\" },     // Green background, white text\n    BLUE: { backgroundColor: \"#007bff\", color: \"#fff\" },      // Blue background, white text\n    YELLOW: { backgroundColor: \"#ffc107\", color: \"#000\" },    // Yellow background, black text\n    RED: { backgroundColor: \"#dc3545\", color: \"#fff\" },       // Red background, white text\n    PURPLE: { backgroundColor: \"#6f42c1\", color: \"#fff\" },    // Purple background, white text\n    ORANGE: { backgroundColor: \"#fd7e14\", color: \"#fff\" },    // Orange background, white text\n    TEAL: { backgroundColor: \"#20c997\", color: \"#fff\" },      // Teal background, white text\n    PINK: { backgroundColor: \"#e83e8c\", color: \"#fff\" },      // Pink background, white text\n    GRAY: { backgroundColor: \"#6c757d\", color: \"#fff\" },       // Gray background, white text\n\n    LIGHTBLUE: { backgroundColor: \"#17a2b8\", color: \"#fff\" }, // Light blue background, white text\n    DARKBLUE: { backgroundColor: \"#343a40\", color: \"#fff\" },  // Dark blue background, white text\n    CYAN: { backgroundColor: \"#00bcd4\", color: \"#fff\" },      // Cyan background, white text\n    INDIGO: { backgroundColor: \"#6610f2\", color: \"#fff\" },    // Indigo background, white text\n    LIME: { backgroundColor: \"#cddc39\", color: \"#000\" },      // Lime background, black text\n    AMBER: { backgroundColor: \"#ffca28\", color: \"#000\" },     // Amber background, black text\n    BROWN: { backgroundColor: \"#795548\", color: \"#fff\" },     // Brown background, white text\n    LIGHTGREEN: { backgroundColor: \"#8bc34a\", color: \"#000\" },// Light green background, black text\n    DEEPPURPLE: { backgroundColor: \"#673ab7\", color: \"#fff\" },// Deep purple background, white text\n    DEEPORANGE: { backgroundColor: \"#ff5722\", color: \"#fff\" },// Deep orange background, white text\n    BLACK: { backgroundColor: \"#000000\", color: \"#fff\" },     // Black background, white text\n    WHITE: { backgroundColor: \"#ffffff\", color: \"#000\" },     // White background, black text\n    SILVER: { backgroundColor: \"#c0c0c0\", color: \"#000\" },    // Silver background, black text\n    GOLD: { backgroundColor: \"#ffd700\", color: \"#000\" },      // Gold background, black text\n    NAVY: { backgroundColor: \"#001f3f\", color: \"#fff\" },      // Navy background, white text\n    OLIVE: { backgroundColor: \"#3d9970\", color: \"#fff\" },     // Olive background, white text\n\n  };\n\nexport const CHIP_LEVELS_DESIGN = {\n    [LEVELS.ALL]: COLORS.GREEN,           // Green background, white text\n    [LEVELS.BEGINNERS]: COLORS.BLUE,     // Blue background, white text\n    [LEVELS.INTERMEDIATE]: COLORS.YELLOW,  // Yellow background, black text\n    [LEVELS.ADVANCED]: COLORS.RED      // Red background, white text\n  };\n  \n\n  \nexport const danceStylesColorChips = [COLORS.PURPLE,COLORS.ORANGE,COLORS.TEAL,COLORS.LIME]\n\nexport const COLLECTIONS = {\n    USER: \"User\",\n    USER_KYC:\"UserKyc\",\n    ADMIN:\"Admin\",\n    REVIEWS: \"Reviews\",\n    TRANSACTIONS: \"Transactions\",\n    STUDIO: \"Studio\",\n    INSTRUCTORS: \"Instructors\",\n    FREE_TRIAL_BOOKINGS:\"FreeTrialBookings\",\n    WORKSHOPS: 'Workshops',\n    OPEN_CLASSES: 'OpenClasses',\n    COURSES: 'Courses',\n    BOOKINGS: 'Bookings',\n}\n\nexport const STORAGES ={\n    STUDIOIMAGES:'StudioImages',\n    STUDIOICON:'StudioIcon',\n    STUDIOANNOUNCEMENTS :'StudioAnnouncements',\n    USERIMAGE:'UserImage',\n    INSTRUCTORIMAGES: 'InstructorImages',\n    WORKSHOPICON :\"WorkshopIcon\",\n    WORKSHOPIMAGES :\"WorkshopImages\",\n    OPENCLASSICON :\"OpenClassIcon\",\n    COURSEICON :\"CourseIcon\",\n    CREATORS_KYC_DOCUMENTS :\"CreatorKycDocuments\"\n}\n\nexport const SEARCH_FILTERS ={\n    DANCEFORMS:'danceforms',\n    DISTANCES:'distances',\n}\n\nexport const BASEURL_DEV = \"http://127.0.0.1:8000/\"\nexport const BASEURL_PROD= \"https://nrityaserver-2b241e0a97e5.herokuapp.com/\"\n\nexport const AMENITIES_ICONS = {\n    \"AC\": <FaSnowflake />,\n    \"Free Wifi\": <FaWifi />,\n    \"RO Water\": <FaTint />,\n    \"Toilet\": <FaToilet />,\n    \"Power Backup\": <FaPlug />,\n    \"Fire Extinguisher\": <FaFireExtinguisher />,\n    \"First Aid Kit\": <FaFirstAid />,\n    \"CCTV Camera\": <FaVideo />,\n    \"Card Payment\": <FaCreditCard />,\n    \"Parking Space\": <FaParking />,\n};\n\n","import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, query, getDocs, where, getCountFromServer } from 'firebase/firestore';\nimport { db } from '../config';\nimport {ref,listAll,getDownloadURL,uploadBytes, deleteObject  } from \"firebase/storage\";\nimport { storage } from '../config';\nimport { COLLECTIONS } from '../constants';\nimport secureLocalStorage from 'react-secure-storage';\n\nexport const setCreatorMode = async (uid) => {\n  console.log(\"setCreatorMode \",uid)\n  try{\n  const userRef = doc(db, COLLECTIONS.USER, uid);\n  const userSnap = await getDoc(userRef);\n  if (userSnap.exists()) {\n    if(userSnap.data() != null){\n      const mode = userSnap.data().CreatorMode\n      console.log(\"setCreatorMode: Is User a creator?\",mode)\n      secureLocalStorage.setItem('CreatorMode', mode);\n        \n    }else{\n      console.log(\"userSnap.data() null\")\n      \n    }\n  } else {\n    console.log(\"User not found\");\n  }\n  }catch(error){\n    console.log(\" error\");\n  }\n}\n\nexport const getCreatorMode = async () => {\n  try{\n    const mode = secureLocalStorage.getItem('CreatorMode');\n    console.log(\"getCreatorMode \",mode)\n    if (mode){\n      return mode\n    }else{\n      return false\n    }\n  } \n  catch(error){\n    console.log(\" error\");\n    return false\n  }\n}\n\n// Read operation with image URL\nexport const readDocumentWithImageUrl = async (collectionName, productId) => {\n    console.log(\"Debug \",`${collectionName}/${productId}`)\n    const storagePath = `${collectionName}/${productId}`;\n    const folderRef = ref(storage,storagePath);\n    try {\n        const result = await listAll(folderRef);\n        if (result.items.length > 0) {\n            const firstFileRef = result.items[0];\n            const url = await getDownloadURL(firstFileRef);\n            console.log('Debug URL:', url);\n            return url;\n          } else {\n            console.log('Debug No files found in the folder.');\n            return null;\n          }\n    } catch (error) {\n      console.error('Error getting image URL:', error);\n      return null;\n    }\n  };\n\n// Read operation\nexport const readDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    const docSnapshot = await getDoc(docRef);\n    return docSnapshot.exists() ? docSnapshot.data() : null;\n};\n\n// Create or Update operation\nexport const saveDocument = async (collectionName, documentId, data) => {\n    const docRef = doc(db, collectionName, documentId);\n    await setDoc(docRef, data, { merge: true });\n    return data;\n};\n\n\nexport const handleSavePostOTPSuccess = async (collectionName, documentId, phoneNumber) => {\n  const docRef = doc(db, collectionName, documentId);\n  await updateDoc(docRef, {isPhoneNumberVerified:true,phoneNumber});\n  return true;\n};\n\n// Update specific fields in a document\nexport const updateDocumentFields = async (collectionName, documentId, fields) => {\n    const docRef = doc(db, collectionName, documentId);\n    await updateDoc(docRef, fields);\n    return { id: documentId, ...fields };\n};\n\n// Delete operation\nexport const deleteDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    await deleteDoc(docRef);\n    return { id: documentId };\n};\n\n// Query operation\nexport const queryDocuments = async (collectionName, conditions) => {\n    const q = query(collection(db, collectionName, conditions));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const queryDocumentsCount = async (collectionName,field,operation,value) => {\n    console.log(\"Hiii \",collectionName,field,operation,value)\n    const q = query(collection(db, collectionName), where(field,operation,value));\n    const snapshot = await getCountFromServer(q);\n    return snapshot.data().count;\n};\n\n\n  // Function to delete all images in a folder\nexport  const deleteAllImagesInFolder = async (storageFolder, entityId) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n  // Function to delete images\nexport const deleteImages = async (storageFolder,imagesToDelete,entityId) => {\n    /*\n    Description: Deletes specific images associated with the given entityId.\n\n    Args:\n      imagesToDelete <array>: An array of image objects to be deleted.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n    await Promise.all(imagesToDelete.map(async (file) => {\n      const fileRefToDelete = ref(storage, `${storageFolder}/${entityId}/${file.filename}`);\n      await deleteObject(fileRefToDelete);\n    }));\n  };\n\n  // Function to upload new images\nexport const uploadImages = async (storageFolder, newImages, entityId) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n\n    Args:\n      newImages <array>: An array of new image objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n   console.log(storageFolder,entityId)\n    await Promise.all(newImages.map(async (newFileData) => {\n      const folderPath = `${storageFolder}/${entityId}`;\n      const fileRef = ref(storage, `${folderPath}/${newFileData.file.name}`);\n      await uploadBytes(fileRef, newFileData.file);\n    }));\n  };\n\n export const uploadOneImageAndGetURL = async (storageFolder, file, entityId) => {\n    try {\n      const folderPath = `${storageFolder}/${entityId}/${file.name}`;\n      console.log(folderPath)\n      const fileRef = ref(storage, folderPath);\n      \n      await uploadBytes(fileRef, file);\n  \n      const imageUrl = await getDownloadURL(fileRef);\n      console.log(imageUrl)\n      return imageUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error; \n    }\n  };\n  \n  export const getAllImagesInFolder = async (storageFolder) => {\n    const folderPath = `${storageFolder}`;\n    const folderRef = ref(storage, folderPath);\n    \n    try {\n        const fileList = await listAll(folderRef);\n\n        const imageUrlsComprehensive = await Promise.all(\n          fileList.items.map(async (fileRef) => {\n            const downloadURL = await getDownloadURL(fileRef);\n  \n            return {\n              id: fileRef.name,\n              filename: fileRef.name,\n              fileURL: downloadURL,\n            };\n          })\n        );\n\n        // return imageUrls;\n        return imageUrlsComprehensive\n    } catch (error) {\n        console.error('Error retrieving images:', error);\n        throw error;\n    }\n};\n\n"],"names":["ImageUpload","_ref","entityId","storageFolder","title","maxImageCount","updateMode","disable","showSnackbar","useSnackbar","selectedFiles","setSelectedFiles","useState","uploadedFiles","setUploadedFiles","newFiles","setNewFiles","deletedFiles","setDeletedFiles","isDarkModeOn","useSelector","selectDarkModeStatus","console","log","filesizes","bytes","decimals","arguments","length","undefined","dm","i","Math","floor","parseFloat","pow","toFixed","useEffect","fetchStudioImages","truncatedFiles","slice","alert","calculateDelta","selectedFileIds","map","file","id","uploadedFileIds","imagesToDelete","filter","includes","newImages","async","folderPath","folderRef","ref","storage","fileList","listAll","files","Promise","all","items","downloadURL","getDownloadURL","fileRef","name","filename","fileURL","error","_jsx","className","style","display","width","justifyContent","children","flex","backgroundColor","_jsxs","STORAGES","STUDIOIMAGES","type","onChange","e","Array","from","target","updatedFiles","forEach","reader","FileReader","onloadend","push","shortid","filetype","fileimage","result","datetime","lastModifiedDate","toLocaleString","filesize","size","prevFiles","readAsDataURL","multiple","position","Card","sx","maxWidth","match","src","alt","maxHeight","objectFit","IconButton","disabled","onClick","window","confirm","fileToDelete","find","prevDeletedFiles","handleDeleteSelectedFile","top","right","DeleteIcon","color","CardContent","deleteAllImagesInFolder","uploadImages","deleteImages","hidden","defaultProps","STATUSES","SUBMITTED","UNDER_REVIEW","REVIEWED","VERIFIED","VERIFICATION_FAILED","DRAFT_COLLECTIONS","DRAFT_STUDIOS","DRAFT_WORKSHOPS","DRAFT_OPEN_CLASSES","DRAFT_COURSES","LEVELS","ALL","BEGINNERS","INTERMEDIATE","ADVANCED","SERVER_URLS","PROD","LOCAL","COLORS","GREEN","BLUE","YELLOW","RED","PURPLE","ORANGE","TEAL","PINK","GRAY","LIGHTBLUE","DARKBLUE","CYAN","INDIGO","LIME","AMBER","BROWN","LIGHTGREEN","DEEPPURPLE","DEEPORANGE","BLACK","WHITE","SILVER","GOLD","NAVY","OLIVE","CHIP_LEVELS_DESIGN","danceStylesColorChips","COLLECTIONS","USER","USER_KYC","ADMIN","REVIEWS","TRANSACTIONS","STUDIO","INSTRUCTORS","FREE_TRIAL_BOOKINGS","WORKSHOPS","OPEN_CLASSES","COURSES","BOOKINGS","STUDIOICON","STUDIOANNOUNCEMENTS","USERIMAGE","INSTRUCTORIMAGES","WORKSHOPICON","WORKSHOPIMAGES","OPENCLASSICON","COURSEICON","CREATORS_KYC_DOCUMENTS","BASEURL_PROD","AMENITIES_ICONS","FaSnowflake","FaWifi","FaTint","FaToilet","FaPlug","FaFireExtinguisher","FaFirstAid","FaVideo","FaCreditCard","FaParking","setCreatorMode","uid","userRef","doc","db","userSnap","getDoc","exists","data","mode","CreatorMode","secureLocalStorage","setItem","readDocumentWithImageUrl","collectionName","productId","storagePath","firstFileRef","url","readDocument","documentId","docRef","docSnapshot","saveDocument","setDoc","merge","handleSavePostOTPSuccess","phoneNumber","updateDoc","isPhoneNumberVerified","updateDocumentFields","fields","queryDocumentsCount","field","operation","value","q","query","collection","where","getCountFromServer","count","deleteObject","fileRefToDelete","newFileData","uploadBytes","getAllImagesInFolder"],"sourceRoot":""}