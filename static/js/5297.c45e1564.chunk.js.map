{"version":3,"file":"static/js/5297.c45e1564.chunk.js","mappings":"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","sources":["Components/InstructorAdd.js","Components/InstructorUpdate.js","Components/InstructorCard.js","Screens/CreatorInstructor.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Button, Col, Row, Image } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\nimport { FaFacebook, FaInstagram, FaTwitter, FaYoutube } from \"react-icons/fa\";\nimport { addDoc, collection } from \"firebase/firestore\";\nimport {\n  ref,\n  uploadBytes,\n  getDownloadURL,\n  listAll,\n  deleteObject,\n} from \"firebase/storage\";\nimport { COLLECTIONS } from \"../constants\";\nimport { STORAGES } from \"../constants\";\nimport { db } from \"../config\";\nimport { storage } from \"../config\";\nimport { postData } from \"../utils/common\";\nimport danceStyles from \"../danceStyles.json\";\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\n\nconst handleProfilePictureChange = async (file, userId) => {\n  console.log(\"Inside handleProfilePictureChange\");\n  try {\n    // Delete old files in the storage folder\n    const storageFolder = STORAGES.INSTRUCTORIMAGES; // Replace with your desired storage folder name\n    const folderPath = `${storageFolder}/${userId}`;\n    const storageRef = ref(storage, folderPath);\n    console.log(\"handleProfilePictureChange \", storageFolder, folderPath);\n\n    const itemsToDelete = await listAll(storageRef);\n    itemsToDelete.items.forEach(async (itemRef) => {\n      await deleteObject(itemRef);\n    });\n\n    // Upload the new file\n    const fileRef = ref(storage, `${folderPath}/${file.name}`);\n    await uploadBytes(fileRef, file);\n\n    // Get the updated download URL for the uploaded image\n    const imageUrl = await getDownloadURL(fileRef);\n\n    // Return the profile picture URL\n    return imageUrl;\n  } catch (error) {\n    console.error(\"Error handling profile picture:\", error);\n    throw error; // Propagate the error up\n  }\n};\n\nfunction InstructorAdd() {\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n  const [selectedImage, setSelectedImage] = useState(null); // Track selected image\n  const [toUploadImage, setToUploadImage] = useState(null);\n  const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n\n  const danceStylesOptions = danceStyles.danceStyles;\n\n  const handleImageChange = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      setSelectedImage(URL.createObjectURL(file));\n      setToUploadImage(file);\n    }\n  };\n\n  const handleDanceStylesChange = (event, value) => {\n    setSelectedDanceStyles(value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    console.log(\"Hi\");\n    let createdBy = null;\n    if (\n      JSON.parse(localStorage.getItem(\"userInfo\")) &&\n      JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n    ) {\n      createdBy = JSON.parse(localStorage.getItem(\"userInfo\")).UserId;\n    }\n    if (!createdBy) {\n      console.log(\"Created by not found\");\n      alert(\"User not found\");\n    }\n    const currentUserEmail = JSON.parse(\n      localStorage.getItem(\"userInfo\")\n    )?.email;\n    console.log(createdBy);\n    try {\n      const instructorData = {\n        name: e.target.name.value,\n        danceStyles: selectedDanceStyles?.join(\",\") || \"\",\n        experience: e.target.experience.value,\n        age: e.target.age.value,\n        email: e.target.email.value,\n        description: e.target.description.value,\n        facebook: e.target.facebook.value,\n        instagram: e.target.instagram.value,\n        twitter: e.target.twitter.value,\n        youtube: e.target.youtube.value,\n        createdBy: createdBy,\n        ownedBy: null,\n      };\n\n      const notifyEmails = currentUserEmail;\n      const metaData = {\n        entity_name: e.target.name.value,\n      };\n      const response = await postData(\n        instructorData,\n        COLLECTIONS.INSTRUCTORS,\n        notifyEmails,\n        metaData\n      );\n\n      if (response.ok) {\n        const result = await response.json();\n        console.log(\"Instructor added:\", result, result?.id);\n\n        if (selectedImage && toUploadImage && result.id) {\n          // const file = e.target.files[0];\n          const imageUrl = await handleProfilePictureChange(\n            toUploadImage,\n            result.id\n          );\n          console.log(\"Profile picture uploaded:\", imageUrl);\n        }\n      } else {\n        console.error(\"Error adding instructor:\", response.statusText);\n      }\n\n      console.log(\"Instructor added successfully\");\n      alert(\"Instructor added successfully\");\n    } catch (error) {\n      alert(\"Error\", error);\n    }\n  };\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: isDarkModeOn ? \"dark\" : \"light\",\n    },\n  });\n\n  return (\n    <div\n      style={{\n        backgroundColor: isDarkModeOn ? \"#202020\" : \"white\",\n        color: isDarkModeOn ? \"white\" : \"black\",\n      }}\n    >\n      <Row>\n        <Col md={4}>\n          <h1\n            style={{\n              backgroundColor: isDarkModeOn ? \"#202020\" : \"white\",\n              color: isDarkModeOn ? \"white\" : \"black\",\n              textTransform: \"capitalize\",\n              textAlign: \"center\",\n            }}\n          >\n            Add Dance Teacher\n          </h1>\n        </Col>\n      </Row>\n      <Form className=\"mt-4\" onSubmit={handleSubmit}>\n        <Row className=\"gy-3\">\n          <Col md={4} className=\"text-center\">\n            <Form.Group controlId=\"formFile\">\n              <Form.Label>\n                <div\n                  style={{\n                    width: \"18rem\",\n                    height: \"18rem\",\n                    borderRadius: \"1rem\",\n                    overflow: \"hidden\",\n                    margin: \"auto\",\n                    backgroundColor: isDarkModeOn ? \"#d3d3d3\" : \"#000\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                  }}\n                >\n                  {selectedImage ? (\n                    <Image\n                      src={selectedImage}\n                      alt=\"Selected\"\n                      style={{\n                        width: \"100%\",\n                        height: \"100%\",\n                        display: selectedImage ? \"block\" : \"none\",\n                      }}\n                    />\n                  ) : (\n                    <span style={{ color: \"white\", fontSize: \"1rem\" }}>\n                      No Image\n                    </span>\n                  )}\n                </div>\n              </Form.Label>\n              <div className=\"mt-3\">\n                <label\n                  htmlFor=\"fileInput\"\n                  className=\"btn btn-primary\"\n                  style={{\n                    cursor: \"pointer\",\n                    borderRadius: \"14px\",\n                    textTransform: \"capitalize\",\n                  }}\n                >\n                  Image +\n                  <input\n                    type=\"file\"\n                    id=\"fileInput\"\n                    name=\"picture\"\n                    accept=\"image/*\"\n                    style={{ display: \"none\" }}\n                    onChange={handleImageChange}\n                  />\n                </label>\n              </div>\n            </Form.Group>\n          </Col>\n\n          <Col md={8}>\n            <Form.Group>\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter name\"\n                name=\"name\"\n                style={{\n                  backgroundColor: isDarkModeOn ? \"#333\" : \"\",\n                  color: isDarkModeOn ? \"white\" : \"black\",\n                }}\n              />\n            </Form.Group>\n\n            <Row className=\"mt-3\">\n              <Col md={6}>\n                <Form.Group>\n                  <Form.Label>Age</Form.Label>\n                  <Form.Control\n                    type=\"number\"\n                    placeholder=\"Enter age\"\n                    name=\"age\"\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                  />\n                </Form.Group>\n              </Col>\n\n              <Col md={6}>\n                <Form.Group>\n                  <Form.Label>Experience (Years)</Form.Label>\n                  <Form.Control\n                    type=\"number\"\n                    placeholder=\"Enter experience\"\n                    name=\"experience\"\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                  />\n                </Form.Group>\n              </Col>\n            </Row>\n\n            <Form.Group className=\"mt-3\">\n              <Form.Label>Dance Styles</Form.Label>\n              <ThemeProvider theme={darkTheme}>\n                <Autocomplete\n                  style={{\n                    backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                    color: isDarkModeOn ? \"white\" : \"black\",\n                  }}\n                  multiple\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{\n                        backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                        color: isDarkModeOn ? \"white\" : \"black\",\n                      }}\n                    />\n                  )}\n                />\n              </ThemeProvider>\n            </Form.Group>\n\n            <Form.Group className=\"mt-3\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                placeholder=\"Enter email ID of instructor\"\n                name=\"email\"\n                style={{\n                  backgroundColor: isDarkModeOn ? \"#333\" : \"\",\n                  color: isDarkModeOn ? \"white\" : \"black\",\n                }}\n              />\n            </Form.Group>\n          </Col>\n        </Row>\n\n        <Row>\n          <Form.Label>Description</Form.Label>\n          <Form.Control\n            as=\"textarea\"\n            rows={3}\n            placeholder=\"Enter description\"\n            name=\"description\"\n            style={{\n              backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n              color: isDarkModeOn ? \"white\" : \"black\",\n            }}\n            required\n          />\n        </Row>\n        <Form.Label>Social Links</Form.Label>\n        <Row>\n          <Col>\n            <FaFacebook\n              size={30}\n              style={{ color: isDarkModeOn ? \"white\" : \"black\" }}\n            />\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Facebook profile URL\"\n              name=\"facebook\"\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            />\n          </Col>\n          <Col>\n            <FaInstagram\n              size={30}\n              style={{ color: isDarkModeOn ? \"white\" : \"black\" }}\n            />\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Instagram profile URL\"\n              name=\"instagram\"\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            />\n          </Col>\n          <Col>\n            <FaTwitter\n              size={30}\n              style={{ color: isDarkModeOn ? \"white\" : \"black\" }}\n            />\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Twitter profile URL\"\n              name=\"twitter\"\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            />\n          </Col>\n          <Col>\n            <FaYoutube\n              size={30}\n              style={{ color: isDarkModeOn ? \"white\" : \"black\" }}\n            />\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Youtube channel URL\"\n              name=\"youtube\"\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            />\n          </Col>\n        </Row>\n\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          style={{\n            backgroundColor: isDarkModeOn ? \"#892CDC\" : \"black\",\n            color: \"white\",\n          }}\n        >\n          Submit\n        </Button>\n      </Form>\n    </div>\n  );\n}\n\nexport default InstructorAdd;\n","import React, { useState, useEffect } from \"react\";\nimport { Form, Button, Col, Row, Image } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\nimport { FaFacebook, FaInstagram, FaTwitter, FaYoutube } from \"react-icons/fa\";\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport {\n  ref,\n  uploadBytes,\n  getDownloadURL,\n  listAll,\n  deleteObject,\n} from \"firebase/storage\";\nimport { COLLECTIONS } from \"../constants\";\nimport { STORAGES } from \"../constants\";\nimport { db, storage } from \"../config\";\nimport { putData } from \"../utils/common\";\nimport { createTheme, ThemeProvider } from \"@mui/material\";\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport danceStyles from \"../danceStyles.json\";\n\nfunction InstructorUpdate({ instructors, setInstructors }) {\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n  const [selectedInstructor, setSelectedInstructor] = useState(null);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [toUploadImage, setToUploadImage] = useState(null);\n  const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n\n  const danceStylesOptions = danceStyles.danceStyles;\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: isDarkModeOn ? \"dark\" : \"light\",\n    },\n  });\n\n  const handleDanceStylesChange = (event, value) => {\n    setSelectedDanceStyles(value);\n  };\n\n  // Handle instructor selection from dropdown\n  const handleInstructorSelection = async (event) => {\n    event.preventDefault();\n    const instructorId = event.target.value;\n    ////console.log(instructorId);\n    const instructorDoc = await getDoc(\n      doc(db, COLLECTIONS.INSTRUCTORS, instructorId)\n    );\n    const instructorData = instructorDoc.data();\n    setSelectedInstructor({\n      id: instructorDoc.id,\n      ...instructorData,\n    });\n    setSelectedDanceStyles(instructorData?.danceStyles?.split?.(\",\") || []);\n    //////console.log(selectedInstructor);\n  };\n\n  useEffect(() => {\n    if (selectedInstructor) {\n      ////console.log(\"Instructor id changes : \",selectedInstructor.id)\n      const userId = selectedInstructor.id;\n      //////console.log(userId)\n      if (userId) {\n        const storagePath = `${STORAGES.INSTRUCTORIMAGES}/${userId}`;\n        const folderRef = ref(storage, storagePath);\n\n        try {\n          listAll(folderRef)\n            .then((result) => {\n              if (result.items.length > 0) {\n                const firstFileRef = result.items[0];\n                getDownloadURL(firstFileRef)\n                  .then((url) => {\n                    setSelectedImage(url);\n                    setToUploadImage(url);\n                    ////console.log(\"Image selected: \",selectedImage);\n                  })\n                  .catch((error) => {\n                    console.error(\"Error fetching studio icon:\", error);\n                  });\n              } else {\n                ////console.log('No files found in the folder.');\n                setSelectedImage(null);\n                setToUploadImage(null);\n              }\n            })\n            .catch((error) => {\n              console.error(\"Error listing files in the folder:\", error);\n            });\n        } catch (error) {\n          console.error(\"Error fetching studio icon:\", error);\n        }\n      }\n      //setSelectedInstructors((selectedStudio.instructorsNames));\n      // setSelectedImage\n    }\n  }, [selectedInstructor]);\n\n  // Handle image change\n  const handleImageChangeUpdate = (e) => {\n    ////console.log(\"Selected file new:\");\n    const file = e.target.files[0];\n    ////console.log(\"Selected file:\", file);\n\n    if (file) {\n      setSelectedImage(URL.createObjectURL(file));\n      setToUploadImage(file);\n    }\n  };\n\n  // Handle form submission for updating instructor\n  const handleUpdateSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!selectedInstructor) {\n      alert(\"Please select an instructor to update.\");\n      return;\n    }\n\n    try {\n      // Update instructor details\n      const updatedInstructorData = {\n        name: e.target.name.value,\n        danceStyles: selectedDanceStyles?.join?.(\",\") || \"\",\n        experience: e.target.experience.value,\n        age: e.target.age.value,\n        email: e.target.email.value,\n        description: e.target.description.value,\n        facebook: e.target.facebook.value,\n        instagram: e.target.instagram.value,\n        twitter: e.target.twitter.value,\n        youtube: e.target.youtube.value,\n      };\n\n      const response = await putData(\n        updatedInstructorData,\n        COLLECTIONS.INSTRUCTORS,\n        selectedInstructor.id\n      );\n\n      if (response.ok) {\n        // Merge the updated details into the selected instructor\n        setSelectedInstructor((prevInstructor) => ({\n          ...prevInstructor,\n          ...updatedInstructorData,\n        }));\n\n        if (selectedImage && toUploadImage) {\n          const imageUrl = await handleProfilePictureChange(\n            toUploadImage,\n            selectedInstructor.id\n          );\n          ////console.log('Profile picture uploaded:', imageUrl);\n        }\n\n        ////console.log('Instructor updated successfully');\n        alert(\"Instructor updated successfully\");\n      } else {\n        console.error(\"Error adding instructor:\", response.statusText);\n      }\n\n      /*\n\n      // Merge the updated details into the selected instructor\n      setSelectedInstructor((prevInstructor) => ({\n        ...prevInstructor,\n        ...updatedInstructorData,\n      }));\n\n      // Update data in Firestore\n      await updateDoc(doc(db, COLLECTIONS.INSTRUCTORS, selectedInstructor.id), updatedInstructorData);\n\n      // Handle profile picture change\n      if (selectedImage && toUploadImage) {\n        const imageUrl = await handleProfilePictureChange(toUploadImage, selectedInstructor.id);\n        ////console.log('Profile picture uploaded:', imageUrl);\n      }\n\n      ////console.log('Instructor updated successfully');\n      alert('Instructor updated successfully');\n      */\n    } catch (error) {\n      console.error(\"Error updating instructor\", error);\n      alert(\"Error updating instructor\");\n    }\n  };\n\n  // Handle profile picture change\n  const handleProfilePictureChange = async (file, userId) => {\n    try {\n      // Delete old files in the storage folder\n      const storageFolder = STORAGES.INSTRUCTORIMAGES;\n      const folderPath = `${storageFolder}/${userId}`;\n      const storageRef = ref(storage, folderPath);\n\n      const itemsToDelete = await listAll(storageRef);\n      itemsToDelete.items.forEach(async (itemRef) => {\n        await deleteObject(itemRef);\n      });\n\n      // Upload the new file\n      const fileRef = ref(storage, `${folderPath}/${file.name}`);\n      await uploadBytes(fileRef, file);\n\n      // Get the updated download URL for the uploaded image\n      const imageUrl = await getDownloadURL(fileRef);\n\n      // Return the profile picture URL\n      return imageUrl;\n    } catch (error) {\n      console.error(\"Error handling profile picture:\", error);\n      throw error;\n    }\n  };\n\n  return (\n    <div>\n      <h1\n        style={{\n          color: isDarkModeOn ? \"white\" : \"black\",\n          textTransform: \"capitalize\",\n        }}\n      >\n        Update Dance Teacher\n      </h1>\n      <Form className=\"mt-4\" onSubmit={handleUpdateSubmit}>\n        <Form.Control\n          as=\"select\"\n          onChange={handleInstructorSelection}\n          style={{\n            backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n            height: \"auto\",\n            marginBottom: \"1rem\",\n          }}\n        >\n          <option\n            style={{\n              backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n              color: isDarkModeOn ? \"white\" : \"black\",\n            }}\n          >\n            Select an instructor\n          </option>\n          {instructors.map((instructor) => (\n            <option key={instructor.id} value={instructor.id}>\n              {`${instructor.name} - ${instructor.id}`}\n            </option>\n          ))}\n        </Form.Control>\n\n        <Row className=\"gy-3\">\n          <Col md={4} className=\"text-center\">\n            <Form.Group controlId=\"formFile\" className=\"mb-3\">\n              <Form.Label>\n                <Row>\n                  <div\n                    style={{\n                      width: \"18rem\",\n                      height: \"18rem\",\n                      borderRadius: \"1rem\",\n                      overflow: \"hidden\",\n                      margin: \"auto\",\n                      backgroundColor: isDarkModeOn ? \"#d3d3d3\" : \"#000\",\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                    }}\n                  >\n                    {selectedImage && (\n                      <Image\n                        src={selectedImage}\n                        alt=\"Selected\"\n                        style={{\n                          width: \"100%\",\n                          height: \"100%\",\n                          display: selectedImage ? \"block\" : \"none\",\n                        }}\n                      />\n                    )}\n                  </div>\n                </Row>\n              </Form.Label>\n              {/* <Row> */}\n              <div className=\"mt-3\">\n                <label\n                  htmlFor=\"fileInput\"\n                  className=\"btn btn-primary\"\n                  style={{\n                    cursor: \"pointer\",\n                    borderRadius: \"14px\",\n                    textTransform: \"capitalize\",\n                  }}\n                >\n                  Image +\n                  <input\n                    type=\"file\"\n                    id=\"fileInput\"\n                    name=\"picture\"\n                    accept=\"image/*\"\n                    style={{ display: \"none\" }}\n                    onChange={handleImageChangeUpdate}\n                  />\n                </label>\n              </div>\n\n              {/* <div style={{ textAlign: \"center\" }}>\n                  <label htmlFor=\"fileInput\" style={{ cursor: \"pointer\" }}>\n                    <span\n                      style={{ marginBottom: \"2px\", fontSize: \"2rem\" }}\n                    ></span>\n                    <input\n                      type=\"file\"\n                      id=\"fileInput\"\n                      name=\"picture\"\n                      accept=\"image/*\"\n                      style={{}}\n                      onChange={handleImageChangeUpdate}\n                    />\n                  </label>\n                </div> */}\n              {/* </Row> */}\n            </Form.Group>\n          </Col>\n          <Col md={8}>\n            <Form.Group>\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter name\"\n                name=\"name\"\n                defaultValue={selectedInstructor ? selectedInstructor.name : \"\"}\n                style={{\n                  backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                  color: isDarkModeOn ? \"white\" : \"black\",\n                }}\n              />\n            </Form.Group>\n\n            <Row className=\"mt-3\">\n              <Col md={6}>\n                <Form.Group>\n                  <Form.Label>Age</Form.Label>\n                  <Form.Control\n                    type=\"number\"\n                    placeholder=\"Enter age\"\n                    name=\"age\"\n                    defaultValue={\n                      selectedInstructor ? selectedInstructor.age : \"\"\n                    }\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                  />\n                </Form.Group>\n              </Col>\n\n              <Col md={6}>\n                <Form.Group>\n                  <Form.Label>Experience</Form.Label>\n                  <Form.Control\n                    type=\"number\"\n                    placeholder=\"Enter experience (in years)\"\n                    name=\"experience\"\n                    defaultValue={\n                      selectedInstructor ? selectedInstructor.experience : \"\"\n                    }\n                    style={{\n                      backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                      color: isDarkModeOn ? \"white\" : \"black\",\n                    }}\n                  />\n                </Form.Group>\n              </Col>\n            </Row>\n\n            {/* <Form.Label>Dance Styles</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter dance styles\"\n              name=\"danceStyles\"\n              defaultValue={\n                selectedInstructor ? selectedInstructor.danceStyles : \"\"\n              }\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            /> */}\n\n            <Form.Group className=\"mt-3\">\n              <Form.Label>Dance Styles</Form.Label>\n              <ThemeProvider theme={darkTheme}>\n                <Autocomplete\n                  style={{\n                    backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                    color: isDarkModeOn ? \"white\" : \"black\",\n                  }}\n                  multiple\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{\n                        backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                        color: isDarkModeOn ? \"white\" : \"black\",\n                      }}\n                    />\n                  )}\n                />\n              </ThemeProvider>\n            </Form.Group>\n\n            <Form.Group className=\"mt-3\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                placeholder=\"Enter email Id of instructor\"\n                name=\"email\"\n                defaultValue={\n                  selectedInstructor ? selectedInstructor.email : \"\"\n                }\n                style={{\n                  backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                  color: isDarkModeOn ? \"white\" : \"black\",\n                }}\n              />\n            </Form.Group>\n          </Col>\n        </Row>\n\n        <Form.Label>Description</Form.Label>\n        <Form.Control\n          as=\"textarea\"\n          rows={3}\n          placeholder=\"Enter description\"\n          name=\"description\"\n          defaultValue={\n            selectedInstructor ? selectedInstructor.description : \"\"\n          }\n          style={{\n            backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n            color: isDarkModeOn ? \"white\" : \"black\",\n          }}\n        />\n\n        <Form.Label>Social Links</Form.Label>\n        <Row>\n          <Col>\n            <FaFacebook size={30} />\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Facebook profile URL\"\n              name=\"facebook\"\n              defaultValue={\n                selectedInstructor ? selectedInstructor.facebook : \"\"\n              }\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            />\n          </Col>\n          <Col>\n            <FaInstagram size={30} />\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Instagram profile URL\"\n              name=\"instagram\"\n              defaultValue={\n                selectedInstructor ? selectedInstructor.instagram : \"\"\n              }\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            />\n          </Col>\n          <Col>\n            <FaTwitter size={30} />\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Twitter profile URL\"\n              name=\"twitter\"\n              defaultValue={\n                selectedInstructor ? selectedInstructor.twitter : \"\"\n              }\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            />\n          </Col>\n          <Col>\n            <FaYoutube size={30} />\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Youtube channel URL\"\n              name=\"youtube\"\n              defaultValue={\n                selectedInstructor ? selectedInstructor.youtube : \"\"\n              }\n              style={{\n                backgroundColor: isDarkModeOn ? \"#333333\" : \"\",\n                color: isDarkModeOn ? \"white\" : \"black\",\n              }}\n            />\n          </Col>\n        </Row>\n\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          style={{\n            backgroundColor: isDarkModeOn ? \"#892CDC\" : \"black\",\n            color: \"white\",\n          }}\n        >\n          Update Instructor\n        </Button>\n      </Form>\n    </div>\n  );\n}\n\nexport default InstructorUpdate;\n","import React, {useState,useEffect} from 'react';\nimport { Card, Badge, Row, Col } from 'react-bootstrap';\nimport { FaFacebook, FaInstagram, FaTwitter, FaYoutube } from 'react-icons/fa';\nimport { useSelector } from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport { ref, getDownloadURL, listAll } from 'firebase/storage';\nimport { storage } from '../config';\nimport { STORAGES } from '../constants';\n\nfunction InstructorCard({ instructor ,id}) {\n  const danceStyles = instructor.danceStyles ? instructor.danceStyles.split(',') : [];\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n  const [imageURL, setImageURL] = useState(null);\n\n  const cardStyle = {\n    width: '18rem',\n    margin: '5px',\n    backgroundColor: isDarkModeOn ? '#333333' : 'black',\n    color: isDarkModeOn ? 'white' : 'black',\n  };\n\n  const imgStyle = {\n    width: '5rem',\n    height: '5rem',\n    borderRadius: '50%',\n    marginRight: '1px',\n  };\n\n  const defaultImgStyle = {\n    width: '60px',\n    height: '60px',\n    borderRadius: '50%',\n    marginRight: '10px',\n    backgroundColor: isDarkModeOn ? '#555' : '#d3d3d3',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  };\n\n  useEffect(() => {\n    // Fetch the image URL when the component mounts\n    const getImageURL = async () => {\n      \n      if(instructor && instructor.id){\n        //console.log(\"Instructor dp\",instructor.id)\n        const storagePath = `${STORAGES.INSTRUCTORIMAGES}/${instructor.id}`;\n        const folderRef = ref(storage, storagePath);\n        try {\n          listAll(folderRef)\n          .then((result) => {\n            if (result.items.length > 0) {\n              const firstFileRef = result.items[0];\n              getDownloadURL(firstFileRef)\n                .then((url) => {\n                  setImageURL(url);\n                  ////console.log(url,imageURL)\n                })\n                .catch((error) => {\n                  console.error('Error fetching studio icon:', error);\n                });\n            } else {\n              //console.log('No files found in the folder.');\n            }\n          })\n          .catch((error) => {\n            console.error('Error listing files in the folder:', error);\n          });\n        } catch (error) {\n          console.error('Error fetching image URL:', error);\n        }\n      }\n      \n    };\n\n    getImageURL();\n  }, []);\n\n\n  return (\n    <Card style={cardStyle}>\n      \n      <Card.Body>\n        \n          <Row>\n            <Col md={4}>\n              {imageURL ? (\n                <Card.Img variant=\"top\" src={imageURL} alt=\"Instructor\" style={imgStyle} />\n              ) : (\n                <div style={defaultImgStyle}>\n                  <span style={{ color: isDarkModeOn ? 'white' : 'black' }}></span>\n                </div>\n              )}\n            </Col>\n            <Col md={6}>\n              <h style={{ color: isDarkModeOn ? 'white' : 'white' }}>Instructor</h>\n              <br></br>\n              <span style={{ color: isDarkModeOn ? 'white' : 'white' }}>{instructor.name}</span>\n            </Col>\n          </Row>\n          <br></br>\n          <Row>\n        <Card.Subtitle className=\"mb-2 text-muted\" style={{ fontSize: '8px' }} >{` ${instructor.id}`}</Card.Subtitle>\n        \n        <div>\n          {instructor.description && (\n                    <p style={{ fontSize: '14px' , color: isDarkModeOn ? 'white' : 'white'}}> {instructor.description} year(s)</p>\n          )}\n        </div>\n\n        <div>\n          {instructor.experience && (\n                    <p style={{ fontSize: '12px', color: isDarkModeOn ? 'white' : 'white' }}>Exp: {instructor.experience} year(s)</p>\n\n          )}\n        </div>\n        <div>\n          {danceStyles.map((style, index) => (\n            <Badge key={index} pill bg={isDarkModeOn ? 'light' : 'dark'} style={{ marginRight: '5px' }}>\n              {style.trim()}\n            </Badge>\n          ))}\n        </div>\n        <div>\n          {instructor.facebook && (\n            <a href={instructor.facebook} target=\"_blank\" rel=\"noopener noreferrer\"  style={{ color: isDarkModeOn ? 'white' : 'black' }}>\n              <FaFacebook style={{ marginRight: '1rem' }} />\n            </a>\n          )}\n          {instructor.instagram && (\n            <a href={instructor.instagram} target=\"_blank\" rel=\"noopener noreferrer\"  style={{ color: isDarkModeOn ? 'white' : 'black' }}>\n              <FaInstagram style={{ marginRight: '1rem' }} />\n            </a>\n          )}\n          {instructor.twitter && (\n            <a href={instructor.twitter} target=\"_blank\" rel=\"noopener noreferrer\"  style={{ color: isDarkModeOn ? 'white' : 'black' }}>\n              <FaTwitter style={{ marginRight: '1rem' }} />\n            </a>\n          )}\n          {instructor.youtube && (\n            <a href={instructor.youtube} target=\"_blank\" rel=\"noopener noreferrer\"  style={{ color: isDarkModeOn ? 'white' : 'black' }}>\n              <FaYoutube style={{ marginRight: '1rem' }} />\n            </a>\n          )}\n        </div>\n        </Row>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default InstructorCard;\n","import React, { useState, useEffect } from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport InstructorAdd from '../Components/InstructorAdd';\nimport InstructorUpdate from '../Components/InstructorUpdate';\nimport { useSelector } from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport {collection,where,query,getDocs} from 'firebase/firestore';\nimport { COLLECTIONS } from '../constants';\nimport { db } from '../config';\nimport InstructorCard from '../Components/InstructorCard';\nimport { useAuth } from '../context/AuthContext';\nimport Tab from '@mui/material/Tab';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\nimport { Box } from '@mui/material';\n\nfunction Instructors() {\n    const isDarkModeOn = useSelector(selectDarkModeStatus);\n    const [instructors, setInstructors] = useState([]);\n    const { currentUser } = useAuth();\n    const [value, setValue] = React.useState('1');\n\n    const handleChange = (event, newValue) => {\n      setValue(newValue);\n    };\n      // Fetch instructors for the current user\n    useEffect(() => {\n    const fetchInstructors = async () => {\n      let userId = (currentUser && currentUser.uid)?currentUser.uid:null;\n      \n      if (!userId) {\n        console.log('User not found');\n        alert('User not found');\n        return;\n      }\n\n      const instructorRef = collection(db, COLLECTIONS.INSTRUCTORS);\n      const q = query(instructorRef, where('createdBy', '==', userId));\n      const querySnapshot = await getDocs(q);\n\n      const instructorsList = [];\n      querySnapshot.forEach((doc) => {\n        instructorsList.push({\n          id: doc.id,\n          ...doc.data(),\n        });\n      });\n\n      setInstructors(instructorsList);\n    };\n\n    fetchInstructors();\n  }, []);\n\n  return (\n    <div style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n      <Box sx={{ width: '100%', typography: 'body1' }}>\n      <TabContext value={value}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <TabList style={{color: isDarkModeOn ? 'white' : 'black'}} onChange={handleChange} aria-label=\"lab API tabs example\">\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Add Instructor\" value=\"1\" />\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Update Instructor\" value=\"2\" />\n          \n          </TabList>\n        </Box>\n        <TabPanel value=\"1\">\n\n        <InstructorAdd />\n        </TabPanel>\n        <TabPanel value=\"2\">\n        <>\n        <InstructorUpdate instructors={instructors} setInstructors={setInstructors} />\n        </>\n    \n        </TabPanel>\n        \n      </TabContext>\n    </Box>\n        <Accordion hidden defaultActiveKey=\"0\" style={{ backgroundColor: isDarkModeOn ? '#181818' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n            {/* Add Instructor Accordion */}\n            <Accordion.Item eventKey=\"0\" style={{ backgroundColor: isDarkModeOn ? '#181818' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n                <Accordion.Header style={{ backgroundColor: isDarkModeOn ? '#181818' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n                    Add Instructor\n                </Accordion.Header>\n                <Accordion.Body>\n                <InstructorAdd />\n                </Accordion.Body>\n            </Accordion.Item>\n\n            {/* Update Instructor Accordion */}\n            <Accordion.Item eventKey=\"1\" style={{ backgroundColor: isDarkModeOn ? '#181818' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n                <Accordion.Header style={{ backgroundColor: isDarkModeOn ? '#181818' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n                Update Instructor\n                </Accordion.Header>\n                <Accordion.Body>\n                <InstructorUpdate instructors={instructors} setInstructors={setInstructors} />\n                </Accordion.Body>\n            </Accordion.Item>\n        </Accordion>\n            <br></br>\n            \n            {instructors.length > 0 && (\n                <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                {instructors.map((instructor) => (\n                    <InstructorCard key={instructor.id} instructor={instructor} />\n                ))}\n                </div>\n            )}\n\n    </div>\n  );\n}\n\nexport default Instructors\n"],"names":["isDarkModeOn","useSelector","selectDarkModeStatus","selectedImage","setSelectedImage","useState","toUploadImage","setToUploadImage","selectedDanceStyles","setSelectedDanceStyles","danceStylesOptions","danceStyles","darkTheme","createTheme","palette","mode","_jsxs","style","backgroundColor","color","children","_jsx","Row","Col","md","textTransform","textAlign","Form","className","onSubmit","async","_JSON$parse","e","preventDefault","console","log","createdBy","JSON","parse","localStorage","getItem","UserId","alert","currentUserEmail","email","instructorData","name","target","value","join","experience","age","description","facebook","instagram","twitter","youtube","ownedBy","notifyEmails","metaData","entity_name","response","postData","COLLECTIONS","INSTRUCTORS","ok","result","json","id","imageUrl","file","userId","storageFolder","STORAGES","INSTRUCTORIMAGES","folderPath","concat","storageRef","ref","storage","listAll","items","forEach","deleteObject","itemRef","fileRef","uploadBytes","getDownloadURL","error","handleProfilePictureChange","statusText","Group","controlId","Label","width","height","borderRadius","overflow","margin","display","alignItems","justifyContent","Image","src","alt","fontSize","htmlFor","cursor","type","accept","onChange","files","URL","createObjectURL","Control","placeholder","ThemeProvider","theme","Autocomplete","multiple","options","handleDanceStylesChange","event","renderInput","params","TextField","variant","as","rows","required","FaFacebook","size","FaInstagram","FaTwitter","FaYoutube","Button","_ref","instructors","setInstructors","selectedInstructor","setSelectedInstructor","useEffect","storagePath","folderRef","then","length","firstFileRef","url","catch","_selectedDanceStyles$","updatedInstructorData","call","putData","prevInstructor","_instructorData$dance","_instructorData$dance2","instructorId","instructorDoc","getDoc","doc","db","data","split","marginBottom","map","instructor","defaultValue","imageURL","setImageURL","cardStyle","defaultImgStyle","marginRight","getImageURL","Card","Body","Img","Subtitle","index","Badge","pill","bg","trim","href","rel","currentUser","useAuth","setValue","React","uid","instructorRef","collection","q","query","where","querySnapshot","getDocs","instructorsList","push","fetchInstructors","Box","sx","typography","TabContext","borderBottom","borderColor","TabList","handleChange","newValue","Tab","label","TabPanel","InstructorAdd","_Fragment","InstructorUpdate","Accordion","hidden","defaultActiveKey","Item","eventKey","Header","flexWrap","InstructorCard"],"sourceRoot":""}