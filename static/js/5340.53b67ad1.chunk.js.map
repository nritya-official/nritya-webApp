{"version":3,"file":"static/js/5340.53b67ad1.chunk.js","mappings":"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","sources":["Components/CardSliderCard.js","Components/NStudioCard.js","Components/TimeRangePicker.js","Components/StudioTable.js","Components/MapsInput.js","Components/SucessPage.js","Components/StudioAdd.js","Components/AlertPopup.js","Components/StudioUpdate.js","Screens/CreatorStudio.js"],"sourcesContent":["import React from 'react';\nimport NStudioCard from './NStudioCard';\n\nconst CardSliderCard = ({ studio }) => {\n  return (\n    <a href={`#/studio/${studio.id}`}>\n    <NStudioCard data={studio} img_src={\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}/>\n    </a>\n\n  );\n};\n\nexport default CardSliderCard;\n","\nimport React from 'react';\nimport AspectRatio from '@mui/joy/AspectRatio';\nimport Card from '@mui/joy/Card';\nimport CardContent from '@mui/joy/CardContent';\nimport Chip from '@mui/joy/Chip';\nimport Link from '@mui/joy/Link';\nimport Typography from '@mui/joy/Typography';\nimport { Stack } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport { danceStylesColorChips } from '../constants';\nimport IconButton from '@mui/joy/IconButton';\nimport Favorite from '@mui/icons-material/Favorite';\n\n\nexport default function NStudioCard({img_src,data}) {\n    const isDarkModeOn = useSelector(selectDarkModeStatus);\n    \n    const studioId = data.id?data.id:data.studioId;\n\n    const cardStyle = {\n      backgroundColor: isDarkModeOn ? '#444' : 'white',\n      padding: '0px',\n      color: isDarkModeOn ? 'white' : 'black',\n      marginRight: \"10px\",\n      width: 320,\n      maxWidth: \"100%\",\n      boxShadow: 'lg',\n      transition: 'opacity 0.3s ease',\n    };\n  \n    const cardHoverStyle = {\n      transform: 'scale(1.01)',\n    };\n  \n  return (\n    <Card variant=\"solid\" sx={{\n      ...cardStyle,\n      '&:hover': cardHoverStyle,\n    }}>\n      \n        <AspectRatio ratio=\"1.78\" style={{ position: 'relative'}}>\n          <img\n            src={data && data.iconUrl ? data.iconUrl :\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}\n            loading=\"lazy\"\n            alt=\"Studio Image\"\n            style={{ maxWidth: '100%', height: 'auto', overflow: 'hidden' }}\n            \n          />\n          <Stack direction=\"row\" spacing={2} style={{ position: 'absolute', bottom: 0, left: 0, padding: '1px' }}>\n        {data && data.danceStyles && typeof data.danceStyles === 'string' ? (data.danceStyles.split(\",\").slice(0, 3).map((form, index) => (\n        <Chip\n            key={index}\n            color={index % 2 === 0 ? \"danger\" : \"success\"}  \n            sx={{ marginBottom: \"10px\", fontSize: '0.8rem',  \n                    bgcolor: danceStylesColorChips[index].backgroundColor,\n                    color: danceStylesColorChips[index].color, \n            }}\n        >\n            {form.trim()}\n        </Chip>\n        ))):(\n            <Chip\n            key={10}\n            color={10 % 2 === 0 ? \"danger\" : \"success\"} \n            style={{ marginBottom: \"10px\", fontSize: '0.8rem' }}\n        >\n            {\"No danceforms\"}\n        </Chip>\n        )}\n\n        </Stack>\n\n        </AspectRatio>\n      <CardContent style={{padding:'10px'}}>\n        <Link\n          href={`#/studio/${studioId}`}\n          fontWeight=\"bold\"\n          color=\"neutral\"\n          textColor=\"text.primary\"\n          underline='none'\n          overlay\n          style={{color: isDarkModeOn?'white':'black'}}\n        >\n          {data && data.studioName?data.studioName:\"    \"}\n        </Link>\n        <Typography style={{color: isDarkModeOn?'white':'black'}} level=\"body-xs\">{data.street?data.street:\".  \"}</Typography>\n        <IconButton\n          hidden\n          aria-label=\"Like minimal photography\"\n          size=\"md\"\n          variant=\"solid\"\n          color=\"danger\"\n          sx={{\n            position: 'absolute',\n            zIndex: 2,\n            borderRadius: '50%',\n            right: '1rem',\n            bottom: '2rem',\n            transform: 'translateY(50%)',\n          }}\n        >\n          <Favorite />\n        </IconButton>\n        <Typography style={{color: isDarkModeOn?'white':'black'}}>⭐ {data && data.avgRating? data.avgRating.toFixed(1):\" Not rated yet\"}</Typography>\n      </CardContent>\n    </Card>\n  );\n}","import React from 'react';\nimport { Modal, Form, Row, Col, Button } from 'react-bootstrap';\n\nconst TimeRangePicker = ({ show, handleClose, handleSelect, defaultTime }) => {\n  //console.log(\"TimeRangePicker\",defaultTime)\n  const startTime_i = defaultTime.split('-')[0].trim();\n  const endTime_i = defaultTime.split('-')[1]?.trim();\n\n  //console.log(startTime_i,endTime_i,defaultTime)\n\n  const generateTimeOptions = () => {\n    const options = [];\n    let option_AM = [];\n    let option_PM = [];\n    for (let hours = 0; hours < 24; hours++) {\n      for (let minutes = 0; minutes < 60; minutes += 15) {\n        const formattedHours = hours.toString().padStart(2, '0');\n        const formattedMinutes = minutes.toString().padStart(2, '0');\n        const timeString = `${formattedHours}:${formattedMinutes}`;\n  \n        if (hours < 12) {\n          option_AM.push(`${timeString} AM`);\n        } else {\n          const formattedHours12 = (hours - 12).toString().padStart(2, '0');\n          option_PM.push(`${formattedHours12}:${formattedMinutes} PM`);\n        }\n      }\n    }\n\n    for (let i = 0; i < option_AM.length || i < option_PM.length; i++) {\n      if (i < option_AM.length) {\n        options.push(option_AM[i]);\n      }\n      if (i < option_PM.length) {\n        options.push(option_PM[i]);\n      }\n    }\n    \n\n  \n    return options;\n  };\n  \n\n  const renderTimeOptions = (defaultValue) => {\n    console.log(defaultValue);\n    const timeOptions = generateTimeOptions();\n  \n    return (\n      <>\n        <option value={defaultValue}>{defaultValue}</option>\n        {timeOptions.map((option) => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </>\n    );\n  };\n  \n  \n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Select Time</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col>\n          <Form.Group >\n          <Form.Label >\n            Start Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(e.target.value, null)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(startTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n          <Col>\n          <Form.Group>\n          <Form.Label >\n            End Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(null, e.target.value)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(endTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={handleClose}>Save</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default TimeRangePicker;\n","import React, { useState } from 'react';\nimport { Form, Table, Button } from 'react-bootstrap';\nimport { FaPlus, FaMinus } from 'react-icons/fa';\nimport './StudioTable.css'; // Import the CSS file for styling\nimport  TimeRangePicker from './TimeRangePicker';\nimport danceStyles from '../danceStyles.json';\nimport { Autocomplete, TextField } from '@mui/material';\n\nimport { MultiSelect } from 'primereact/multiselect';\nimport \"primereact/resources/primereact.css\";\nimport \"primereact/resources/themes/saga-blue/theme.css\";\n\nconst daysOfWeek = ['M','T','W','Th','F','St','Sn'];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\"\n};\n\nfunction StudioTable({ tableData = [], setTableData, instructorNamesWithIds }) {\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const danceStylesOptions = danceStyles.danceStyles;\n  const [defaultTime, setDefaultTime] =  useState(\"00:00-00:00\")\n\n  const handleAddRow = () => {\n    setTableData((prevData) => [...prevData, { className: '', danceForms: '', days: '', time: '00:00 - 00:00', instructors: [], fee:'',level:'' ,status: '',freeTrial: false, classCategory: []  }]);\n  };\n\n  const handleRemoveRow = (index) => {\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      newData.splice(index, 1);\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if(field===\"days\"){\n        value = Array.isArray(value) ? value.join(',') : value; \n      }\n      console.log(tableData)\n      const newData = [...prevData];\n      newData[index][field] = value;\n      return newData;\n    });\n  };\n\n  const handleTimePickerOpen = (index,time) => {\n    setDefaultTime(time)\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null); // Reset selected row index when closing time picker\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      \n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n    \n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(' - ');\n    \n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n      \n      return newData;\n    });\n  \n    setSelectedRow(selectedRowIndex);\n\n  };\n\n  return (\n    <>\n      <Table bordered variant=\"light\">\n        <thead>\n          <tr style={{border: '1px solid black'}}>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Name</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Dance Form</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Days</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Time</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'20rem', border: '1px solid black'}}>Instructors</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Fee (₹)</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Level</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Free Trial</th>\n            <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Category</th>\n            <th style={{padding:'0rem'}}>\n              <Button variant=\"primary\" onClick={handleAddRow}>\n                <FaPlus />\n              </Button>\n            </th>\n          </tr>\n        </thead>\n        <tbody style={{border: '1px solid black'}}>\n          {tableData.map((row, index) => (\n            <tr key={index} className={selectedRow === index ? 'selected-row' : ''}>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  type=\"text\"\n                  value={row.className}\n                  onChange={(e) => handleTableChange(index, 'className', e.target.value)}\n                  \n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n              < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.danceForms}\n                  onChange={(e) => handleTableChange(index, 'danceForms', e.target.value)}\n                >\n                  <option value=\"\">Select a dance form</option>\n                  {danceStylesOptions.map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </Form.Control>\n\n              </td>\n              \n              <td style={{ padding:'0rem',minWidth:'15rem', border: '1px solid black'}} className=\"m-0 p-0\">\n                <MultiSelect value={row.days && row.days.split(',').filter(day => day !== '') } \n                    onChange={(event) => handleTableChange(index, 'days', event.target.value)}\n                    options={daysOfWeek}\n                    placeholder=\"class days\" maxSelectedLabels={7} className=\"w-full md:w-20rem\"\n                  />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.time}\n                  //onClick={() => handleTimePickerOpen(index,row.time)}\n                  onClick={() => handleTimePickerOpen(index,row.time)}\n                  \n                />\n                {showTimePicker && (\n                <TimeRangePicker\n                  show={showTimePicker}\n                  handleClose={handleTimePickerClose}\n                  handleSelect={handleTimeSelect}\n                  defaultTime={tableData[selectedRowIndex]?.time || \"00:00-00:00\"}\n                />\n              )}\n\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black', width:'20rem'}}>\n                <Autocomplete\n                  multiple\n                  id=\"tags-standard\"\n                  options={instructorNamesWithIds}\n                  value={row.instructors}\n                  onChange={(_, values) => handleTableChange(index, 'instructors', values)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Instructors\"\n                    />\n                  )}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.fee}\n                  onChange={(e) => handleTableChange(index, 'fee', e.target.value)}\n                />\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.level}\n                  onChange={(e) => handleTableChange(index, 'level', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value=\"Beginner\">Beginner</option>\n                      <option value=\"Intermediate\">Intermediate</option>\n                      <option value=\"Advanced\">Advanced</option>\n                      <option value=\"Misc\">Misc</option>\n\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem',border: '1px solid black'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.level}\n                  onChange={(e) => handleTableChange(index, 'level', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value={true}>Yes</option>\n                      <option value={false}>No</option>\n                  </Form.Control>\n              </td>\n              <td style={{padding:'0rem', width:'20rem'}}>\n                <Autocomplete\n                  multiple\n                  id=\"tags-standard\"\n                  options={Object.values(categoryMap)} \n                  value={row.classCategory.map(key => categoryMap[key])} \n                  onChange={(_, values) => {\n\n                    const selectedKeys = values.map(value => \n                      Object.keys(categoryMap).find(key => categoryMap[key] === value)\n                    );\n                    handleTableChange(index, 'classCategory', selectedKeys);\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Class Category\"\n                    />\n                  )}\n                />\n              </td>\n              <td style={{padding:'0rem'}}>\n                <Button variant=\"danger\" onClick={() => handleRemoveRow(index)}>\n                  <FaMinus />\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>      \n    </>\n  );\n}\n\nexport default StudioTable;\n\n/*\n                <Autocomplete\n                  multiple\n                  id={`days-autocomplete-${index}`}\n                  options={daysOfWeekOptions}\n                  getOptionLabel={(option) => option.value}\n                  value={row.days.split(',').filter(day => day !== '').map(day => daysOfWeekOptions.find(option => option.value === day))}\n                  onChange={(event, newValue) => handleTableChange(index, 'days', newValue.map(option => option.value).join(','))}\n                  renderInput={(params) => <TextField sx={{color:\"black\",backgroundColor:\"white\",width:\"100%\"}} {...params} />}\n                />\n              */","import React, { useState, useEffect }from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { LoadScript } from '@react-google-maps/api';\nimport { FaMapMarkerAlt } from 'react-icons/fa';\n\nconst libraries = ['places'];\n\nfunction MapsInput({selectedLocation, setSelectedLocation}) {\n    const [center, setCenter] = useState(selectedLocation? selectedLocation:{ lat: 0, lng: 0 });\n    const [address, setAddress] = useState('');\n  \n    const apiKey = \"AIzaSyAAPq5IMotbu90TZAEtyj8qgYyVJoROzsQ\"; // Replace with your API Key\n   //console.log(\"selectedLocation got in MapsInput\",selectedLocation,\"----\",center)\n    const handleSelect = async (selectedAddress) => {\n      const results = await geocodeByAddress(selectedAddress);\n      const latLng = await getLatLng(results[0]);\n  \n      setAddress(selectedAddress);\n      setCenter(latLng);\n      setSelectedLocation(latLng);\n      //console.log(latLng,\"---\",selectedLocation,'---',center,'---',address)\n    };\n\n    useEffect(() => {\n      // Check if selectedLocation is null and set it to Delhi's coordinates\n      //console.log(selectedLocation)\n      if (!selectedLocation) {\n        //console.log(\"Location changing !selectedLocation\",selectedLocation)\n      }else{\n        //console.log(\"Location changing\",selectedLocation)\n        setCenter(selectedLocation)\n        //setSelectedLocation()\n      }\n      //console.log(center,address,selectedLocation)\n    }, [selectedLocation]);\n  \n    return (\n        <LoadScript\n            googleMapsApiKey={apiKey}\n            libraries={libraries}\n            >\n      <div>\n        <div>\n        <br></br>\n        \n        <PlacesAutocomplete\n          value={address}\n          onChange={(newAddress) => setAddress(newAddress)}\n          onSelect={handleSelect}\n          >\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n            <div>\n              <input\n                {...getInputProps({\n                  placeholder: 'Enter address...',\n                  className: 'location-search-input',\n                  style: { // Add inline styles for the input element\n                    height: '40px', // Adjust the height as needed\n                    fontSize: '16px', // Adjust the font size as needed\n                    width: '100%',\n                  },\n                })}\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {loading && <div>Loading...</div>}\n                {suggestions.map((suggestion) => {\n                  const className = suggestion.active\n                    ? 'suggestion-item--active'\n                    : 'suggestion-item';\n                  return (\n                    <div\n                      {...getSuggestionItemProps(suggestion, {\n                        className,\n                      })}\n                    >\n                      <span>{suggestion.description}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </PlacesAutocomplete>\n          <br></br>\n        </div>\n        <div style={{ height: '400px', width: '100%' }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{ key: apiKey }}\n            defaultCenter={center}\n            center={center}\n            defaultZoom={16}\n            onClick={({ lat, lng }) => {\n              setSelectedLocation({ lat, lng });\n            }}\n          >\n            { (\n              <PinMarker\n              lat={selectedLocation && selectedLocation.lat ? selectedLocation.lat: 0}\n              lng={selectedLocation && selectedLocation.lng ? selectedLocation.lng: 0}\n              text=\"Selected Location\"\n            />\n            )}\n          </GoogleMapReact>\n        </div>\n      </div>\n      </LoadScript>\n    );\n}\n\nconst PinMarker = () => (\n    <div style={{ position: 'relative', textAlign: 'center' }}>\n      <FaMapMarkerAlt style={{ color: 'green', fontSize: '24px' }} />\n    </div>\n  );\n\nexport default MapsInput\n","import React from 'react';\n\nconst SuccessMessage = ({ StudioId }) => {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-12\"> {/* Change col-md-5 to col-md-12 */}\n          <div className=\"_success message-box\">\n            <i className=\"fa fa-check-circle\" aria-hidden=\"true\"></i>\n            <h3>Your Studio registration was successful</h3>\n            <p>{StudioId} is now registered 🎉</p>\n          </div>\n        </div>\n      </div>\n      <hr />\n\n      <style jsx>{`\n        ._success {\n          padding: 45px;\n          width: 100%;\n          text-align: center;\n          margin: 30px auto;\n        }\n\n        ._success i {\n          font-size: 55px;\n          color: #28a745;\n        }\n\n        ._success h2 {\n          margin-bottom: 12px;\n          font-size: 30px;\n          font-weight: 300;\n          line-height: 1.2;\n          margin-top: 10px;\n        }\n\n        ._success p {\n          margin-bottom: 0px;\n          font-size: 18px;\n          color: #495057;\n          font-weight: 100;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SuccessMessage;\n","import React from 'react'\nimport { Row, Col , Form } from 'react-bootstrap';\nimport {Button as MuiButton} from '@mui/material';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,addDoc,updateDoc,collection,where,getDocs,query, deleteDoc } from \"firebase/firestore\";\nimport { COLLECTIONS, DRAFT_COLLECTIONS } from '../constants';\nimport StudioTable from './StudioTable';\nimport ImageUpload from './ImageUpload';\nimport { STORAGES } from '../constants';\nimport MapsInput from './MapsInput';\nimport { useSelector} from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport indianCities from '../cities.json';\nimport danceStyles from '../danceStyles.json';\nimport { AMENITIES_ICONS } from '../constants';\nimport {Autocomplete,TextField} from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport {Stepper,Step,StepLabel} from '@mui/material';\nimport SuccessMessage from './SucessPage';\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nconst DRAFT_INTERVAL_TIME = 1000 * 10;\n\nfunction StudioAdd({instructors}) {\n    const [newStudioId, setNewStudioId] = useState(\"\")\n    const [tableData, setTableData] = useState(\n      [{ className: '', danceForms: '', days: '', time: '', instructors: [], fee:'',level:'' ,status: '' ,freeTrial:false ,classCategory: []}],\n    );\n    const [selectedLocation, setSelectedLocation] = useState(null);\n    const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n    const [selectedInstructors, setSelectedInstructors] = useState([]);\n    const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n    const [selectedAmenities, setSelectedAmenities] = useState([]);\n    const instructorNamesWithIds = instructors.map((instructor) => `${instructor.name} - ${instructor.id}`);\n    const [isReady, setIsReady] = useState(false);\n\n\n    //const [dropdownVisible, setDropdownVisible] = useState(false);\n    const locationOptions = indianCities.cities;\n    const danceStylesOptions = danceStyles.danceStyles;\n    const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n    const [activeStep, setActiveStep] = useState(0);\n\n    const handleNext = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n\n    const darkTheme = createTheme({\n      palette: {\n        mode: isDarkModeOn?'dark':'light',\n      },\n    });\n\n    const handleDanceStylesChange = (event, value) => {\n      setSelectedDanceStyles(value);\n    };  \n\n    const handleAmentiesChange = (event, value) => {\n      setSelectedAmenities(value);\n    };\n\n    const handleInstructorChange = (event, value) => {\n      setSelectedInstructors(value);\n    };\n\n    const resetDraft = async () => {\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n\n          await deleteDoc(studioRef);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n      const handleAddStudio = async (event) => {\n        event.preventDefault();\n        const title = event.target.studioName.value;\n        if (!title) {\n          return;\n        }\n        let isPremium=true\n        const newData = tableData.reduce((accumulator, current, index) => {\n          accumulator[index] = current;\n          return accumulator;\n        }, {});\n\n        try {\n            const studioRef = await addDoc(collection(db, COLLECTIONS.STUDIO), {\n              studioName: event.target.studioName.value,\n              aboutStudio: event.target.aboutStudio.value,\n              founderName: event.target.founderName.value,\n              aboutFounder: event.target.aboutFounder.value,\n              mobileNumber: event.target.mobileNumber.value,\n              whatsappNumber: event.target.whatsappNumber.value,\n              mailAddress: event.target.mailAddress.value,\n              danceStyles: selectedDanceStyles.join(\",\"),\n              numberOfHalls: event.target.numberOfHalls.value,\n              maximumOccupancy: event.target.maximumOccupancy.value,\n              instructorsNames: selectedInstructors,\n              status: 'OPEN',\n              tableData: newData,\n              buildingName: event.target.buildingName.value,\n              street: event.target.street.value,\n              city: event.target.city.value,\n              landmark: event.target.landmark.value,\n              pincode: event.target.pincode.value,\n              state: event.target.state.value,\n              country: \"India\",\n              geolocation : selectedLocation,\n              aadharNumber: event.target.aadharNumber.value ,\n              gstNumber: event.target.gstNumber.value,\n              enrolledId:[],\n              reviews:[],\n              author: JSON.parse(localStorage.getItem('userInfo')).displayName,\n              UserId: JSON.parse(localStorage.getItem('userInfo')).UserId,\n              isPremium: isPremium,\n              addAmenities: selectedAmenities.join(\",\"),\n              enrollmentProcess: encodeToUnicode(event.target.enrollmentProcess.value),\n              creatorEmail: JSON.parse(localStorage.getItem('userInfo')).email,\n              instagram: event.target.instagram.value,\n              facebook: event.target.facebook.value,\n              youtube: event.target.youtube.value,\n              twitter: event.target.twitter.value,\n              visibilty:1,\n\n            });\n            //console.log(\"Studio added successfully\");\n            setNewStudioId(studioRef.id)\n            const userRef = doc(db, \"User\", JSON.parse(localStorage.getItem('userInfo')).UserId);\n            const userSnap = await getDoc(userRef);\n            if (userSnap.exists()) {\n              //console.log(\"User there\",userSnap.data());\n              if(userSnap.data() != null){\n                await updateDoc(userRef,{\n                  \n                  StudioCreated: [...userSnap.data().StudioCreated,studioRef.id]\n                });\n                //console.log(\"Studio added back successfully\");\n              }else{\n                //console.log(\"userSnap.data() null\")\n              }\n            } else {\n              //console.log(\"User not found but studio created... error\");\n            }\n\n            resetDraft();\n            handleNext();\n\n        } catch (error) {\n          console.error(\"Error adding studio: \", error);\n        }\n      };\n\n  useEffect(() => {\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          form.studioName.value = foundStudio.studioName;\n          form.aboutStudio.value = foundStudio.aboutStudio;\n          form.founderName.value = foundStudio.founderName;\n          form.aboutFounder.value = foundStudio.aboutFounder;\n          form.mobileNumber.value = foundStudio.mobileNumber;\n          form.whatsappNumber.value = foundStudio.whatsappNumber;\n          form.mailAddress.value = foundStudio.mailAddress;\n          setSelectedDanceStyles(\n            foundStudio.danceStyles.length\n              ? foundStudio.danceStyles.split(\",\")\n              : []\n          );\n          form.numberOfHalls.value = foundStudio.numberOfHalls;\n          form.maximumOccupancy.value = foundStudio.maximumOccupancy;\n          setSelectedInstructors(foundStudio.instructorsNames);\n          form.buildingName.value = foundStudio.buildingName;\n          form.street.value = foundStudio.street;\n          form.city.value = foundStudio.city;\n          form.landmark.value = foundStudio.landmark;\n          form.pincode.value = foundStudio.pincode;\n          form.state.value = foundStudio.state;\n          setSelectedLocation(foundStudio.geolocation);\n          form.aadharNumber.value = foundStudio.aadharNumber;\n          form.gstNumber.value = foundStudio.gstNumber;\n          setTableData(Object.values(foundStudio.tableData));\n          setSelectedAmenities(\n            foundStudio.addAmenities.length\n              ? foundStudio.addAmenities.split(\",\")\n              : []\n          );\n          form.enrollmentProcess.value = decodeUnicode(\n            foundStudio.enrollmentProcess\n          );\n          form.instagram.value = foundStudio.instagram;\n          form.facebook.value = foundStudio.facebook;\n          form.youtube.value = foundStudio.youtube;\n          form.twitter.value = foundStudio.twitter;\n        } else {\n          await addDoc(collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS), {\n            studioName: form.studioName.value,\n            aboutStudio: form.aboutStudio.value,\n            founderName: form.founderName.value,\n            aboutFounder: form.aboutFounder.value,\n            mobileNumber: form.mobileNumber.value,\n            whatsappNumber: form.whatsappNumber.value,\n            mailAddress: form.mailAddress.value,\n            danceStyles: selectedDanceStyles.join(\",\"),\n            numberOfHalls: form.numberOfHalls.value,\n            maximumOccupancy: form.maximumOccupancy.value,\n            instructorsNames: selectedInstructors,\n            status: \"OPEN\",\n            tableData: {\n              0: {\n                className: \"\",\n                danceForms: \"\",\n                days: \"\",\n                time: \"\",\n                instructors: [],\n                fee: \"\",\n                level: \"\",freeTrial:false, \n                classCategory: []\n              },\n            },\n            buildingName: form.buildingName.value,\n            street: form.street.value,\n            city: form.city.value,\n            landmark: form.landmark.value,\n            pincode: form.pincode.value,\n            state: form.state.value,\n            country: \"India\",\n            geolocation: selectedLocation,\n            aadharNumber: form.aadharNumber.value,\n            gstNumber: form.gstNumber.value,\n            enrolledId: [],\n            reviews: [],\n            author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n            UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n            isPremium: true,\n            addAmenities: selectedAmenities.join(\",\"),\n            enrollmentProcess: encodeToUnicode(form.enrollmentProcess.value),\n            creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\")).email,\n            instagram: form.instagram.value,\n            facebook: form.facebook.value,\n            youtube: form.youtube.value,\n            twitter: form.twitter.value,\n            visibilty: 1,\n          });\n        }\n\n        setIsReady(true);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    main();\n  }, []);\n\n  useEffect(() => {\n    let intervalId = null;\n\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n          \n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n          \n          intervalId = setInterval(async () => {\n            try {\n              const newData = tableData.reduce((accumulator, current, index) => {\n                accumulator[index] = current;\n                return accumulator;\n              }, {});\n\n              await updateDoc(studioRef, {\n                studioName: form.studioName.value,\n                aboutStudio: form.aboutStudio.value,\n                founderName: form.founderName.value,\n                aboutFounder: form.aboutFounder.value,\n                mobileNumber: form.mobileNumber.value,\n                whatsappNumber: form.whatsappNumber.value,\n                mailAddress: form.mailAddress.value,\n                danceStyles: selectedDanceStyles.join(\",\"),\n                numberOfHalls: form.numberOfHalls.value,\n                maximumOccupancy: form.maximumOccupancy.value,\n                instructorsNames: selectedInstructors,\n                status: \"OPEN\",\n                tableData: newData,\n                buildingName: form.buildingName.value,\n                street: form.street.value,\n                city: form.city.value,\n                landmark: form.landmark.value,\n                pincode: form.pincode.value,\n                state: form.state.value,\n                country: \"India\",\n                geolocation: selectedLocation,\n                aadharNumber: form.aadharNumber.value,\n                gstNumber: form.gstNumber.value,\n                enrolledId: [],\n                reviews: [],\n                author: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .displayName,\n                UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n                isPremium: true,\n                addAmenities: selectedAmenities.join(\",\"),\n                enrollmentProcess: encodeToUnicode(\n                  form.enrollmentProcess.value\n                ),\n                creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .email,\n                instagram: form.instagram.value,\n                facebook: form.facebook.value,\n                youtube: form.youtube.value,\n                twitter: form.twitter.value,\n                visibilty: 1,\n              });\n            } catch (error) {\n              console.error(error);\n            }\n          }, DRAFT_INTERVAL_TIME);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    if (isReady) main();\n\n    return () => clearInterval(intervalId);\n  }, [\n    isReady,\n    selectedDanceStyles,\n    selectedInstructors,\n    tableData,\n    selectedLocation,\n    selectedAmenities,\n  ]);\n\n  return (\n    <div >\n          <Stepper activeStep={activeStep} alternativeLabel>\n            {['Basic Studio & Owner details', 'Instructors, Classes & Social Media', 'Address & Registration', 'Studio Icon', 'Studio & Class Images'].map((label) => (\n              <Step key={label}>\n                <StepLabel ><p style={{color:isDarkModeOn?\"white\":\"black\"}}>{label}</p></StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          \n            < div hidden={activeStep > 2} >\n            <Form id=\"addStudioForm\" onSubmit={handleAddStudio} style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n              <Form.Group controlId=\"formBasicAdd\">\n             \n                  <div hidden={activeStep !== 0}>\n                  <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Basic Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Studio Name</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"studioName\" />\n                \n                <Form.Label>About Studio</Form.Label>\n                <Form.Control rows={6} style={{  minHeight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio's details\" name=\"aboutStudio\" />\n                \n                </Col>\n                <Col md={6}>\n                <Form.Label>Founder's Name</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter founder name\" name=\"founderName\" />\n                \n                <Form.Label>About Founder</Form.Label>\n                <Form.Control rows={6} style={{  minheight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter founder's details\" name=\"aboutFounder\" />\n                \n                </Col>\n                </Row>\n                <hr></hr>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Contact Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Mobile Number</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter mobile number\" name=\"mobileNumber\" type=\"number\"  />\n\n                <Form.Label>WhatsApp Number</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter whatsapp number\" name=\"whatsappNumber\" type=\"number\"  />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Mail Address</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"email\" rows={1} placeholder=\"Enter mail address\" name=\"mailAddress\" />\n                \n                  </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Details</h3>\n                <Row>\n                  <Col md={6}>\n                <Form.Label >Dance Styles</Form.Label>\n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                <Form.Label>Number of Hall(s)</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Number of Hall(s)\" name=\"numberOfHalls\" type=\"number\" />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Maximum Occupancy</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}  rows={1} placeholder=\"Maximum Occupancy\" name=\"maximumOccupancy\" type=\"number\"   />\n                </Col>\n                </Row>\n                <br></br>\n                <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}} disabled >\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                  \n                  </div>\n\n\n               \n              \n                <div hidden={activeStep !== 1}>\n\n\n                \n            <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Instructor Details</h3>\n                <Form.Label>Names of Instructors</Form.Label>\n                <Row>\n                  <ThemeProvider theme={darkTheme}>\n                    <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={instructorNamesWithIds}\n                      value={selectedInstructors}\n                      onChange={handleInstructorChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Instructors\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                  </ThemeProvider>\n                </Row> \n                <a href=\"#/modifyInstructors\" rel=\"noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', color: isDarkModeOn ? 'cyan' : 'blue' }}>\n                      Go to Instrcutors' Add/update Page? \n                    </a>\n                <hr></hr>   \n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Class Schedule</h3>\n                  <span>Time Table Of dance classes</span>\n                    <div style={{ overflowX: 'auto', whiteSpace: 'nowrap', scrollbarColor: isDarkModeOn ? '#888 #333' : '#ccc #fff', }}>\n                      <StudioTable\n                        tableData={tableData}\n                        setTableData={setTableData}\n                        instructorNamesWithIds={instructorNamesWithIds}\n                      />\n                    </div>\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Additional Details</h3>\n                <Row>\n                <Col md={4}>\n                  <Form.Label>GST Number</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"GST Number\" name=\"gstNumber\" />\n                  \n                  \n                </Col>\n                <Col md={8}>\n                <Form.Label>Add Amenities</Form.Label>\n                  \n                  <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={amenityKeys}\n                  value={selectedAmenities}\n                  onChange={handleAmentiesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Amenities\"\n                      style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                </Col>\n                </Row>\n                <Row>\n                <Form.Label>Enrollment Process</Form.Label>\n                  <Form.Control rows={12} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enrollment Process\" name=\"enrollmentProcess\" />\n          \n                </Row>\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Social Media Links</h3>\n               <Row>\n               <Col md={4}>\n                  <Form.Label>Instagram</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Instagram Link\" name=\"instagram\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Facebook</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Facebook Link\" name=\"facebook\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>YouTube</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"YouTube Link\" name=\"youtube\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Twitter</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Twitter Link\" name=\"twitter\" />\n                </Col>\n\n               </Row>\n\n               <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n              </div>\n\n               \n                <div hidden={activeStep !== 2}>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Address Details</h3>\n                <Row>\n                  <Col md={6}>\n                  <Form.Label>Building Name</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter building name\" name=\"buildingName\" />\n\n                <Form.Label>Street</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter street\" name=\"street\" />\n                <Form.Label>City</Form.Label>\n                <Form.Control as=\"select\" style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black', height: 'auto', // Let it adjust to content\n                    lineHeight: '1.5em', // Mimics rows={1}\n                    padding: '8px', }} name=\"city\">\n                    <option value=\"\">Select a city</option>\n                    {locationOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n\n                </Col>\n                <Col md={6}>\n                  <Form.Label>Landmark</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter landmark\" name=\"landmark\" />\n\n                <Form.Label>Pincode</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter pincode\" name=\"pincode\" type=\"number\"  />\n               \n                <Form.Label>State</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter state\" name=\"state\" />\n               \n                </Col>\n\n                <Form.Label>Save exact Address</Form.Label>\n                <MapsInput selectedLocation={selectedLocation} setSelectedLocation={setSelectedLocation}></MapsInput>\n                \n                </Row>\n                \n\n                \n              <br></br>\n\n              <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end\">\n                    \n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\", color:'white'}} type=\"submit\">\n                      Add Studio & Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                \n                </div>\n\n                \n                </Form.Group>\n            </Form>\n            \n            {\n              newStudioId === \"\"?(\"\"):(<p>New Studio Created with id {newStudioId}. Now u can upload images regarding them</p>)\n            }\n            \n            </div>\n          \n             \n             \n            <div hidden={activeStep !== 3}>\n              \n              <ImageUpload entityId={newStudioId} title={\"Studio Icon\"} storageFolder={STORAGES.STUDIOICON} maxImageCount={1}></ImageUpload>\n              <Row>\n                \n                <Col xs={12} className=\"d-flex justify-content-end\">\n                  <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                    Next\n                  </MuiButton>\n                </Col>\n              </Row>\n\n              </div>\n             \n            \n             <div hidden={activeStep !== 4}>\n              <ImageUpload entityId={newStudioId} title={\"Studio Images\"}  storageFolder={STORAGES.STUDIOIMAGES} ></ImageUpload>\n              <Row>\n                \n                <Col xs={12} className=\"d-flex justify-content-end\">\n                  <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                    Next\n                  </MuiButton>\n                </Col>\n              </Row>\n            </div>\n\n            <div  hidden={activeStep !== 5} style={{ display: 'flex',  alignItems: 'center', height: 'auto'}}>\n          \n                <SuccessMessage StudioId={newStudioId} />\n                <br></br>\n              \n            </div>\n        \n      <br></br>\n      \n    </div>\n  )\n}\n\n\nexport default StudioAdd\n","import React, { useState, useEffect } from 'react';\nimport { Alert, Container } from 'react-bootstrap';\n\nconst AlertPopup = ({\n  type = 'info',\n  message = 'Default message',\n  timeOfDisplay = 5000,\n  fontSize = '16px',\n  fontWeight = 'normal',\n  fontStyle = 'normal',\n}) => {\n  const [showAlert, setShowAlert] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowAlert(false);\n    }, timeOfDisplay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [timeOfDisplay]);\n\n  return (\n    <Container>\n      {showAlert && (\n        <Alert\n          variant={type}\n          style={{\n            fontSize,\n            fontWeight,\n            fontStyle,\n            textAlign: 'center',\n            marginTop: '10px',\n            marginBottom: '0',\n          }}\n          onClose={() => setShowAlert(false)}\n          dismissible\n        >\n          {message}\n        </Alert>\n      )}\n    </Container>\n  );\n};\n\nexport default AlertPopup;\n","import React, { useState, useEffect } from 'react';\nimport {Button, Row, Col, Form, Table} from 'react-bootstrap';\nimport { db } from '../config';\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { COLLECTIONS } from '../constants';\nimport AlertPopup from './AlertPopup';\nimport ImageUpload from './ImageUpload';\nimport { STORAGES } from '../constants';\nimport MapsInput from './MapsInput';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport TimeRangePicker from './TimeRangePicker';\nimport indianCities from '../cities.json';\nimport danceStyles from '../danceStyles.json';\nimport { AMENITIES_ICONS } from '../constants';\nimport {Autocomplete,TextField} from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { FaMinus, FaPlus } from 'react-icons/fa';\nimport { MultiSelect } from 'primereact/multiselect';\n\nconst daysOfWeek = ['M','T','W','Th','F','St','Sn'];\nconst categoryMap = {\n  Kids: \"Kids\",\n  Adults: \"Adults\",\n  Women_Only: \"Women Only\",\n  Men_Only: \"Men Only\",\n  Seniors: \"Seniors\",\n  All: \"All Ages, Open to All\",\n  Couples: \"Couples\",\n  Families: \"Families\"\n};\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nfunction StudioUpdate({ studio, setStudio, studioId, setStudioId, instructors }) {\n  const [selectedStudio, setSelectedStudio] = useState(null);\n  const [selectedStudioId, setSelectedStudioId] = useState(null);\n  const [selectedInstructors, setSelectedInstructors] = useState([]);\n  const [selectedStudioFrozenClassRows, setSelectedStudioFrozenClassRows] = useState(-1);\n  const [selectedAmenities,setSelectedAmenities] = useState([]);\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [defaultTime, setDefaultTime] =  useState(\"00:00-00:00\");\n\n  const locationOptions = indianCities.cities;\n  const danceStylesOptions = danceStyles.danceStyles;\n  const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n  const [showUpdateSuccessAlert, setShowUpdateSuccessAlert] = useState(false);\n  const [showUpdateErrorAlert, setShowUpdateErrorAlert] = useState(false);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n\n  const instructorNamesWithIds = instructors.map((instructor) => `${instructor.name} - ${instructor.id}`);\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: isDarkModeOn?'dark':'light',\n    },\n  });\n\n  const handleDanceStylesChange = (event, value) => {\n    setSelectedDanceStyles(value);\n  };\n  \n  \n  const handleAmenitiesChange = (event, value) => {\n    setSelectedAmenities(value);\n  };\n\n  const [tableData, setTableData] = useState({\n    0:{\n      className: '',\n      danceForms: '',\n      days: '',\n      time: '',\n      instructors: [],\n      fee:'',\n      level:'',\n      freeTrial: false,\n      classCategory: []\n    }\n});\n\n  const handleTimePickerOpen = (index,time) => {\n    //console.log(\"handleTimePickerOpen\",time,index)\n    setDefaultTime(time)\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null); \n    //console.log(\"---------\")\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n  \n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n  \n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(' - ');\n  \n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n  \n      return newData;\n    });\n  \n    setSelectedRow(selectedRowIndex);\n  };\n  \n  useEffect(() => {\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser = JSON.parse(localStorage.getItem('StudioCreated')) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map((studio) => `${studio.studioName} : ${studio.id}`);\n    setStudioId(studioIdList);\n\n    //console.log(\"studio:\", studio);\n    //console.log(\"studioId\", studioId);\n  }, []);\n\n  useEffect(() => {\n    // Fetch data for the selected studio when studioId changes\n    if (selectedStudio) {\n      //console.log(\"Studio Instructors Names\",selectedStudio.instructorsNames)\n      setSelectedInstructors((selectedStudio.instructorsNames));\n      if (selectedStudio && selectedStudio.danceStyles) {\n        setSelectedDanceStyles(selectedStudio.danceStyles.split(','));\n      }\n      if (selectedStudio && selectedStudio.addAmenities) {\n        setSelectedAmenities(selectedStudio.addAmenities.split(','));\n      }    \n      if(selectedStudio && selectedStudio.tableData){\n        const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n        setSelectedStudioFrozenClassRows(maxIndex);\n      }\n    }\n  }, [selectedStudio]);\n\n  const handleSelectStudio = async (event) => {\n    event.preventDefault();\n    const selected = event.target.value;\n    const selectedId = selected.split(\":\").pop().trim();\n    setSelectedStudioId(selectedId);\n    try {\n      const studioDoc = await getDoc(doc(db, COLLECTIONS.STUDIO, selectedId));\n      if (studioDoc.exists) {\n        setSelectedStudio(studioDoc.data());\n        if(studioDoc.data().geolocation){\n          const  loc = studioDoc.data().geolocation;\n          setSelectedLocation(loc);\n          //console.log(\"StudioUpdate Selected location\",selectedLocation,loc)\n        }\n        \n        if (studioDoc.data().tableData) {\n          setTableData(studioDoc.data().tableData);\n          //selectedStudioFrozenClassRows()\n          const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n          selectedStudioFrozenClassRows(maxIndex)\n          //console.log(\"Yo We got...\",tableData,Array.isArray(tableData),isMapOfMaps(tableData),maxIndex)\n\n        } else {\n          setTableData({\n            0:{\n              className: '',\n              danceForms: '',\n              days: '',\n              time: '',\n              instructors: [],\n              fee: '',\n              level:'',\n              freeTrial: false,\n              classCategory: []\n            }\n        });\n        }\n      } else {\n        setSelectedStudio(null); // No matching studio found\n      }\n    } catch (error) {\n      console.error(\"Error fetching studio data:\", error, selectedId);\n    }\n  };\n\n\n  const handleInstructorChange = (event, value) => {\n    setSelectedInstructors(value);\n  };\n\n\n  const handleUpdateStudio = async (event) => {\n    event.preventDefault();\n    const nameIdLocal = event.target.nameId.value;\n    const indexOfColon = nameIdLocal.lastIndexOf(\":\");\n    const studioId = nameIdLocal.substring(indexOfColon + 1).trim();\n    //console.log(studioId)\n\n    if (!studioId) {\n      //console.log(\"Invalid or empty studio id\")\n      return;\n    }\n\n    //const description = encodeToUnicode(event.target.description.value);\n    //const geolocation = selectedLocation;\n\n    try {\n      // Update the studio document with the new values\n      ////console.log(description,geolocation)\n      const studioRef = doc(db, COLLECTIONS.STUDIO, studioId);\n      console.log(tableData)\n      await updateDoc(studioRef, {\n              studioName: event.target.studioName.value,\n              aboutStudio: event.target.aboutStudio.value,\n              founderName: event.target.founderName.value,\n              aboutFounder: event.target.aboutFounder.value,\n              mobileNumber: event.target.mobileNumber.value,\n              whatsappNumber: event.target.whatsappNumber.value,\n              mailAddress: event.target.mailAddress.value,\n              danceStyles: selectedDanceStyles.join(\",\"),\n              numberOfHalls: event.target.numberOfHalls.value,\n              maximumOccupancy: event.target.maximumOccupancy.value,\n              instructorsNames: selectedInstructors,\n              status: 'OPEN',\n              tableData: tableData,\n              buildingName: event.target.buildingName.value,\n              street: event.target.street.value,\n              city: event.target.city.value,\n              landmark: event.target.landmark.value,\n              pincode: event.target.pincode.value,\n              state: event.target.state.value,\n              country: \"India\",\n              geolocation : selectedLocation,\n              gstNumber: event.target.gstNumber.value,\n              enrolledId:[],\n              reviews:[],\n              author: JSON.parse(localStorage.getItem('userInfo')).displayName,\n              UserId: JSON.parse(localStorage.getItem('userInfo')).UserId,\n              addAmenities: selectedAmenities.join(\",\"),\n              enrollmentProcess: encodeToUnicode(event.target.enrollmentProcess.value),\n              instagram: event.target.instagram.value,\n              facebook: event.target.facebook.value,\n              youtube: event.target.youtube.value,\n              twitter: event.target.twitter.value,\n      });\n\n      //console.log(\"Studio updated successfully\");\n      alert(\"Studio Update successfully\")\n      setShowUpdateSuccessAlert(true);\n      setShowUpdateErrorAlert(false);\n    } catch (error) {\n      console.error(\"Error updating studio: \", error);\n      setShowUpdateSuccessAlert(false);\n      setShowUpdateErrorAlert(true);\n    }\n    // Reset input fields to their initial values when a new studio is selected\n    document.getElementById(\"updateStudioForm\").reset();\n  };\n\n  const handleAddColumn = () => {\n    setTableData((prevData) => {\n      const newData = prevData.map((row) => ({\n        ...row,\n        [Object.keys(row).length]: ''\n      }));\n      return newData;\n    });\n  };\n\n  const handleAddRow = () => {\n    setTableData((prevData) => {\n      const newRowKey = Object.keys(prevData).length; // Use the current number of rows as the new row key\n      return { ...prevData, [newRowKey]: { ...tableData[0] } };\n    });\n  };\n\n  const handleRemoveRow = (index) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n      delete newData[index];\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if(field===\"days\"){\n        value = Array.isArray(value) ? value.join(',') : value; \n      }\n\n      return {\n        ...prevData,\n        [index]: {\n          ...prevData[index],\n          [field]: value\n        }\n      };\n    });\n  };\n\n  return (\n    <div style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n      <br></br>\n            <Form id=\"updateStudioForm\" onSubmit={handleUpdateStudio}>\n              <Form.Group controlId=\"formBasicUpdate\">\n                <Form.Label>Id</Form.Label>\n                <Form.Control as=\"select\" name=\"nameId\" style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black', height: 'auto', // Let it adjust to content\n                                                        lineHeight: '1.5em', \n                                                        padding: '8px' }}  \n                  onChange={handleSelectStudio}>\n                  <option value=\"\">Select a studio...</option>\n                  {studioId && studioId.length > 0 ? (\n                    studioId.map((studioItem) => (\n                      <option key={studioItem} value={studioItem}>\n                        {studioItem}\n                      </option>\n                    ))\n                  ) : (\n                    <option value=\"\">No studio yet!</option>\n                  )}\n                </Form.Control>\n              </Form.Group>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Basic Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Studio Name</Form.Label>\n                <Form.Control rows={1} defaultValue={selectedStudio ? selectedStudio.studioName : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"studioName\" />\n                \n                <Form.Label>About Studio</Form.Label>\n                <Form.Control rows={6} defaultValue={selectedStudio ? selectedStudio.aboutStudio : ''} style={{  minHeight: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio details\" name=\"aboutStudio\" />\n                \n                </Col>\n                <Col md={6}>\n                <Form.Label>Founder's Name</Form.Label>\n                <Form.Control rows={1} defaultValue={selectedStudio ? selectedStudio.founderName : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"founderName\" />\n                \n                <Form.Label>About Founder</Form.Label>\n                <Form.Control rows={6} defaultValue={selectedStudio ? selectedStudio.aboutFounder : ''} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio details\" name=\"aboutFounder\" />\n                \n                </Col>\n                </Row>\n                <hr></hr>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Contact Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Mobile Number</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.mobileNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter studio details\" name=\"mobileNumber\" type=\"number\"  />\n\n                <Form.Label>WhatsApp Number</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.whatsappNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter studio details\" name=\"whatsappNumber\" type=\"number\"  />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Mail Address</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.mailAddress : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" rows={1} placeholder=\"Enter studio details\" name=\"mailAddress\" />\n                \n                  </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Details</h3>\n                <Row>\n                  <Col md={6}>\n                <Form.Label>Dance Styles</Form.Label>\n                \n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>      \n                \n                <Form.Label>Number of Hall(s)</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.numberOfHalls : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Number of Hall(s)\" name=\"numberOfHalls\" type=\"number\" />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Maximum Occupancy</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.maximumOccupancy : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}  rows={1} placeholder=\"Maximum Occupancy\" name=\"maximumOccupancy\" type=\"number\"   />\n                </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Instructor Details</h3>\n                <Form.Label>Names of Instructors</Form.Label>\n                <Row >\n      \n                  <Col xs={6}>\n                  <div style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n                  <Row>\n                  <ThemeProvider theme={darkTheme}>\n                    <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={instructorNamesWithIds}\n                      value={selectedInstructors}\n                      onChange={handleInstructorChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Dance Styles\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                  </ThemeProvider>\n                  <a href=\"#/modifyInstructors\" rel=\"noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', color: isDarkModeOn ? 'cyan' : 'blue' }}>\n                      Go to Instrcutors' Add/update Page? \n                    </a>\n                </Row> \n                  </div>\n                  </Col>\n                </Row>  \n                <hr></hr>\n                   \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Address Details</h3>\n                <Row>\n                  <Col md={6}>\n                  <Form.Label>Building Name</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.buildingName : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter building name\" name=\"buildingName\" />\n\n                <Form.Label>Street</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.street : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter street\" name=\"street\" />\n                <Form.Label>City</Form.Label>\n                  <Form.Control\n                      as=\"select\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black',height: 'auto', // Let it adjust to content\n                        lineHeight: '1.5em', // Mimics rows={1}\n                        padding: '8px', }}\n                      name=\"city\"\n                      value={selectedStudio ? selectedStudio.city : ''}\n                      onChange={(e) => {\n                          const newCity = e.target.value;\n                          setSelectedStudio(prevState => ({\n                              ...prevState,\n                              city: newCity\n                          }));\n                      }}\n                  >\n                      <option value=\"\">Select a city</option>\n                      {locationOptions.map((city, index) => (\n                          <option key={index} value={city}>\n                              {city}\n                          </option>\n                      ))}\n                  </Form.Control>\n                  \n\n                </Col>\n                <Col md={6}>\n                  <Form.Label>Landmark</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.landmark : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter landmark\" name=\"landmark\" />\n\n                <Form.Label>Pincode</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.pincode : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter pincode\" name=\"pincode\" type=\"number\"  />\n               \n                <Form.Label>State</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.state : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter state\" name=\"state\" />\n               \n                </Col>\n                \n                <Form.Label>Save exact Address</Form.Label>\n                <MapsInput selectedLocation={selectedStudio && selectedStudio.geolocation ? selectedStudio.geolocation : selectedLocation}\n                            setSelectedLocation={setSelectedLocation} />\n\n                </Row>\n                <hr></hr>\n\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : 'white', color: isDarkModeOn ? 'white' : 'black' }}>Additional Details</h3>\n                <Row>\n                  <Col md={4}>\n                      <Form.Label>GST Number</Form.Label>\n                      <Form.Control defaultValue={selectedStudio ? selectedStudio.gstNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"number\" rows={1} placeholder=\"GST Number\" name=\"gstNumber\" />\n                  </Col>\n                  <Col md={8}>\n                      <Form.Label>Add Amenities</Form.Label>\n                  \n                      <ThemeProvider theme={darkTheme}>\n                      <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={amenityKeys}\n                      value={selectedAmenities}\n                      onChange={handleAmenitiesChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Amenities\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                      </ThemeProvider>\n                </Col>\n                </Row>\n                <Row>\n                  \n                  <Col>\n                    <Form.Label>Enrollment Process</Form.Label>\n                    <Form.Control defaultValue={selectedStudio ? decodeUnicode(selectedStudio.enrollmentProcess) : ''} rows={6} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enrollment Process\" name=\"enrollmentProcess\" />\n              \n                  </Col>\n                </Row>\n\n              <br></br>\n            <span>Time Table Of dance classes</span>\n            <div style={{ overflowX: 'auto', whiteSpace: 'nowrap', scrollbarColor: isDarkModeOn ? '#888 #333' : '#ccc #fff', }}>\n              <Table bordered variant=\"light\">\n                <thead>\n                  <tr>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Name</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Dance Form</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Days</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Time</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'20rem', border: '1px solid black'}}>Instructors</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Fee (₹)</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'10rem', border: '1px solid black'}}>Level</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'8rem', border: '1px solid black'}}>Free Trial</th>\n                  <th style={{padding:'0rem',textAlign:'center' , minWidth:'15rem', border: '1px solid black'}}>Class Category</th>\n                    <th style={{padding: 0 }}>\n                      <Button variant=\"primary\" onClick={handleAddRow}>\n                        <FaPlus/>\n                      </Button>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Object.keys(tableData).map((rowKey, index) => (\n                    <tr key={rowKey}\n                    >\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          type=\"text\"\n                          value={tableData[rowKey].className}\n                          onChange={(e) => handleTableChange(rowKey, 'className', e.target.value)}\n                          style={{height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          as=\"select\"\n                          value={tableData[rowKey].danceForms}\n                          onChange={(e) => handleTableChange(rowKey, 'danceForms', e.target.value)}\n                          style={{height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                        >\n                          <option value=\"\">Select a dance form</option>\n                          {danceStylesOptions.map((option) => (\n                      <option key={option} value={option}>\n                        {option}\n                      </option>\n                    ))}\n                          </Form.Control>\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <MultiSelect value={tableData[rowKey] && tableData[rowKey].days && tableData[rowKey].days.split(',').filter(day => day !== '')}\n                          onChange={(event) => handleTableChange(rowKey, 'days', event.target.value)}\n                          options={daysOfWeek}\n                          placeholder=\"class days\" maxSelectedLabels={7} className=\"w-full md:w-20rem\"\n                          style={{color: '#000', width: '100%'}}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          type=\"text\"\n                          value={tableData[rowKey].time}\n                          //onChange={(e) => handleTableChange(rowKey, 'time', e.target.value)}\n                          onClick={() => handleTimePickerOpen(rowKey,tableData[rowKey].time)}\n                        />\n                        {showTimePicker && (\n                        <TimeRangePicker\n                          show={showTimePicker}\n                          handleClose={handleTimePickerClose}\n                          handleSelect={handleTimeSelect}\n                          defaultTime={tableData[selectedRowIndex]?.time || \"00:00-00:00\"} // selectedRowIndex\n                        />\n                      )}\n                      </td>\n                      <td style={{padding:'0rem', width:'20rem'}}>\n                        <Autocomplete\n                          multiple\n                          options={instructorNamesWithIds}\n                          value={tableData[rowKey] && tableData[rowKey].instructors ? tableData[rowKey].instructors : []}\n                          onChange={(_, values) => handleTableChange(rowKey, 'instructors', values)}\n                          renderInput={(params) => (\n                            <TextField\n                              {...params}\n                              variant=\"standard\"\n                              placeholder=\"Select Instructors\"\n                            />\n                          )}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          type=\"text\"\n                          value={tableData[rowKey].fee?tableData[rowKey].fee:\"\"}\n                          onChange={(e) => handleTableChange(rowKey, 'fee', e.target.value)}\n                          style={{height: 'auto',lineHeight: '1.5em',padding: '8px'}}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Form.Control\n                          as=\"select\"\n                          value={tableData[rowKey].level?tableData[rowKey].level:\"\"}\n                          onChange={(e) => handleTableChange(rowKey, 'level', e.target.value)}\n                          style={{height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                        >\n                          <option value=\"\">Select a Level</option>\n                          <option value=\"Beginner\">Beginner</option>\n                        <option value=\"Intermediate\">Intermediate</option>\n                        <option value=\"Advanced\">Advanced</option>\n                        <option value=\"Misc\">Misc</option>\n\n                          </Form.Control>\n                      </td>\n                      <td style={{ padding: '0rem', border: '1px solid black' }}>\n                        <Form.Control\n                          style={{ backgroundColor: \"white\", height: 'auto', lineHeight: '1.5em', padding: '8px' }}\n                          as=\"select\"\n                          value={tableData[index]?.freeTrial ? tableData[index].freeTrial : \"\"}\n                          onChange={(e) => handleTableChange(index, 'freeTrial', e.target.value)}\n                        >\n                          <option value=\"\">Select a value</option>\n                          <option value={true}>Yes</option>\n                          <option value={false}>No</option>\n                        </Form.Control>\n                      </td>\n                      <td style={{ padding: '0rem', width: '20rem' }}>\n                        <Autocomplete\n                          multiple\n                          id=\"tags-standard\"\n                          options={Object.values(categoryMap)}\n                          value={tableData[index]?.classCategory && tableData[index].classCategory.length > 0 \n                            ? tableData[index].classCategory.map(key => categoryMap[key]) \n                            : []}\n                          onChange={(_, values) => {\n                            const selectedKeys = values.map(value =>\n                              Object.keys(categoryMap).find(key => categoryMap[key] === value)\n                            );\n                            handleTableChange(index, 'classCategory', selectedKeys);\n                          }}\n                          renderInput={(params) => (\n                            <TextField\n                              {...params}\n                              variant=\"standard\"\n                              placeholder=\"Select Class Category\"\n                            />\n                          )}\n                        />\n                      </td>\n                      <td style={{padding:'0rem'}}>\n                        <Button variant=\"danger\" onClick={() => handleRemoveRow(rowKey)}>\n                          <FaMinus/>\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n\n              </Table>\n            </div>\n            <br></br>\n            <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Social Media Links</h3>\n               <Row>\n            <Col md={4}>\n                          <Form.Label>Instagram</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.instagram : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Instagram Link\" name=\"instagram\" />\n                        </Col>\n                        <Col md={4}>\n                          <Form.Label>Facebook</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.facebook : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Facebook Link\" name=\"facebook\" />\n                        </Col>\n                        <Col md={4}>\n                          <Form.Label>YouTube</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.youtube : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"YouTube Link\" name=\"youtube\" />\n                        </Col>\n                        <Col md={4}>\n                          <Form.Label>Twitter</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.twitter : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Twitter Link\" name=\"twitter\" />\n                        </Col>\n                        </Row>\n\n            <br></br>\n            <Button style={{ backgroundColor: isDarkModeOn ? '#892CDC' : 'black', color:'white'  }} type=\"submit\">\n              Update Studio\n            </Button>\n            </Form>\n            {studioId && studioId.length > 0 && selectedStudioId && (\n              <>\n                <div>\n                  <ImageUpload entityId={selectedStudioId} title={\"Studio Images\"} storageFolder={STORAGES.STUDIOIMAGES} maxImageCount={10} />\n                </div>\n                <br />\n                <div>\n                  <ImageUpload entityId={selectedStudioId} title={\"Studio Icon\"} storageFolder={STORAGES.STUDIOICON} maxImageCount={1} />\n                </div>\n                <div>\n                  <ImageUpload entityId={selectedStudioId} title={\"Studio Announcement Images\"} storageFolder={STORAGES.STUDIOANNOUNCEMENTS} maxImageCount={10}/>\n                </div>\n                <br />\n              </>\n            )}\n      {showUpdateSuccessAlert && (\n        <AlertPopup\n          type=\"info\"\n          message=\"Studio Updated successfully\"\n          timeOfDisplay={3000}\n          fontSize=\"10px\"\n          fontWeight=\"bold\"\n        />\n      )}\n      {showUpdateErrorAlert && (\n        <AlertPopup\n          type=\"warning\"\n          message=\"Studio Update failed\"\n          timeOfDisplay={3000}\n          fontSize=\"10px\"\n          fontWeight=\"bold\"\n        />\n      )}\n    </div>\n  );\n}\n\nexport default StudioUpdate;\n","import React from 'react';\nimport { Row, Col  } from 'react-bootstrap';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,collection,where,getDocs,query } from \"firebase/firestore\";\nimport { COLLECTIONS } from '../constants';\nimport StudioAdd from '../Components/StudioAdd';\nimport StudioUpdate from '../Components/StudioUpdate';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { useAuth } from '../context/AuthContext';\nimport CardSliderCard from '../Components/CardSliderCard';\nimport Tab from '@mui/material/Tab';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\nimport { Box } from '@mui/material';\n\n\n\nfunction CreatorStudio() {\n  const [studio, setStudio] = useState([]);\n  const [studioId, setStudioId] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  const [instructors, setInstructors] = useState([]);\n  const [isCreator, setIsCreator] = useState(false);\n  const [premiumTill, setPremiumTill] = useState(-1);\n  const { currentUser } = useAuth();\n  const [value, setValue] = React.useState('1');\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n\n  useEffect(() => {\n    console.log(\"Creator Studio getCreatorMode\")\n    const getCreatorMode = async (event) => {\n      try{\n      const userRef = doc(db, \"User\", currentUser.uid);\n      const userSnap = await getDoc(userRef);\n      if (userSnap.exists()) {\n        console.log(\"User there\",userSnap.data(),userSnap.data().CreatorMode,JSON.parse(localStorage.getItem('userInfoFull')));\n        if(userSnap.data() != null){\n          \n          setIsCreator(userSnap.data().CreatorMode)\n          setPremiumTill(userSnap.data().isPremium)\n          console.log(\"Premium Till\",premiumTill,userSnap.data())\n        }else{\n          console.log(\"userSnap.data() null\")\n        }\n      } else {\n        console.log(\"User not found but workshop created... error\");\n      }\n      }catch(error){\n        console.log(\" error\");\n      }\n    }\n  \n    getCreatorMode();\n  }, [isCreator]); // Run once on mount\n\n    // Fetch instructors for the current user\n  useEffect(() => {\n    console.log(\"Creator Studio fetchInstructors\")\n  const fetchInstructors = async () => {\n    let userId = null;\n    if (\n      JSON.parse(localStorage.getItem('userInfo')) &&\n      JSON.parse(localStorage.getItem('userInfo')).UserId\n    ) {\n      userId = JSON.parse(localStorage.getItem('userInfo')).UserId;\n    }\n    if (!userId) {\n      console.log('User not found');\n      alert('User not found');\n      return;\n    }\n\n    const instructorRef = collection(db, COLLECTIONS.INSTRUCTORS);\n    const q = query(instructorRef, where('createdBy', '==', userId));\n    const querySnapshot = await getDocs(q);\n    \n    const instructorsList = [];\n    querySnapshot.forEach((doc) => {\n      instructorsList.push({\n        id: doc.id,\n        name: doc.data().name,      \n      });\n    });\n    console.log(\"Hiii\", instructorsList)\n    setInstructors(instructorsList);\n  };\n\n  fetchInstructors();\n  }, []);\n\n \n  useEffect(() => {\n    console.log(\"Creator Studio getStudioCreated\")\n    const getStudioCreated = async ()=>{\n      const q = query(collection(db, COLLECTIONS.STUDIO), where(\"UserId\", \"==\", JSON.parse(localStorage.getItem('userInfo')).UserId)    );\n      console.log(\"Hiiii\",JSON.parse(localStorage.getItem('userInfo')).UserId)\n      const querySnapshot = await getDocs(q);\n      console.log(\"Studios : \",querySnapshot)\n      const studiosOfUser = querySnapshot.docs.filter(doc => doc.data().studioName).map(doc => \n        { const data = doc.data();\n          return {\n            id: doc.id, // Include the document ID in the data\n            ...data\n          };\n      });\n      localStorage.setItem(\"StudioCreated\", JSON.stringify(studiosOfUser));\n      setStudio(studiosOfUser);\n      setStudioId(studiosOfUser.map((studio) => (String(studio.studioName) + \" :\" + String(studio.id))));\n      console.log(studio)\n      console.log(\"studioId\",studioId)\n    };\n      \n      getStudioCreated();\n    },[setStudio]);\n \n  useEffect(() => {\n    console.log(\"Creator Studio setStudioId\")\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser = JSON.parse(localStorage.getItem('StudioCreated')) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map((studio) => `${studio.studioName} : ${studio.id}`);\n    setStudioId(studioIdList);\n\n    console.log(\"studio:\", studio);\n    console.log(\"studioId\", studioId);\n  }, [setStudioId]);\n\n  console.log(\"studio :\",studio)\n  return (\n    <div>\n      <br></br>\n      {isCreator?(\n        \n       <>\n       <Box sx={{ width: '100%', typography: 'body1' }}>\n      <TabContext value={value}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <TabList style={{color: isDarkModeOn ? 'white' : 'black'}} onChange={handleChange} aria-label=\"lab API tabs example\">\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Add Studio\" value=\"1\" />\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Update Studio\" value=\"2\" />\n          \n          </TabList>\n        </Box>\n        <TabPanel value=\"1\">\n\n        <StudioAdd instructors={instructors} />\n        </TabPanel>\n        <TabPanel value=\"2\">\n        <>\n        <StudioUpdate\n                  studio={studio}\n                  setStudio={setStudio}\n                  instructors={instructors}\n                  studioId={studioId}\n                  setStudioId={setStudioId}\n                />\n        </>\n    \n        </TabPanel>\n        \n      </TabContext>\n    </Box>\n      </>\n      ):\"\"}\n \n      <h3 style={{color: isDarkModeOn ? 'white' : 'black'}}>Your Studios:</h3>\n       <ul>\n      <Row xs={1} md={3} lg={4} className=\"g-4\">\n        {studio.length > 0 ? (\n          studio.map((studio, index) => (\n            <Col key={index}>\n              <a href={`#/studio/${studio.studioId}`} style={{ textDecoration: \"none\" }}>\n                <CardSliderCard studio={studio}/>\n              </a>\n          </Col>\n          ))\n        ) : (\n          <p style={{color: isDarkModeOn ? 'white' : 'black'}}>No studio yet!</p>\n        )}\n      </Row>\n      <br/>\n      </ul>\n    </div>\n  )\n}\nexport default CreatorStudio"],"names":["_ref","studio","_jsx","href","id","children","NStudioCard","data","img_src","isDarkModeOn","useSelector","selectDarkModeStatus","studioId","cardStyle","backgroundColor","padding","color","marginRight","width","maxWidth","boxShadow","transition","_jsxs","Card","variant","sx","transform","AspectRatio","ratio","style","position","src","iconUrl","loading","alt","height","overflow","Stack","direction","spacing","bottom","left","danceStyles","split","slice","map","form","index","Chip","marginBottom","fontSize","bgcolor","danceStylesColorChips","trim","CardContent","Link","fontWeight","textColor","underline","overlay","studioName","Typography","level","street","IconButton","hidden","size","zIndex","borderRadius","right","Favorite","avgRating","toFixed","_defaultTime$split$","show","handleClose","handleSelect","defaultTime","startTime_i","endTime_i","renderTimeOptions","defaultValue","console","log","timeOptions","generateTimeOptions","options","option_AM","option_PM","hours","minutes","formattedHours","toString","padStart","formattedMinutes","timeString","push","formattedHours12","i","length","_Fragment","value","option","Modal","onHide","Header","closeButton","Title","Body","Row","Col","Form","Group","Label","Control","as","onChange","e","target","lineHeight","Footer","Button","onClick","daysOfWeek","categoryMap","Kids","Adults","Women_Only","Men_Only","Seniors","All","Couples","Families","tableData","setTableData","instructorNamesWithIds","showTimePicker","setShowTimePicker","useState","selectedRowIndex","setSelectedRowIndex","selectedRow","setSelectedRow","danceStylesOptions","setDefaultTime","handleTableChange","field","prevData","Array","isArray","join","newData","handleTimePickerClose","handleTimeSelect","startTime","endTime","currentTime","time","undefined","currentStartTime","currentEndTime","Table","bordered","border","textAlign","minWidth","handleAddRow","className","danceForms","days","instructors","fee","status","freeTrial","classCategory","FaPlus","row","_tableData$selectedRo","type","MultiSelect","filter","day","event","placeholder","maxSelectedLabels","handleTimePickerOpen","TimeRangePicker","Autocomplete","multiple","_","values","renderInput","params","TextField","Object","key","selectedKeys","keys","find","splice","handleRemoveRow","FaMinus","libraries","PinMarker","FaMapMarkerAlt","selectedLocation","setSelectedLocation","center","setCenter","lat","lng","address","setAddress","apiKey","useEffect","LoadScript","googleMapsApiKey","PlacesAutocomplete","newAddress","onSelect","async","results","geocodeByAddress","selectedAddress","latLng","getLatLng","_ref2","getInputProps","suggestions","getSuggestionItemProps","suggestion","active","description","GoogleMapReact","bootstrapURLKeys","defaultCenter","defaultZoom","_ref3","text","StudioId","jsx","encodeToUnicode","utf8Encoded","TextEncoder","encode","String","fromCharCode","newStudioId","setNewStudioId","selectedInstructors","setSelectedInstructors","selectedDanceStyles","setSelectedDanceStyles","selectedAmenities","setSelectedAmenities","instructor","name","isReady","setIsReady","locationOptions","indianCities","amenityKeys","AMENITIES_ICONS","activeStep","setActiveStep","handleNext","prevActiveStep","handleBack","darkTheme","createTheme","palette","mode","document","getElementById","q","query","collection","db","DRAFT_COLLECTIONS","DRAFT_STUDIOS","where","JSON","parse","localStorage","getItem","UserId","querySnapshot","getDocs","empty","addDoc","aboutStudio","founderName","aboutFounder","mobileNumber","whatsappNumber","mailAddress","numberOfHalls","maximumOccupancy","instructorsNames","buildingName","city","landmark","pincode","state","country","geolocation","aadharNumber","gstNumber","enrolledId","reviews","author","displayName","isPremium","addAmenities","enrollmentProcess","creatorEmail","email","instagram","facebook","youtube","twitter","visibilty","studios","forEach","doc","foundStudio","unicodeString","c","charCodeAt","TextDecoder","decode","Uint8Array","decodeUnicode","error","main","intervalId","studioRef","setInterval","reduce","accumulator","current","updateDoc","err","clearInterval","Stepper","alternativeLabel","label","Step","StepLabel","onSubmit","preventDefault","COLLECTIONS","STUDIO","userRef","userSnap","getDoc","exists","StudioCreated","deleteDoc","resetDraft","controlId","md","rows","minHeight","minheight","ThemeProvider","theme","CssBaseline","handleDanceStylesChange","xs","MuiButton","disabled","handleInstructorChange","rel","textDecoration","overflowX","whiteSpace","scrollbarColor","StudioTable","handleAmentiesChange","MapsInput","ImageUpload","entityId","title","storageFolder","STORAGES","STUDIOICON","maxImageCount","STUDIOIMAGES","display","alignItems","SuccessMessage","message","timeOfDisplay","fontStyle","showAlert","setShowAlert","timer","setTimeout","clearTimeout","Container","Alert","marginTop","onClose","dismissible","setStudio","setStudioId","selectedStudio","setSelectedStudio","selectedStudioId","setSelectedStudioId","selectedStudioFrozenClassRows","setSelectedStudioFrozenClassRows","showUpdateSuccessAlert","setShowUpdateSuccessAlert","showUpdateErrorAlert","setShowUpdateErrorAlert","studiosOfUser","studioIdList","maxIndex","Math","max","Number","nameIdLocal","nameId","indexOfColon","lastIndexOf","substring","alert","reset","selectedId","pop","studioDoc","loc","studioItem","newCity","prevState","handleAmenitiesChange","newRowKey","rowKey","_tableData$index","_tableData$index2","STUDIOANNOUNCEMENTS","AlertPopup","setInstructors","isCreator","setIsCreator","premiumTill","setPremiumTill","currentUser","useAuth","setValue","React","uid","CreatorMode","getCreatorMode","userId","instructorRef","INSTRUCTORS","instructorsList","fetchInstructors","docs","setItem","stringify","getStudioCreated","Box","typography","TabContext","borderBottom","borderColor","TabList","handleChange","newValue","Tab","TabPanel","StudioAdd","StudioUpdate","lg","CardSliderCard"],"sourceRoot":""}