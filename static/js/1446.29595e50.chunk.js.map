{"version":3,"file":"static/js/1446.29595e50.chunk.js","mappings":"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","sources":["Components/CardSliderCard.js","Components/NStudioCard.js","Screens/SearchPage.js","constants.js","utils/firebaseUtils.js"],"sourcesContent":["import React from 'react';\nimport NStudioCard from './NStudioCard';\n\nconst CardSliderCard = ({ studio }) => {\n  return (\n    <a href={`#/studio/${studio.id}`}>\n    <NStudioCard data={studio} img_src={\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}/>\n    </a>\n\n  );\n};\n\nexport default CardSliderCard;\n","\nimport React from 'react';\nimport AspectRatio from '@mui/joy/AspectRatio';\nimport Card from '@mui/joy/Card';\nimport CardContent from '@mui/joy/CardContent';\nimport Chip from '@mui/joy/Chip';\nimport Link from '@mui/joy/Link';\nimport Typography from '@mui/joy/Typography';\nimport { Stack } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport { CHIP_LEVELS_DESIGN, COLORS, danceStylesColorChips } from '../constants';\nimport IconButton from '@mui/joy/IconButton';\nimport Favorite from '@mui/icons-material/Favorite';\n\n\nexport default function NStudioCard({img_src,data}) {\n    const isDarkModeOn = useSelector(selectDarkModeStatus);\n    \n    const studioId = data.id?data.id:data.studioId;\n\n    const cardStyle = {\n      backgroundColor: isDarkModeOn ? '#444' : 'white',\n      padding: '0px',\n      color: isDarkModeOn ? 'white' : 'black',\n      marginRight: \"10px\",\n      width: 320,\n      maxWidth: \"100%\",\n      boxShadow: 'lg',\n      transition: 'opacity 0.3s ease',\n    };\n  \n    const cardHoverStyle = {\n      transform: 'scale(1.01)',\n    };\n  \n  return (\n    <Card variant=\"solid\" sx={{\n      ...cardStyle,\n      '&:hover': cardHoverStyle,\n    }}>\n      \n        <AspectRatio ratio=\"1.78\" style={{ position: 'relative'}}>\n          <img\n            src={data && data.iconUrl ? data.iconUrl :\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}\n            loading=\"lazy\"\n            alt=\"Studio Image\"\n            style={{ maxWidth: '100%', height: 'auto', overflow: 'hidden' }}\n            \n          />\n          <Stack direction=\"row\" spacing={2} style={{ position: 'absolute', bottom: 0, left: 0, padding: '1px' }}>\n        {data && data.danceStyles && typeof data.danceStyles === 'string' ? (data.danceStyles.split(\",\").slice(0, 3).map((form, index) => (\n        <Chip\n            key={index}\n            color={index % 2 === 0 ? \"danger\" : \"success\"}  \n            sx={{ marginBottom: \"10px\", fontSize: '0.8rem',  \n                    bgcolor: danceStylesColorChips[index].backgroundColor,\n                    color: danceStylesColorChips[index].color, \n            }}\n        >\n            {form.trim()}\n        </Chip>\n        ))):(\n            <Chip\n            key={10}\n            color={10 % 2 === 0 ? \"danger\" : \"success\"} \n            style={{ marginBottom: \"10px\", fontSize: '0.8rem' }}\n        >\n            {\"No danceforms\"}\n        </Chip>\n        )}\n\n        </Stack>\n\n        <Stack\n            direction=\"row\"\n            spacing={2}\n            style={{ position: \"absolute\", top: 0, left: 0, padding: \"1px\", paddingTop: \"1px\" }}\n          >\n            {data && data.freeTrialAvailable &&(\n            \n                <Chip\n                  key={1}\n                 \n                  sx={{\n                    marginLeft: \"10px\",\n                    marginBottom: \"10px\",\n                    fontSize: \"0.8rem\",\n                    bgcolor: COLORS.LIME.backgroundColor,  // Set the background color\n                    color: COLORS.LIME.color,  // Set the text color\n                  }}\n                >\n                  {'Free Trial Available'}\n                </Chip>\n              \n            )}\n          </Stack>\n\n        </AspectRatio>\n      <CardContent style={{padding:'10px'}}>\n        <Link\n          href={`#/studio/${studioId}`}\n          fontWeight=\"bold\"\n          color=\"neutral\"\n          textColor=\"text.primary\"\n          underline='none'\n          overlay\n          style={{color: isDarkModeOn?'white':'black'}}\n        >\n          {data && data.studioName?data.studioName:\"    \"}\n        </Link>\n        <Typography style={{color: isDarkModeOn?'white':'black'}} level=\"body-xs\">{data.street?data.street:\".  \"}</Typography>\n        <IconButton\n          hidden\n          aria-label=\"Like minimal photography\"\n          size=\"md\"\n          variant=\"solid\"\n          color=\"danger\"\n          sx={{\n            position: 'absolute',\n            zIndex: 2,\n            borderRadius: '50%',\n            right: '1rem',\n            bottom: '2rem',\n            transform: 'translateY(50%)',\n          }}\n        >\n          <Favorite />\n        </IconButton>\n        <Typography style={{color: isDarkModeOn ? 'white' : 'black'}}>\n            <span>⭐ {data && data.avgRating ? data.avgRating.toFixed(1) : \"Not rated yet\"}</span>\n            {data && data.minFee && (\n              <span style={{position: \"absolute\", right: 2}}>  Starts @₹{data.minFee}</span>\n            )}\n          </Typography>\n\n      </CardContent>\n    </Card>\n  );\n}","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\nimport {Form, Button, Col,Row, Modal, ButtonGroup,\n      Container,} from \"react-bootstrap\";\nimport { Badge as MuiBadge, Chip as MuiChip, Autocomplete as MuiAutocomplete,\n  TextField as MuiTextField, createTheme,ThemeProvider,\n  Stack as MuiStack,Grid as MuiGrid, Box } from \"@mui/material\";\nimport Select from \"react-select\";\nimport axios from \"axios\";\nimport danceStyles from \"../danceStyles.json\";\nimport CardSliderCard from \"../Components/CardSliderCard\";\nimport './SearchPage.css';\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport { COLLECTIONS, LEVELS } from \"../constants\";\nimport NWorkshopCard from \"../Components/NWorkshopCard\";\nimport NOpenClassCard from \"../Components/NOpenClassCard\";\nimport NCourseCard from \"../Components/NCourseCard\";\nimport { useMediaQuery } from '@mui/material';\n\nconst FILTER_LOCATION_KEY = \"filterLocation\";\nconst FILTER_SEARCH_TYPE_KEY = \"filterSearchType\";\nconst FILTER_DISTANCES_KEY = \"filterDistances\";\nconst FILTER_DANCE_FORMS_KEY = \"filterDanceForms\";\nconst FILTER_USER_GEO_LOC = \"browserGeoLoc\";\n\nconst levelsTypes = [LEVELS.ALL, LEVELS.BEGINNERS, LEVELS.INTERMEDIATE, LEVELS.ADVANCED]\nconst MAX_PRICE  = 10**10\n\nconst distances = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst searchTypes = [\n  { name: \"studio\", label: \"Studios\", collection: COLLECTIONS.STUDIO },\n  { name: \"workshop\", label: \"Workshops\", collection: COLLECTIONS.WORKSHOPS },\n  { name: \"openClass\",label: \"Open Classes\",collection: COLLECTIONS.OPEN_CLASSES},\n  { name: \"course\", label: \"Courses\", collection: COLLECTIONS.COURSES },\n];\n\nconst getCollectionForSearchType = (searchType) => {\n  const searchTypeObject = searchTypes.find(type => type.name === searchType);\n  return searchTypeObject ? searchTypeObject.collection : COLLECTIONS.STUDIO;\n};\n\nconst SearchPage = () => {\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [selectedDistances, setSelectedDistances] = useState(\"\");\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n  const [showFilters, setShowFilters] = useState(false);\n  const [studioIdName,setStudioIdName] = useState({});\n  const [showFilterValue, setShowFilterValue] = useState(\"distances\");\n  const [activeFilters, setActiveFilters] = useState(0);\n  const [suggestions, setSuggestions] = useState([]);\n  const [selectedDanceForms, setSelectedDanceForms] = useState([]);\n  const [selectedSearchType, setSelectedSearchType] = useState(\"studio\"); \n  const [selectedLevel, setSelectedLevel] = useState(\"All\");\n  const [selectedMaxPrice, setSelectedMaxPrice] = useState(MAX_PRICE);\n  const [searchData, setSearchData] = useState({\n    workshop: [],\n    openClass: [],\n    course: [],\n  });\n\n  const danceForms = danceStyles.danceStyles.map((danceForm) => ({\n    value: danceForm,\n    label: danceForm,\n  }));\n\n  const styles = {\n    valueContainer: (base) => ({\n      ...base,\n      maxHeight: 100,\n      overflowY: \"auto\",\n    }),\n    multiValue: (base, state) => {\n      return state.data.isFixed ? { ...base, backgroundColor: \"gray\" } : base;\n    },\n    multiValueLabel: (base, state) => {\n      return state.data.isFixed\n        ? { ...base, fontWeight: \"bold\", color: \"white\", paddingRight: 6 }\n        : base;\n    },\n    multiValueRemove: (base, state) => {\n      return state.data.isFixed ? { ...base, display: \"none\" } : base;\n    },\n  };\n\n  const toggleFilters = () => {\n    setShowFilters(!showFilters);\n  };\n\n  const themeBar = createTheme({\n    palette: {\n      mode: isDarkModeOn ? \"dark\" : \"light\", // Dynamically set dark or light mode\n    },\n  });\n\n  const handleInputChange = (event, value) => {\n    setQuery(value);\n  };\n  const countActiveFilters = () => {\n    let count = 0;\n    if (localStorage.getItem(FILTER_DISTANCES_KEY)) count++;\n    // if (localStorage.getItem(FILTER_SEARCH_TYPE_KEY)) count++;\n    if (selectedLevel && selectedLevel !== LEVELS.ALL) count++;\n    if (selectedMaxPrice && selectedMaxPrice !== MAX_PRICE) count++;\n    const storedDanceForm = localStorage.getItem(FILTER_DANCE_FORMS_KEY);\n    if (storedDanceForm) count += JSON.parse(storedDanceForm).length;\n    return count;\n  };\n  const fetchIdNameMp = async (city) => {\n    try {\n      const apiEndpoint = `https://nrityaserver-2b241e0a97e5.herokuapp.com/api/autocomplete/?&city=${city}`;\n      const response = await fetch(apiEndpoint);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch data\");\n      }\n      \n      const data = await response.json();\n      setStudioIdName(data);\n      \n    } catch (error) {\n      console.error(\"Error in processing:\", error);\n    }\n  };\n\n  const handleSearch = () => {\n    const storedSelectedSearchType =\n      localStorage.getItem(FILTER_SEARCH_TYPE_KEY) ||\n      selectedSearchType ||\n      \"studio\";\n\n      \n      if (query == null) {\n      setQuery(\"\");\n    }\n    let apiEndpoint = `https://nrityaserver-2b241e0a97e5.herokuapp.com/api/search/?query=${query}`;\n    const entity = getCollectionForSearchType(storedSelectedSearchType);\n\n    const city = localStorage.getItem(FILTER_LOCATION_KEY) || \"New Delhi\";\n    apiEndpoint += `&city=${encodeURIComponent(city)}`;\n    fetchIdNameMp(city)\n    if (storedSelectedSearchType) {\n      apiEndpoint += `&entity=${encodeURIComponent(entity)}`;\n    }\n    \n    const storedSelectedDanceForms = JSON.parse(localStorage.getItem(FILTER_DANCE_FORMS_KEY) || \"[]\");\n    if (storedSelectedDanceForms.length > 0) {\n      apiEndpoint += `&danceStyle=${encodeURIComponent(storedSelectedDanceForms.join(\",\"))}`;\n    }\n\n    if (entity !== COLLECTIONS.STUDIO && selectedLevel && selectedLevel !== LEVELS.ALL) {\n      apiEndpoint += `&level=${encodeURIComponent(selectedLevel)}`\n    }\n\n    if ((entity === COLLECTIONS.WORKSHOPS || entity === COLLECTIONS.COURSES) && selectedMaxPrice && selectedMaxPrice !== MAX_PRICE) {\n      apiEndpoint += `&price=${encodeURIComponent(selectedMaxPrice)}`\n    }\n\n    const geoLocation = getGeoLocationFromLocalStorage();\n    if (selectedDistances && geoLocation && localStorage.getItem(FILTER_DISTANCES_KEY)) {\n      apiEndpoint += `&distance=${encodeURIComponent(selectedDistances)}&user_lat=${encodeURIComponent(geoLocation.latitude)}&user_lon=${encodeURIComponent(geoLocation.longitude)}`;\n    }\n\n    console.log(\"apiEndpoint \", apiEndpoint);\n    fetch(apiEndpoint)\n      .then((response) => response.json())\n      .then((data) => {\n        const formattedData = Array.isArray(data) ? data : Object.values(data);\n        setResults(formattedData);\n      })\n      .catch((error) =>\n        console.error(\"Error fetching search results:\", error)\n      );\n  };\n\n\n  const handleChange = async (event, value) => {\n    const baseUrl = \"https://nrityaserver-2b241e0a97e5.herokuapp.com/api\";\n    //setQuery(event.target.value);\n    setQuery(value);\n\n    if (value.length >= 3) {\n      try {\n        const FILTER_LOCATION_KEY = \"filterLocation\";\n        const defaultCity = \"New Delhi\";\n\n        const city = localStorage.getItem(FILTER_LOCATION_KEY) || defaultCity;\n        const cityParam = encodeURIComponent(city || defaultCity);\n\n        const endpoint = `${baseUrl}/autocomplete?query=${value}&city=${cityParam}`;\n\n        //const endpoint = baseUrl + `/autocomplete?query=${value}&city=Patna`;\n        const response = await axios.get(endpoint);\n        console.log(\"Response :\",response.data)\n        const filteredSuggestions = Object.values(response.data).filter(value => value !== null);\n        setSuggestions(filteredSuggestions);\n\n      } catch (error) {\n        console.error(\"Error fetching autocomplete suggestions:\", error);\n      }\n    } else {\n      // Clear suggestions if the input length is less than 3 characters\n      setSuggestions([]);\n    }\n  };\n\n  const handleApplyFilters = () => {\n    localStorage.setItem(FILTER_DISTANCES_KEY, selectedDistances);\n    localStorage.setItem(FILTER_SEARCH_TYPE_KEY, selectedSearchType);\n    localStorage.setItem(\n      FILTER_DANCE_FORMS_KEY,\n      JSON.stringify(selectedDanceForms)\n    );\n    setActiveFilters(countActiveFilters());\n    //dispatch(refreshLocation())\n    setShowFilters(false);\n    handleSearch();\n  };\n\n  const handleClearFilters = () => {\n    setSelectedDistances(\"\");\n    setSelectedDanceForms([]);\n    setSelectedSearchType(\"studio\");\n    setSelectedMaxPrice(MAX_PRICE);\n    setSelectedLevel(LEVELS.ALL);\n    localStorage.removeItem(FILTER_DISTANCES_KEY);\n    localStorage.removeItem(FILTER_DANCE_FORMS_KEY);\n    localStorage.setItem(FILTER_SEARCH_TYPE_KEY, \"studio\");\n    setActiveFilters(countActiveFilters());\n    setShowFilters(false);\n    handleSearch();\n  };\n\n  const handleSelectChange = (selectedOptions) => {\n    setSelectedDanceForms(\n      selectedOptions ? selectedOptions.map((option) => option.value) : []\n    );\n  };\n\n  const handleSearchTypeClick = (clickedSearchType) => {\n    localStorage.setItem(FILTER_SEARCH_TYPE_KEY, clickedSearchType);\n    localStorage.removeItem(FILTER_DISTANCES_KEY);\n\n    setSelectedDistances(\"\");\n    setSelectedLevel(LEVELS.ALL);\n    setSelectedMaxPrice(MAX_PRICE);\n    setSelectedSearchType(clickedSearchType);\n    setActiveFilters(countActiveFilters());\n    handleSearch();\n  };\n\n  const handleRemoveDistance = () => {\n    setSelectedDistances(null);\n    localStorage.removeItem(FILTER_DISTANCES_KEY);\n    setActiveFilters(countActiveFilters());\n    handleSearch();\n  };\n\n  const handleRemoveDanceForm = (danceFormToRemove) => {\n    const filteredDanceForms = selectedDanceForms.filter(\n      (danceForm) => danceForm !== danceFormToRemove\n    );\n    setSelectedDanceForms(filteredDanceForms);\n    localStorage.setItem(\n      FILTER_DANCE_FORMS_KEY,\n      JSON.stringify(filteredDanceForms)\n    );\n    setActiveFilters(countActiveFilters());\n    handleSearch();\n  };\n\n  useEffect(() => {\n    const storedDistances = localStorage.getItem(FILTER_DISTANCES_KEY);\n    const storedDanceForm = localStorage.getItem(FILTER_DANCE_FORMS_KEY);\n    const storedSearchType = localStorage.getItem(FILTER_SEARCH_TYPE_KEY);\n\n    if (storedSearchType) {\n      setSelectedSearchType(storedSearchType);\n    } else {\n      setSelectedSearchType(\"studio\");\n      localStorage.setItem(FILTER_SEARCH_TYPE_KEY, \"studio\");\n    }\n\n    if (storedDistances) {\n      setSelectedDistances(storedDistances);\n    }\n\n    if (storedDanceForm) {\n      setSelectedDanceForms(JSON.parse(storedDanceForm));\n    }\n    setActiveFilters(countActiveFilters());\n    handleSearch();\n  }, [selectedLevel, selectedMaxPrice]);\n\n  const [label, setLabel] = useState('Search studios, workshops, open classes, courses...');\n\n  // Function to update label based on window width\n  const updateLabel = () => {\n    if (window.innerWidth < 600) {\n      setLabel('Search...');\n    } else {\n      setLabel('Search studios, workshops, open classes, courses...');\n    }\n  };\n\n  // Update label on component mount and window resize\n  useEffect(() => {\n    updateLabel(); // Set initial label\n    window.addEventListener('resize', updateLabel); // Listen for resize\n\n    return () => {\n      window.removeEventListener('resize', updateLabel); // Clean up listener\n    };\n  }, []);\n\n  return (\n    <div\n      style={{\n        backgroundColor: isDarkModeOn ? \"#202020\" : \"white\",\n        padding: \"10px\",\n        minHeight: \"75vh\",\n      }}\n    >\n      <header>\n        <Container style={{ width: \"100%\" }}>\n          <MuiGrid container alignItems=\"center\">\n            <MuiGrid item xs={12}>\n              <ThemeProvider theme={themeBar}>\n                <MuiStack\n                  style={{\n                    width: \"100%\",\n                    paddingRight: 0,\n                    marginTop: 0,\n                    marginLeft: 0,\n                    marginBottom: 0,\n                  }}\n                  direction=\"row\"\n                  spacing={1}\n                >\n                  <MuiAutocomplete\n                    value={query}\n                    onInputChange={handleChange}\n                    onChange={handleInputChange}\n                    options={suggestions}\n                    getOptionLabel={(option) => option.toString()}\n                    renderInput={(params) => (\n                      <MuiTextField\n                      className=\"autocomplete-input\" // Style for Css\n                        {...params}\n                        label={label}\n                        variant=\"outlined\"\n                        InputProps={{\n                          ...params.InputProps,\n                          endAdornment: (\n                            <InputAdornment\n                              position=\"end\"\n                              style={{\n                                marginRight: 0,\n                                marginTop: 0,\n                                marginLeft: 0,\n                                marginBottom: 0,\n                              }}\n                            >\n                              <SearchIcon\n                                style={{\n                                  cursor: \"pointer\",\n                                  color: isDarkModeOn ? \"#892CDC\" : \"black\",\n                                  marginRight: 1,\n                                  width:\"40px\"\n                                }}\n                                onClick={handleSearch}\n                              />\n                            </InputAdornment>\n                          ),\n                          style: {\n                            paddingRight: 0,\n                            marginTop: 0,\n                            marginLeft: 0,\n                            marginBottom: 0,\n                          },\n                        }}\n                      />\n                    )}\n                    style={{ flex: 1/1 }}\n                  />\n                </MuiStack>\n              </ThemeProvider>\n            </MuiGrid>\n          </MuiGrid>\n          <br></br>\n          <Row className=\"align-items-center\">\n            <div className=\"horizontal-scroll-wrapper-for-filters\">\n              {/* Studio, Workshops, Open Classes, Courses */}\n              {searchTypes.map((searchType) => (\n                <Col key={searchType.name} xs=\"auto\" style={{ marginTop: \"0.5rem\" }}>\n                  <button\n                    onClick={() => handleSearchTypeClick(searchType.name)} // Add this line\n                    style={{\n                      cursor: 'pointer',\n                      backgroundColor: selectedSearchType === searchType.name\n                        ? (isDarkModeOn ? \"white\" : \"black\")\n                        : (isDarkModeOn ? \"black\" : \"white\"),\n                      color: selectedSearchType === searchType.name\n                        ? (isDarkModeOn ? \"black\" : \"white\")\n                        : (isDarkModeOn ? \"white\" : \"black\"),\n                      borderRadius: '10px',\n                      fontWeight: 'bold',\n                      border: `1px solid ${isDarkModeOn ? \"white\" : \"black\"}`,\n                      padding: '5px 10px',\n                      transition: 'background-color 0.3s, color 0.3s',\n                    }}\n                  >\n                    {searchType.label}\n                  </button>\n                </Col>\n              ))}\n            </div>\n          </Row>\n\n          <Row className=\"align-items-center\">\n          <div className=\"horizontal-scroll-wrapper-for-filters\"> \n            <Col xs=\"auto\" style={{ marginTop: \"0.5rem\" }}>\n              <MuiBadge\n                onClick={toggleFilters}\n                badgeContent={activeFilters}\n                color={isDarkModeOn ? \"warning\" : \"secondary\"}\n                pill\n              >\n                <MuiChip\n                  className=\"rounded-3\"\n                  color={isDarkModeOn ? \"warning\" : \"secondary\"}\n                  label=\"&#9776; filters\"\n                  variant={isDarkModeOn ? \"outlined\" : \"contained\"}\n                />\n              </MuiBadge>\n            </Col>\n\n            {(selectedDanceForms.length || selectedDistances || (selectedLevel && selectedLevel !== LEVELS.ALL) ||(selectedMaxPrice && selectedMaxPrice !== MAX_PRICE)) && (\n              <Col xs=\"auto\" style={{ marginTop: \"0.5rem\" }}>\n                <MuiBadge\n                  color=\"error\"\n                  onClick={handleClearFilters}\n                  style={{ cursor: \"pointer\" }}\n                  pill\n                >\n                  <MuiChip\n                    color=\"error\"\n                    label=\"Clear All\"\n                    onDelete={handleClearFilters}\n                    style={{ cursor: \"pointer\" }}\n                    variant={isDarkModeOn ? \"outlined\" : \"contained\"}\n                    className=\"rounded-3\"\n                  />\n                </MuiBadge>\n              </Col>\n            )}\n\n            <Box display=\"flex\">\n            {/* Filter Badges */}\n            {selectedDistances && (\n              <Col xs=\"auto\" style={{ marginTop: \"0.5rem\" }}>\n                <MuiBadge color=\"success\" pill>\n                  <MuiChip\n                    className=\"rounded-3\"\n                    color=\"success\"\n                    label={`Distance: ${selectedDistances} km`}\n                    variant={isDarkModeOn ? \"outlined\" : \"contained\"}\n                    onDelete={handleRemoveDistance}\n                  />\n                </MuiBadge>\n              </Col>\n            )}\n\n            {(selectedLevel && selectedLevel !== LEVELS.ALL) &&(\n              <Col xs=\"auto\">\n                {\n                  <MuiBadge\n                    key={selectedLevel}\n                    color=\"info\"\n                    style={{\n                      marginLeft: \"0\",\n                      marginTop: \"0.5rem\",\n                    }}\n                    pill\n                  >\n                    <MuiChip\n                      className=\"rounded-3\"\n                      color=\"info\"\n                      label={`Level: ${selectedLevel}`}\n                      variant={isDarkModeOn ? \"outlined\" : \"contained\"}\n                      onDelete={() => setSelectedLevel(LEVELS.ALL)}\n                    />\n                  </MuiBadge>\n                }\n              </Col>\n            )}\n\n            {(selectedMaxPrice && selectedMaxPrice !== MAX_PRICE) &&(\n              <Col xs=\"auto\">\n                {\n                  <MuiBadge\n                    key={selectedMaxPrice}\n                    color=\"info\"\n                    style={{\n                      marginLeft: \"0\",\n                      marginTop: \"0.5rem\",\n                    }}\n                    pill\n                  >\n                    <MuiChip\n                      className=\"rounded-3\"\n                      color=\"info\"\n                      label={`Prices Upto: ${selectedMaxPrice}`}\n                      variant={isDarkModeOn ? \"outlined\" : \"contained\"}\n                      onDelete={() => setSelectedMaxPrice(MAX_PRICE)}\n                    />\n                  </MuiBadge>\n                }\n              </Col>\n            )}\n\n            {selectedDanceForms && (\n              <Col xs=\"auto\">\n                {selectedDanceForms.map((danceForm, index) => (\n                  <MuiBadge\n                    key={index}\n                    color=\"info\"\n                    style={{\n                      marginLeft: index !== 0 ? \"0.25rem\" : \"0\",\n                      marginTop: \"0.5rem\",\n                    }}\n                    pill\n                  >\n                    <MuiChip\n                      className=\"rounded-3\"\n                      color=\"info\"\n                      label={`Dance Form: ${danceForm}`}\n                      variant={isDarkModeOn ? \"outlined\" : \"contained\"}\n                      onDelete={() => handleRemoveDanceForm(danceForm)}\n                    />\n                  </MuiBadge>\n                ))}\n              </Col>\n            )}\n            </Box>\n           </div>\n          </Row>\n        </Container>\n      </header>\n\n      <Modal show={showFilters} onHide={toggleFilters} backdrop=\"static\">\n        <Modal.Header closeButton>\n          <Modal.Title>Filters</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Row>\n            {/* Left side for filters list */}\n            <Col md={4}>\n              <h5>Filter By:</h5>\n              <ul style={{ listStyleType: \"none\", padding: 0 }}>\n\n                {selectedSearchType === \"studio\" && (\n                  <>\n                    <hr style={{ margin: \"5px 0\" }}></hr>\n                    <li\n                      style={{ cursor: \"pointer\", margin: \"5px 0\" }}\n                      onClick={() => (\n                        setShowFilterValue(\"distances\"), setShowFilters(true)\n                      )}\n                    >\n                      Distances\n                    </li>\n                  </>\n                )}\n\n              {(selectedSearchType === \"workshop\" || selectedSearchType === \"course\") && (\n                  <>\n                    <hr style={{ margin: \"5px 0\" }}></hr>\n                    <li\n                      style={{ cursor: \"pointer\", margin: \"5px 0\" }}\n                      onClick={() => (\n                        setShowFilterValue(\"price\"), setShowFilters(true)\n                      )}\n                    >\n                      Price\n                    </li>\n                  </>\n                )}\n\n                {selectedSearchType !== \"studio\" && (\n                  <>\n                    <hr style={{ margin: \"5px 0\" }}></hr>\n                    <li\n                      style={{ cursor: \"pointer\", margin: \"5px 0\" }}\n                      onClick={() => (\n                        setShowFilterValue(\"level\"), setShowFilters(true)\n                      )}\n                    >\n                      Level\n                    </li>\n                    \n                  </>\n                )}\n\n                <hr style={{ margin: \"5px 0\" }}></hr>\n                <li\n                  style={{ cursor: \"pointer\", margin: \"5px 0\" }}\n                  onClick={() => (\n                    setShowFilterValue(\"danceForm\"), setShowFilters(true)\n                  )}\n                >\n                  Dance Forms\n                </li>\n                <hr style={{ margin: \"5px 0\" }}></hr>\n              </ul>\n            </Col>\n\n            <Col md={8}>\n              {showFilters && showFilterValue === \"distances\" && (\n                <Form.Group controlId=\"filterDistances\">\n                  <Form.Label>Distances:</Form.Label>\n                  <Form.Control\n                    className=\"p-0\"\n                    as=\"select\"\n                    value={selectedDistances}\n                    onChange={(e) => setSelectedDistances(e.target.value)}\n                  >\n                    <option value=\"\">Select distance</option>\n                    {distances.map((distance) => (\n                      <option key={distance} value={distance}>\n                        {distance} km\n                      </option>\n                    ))}\n                  </Form.Control>\n                </Form.Group>\n              )}\n\n              {showFilters && showFilterValue === \"level\" && (\n                <Form.Group controlId=\"filterLevel\">\n                  <Form.Label>Level :</Form.Label>\n                  <Form.Control\n                    className=\"p-0\"\n                    as=\"select\"\n                    value={selectedLevel}\n                    onChange={(e) => setSelectedLevel(e.target.value)}\n                  >\n                    <option value=\"\">Select Lavel</option>\n                    {levelsTypes.map((level) => (\n                      <option key={level} value={level}>\n                        {level} \n                      </option>\n                    ))}\n                  </Form.Control>\n                </Form.Group>\n              )}\n\n              {showFilters && showFilterValue === \"price\" && (\n                <Form.Group controlId=\"filterPrice\">\n                  <Form.Label>Prices :</Form.Label>\n                  <Form.Control\n                    className=\"p-0\"\n                    as=\"select\"\n                    value={selectedMaxPrice}\n                    onChange={(e) => setSelectedMaxPrice(e.target.value)}\n                  >\n                    <option value=\"\">Prices below</option>\n                    {[499,999,1499,1999,2999,4999,9999,MAX_PRICE].map((price) => (\n                      <option key={price} value={price}>\n                        {price >= MAX_PRICE ?\"All\":price} \n                      </option>\n                    ))}\n                  </Form.Control>\n                </Form.Group>\n              )}\n\n              {showFilters && showFilterValue === \"danceForm\" && (\n                <Form.Group controlId=\"filterDanceForms\">\n                  <Form.Label>Dance Forms:</Form.Label>\n                  <Select\n                    isMulti\n                    value={danceForms.filter((option) =>\n                      selectedDanceForms.includes(option.value)\n                    )}\n                    onChange={handleSelectChange}\n                    options={danceForms}\n                    closeMenuOnSelect={false}\n                    placeholder=\"Select Dance Forms\"\n                    styles={styles}\n                  />\n                </Form.Group>\n              )}\n            </Col>\n          </Row>\n          <ButtonGroup style={{ marginTop: \"1rem\" }}>\n            <Button variant=\"primary\" onClick={handleApplyFilters}>\n              Apply\n            </Button>\n            <Button\n              variant=\"danger\"\n              onClick={handleClearFilters}\n              style={{ marginLeft: \"10px\" }}\n            >\n              Clear All Filters\n            </Button>\n          </ButtonGroup>\n        </Modal.Body>\n      </Modal>\n\n      <hr></hr>\n      {selectedSearchType === \"studio\" && (\n        <div style={{ display: \"flex\", flexWrap: \"wrap\", padding: \"10px\" }}>\n          {results.length === 0 ? (\n            <div className=\"\" style={{ minHeight: \"30vh\" }}></div>\n          ) : (\n            results.map((studio, index) => (\n              <div\n                key={index}\n                className=\"studio-card-container\"\n                style={{ padding: \"0.2rem\" }}\n                md={2}\n              >\n                <a\n                  href={`#/studio/${studio.studioId}`}\n                  style={{ textDecoration: \"none\" }}\n                >\n                  <CardSliderCard studio={studio} />\n                </a>\n              </div>\n            ))\n          )}\n        </div>\n      )}\n\n      {selectedSearchType === \"workshop\" && (\n        \n          <div style={{ display: \"flex\", flexWrap: \"wrap\", padding: \"10px\" }}>\n            {results.length === 0 ? (\n              <div className=\"\" style={{ minHeight: \"30vh\" }}></div>\n            ) : (\n              results.map((data, index) => (\n                <div\n                  key={index}\n                  className=\"studio-card-container\"\n                  style={{ padding: \"0.2rem\" }}\n                  md={2}\n                >\n                  \n                    <NWorkshopCard\n                    key={data.id}\n                    dataItem={data}\n                    studioIdName={studioIdName}\n                  />\n                  \n                </div>\n              ))\n            )}\n          </div>\n      \n        \n      )}\n      {selectedSearchType === \"openClass\" && (\n         <div style={{ display: \"flex\", flexWrap: \"wrap\", padding: \"10px\" }}>\n         {results.length === 0 ? (\n           <div className=\"\" style={{ minHeight: \"30vh\" }}></div>\n         ) : (\n           results.map((data, index) => (\n             <div\n               key={index}\n               className=\"studio-card-container\"\n               style={{ padding: \"0.2rem\" }}\n               md={2}\n             >\n               <NOpenClassCard\n                key={data.id}\n                dataItem={data}\n                studioIdName={studioIdName}\n              />\n             </div>\n           ))\n         )}\n       </div>\n      )}\n      {selectedSearchType === \"course\" && (\n       <div style={{ display: \"flex\", flexWrap: \"wrap\", padding: \"10px\" }}>\n       {results.length === 0 ? (\n         <div className=\"\" style={{ minHeight: \"30vh\" }}></div>\n       ) : (\n         results.map((data, index) => (\n           <div\n             key={index}\n             className=\"studio-card-container\"\n             style={{ padding: \"0.2rem\" }}\n             md={2}\n           >\n             <NCourseCard\n            key={data.id}\n            dataItem={data}\n            studioIdName={studioIdName}\n          />\n           </div>\n         ))\n       )}\n     </div>\n      )}\n    </div>\n  );\n};\n\nfunction getGeoLocationFromLocalStorage() {\n  // Retrieve the stored JSON string from localStorage\n  var geoLocString = localStorage.getItem(FILTER_USER_GEO_LOC);\n\n  // Check if the data exists in localStorage\n  if (geoLocString !== null) {\n    try {\n      // Parse the JSON string to get an object\n      var geoLocObject = JSON.parse(geoLocString);\n      // Check if the latitude and longitude properties exist in the parsed object\n      if (\n        geoLocObject &&\n        geoLocObject[\"latitude\"] &&\n        geoLocObject[\"longitude\"]\n      ) {\n        // Extract latitude and longitude from the object\n        var latitude = geoLocObject.latitude;\n        var longitude = geoLocObject.longitude;\n\n        // Return an object with latitude and longitude\n        return { latitude: latitude, longitude: longitude };\n      }\n    } catch (error) {\n      console.error(\"Error parsing JSON:\", error);\n    }\n  }\n\n  // Return null if there's no valid data or an error occurred\n  return null;\n}\n\nexport default SearchPage;\n","import { FaSnowflake, FaWifi, FaTint, FaToilet, FaPlug, FaFireExtinguisher, FaFirstAid, FaVideo, FaCreditCard, FaParking  } from 'react-icons/fa';\n\nexport const STATUSES = {\n    SUBMITTED: \"Submitted\",\n    UNDER_REVIEW: \"Under Review\",\n    REVIEWED: \"Reviewed\",\n    VERIFIED: \"Verified\",\n    VERIFICATION_FAILED: \"Verification Failed\",\n};\n\nexport const DRAFT_COLLECTIONS = {\n    DRAFT_STUDIOS: 'DraftStudios',\n    DRAFT_WORKSHOPS: 'DraftWorkshops',\n    DRAFT_OPEN_CLASSES: 'DraftOpenClasses',\n    DRAFT_COURSES: 'DraftCourses'\n};\n\nexport const LEVELS = {\n    ALL : \"All\",\n    BEGINNERS : \"Beginner\", \n    INTERMEDIATE :\"Intermediate\", \n    ADVANCED :\"Advanced\"\n}\nexport const INTERNET_CONV_CHARGES = 30;\nexport const SERVER_URLS = {\n    PROD : 'https://nrityaserver-2b241e0a97e5.herokuapp.com/',\n    LOCAL : 'http://127.0.0.1:8000/'\n}\n\nexport const COLORS = {\n    GREEN: { backgroundColor: \"#28a745\", color: \"#fff\" },     // Green background, white text\n    BLUE: { backgroundColor: \"#007bff\", color: \"#fff\" },      // Blue background, white text\n    YELLOW: { backgroundColor: \"#ffc107\", color: \"#000\" },    // Yellow background, black text\n    RED: { backgroundColor: \"#dc3545\", color: \"#fff\" },       // Red background, white text\n    PURPLE: { backgroundColor: \"#6f42c1\", color: \"#fff\" },    // Purple background, white text\n    ORANGE: { backgroundColor: \"#fd7e14\", color: \"#fff\" },    // Orange background, white text\n    TEAL: { backgroundColor: \"#20c997\", color: \"#fff\" },      // Teal background, white text\n    PINK: { backgroundColor: \"#e83e8c\", color: \"#fff\" },      // Pink background, white text\n    GRAY: { backgroundColor: \"#6c757d\", color: \"#fff\" },       // Gray background, white text\n\n    LIGHTBLUE: { backgroundColor: \"#17a2b8\", color: \"#fff\" }, // Light blue background, white text\n    DARKBLUE: { backgroundColor: \"#343a40\", color: \"#fff\" },  // Dark blue background, white text\n    CYAN: { backgroundColor: \"#00bcd4\", color: \"#fff\" },      // Cyan background, white text\n    INDIGO: { backgroundColor: \"#6610f2\", color: \"#fff\" },    // Indigo background, white text\n    LIME: { backgroundColor: \"#cddc39\", color: \"#000\" },      // Lime background, black text\n    AMBER: { backgroundColor: \"#ffca28\", color: \"#000\" },     // Amber background, black text\n    BROWN: { backgroundColor: \"#795548\", color: \"#fff\" },     // Brown background, white text\n    LIGHTGREEN: { backgroundColor: \"#8bc34a\", color: \"#000\" },// Light green background, black text\n    DEEPPURPLE: { backgroundColor: \"#673ab7\", color: \"#fff\" },// Deep purple background, white text\n    DEEPORANGE: { backgroundColor: \"#ff5722\", color: \"#fff\" },// Deep orange background, white text\n    BLACK: { backgroundColor: \"#000000\", color: \"#fff\" },     // Black background, white text\n    WHITE: { backgroundColor: \"#ffffff\", color: \"#000\" },     // White background, black text\n    SILVER: { backgroundColor: \"#c0c0c0\", color: \"#000\" },    // Silver background, black text\n    GOLD: { backgroundColor: \"#ffd700\", color: \"#000\" },      // Gold background, black text\n    NAVY: { backgroundColor: \"#001f3f\", color: \"#fff\" },      // Navy background, white text\n    OLIVE: { backgroundColor: \"#3d9970\", color: \"#fff\" },     // Olive background, white text\n\n  };\n\nexport const CHIP_LEVELS_DESIGN = {\n    [LEVELS.ALL]: COLORS.GREEN,           // Green background, white text\n    [LEVELS.BEGINNERS]: COLORS.BLUE,     // Blue background, white text\n    [LEVELS.INTERMEDIATE]: COLORS.YELLOW,  // Yellow background, black text\n    [LEVELS.ADVANCED]: COLORS.RED      // Red background, white text\n  };\n  \n\n  \nexport const danceStylesColorChips = [COLORS.PURPLE,COLORS.ORANGE,COLORS.TEAL,COLORS.LIME]\n\nexport const COLLECTIONS = {\n    USER: \"User\",\n    USER_KYC:\"UserKyc\",\n    ADMIN:\"Admin\",\n    REVIEWS: \"Reviews\",\n    TRANSACTIONS: \"Transactions\",\n    STUDIO: \"Studio\",\n    INSTRUCTORS: \"Instructors\",\n    FREE_TRIAL_BOOKINGS:\"FreeTrialBookings\",\n    WORKSHOPS: 'Workshops',\n    OPEN_CLASSES: 'OpenClasses',\n    COURSES: 'Courses',\n    BOOKINGS: 'Bookings',\n}\n\nexport const STORAGES ={\n    STUDIOIMAGES:'StudioImages',\n    STUDIOICON:'StudioIcon',\n    STUDIOANNOUNCEMENTS :'StudioAnnouncements',\n    USERIMAGE:'UserImage',\n    INSTRUCTORIMAGES: 'InstructorImages',\n    WORKSHOPICON :\"WorkshopIcon\",\n    WORKSHOPIMAGES :\"WorkshopImages\",\n    OPENCLASSICON :\"OpenClassIcon\",\n    COURSEICON :\"CourseIcon\",\n    CREATORS_KYC_DOCUMENTS :\"CreatorKycDocuments\"\n}\n\nexport const SEARCH_FILTERS ={\n    DANCEFORMS:'danceforms',\n    DISTANCES:'distances',\n}\n\nexport const BASEURL_DEV = \"http://127.0.0.1:8000/\"\nexport const BASEURL_PROD= \"https://nrityaserver-2b241e0a97e5.herokuapp.com/\"\n\nexport const AMENITIES_ICONS = {\n    \"AC\": <FaSnowflake />,\n    \"Free Wifi\": <FaWifi />,\n    \"RO Water\": <FaTint />,\n    \"Toilet\": <FaToilet />,\n    \"Power Backup\": <FaPlug />,\n    \"Fire Extinguisher\": <FaFireExtinguisher />,\n    \"First Aid Kit\": <FaFirstAid />,\n    \"CCTV Camera\": <FaVideo />,\n    \"Card Payment\": <FaCreditCard />,\n    \"Parking Space\": <FaParking />,\n};\n\n","import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, query, getDocs, where, getCountFromServer } from 'firebase/firestore';\nimport { db } from '../config';\nimport {ref,listAll,getDownloadURL,uploadBytes, deleteObject, uploadBytesResumable  } from \"firebase/storage\";\nimport { storage } from '../config';\nimport { COLLECTIONS } from '../constants';\nimport secureLocalStorage from 'react-secure-storage';\n\nexport const setCreatorMode = async (uid) => {\n  console.log(\"creatorMode uid\",uid)\n  try{\n  const userRef = doc(db, COLLECTIONS.USER, uid);\n  const userSnap = await getDoc(userRef);\n  if (userSnap.exists()) {\n    if(userSnap.data() != null){\n      const mode = userSnap.data().CreatorMode\n      console.log(\"setCreatorMode: Is User a creator?\",mode)\n      secureLocalStorage.setItem('CreatorMode', mode);\n        \n    }else{\n      console.log(\"userSnap.data() null\")\n      \n    }\n  } else {\n    console.log(\"User not found\");\n  }\n  }catch(error){\n    console.log(\" error\",error);\n  }\n}\n\nexport const getCreatorMode = async () => {\n  try{\n    const mode = secureLocalStorage.getItem('CreatorMode');\n    console.log(\"getCreatorMode \",mode)\n    if (mode){\n      return mode\n    }else{\n      return false\n    }\n  } \n  catch(error){\n    console.log(\" error\");\n    return false\n  }\n}\n\n// Read operation with image URL\nexport const readDocumentWithImageUrl = async (collectionName, productId) => {\n    console.log(\"Debug \",`${collectionName}/${productId}`)\n    const storagePath = `${collectionName}/${productId}`;\n    const folderRef = ref(storage,storagePath);\n    try {\n        const result = await listAll(folderRef);\n        if (result.items.length > 0) {\n            const firstFileRef = result.items[0];\n            const url = await getDownloadURL(firstFileRef);\n            console.log('Debug URL:', url);\n            return url;\n          } else {\n            console.log('Debug No files found in the folder.');\n            return null;\n          }\n    } catch (error) {\n      console.error('Error getting image URL:', error);\n      return null;\n    }\n  };\n\n// Read operation\nexport const readDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    const docSnapshot = await getDoc(docRef);\n    return docSnapshot.exists() ? docSnapshot.data() : null;\n};\n\n// Create or Update operation\nexport const saveDocument = async (collectionName, documentId, data) => {\n    const docRef = doc(db, collectionName, documentId);\n    await setDoc(docRef, data, { merge: true });\n    return data;\n};\n\n\nexport const handleSavePostOTPSuccess = async (collectionName, documentId, phoneNumber) => {\n  const docRef = doc(db, collectionName, documentId);\n  await updateDoc(docRef, {isPhoneNumberVerified:true,phoneNumber});\n  return true;\n};\n\n// Update specific fields in a document\nexport const updateDocumentFields = async (collectionName, documentId, fields) => {\n    const docRef = doc(db, collectionName, documentId);\n    await updateDoc(docRef, fields);\n    return { id: documentId, ...fields };\n};\n\n// Delete operation\nexport const deleteDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    await deleteDoc(docRef);\n    return { id: documentId };\n};\n\n// Query operation\nexport const queryDocuments = async (collectionName, conditions) => {\n    const q = query(collection(db, collectionName, conditions));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const queryDocumentsCount = async (collectionName,field,operation,value) => {\n    console.log(\"Hiii \",collectionName,field,operation,value)\n    const q = query(collection(db, collectionName), where(field,operation,value));\n    const snapshot = await getCountFromServer(q);\n    return snapshot.data().count;\n};\n\n\n  // Function to delete all images in a folder\nexport  const deleteAllImagesInFolder = async (storageFolder, entityId) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n    // Function to delete all images in a folder\n  export  const deleteAllImagesInFolder2 = async (storageFolder, entityId,subfolder) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}/${subfolder}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n  // Function to delete images\nexport const deleteImages = async (storageFolder,imagesToDelete,entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Deletes specific images associated with the given entityId.\n\n    Args:\n      imagesToDelete <array>: An array of image objects to be deleted.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n    const total = imagesToDelete.length;\n    let done = 0;\n    await Promise.all(imagesToDelete.map(async (file) => {\n      let folderPath = `${storageFolder}/${entityId}/${file.filename}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}/${file.filename}`;\n      }\n      const fileRefToDelete = ref(storage, folderPath);\n      await deleteObject(fileRefToDelete);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  // Function to upload new images\nexport const uploadImages = async (storageFolder, newImages, entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n\n    Args:\n      newImages <array>: An array of new image objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n   console.log(storageFolder,entityId)\n   const total = newImages.length;\n    let done = 0;\n    await Promise.all(newImages.map(async (newFileData) => {\n      let folderPath = `${storageFolder}/${entityId}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n      }\n      const fileRef = ref(storage, `${folderPath}/${newFileData.file.name}`);\n      await uploadBytes(fileRef, newFileData.file);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  export const uploadImages2 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    uploadBytesResumable(storageRef, newImages).then((snapshot) => {\n      console.log('Uploaded a blob or file!');\n    });\n  };\n\n  export const uploadImages3 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n        });\n      }\n    );\n    \n  };\n\n\n  export const uploadImages4 = async (storageFolder, newImages, entityId, thirdFolder = null, onProgress, onComplete) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages,newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const totalBytes = snapshot.totalBytes;\n        const bytesTransferred = snapshot.bytesTransferred;\n        const progress = totalBytes > 0 ? ((bytesTransferred / totalBytes) * 100).toFixed(2) : -1;\n        onProgress(progress);\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n          onComplete(downloadURL);\n        });\n\n      }\n    );\n    \n  };\n\n\n export const uploadOneImageAndGetURL = async (storageFolder, file, entityId) => {\n    try {\n      const folderPath = `${storageFolder}/${entityId}/${file.name}`;\n      console.log(folderPath)\n      const fileRef = ref(storage, folderPath);\n      \n      await uploadBytes(fileRef, file);\n  \n      const imageUrl = await getDownloadURL(fileRef);\n      console.log(imageUrl)\n      return imageUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error; \n    }\n  };\n  \n  export const getAllFilesFromFolder = async (storageFolder) => {\n    const folderPath = `${storageFolder}`;\n    const folderRef = ref(storage, folderPath);\n    \n    try {\n        const fileList = await listAll(folderRef);\n\n        const imageUrlsComprehensive = await Promise.all(\n          fileList.items.map(async (fileRef) => {\n            const downloadURL = await getDownloadURL(fileRef);\n  \n            return {\n              id: fileRef.name,\n              filename: fileRef.name,\n              fileURL: downloadURL,\n            };\n          })\n        );\n\n        // return imageUrls;\n        return imageUrlsComprehensive\n    } catch (error) {\n        console.error('Error retrieving images:', error);\n        throw error;\n    }\n};\n\n"],"names":["_ref","studio","_jsx","href","id","children","NStudioCard","data","img_src","isDarkModeOn","useSelector","selectDarkModeStatus","studioId","cardStyle","backgroundColor","padding","color","marginRight","width","maxWidth","boxShadow","transition","_jsxs","Card","variant","sx","transform","AspectRatio","ratio","style","position","src","iconUrl","loading","alt","height","overflow","Stack","direction","spacing","bottom","left","danceStyles","split","slice","map","form","index","Chip","marginBottom","fontSize","bgcolor","danceStylesColorChips","trim","top","paddingTop","freeTrialAvailable","marginLeft","COLORS","LIME","CardContent","Link","fontWeight","textColor","underline","overlay","studioName","Typography","level","street","IconButton","hidden","size","zIndex","borderRadius","right","Favorite","avgRating","toFixed","minFee","FILTER_SEARCH_TYPE_KEY","FILTER_DISTANCES_KEY","FILTER_DANCE_FORMS_KEY","FILTER_USER_GEO_LOC","levelsTypes","LEVELS","ALL","BEGINNERS","INTERMEDIATE","ADVANCED","MAX_PRICE","distances","searchTypes","name","label","collection","COLLECTIONS","STUDIO","WORKSHOPS","OPEN_CLASSES","COURSES","SearchPage","query","setQuery","useState","results","setResults","selectedDistances","setSelectedDistances","showFilters","setShowFilters","studioIdName","setStudioIdName","showFilterValue","setShowFilterValue","activeFilters","setActiveFilters","suggestions","setSuggestions","selectedDanceForms","setSelectedDanceForms","selectedSearchType","setSelectedSearchType","selectedLevel","setSelectedLevel","selectedMaxPrice","setSelectedMaxPrice","searchData","setSearchData","workshop","openClass","course","danceForms","danceForm","value","toggleFilters","themeBar","createTheme","palette","mode","countActiveFilters","count","localStorage","getItem","storedDanceForm","JSON","parse","length","handleSearch","storedSelectedSearchType","apiEndpoint","entity","searchType","searchTypeObject","find","type","getCollectionForSearchType","city","encodeURIComponent","async","response","fetch","ok","Error","json","error","console","fetchIdNameMp","storedSelectedDanceForms","join","geoLocation","geoLocString","geoLocObject","latitude","longitude","getGeoLocationFromLocalStorage","log","then","formattedData","Array","isArray","Object","values","catch","handleClearFilters","removeItem","setItem","useEffect","storedDistances","storedSearchType","setLabel","updateLabel","window","innerWidth","addEventListener","removeEventListener","minHeight","Container","MuiGrid","container","alignItems","item","xs","ThemeProvider","theme","MuiStack","paddingRight","marginTop","MuiAutocomplete","onInputChange","event","FILTER_LOCATION_KEY","defaultCity","endpoint","axios","filteredSuggestions","filter","onChange","handleInputChange","options","getOptionLabel","option","toString","renderInput","params","MuiTextField","className","InputProps","endAdornment","InputAdornment","SearchIcon","cursor","onClick","flex","Row","Col","handleSearchTypeClick","clickedSearchType","border","MuiBadge","badgeContent","pill","MuiChip","onDelete","Box","display","handleRemoveDistance","danceFormToRemove","filteredDanceForms","stringify","handleRemoveDanceForm","Modal","show","onHide","backdrop","Header","closeButton","Title","Body","md","listStyleType","_Fragment","margin","Form","Group","controlId","Label","Control","as","e","target","distance","price","Select","isMulti","includes","selectedOptions","closeMenuOnSelect","placeholder","styles","valueContainer","base","maxHeight","overflowY","multiValue","state","isFixed","multiValueLabel","multiValueRemove","ButtonGroup","Button","handleApplyFilters","flexWrap","textDecoration","CardSliderCard","NWorkshopCard","dataItem","NOpenClassCard","NCourseCard","STATUSES","SUBMITTED","UNDER_REVIEW","REVIEWED","VERIFIED","VERIFICATION_FAILED","DRAFT_COLLECTIONS","DRAFT_STUDIOS","DRAFT_WORKSHOPS","DRAFT_OPEN_CLASSES","DRAFT_COURSES","INTERNET_CONV_CHARGES","SERVER_URLS","PROD","LOCAL","GREEN","BLUE","YELLOW","RED","PURPLE","ORANGE","TEAL","PINK","GRAY","LIGHTBLUE","DARKBLUE","CYAN","INDIGO","AMBER","BROWN","LIGHTGREEN","DEEPPURPLE","DEEPORANGE","BLACK","WHITE","SILVER","GOLD","NAVY","OLIVE","CHIP_LEVELS_DESIGN","USER","USER_KYC","ADMIN","REVIEWS","TRANSACTIONS","INSTRUCTORS","FREE_TRIAL_BOOKINGS","BOOKINGS","STORAGES","STUDIOIMAGES","STUDIOICON","STUDIOANNOUNCEMENTS","USERIMAGE","INSTRUCTORIMAGES","WORKSHOPICON","WORKSHOPIMAGES","OPENCLASSICON","COURSEICON","CREATORS_KYC_DOCUMENTS","BASEURL_PROD","AMENITIES_ICONS","FaSnowflake","FaWifi","FaTint","FaToilet","FaPlug","FaFireExtinguisher","FaFirstAid","FaVideo","FaCreditCard","FaParking","setCreatorMode","uid","userRef","doc","db","userSnap","getDoc","exists","CreatorMode","secureLocalStorage","readDocumentWithImageUrl","collectionName","productId","storagePath","folderRef","ref","storage","result","listAll","items","firstFileRef","url","getDownloadURL","readDocument","documentId","docRef","docSnapshot","saveDocument","setDoc","merge","handleSavePostOTPSuccess","phoneNumber","updateDoc","isPhoneNumberVerified","updateDocumentFields","fields","queryDocumentsCount","field","operation","q","where","getCountFromServer","deleteAllImagesInFolder","storageFolder","entityId","folderPath","fileList","Promise","all","deleteObject","fileRef","deleteAllImagesInFolder2","subfolder","deleteImages","imagesToDelete","setProgress","thirdFolder","arguments","undefined","total","done","file","filename","fileRefToDelete","uploadImages","newImages","newFileData","uploadBytes","uploadImages4","onProgress","onComplete","storageRef","uploadTask","uploadBytesResumable","on","snapshot","totalBytes","bytesTransferred","progress","code","downloadURL","getAllFilesFromFolder","fileURL"],"sourceRoot":""}