{"version":3,"file":"static/js/8393.7474f7bc.chunk.js","mappings":"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","sources":["Screens/LoginPage.js","utils/firebaseUtils.js","../node_modules/react-bootstrap/esm/Col.js","../node_modules/react-bootstrap/esm/Row.js"],"sourcesContent":["import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {auth , provider}  from './../config.js';\nimport { signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { db } from '../config';\nimport { doc, getDoc,setDoc } from \"firebase/firestore\";\nimport { COLLECTIONS } from \"./../constants.js\";\nimport {  Row, Col } from 'react-bootstrap';\nimport { useSelector } from 'react-redux'; \nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { Button, Container } from '@mui/material';\nimport { setCreatorMode } from '../utils/firebaseUtils.js';\nimport { postData } from '../utils/common.js';\n\n\n\nfunction LoginPage({onLogin,setIsLoggedIn}) {\n  \n  const [loginFailed, setLoginFailed] = useState(false);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n\n  const navigate = useNavigate();\n\n    const addUserIfMissing = async (user) => {\n      try {\n        const userRef = doc(db, COLLECTIONS.USER, user.uid);\n        const userSnap = await getDoc(userRef);\n        if (userSnap.exists()) {\n          console.log(\"User there\");\n        } else {\n          // docSnap.data() will be undefined in this case\n          console.log(\"No such document!\");\n          const dbPayload = {\n            Name: user.displayName,\n            Email: user.email,\n            DoB: null, // You may want to add user's date of birth here\n            UserId: user.uid,\n            WorkshopCreated: [],\n            WorkshopEnrolled: [],\n            Cart: [],\n            CreatorMode: false,\n            KycIdList:{},\n            StudioCreated:[],\n            premiumTill: false,\n            TransactionIDs:[],\n            recentlyWatched:{0:\"\",1:\"\",2:\"\",3:\"\",4:\"\"},\n          }\n          const notifyEmails = user.email\n          const metadata = {\n            \"user_id\":user.uid\n          }\n          const response = await postData(dbPayload, COLLECTIONS.USER, notifyEmails, metadata) ;\n          if (response.ok) {\n            console.log(\"User added successfully\");\n          }else{\n            console.error(response);\n          }\n        }\n\n        const userRef2 = doc(db, COLLECTIONS.USER, user.uid);\n        const userSnap2 = await getDoc(userRef2);\n        localStorage.setItem('userDetails',JSON.stringify({\"UserId\":user.uid,\"email\":user.email,\"isPremium\":userSnap2.data().isPremium,\"displayName\":userSnap2.data().displayName,\"WorkshopCreated\":userSnap2.data().WorkshopCreated,\"WorkshopEnrolled\":userSnap2.data().WorkshopEnrolled}));\n       \n\n        \n      } catch (error) {\n        console.error(\"Error adding user: \", error);\n      }\n    };\n\n    const signin = async () => {\n      try {\n        const result = await signInWithPopup(auth, provider);\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n        const accessToken = credential.accessToken;\n        const idToken = credential.idToken;\n        console.log(\"Access token\",accessToken)\n        console.log(\"Id token\",idToken)\n        const user = result.user;\n        console.log(\"Post login :\",user);\n        console.log(\"UserId\",user.uid);\n        console.log(\"Result \", result)\n        if (result) {\n          let token = await auth.currentUser?.getIdToken();\n          console.log(\"token\", token);\n          localStorage.setItem(\"authToken\", token);\n        }\n        onLogin({\"UserId\":user.uid,\"email\":user.email,\"isPremium\":user.isPremium,\"displayName\":user.displayName,\"WorkshopCreated\":user.WorkshopCreated,\"WorkshopEnrolled\":user.WorkshopEnrolled,\"CreatorMode\":false,\"photoURL\":user.photoURL},user);\n        setIsLoggedIn(true);\n        await addUserIfMissing(user);\n        await setCreatorMode(user.uid);\n        navigate(`/`);\n      } catch (error) {\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        console.log('Invalid username or password');\n        setLoginFailed(true);\n      }\n    };\n    \n      \n    return (\n      <Container fluid className='custom-container-main'>\n          <Row>\n            <Col xs={12} md={12}>\n              <div>\n              <form\n                className='custom-login-form'\n                onSubmit={(e) => {\n                  e.preventDefault(); // Prevent form submission\n                  signin(); // Call your signin function on form submission\n                  //alert(\"Form Submitted\")\n                }}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  padding: '15px 0'\n                }}\n              >\n                <Button\n                  type=\"submit\" // Add a type to the button to trigger form submission\n                  style={{\n                    backgroundColor: \"#D9D9D9\",\n                    color: '#000',\n                    borderRadius: '6px',\n                    textTransform: 'none',\n                    border: '1px solid #777',\n                    padding: '8px 16px'\n                  }}\n                >\n                  <img\n                    src=\"https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg\"\n                    alt=\"Google Icon\"\n                    style={{ marginRight: '10px', height: '20px' }}\n                  />\n                  Sign In with Google\n                </Button>\n              </form>\n              </div>\n            </Col>\n          </Row>\n      </Container>\n    );\n}\n\nexport default LoginPage;\n","import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, query, getDocs, where, getCountFromServer } from 'firebase/firestore';\nimport { db } from '../config';\nimport {ref,listAll,getDownloadURL,uploadBytes, deleteObject, uploadBytesResumable  } from \"firebase/storage\";\nimport { storage } from '../config';\nimport { BASEURL_DEV, BASEURL_PROD } from '../constants';\nimport secureLocalStorage from 'react-secure-storage';\n\nexport const setCreatorMode = async (uid) => {\n  const BASEURL = BASEURL_PROD;\n  const url = `${BASEURL}crud/getUserMode/${uid}`;\n  //console.log(\"creatorMode uid\", uid, url);\n  \n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.success) {\n      let mode = false;\n      if (data.data === true) {\n        mode = true;\n      }\n      //console.log(\"setCreatorMode: Is User a creator?\", mode);\n      secureLocalStorage.setItem('CreatorMode', mode);\n    } else {\n      console.log(\"Error: \", data.message || \"Unknown error\");\n      //secureLocalStorage.setItem('CreatorMode', false);\n    }\n    \n  } catch (error) {\n    console.log(\"Error fetching user mode: \", error);\n    secureLocalStorage.setItem('CreatorMode', false);\n  }\n}\n\nexport const fetchStudioEntities = async (studioId, entityType, setState) => {\n  const BASE_URL = BASEURL_PROD;\n  try {\n    const url = `${BASE_URL}crud/${studioId}/${entityType}/`;\n    console.log(url)\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.success) {\n      setState(data.data);\n    } else {\n      console.error(`Error fetching ${entityType}:`, data.error);\n    }\n  } catch (error) {\n    console.error(`Error fetching ${entityType}:`, error);\n  }\n};\n\n\nexport const getCreatorMode = async () => {\n  try{\n    const mode = secureLocalStorage.getItem('CreatorMode');\n    console.log(\"getCreatorMode \",mode)\n    if (mode){\n      return mode\n    }else{\n      return false\n    }\n  } \n  catch(error){\n    console.log(\" error\");\n    return false\n  }\n}\n\nexport const setGetCreatorModeOnMount = async (uid) => {\n  await setCreatorMode(uid);\n  return await getCreatorMode();\n};\n\n\n// Read operation with image URL\nexport const readDocumentWithImageUrl = async (collectionName, productId) => {\n    console.log(\"Debug \",`${collectionName}/${productId}`)\n    const storagePath = `${collectionName}/${productId}`;\n    const folderRef = ref(storage,storagePath);\n    try {\n        const result = await listAll(folderRef);\n        if (result.items.length > 0) {\n            const firstFileRef = result.items[0];\n            const url = await getDownloadURL(firstFileRef);\n            console.log('Debug URL:', url);\n            return url;\n          } else {\n            console.log('Debug No files found in the folder.');\n            return null;\n          }\n    } catch (error) {\n      console.error('Error getting image URL:', error);\n      return null;\n    }\n  };\n\n// Read operation\nexport const readDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    const docSnapshot = await getDoc(docRef);\n    return docSnapshot.exists() ? docSnapshot.data() : null;\n};\n\n// Create or Update operation\nexport const saveDocument = async (collectionName, documentId, data) => {\n    const docRef = doc(db, collectionName, documentId);\n    await setDoc(docRef, data, { merge: true });\n    return data;\n};\n\n\nexport const handleSavePostOTPSuccess = async (collectionName, documentId, phoneNumber) => {\n  const docRef = doc(db, collectionName, documentId);\n  await updateDoc(docRef, {isPhoneNumberVerified:true,phoneNumber});\n  return true;\n};\n\n// Update specific fields in a document\nexport const updateDocumentFields = async (collectionName, documentId, fields) => {\n    const docRef = doc(db, collectionName, documentId);\n    await updateDoc(docRef, fields);\n    return { id: documentId, ...fields };\n};\n\n// Delete operation\nexport const deleteDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    await deleteDoc(docRef);\n    return { id: documentId };\n};\n\n// Query operation\nexport const queryDocuments = async (collectionName, conditions) => {\n    const q = query(collection(db, collectionName, conditions));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const queryDocumentsCount = async (collectionName,field,operation,value) => {\n    console.log(\"Hiii \",collectionName,field,operation,value)\n    const q = query(collection(db, collectionName), where(field,operation,value));\n    const snapshot = await getCountFromServer(q);\n    return snapshot.data().count;\n};\n\n\n  // Function to delete all images in a folder\nexport  const deleteAllImagesInFolder = async (storageFolder, entityId) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n    // Function to delete all images in a folder\n  export  const deleteAllImagesInFolder2 = async (storageFolder, entityId,subfolder) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}/${subfolder}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n  // Function to delete images\nexport const deleteImages = async (storageFolder,imagesToDelete,entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Deletes specific images associated with the given entityId.\n\n    Args:\n      imagesToDelete <array>: An array of image objects to be deleted.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n    const total = imagesToDelete.length;\n    let done = 0;\n    await Promise.all(imagesToDelete.map(async (file) => {\n      let folderPath = `${storageFolder}/${entityId}/${file.filename}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}/${file.filename}`;\n      }\n      const fileRefToDelete = ref(storage, folderPath);\n      await deleteObject(fileRefToDelete);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  // Function to upload new images\nexport const uploadImages = async (storageFolder, newImages, entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n\n    Args:\n      newImages <array>: An array of new image objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n   console.log(storageFolder,entityId)\n   const total = newImages.length;\n    let done = 0;\n    await Promise.all(newImages.map(async (newFileData) => {\n      let folderPath = `${storageFolder}/${entityId}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n      }\n      const fileRef = ref(storage, `${folderPath}/${newFileData.file.name}`);\n      await uploadBytes(fileRef, newFileData.file);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  export const uploadImages2 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    uploadBytesResumable(storageRef, newImages).then((snapshot) => {\n      console.log('Uploaded a blob or file!');\n    });\n  };\n\n  export const uploadImages3 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n        });\n      }\n    );\n    \n  };\n\n\n  export const uploadImages4 = async (storageFolder, newImages, entityId, thirdFolder = null, onProgress, onComplete) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages,newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const totalBytes = snapshot.totalBytes;\n        const bytesTransferred = snapshot.bytesTransferred;\n        const progress = totalBytes > 0 ? ((bytesTransferred / totalBytes) * 100).toFixed(2) : -1;\n        onProgress(progress);\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n          onComplete(downloadURL);\n        });\n\n      }\n    );\n    \n  };\n\n\n export const uploadOneImageAndGetURL = async (storageFolder, file, entityId) => {\n    try {\n      const folderPath = `${storageFolder}/${entityId}/${file.name}`;\n      console.log(folderPath)\n      const fileRef = ref(storage, folderPath);\n      \n      await uploadBytes(fileRef, file);\n  \n      const imageUrl = await getDownloadURL(fileRef);\n      console.log(imageUrl)\n      return imageUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error; \n    }\n  };\n  \n  export const getAllFilesFromFolder = async (storageFolder) => {\n    const folderPath = `${storageFolder}`;\n    const folderRef = ref(storage, folderPath);\n    \n    try {\n        const fileList = await listAll(folderRef);\n\n        const imageUrlsComprehensive = await Promise.all(\n          fileList.items.map(async (fileRef) => {\n            const downloadURL = await getDownloadURL(fileRef);\n  \n            return {\n              id: fileRef.name,\n              filename: fileRef.name,\n              fileURL: downloadURL,\n            };\n          })\n        );\n\n        // return imageUrls;\n        return imageUrlsComprehensive\n    } catch (error) {\n        console.error('Error retrieving images:', error);\n        throw error;\n    }\n};\n\n","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useCol({\n  as,\n  bsPrefix,\n  className,\n  ...props\n}) {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'col');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const spans = [];\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let span;\n    let offset;\n    let order;\n    if (typeof propValue === 'object' && propValue != null) {\n      ({\n        span,\n        offset,\n        order\n      } = propValue);\n    } else {\n      span = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (span) spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);\n    if (order != null) classes.push(`order${infix}-${order}`);\n    if (offset != null) classes.push(`offset${infix}-${offset}`);\n  });\n  return [{\n    ...props,\n    className: classNames(className, ...spans, ...classes)\n  }, {\n    as,\n    bsPrefix,\n    spans\n  }];\n}\nconst Col = /*#__PURE__*/React.forwardRef(\n// Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n(props, ref) => {\n  const [{\n    className,\n    ...colProps\n  }, {\n    as: Component = 'div',\n    bsPrefix,\n    spans\n  }] = useCol(props);\n  return /*#__PURE__*/_jsx(Component, {\n    ...colProps,\n    ref: ref,\n    className: classNames(className, !spans.length && bsPrefix)\n  });\n});\nCol.displayName = 'Col';\nexport default Col;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"names":["_ref","onLogin","setIsLoggedIn","loginFailed","setLoginFailed","useState","navigate","useSelector","selectDarkModeStatus","useNavigate","signin","async","result","signInWithPopup","auth","provider","credential","GoogleAuthProvider","credentialFromResult","accessToken","idToken","console","log","user","uid","_auth$currentUser","token","currentUser","getIdToken","localStorage","setItem","email","isPremium","displayName","WorkshopCreated","WorkshopEnrolled","photoURL","userRef","doc","db","COLLECTIONS","USER","getDoc","exists","dbPayload","Name","Email","DoB","UserId","Cart","CreatorMode","KycIdList","StudioCreated","premiumTill","TransactionIDs","recentlyWatched","notifyEmails","metadata","response","postData","ok","error","userRef2","userSnap2","JSON","stringify","data","addUserIfMissing","setCreatorMode","code","message","_jsx","Container","fluid","className","children","Row","Col","xs","md","onSubmit","e","preventDefault","style","display","alignItems","justifyContent","padding","_jsxs","Button","type","backgroundColor","color","borderRadius","textTransform","border","src","alt","marginRight","height","BASEURL","BASEURL_PROD","url","concat","fetch","json","success","mode","secureLocalStorage","fetchStudioEntities","studioId","entityType","setState","BASE_URL","setGetCreatorModeOnMount","getItem","getCreatorMode","readDocumentWithImageUrl","collectionName","productId","storagePath","folderRef","ref","storage","listAll","items","length","firstFileRef","getDownloadURL","readDocument","documentId","docRef","docSnapshot","saveDocument","setDoc","merge","handleSavePostOTPSuccess","phoneNumber","updateDoc","isPhoneNumberVerified","updateDocumentFields","fields","id","queryDocumentsCount","field","operation","value","q","query","collection","where","getCountFromServer","count","deleteAllImagesInFolder","storageFolder","entityId","folderPath","fileList","Promise","all","map","deleteObject","fileRef","deleteAllImagesInFolder2","subfolder","deleteImages","imagesToDelete","setProgress","thirdFolder","arguments","undefined","total","done","file","filename","fileRefToDelete","uploadImages","newImages","newFileData","name","uploadBytes","uploadImages4","onProgress","onComplete","storageRef","uploadTask","uploadBytesResumable","on","snapshot","totalBytes","bytesTransferred","progress","toFixed","state","then","downloadURL","getAllFilesFromFolder","fileURL","React","props","colProps","as","Component","bsPrefix","spans","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","classes","forEach","brkPoint","propValue","span","offset","order","infix","push","classNames","useCol","decoratedBsPrefix","sizePrefix","cols"],"sourceRoot":""}