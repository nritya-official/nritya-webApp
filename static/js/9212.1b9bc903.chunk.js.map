{"version":3,"file":"static/js/9212.1b9bc903.chunk.js","mappings":"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","sources":["Components/SideMenu.js","utils/firebaseUtils.js"],"sourcesContent":["import { Offcanvas, Button } from 'react-bootstrap';\nimport { auth } from '../config';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport { useSelector } from 'react-redux';\nimport logo from './../logo.png';\nimport './SideMenu.css';\nimport {useEffect} from \"react\";\nimport secureLocalStorage from 'react-secure-storage';\nimport { setCreatorMode } from '../utils/firebaseUtils';\n\nfunction SideMenu({ showProfileOffcanvas, closeProfileOffcanvas }) {\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n\n  const handleLogout = async () => {\n    console.log(\"Logging out SideMenu\")\n    try {\n    await auth.signOut();\n    localStorage.clear()\n    secureLocalStorage.clear()\n     \n    } catch (error) {\n      console.error('Error during logout:', error.message);\n    }\n  };\n\n  const trySetCreatorMode = () => {\n    let attempts = 0;\n    const userInfoFull = JSON.parse(localStorage.getItem('userInfoFull'));\n    const userId = userInfoFull?.uid;\n\n    while (attempts < 2) {\n          const creatorMode = secureLocalStorage.getItem('CreatorMode');\n\n          if (creatorMode == null) {\n            setCreatorMode(userId);\n            attempts += 1;\n          } else {\n            break;\n          }\n        \n      }\n  };\n\n  useEffect(() => {\n    trySetCreatorMode();\n  }, []);\n\n  const regularMenuItems = [\n    { action: () => window.location.hash = '#/profile', name: 'Profile', show: true },\n    { action: () => window.location.hash = '#/transactions', name: 'Transactions',show:true },\n    { action: () => window.location.hash = '#/creatorDashboard', name: 'Dashboard',show: secureLocalStorage.getItem('CreatorMode')  },\n    { action: () => window.location.hash = '#/myBookings', name: 'Bookings',show:true },\n    { action: handleLogout, name: 'Sign Out',show:true },\n  ];\n\n  return (\n    <Offcanvas\n      style={{\n        width: '20rem',\n        backgroundColor: isDarkModeOn ? 'black' : 'white',\n        color: isDarkModeOn ? 'white' : 'black'\n      }}\n      show={showProfileOffcanvas}\n      onHide={closeProfileOffcanvas}\n    >\n      <Offcanvas.Header closeButton>\n        <img style={{ width: '6rem', height: '6rem', borderRadius: '50%' }} src={logo} alt=\"Logo\" />\n      </Offcanvas.Header>\n      <Offcanvas.Body>\n        <ul className=\"menu\">\n          <ul className=\"vertical-menu\">\n            {regularMenuItems.map(({ action, name,show }, index) => (\n              <li key={index} hidden={!show}>\n                <Button\n                  variant=\"outline-warning\"\n                  className=\"rounded-pill menu-button\"\n                  onClick={action}\n                >\n                  {name}\n                </Button>\n              </li>\n            ))}\n          </ul>\n        </ul>\n      </Offcanvas.Body>\n    </Offcanvas>\n  );\n}\n\nexport default SideMenu;\n","import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, query, getDocs, where, getCountFromServer } from 'firebase/firestore';\nimport { db } from '../config';\nimport {ref,listAll,getDownloadURL,uploadBytes, deleteObject, uploadBytesResumable  } from \"firebase/storage\";\nimport { storage } from '../config';\nimport { BASEURL_DEV, BASEURL_PROD } from '../constants';\nimport secureLocalStorage from 'react-secure-storage';\n\nexport const setCreatorMode = async (uid) => {\n  const BASEURL = BASEURL_PROD;\n  const url = `${BASEURL}crud/getUserMode/${uid}`;\n  //console.log(\"creatorMode uid\", uid, url);\n  \n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.success) {\n      let mode = false;\n      if (data.data === true) {\n        mode = true;\n      }\n      //console.log(\"setCreatorMode: Is User a creator?\", mode);\n      secureLocalStorage.setItem('CreatorMode', mode);\n    } else {\n      console.log(\"Error: \", data.message || \"Unknown error\");\n      //secureLocalStorage.setItem('CreatorMode', false);\n    }\n    \n  } catch (error) {\n    console.log(\"Error fetching user mode: \", error);\n    secureLocalStorage.setItem('CreatorMode', false);\n  }\n}\n\nexport const fetchStudioEntities = async (studioId, entityType, setState) => {\n  const BASE_URL = BASEURL_PROD;\n  try {\n    const url = `${BASE_URL}crud/${studioId}/${entityType}/`;\n    console.log(url)\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.success) {\n      setState(data.data);\n    } else {\n      console.error(`Error fetching ${entityType}:`, data.error);\n    }\n  } catch (error) {\n    console.error(`Error fetching ${entityType}:`, error);\n  }\n};\n\n\nexport const getCreatorMode = async () => {\n  try{\n    const mode = secureLocalStorage.getItem('CreatorMode');\n    console.log(\"getCreatorMode \",mode)\n    if (mode){\n      return mode\n    }else{\n      return false\n    }\n  } \n  catch(error){\n    console.log(\" error\");\n    return false\n  }\n}\n\nexport const setGetCreatorModeOnMount = async (uid) => {\n  await setCreatorMode(uid);\n  return await getCreatorMode();\n};\n\n\n// Read operation with image URL\nexport const readDocumentWithImageUrl = async (collectionName, productId) => {\n    console.log(\"Debug \",`${collectionName}/${productId}`)\n    const storagePath = `${collectionName}/${productId}`;\n    const folderRef = ref(storage,storagePath);\n    try {\n        const result = await listAll(folderRef);\n        if (result.items.length > 0) {\n            const firstFileRef = result.items[0];\n            const url = await getDownloadURL(firstFileRef);\n            console.log('Debug URL:', url);\n            return url;\n          } else {\n            console.log('Debug No files found in the folder.');\n            return null;\n          }\n    } catch (error) {\n      console.error('Error getting image URL:', error);\n      return null;\n    }\n  };\n\n// Read operation\nexport const readDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    const docSnapshot = await getDoc(docRef);\n    return docSnapshot.exists() ? docSnapshot.data() : null;\n};\n\n// Create or Update operation\nexport const saveDocument = async (collectionName, documentId, data) => {\n    const docRef = doc(db, collectionName, documentId);\n    await setDoc(docRef, data, { merge: true });\n    return data;\n};\n\n\nexport const handleSavePostOTPSuccess = async (collectionName, documentId, phoneNumber) => {\n  const docRef = doc(db, collectionName, documentId);\n  await updateDoc(docRef, {isPhoneNumberVerified:true,phoneNumber});\n  return true;\n};\n\n// Update specific fields in a document\nexport const updateDocumentFields = async (collectionName, documentId, fields) => {\n    const docRef = doc(db, collectionName, documentId);\n    await updateDoc(docRef, fields);\n    return { id: documentId, ...fields };\n};\n\n// Delete operation\nexport const deleteDocument = async (collectionName, documentId) => {\n    const docRef = doc(db, collectionName, documentId);\n    await deleteDoc(docRef);\n    return { id: documentId };\n};\n\n// Query operation\nexport const queryDocuments = async (collectionName, conditions) => {\n    const q = query(collection(db, collectionName, conditions));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const queryDocumentsCount = async (collectionName,field,operation,value) => {\n    console.log(\"Hiii \",collectionName,field,operation,value)\n    const q = query(collection(db, collectionName), where(field,operation,value));\n    const snapshot = await getCountFromServer(q);\n    return snapshot.data().count;\n};\n\n\n  // Function to delete all images in a folder\nexport  const deleteAllImagesInFolder = async (storageFolder, entityId) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n    // Function to delete all images in a folder\n  export  const deleteAllImagesInFolder2 = async (storageFolder, entityId,subfolder) => {\n    /*\n    Description: Deletes all images in the specified folder associated with the given entityId.\n\n    Args:\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: The unique identifier of the entity whose images are to be deleted eg UserId,StudioId like thing.\n    */\n    const folderPath = `${storageFolder}/${entityId}/${subfolder}`;\n    const folderRef = ref(storage, folderPath);\n    const fileList = await listAll(folderRef);\n\n    await Promise.all(fileList.items.map(async (fileRef) => {\n      await deleteObject(fileRef);\n    }));\n  };\n\n  // Function to delete images\nexport const deleteImages = async (storageFolder,imagesToDelete,entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Deletes specific images associated with the given entityId.\n\n    Args:\n      imagesToDelete <array>: An array of image objects to be deleted.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n    const total = imagesToDelete.length;\n    let done = 0;\n    await Promise.all(imagesToDelete.map(async (file) => {\n      let folderPath = `${storageFolder}/${entityId}/${file.filename}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}/${file.filename}`;\n      }\n      const fileRefToDelete = ref(storage, folderPath);\n      await deleteObject(fileRefToDelete);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  // Function to upload new images\nexport const uploadImages = async (storageFolder, newImages, entityId,setProgress,thirdFolder=null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n\n    Args:\n      newImages <array>: An array of new image objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId,StudioId like thing.\n    */\n   console.log(storageFolder,entityId)\n   const total = newImages.length;\n    let done = 0;\n    await Promise.all(newImages.map(async (newFileData) => {\n      let folderPath = `${storageFolder}/${entityId}`;\n      if (thirdFolder){\n         folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n      }\n      const fileRef = ref(storage, `${folderPath}/${newFileData.file.name}`);\n      await uploadBytes(fileRef, newFileData.file);\n      done += 1;\n      setProgress((done / total) * 100);\n    }));\n  };\n\n  export const uploadImages2 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    uploadBytesResumable(storageRef, newImages).then((snapshot) => {\n      console.log('Uploaded a blob or file!');\n    });\n  };\n\n  export const uploadImages3 = async (storageFolder, newImages, entityId, thirdFolder = null) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n        });\n      }\n    );\n    \n  };\n\n\n  export const uploadImages4 = async (storageFolder, newImages, entityId, thirdFolder = null, onProgress, onComplete) => {\n    /*\n    Description: Uploads new images associated with the given entityId.\n  \n    Args:\n      newImages <FileList or Array>: An array of File objects to be uploaded.\n      storageFolder <string>: The folder path in the storage where the images are stored.\n      entityId <string>: UserId, StudioId, etc.\n      thirdFolder <string|null>: Optional subfolder.\n    */\n\n    let folderPath = `${storageFolder}/${entityId}`;\n    if (thirdFolder){\n      folderPath = `${storageFolder}/${entityId}/${thirdFolder}`;\n    }\n    console.log(newImages,newImages.name)\n    const storageRef =  ref(storage, `${folderPath}/${newImages.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, newImages);\n    uploadTask.on('state_changed',\n      (snapshot) => {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const totalBytes = snapshot.totalBytes;\n        const bytesTransferred = snapshot.bytesTransferred;\n        const progress = totalBytes > 0 ? ((bytesTransferred / totalBytes) * 100).toFixed(2) : -1;\n        onProgress(progress);\n        console.log('Upload is ' + progress + '% done');\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n          case 'running':\n            console.log('Upload is running');\n            break;\n        }\n      }, \n      (error) => {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n          case 'storage/unknown':\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      }, \n      () => {\n        // Upload completed successfully, now we can get the download URL\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('File available at', downloadURL);\n          onComplete(downloadURL);\n        });\n\n      }\n    );\n    \n  };\n\n\n export const uploadOneImageAndGetURL = async (storageFolder, file, entityId) => {\n    try {\n      const folderPath = `${storageFolder}/${entityId}/${file.name}`;\n      console.log(folderPath)\n      const fileRef = ref(storage, folderPath);\n      \n      await uploadBytes(fileRef, file);\n  \n      const imageUrl = await getDownloadURL(fileRef);\n      console.log(imageUrl)\n      return imageUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error; \n    }\n  };\n  \n  export const getAllFilesFromFolder = async (storageFolder) => {\n    const folderPath = `${storageFolder}`;\n    const folderRef = ref(storage, folderPath);\n    \n    try {\n        const fileList = await listAll(folderRef);\n\n        const imageUrlsComprehensive = await Promise.all(\n          fileList.items.map(async (fileRef) => {\n            const downloadURL = await getDownloadURL(fileRef);\n  \n            return {\n              id: fileRef.name,\n              filename: fileRef.name,\n              fileURL: downloadURL,\n            };\n          })\n        );\n\n        // return imageUrls;\n        return imageUrlsComprehensive\n    } catch (error) {\n        console.error('Error retrieving images:', error);\n        throw error;\n    }\n};\n\n"],"names":["_ref","showProfileOffcanvas","closeProfileOffcanvas","isDarkModeOn","useSelector","selectDarkModeStatus","useEffect","trySetCreatorMode","attempts","userInfoFull","JSON","parse","localStorage","getItem","userId","uid","secureLocalStorage","setCreatorMode","regularMenuItems","action","window","location","hash","name","show","async","console","log","auth","signOut","clear","error","message","_jsxs","Offcanvas","style","width","backgroundColor","color","onHide","children","_jsx","Header","closeButton","height","borderRadius","src","logo","alt","Body","className","map","_ref2","index","hidden","Button","variant","onClick","BASEURL","BASEURL_PROD","url","concat","response","fetch","data","json","success","mode","setItem","fetchStudioEntities","studioId","entityType","setState","BASE_URL","setGetCreatorModeOnMount","getCreatorMode","readDocumentWithImageUrl","collectionName","productId","storagePath","folderRef","ref","storage","result","listAll","items","length","firstFileRef","getDownloadURL","readDocument","documentId","docRef","doc","db","docSnapshot","getDoc","exists","saveDocument","setDoc","merge","handleSavePostOTPSuccess","phoneNumber","updateDoc","isPhoneNumberVerified","updateDocumentFields","fields","id","queryDocumentsCount","field","operation","value","q","query","collection","where","getCountFromServer","count","deleteAllImagesInFolder","storageFolder","entityId","folderPath","fileList","Promise","all","deleteObject","fileRef","deleteAllImagesInFolder2","subfolder","deleteImages","imagesToDelete","setProgress","thirdFolder","arguments","undefined","total","done","file","filename","fileRefToDelete","uploadImages","newImages","newFileData","uploadBytes","uploadImages4","onProgress","onComplete","storageRef","uploadTask","uploadBytesResumable","on","snapshot","totalBytes","bytesTransferred","progress","toFixed","state","code","then","downloadURL","getAllFilesFromFolder","fileURL"],"sourceRoot":""}