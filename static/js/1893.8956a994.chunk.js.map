{"version":3,"file":"static/js/1893.8956a994.chunk.js","mappings":"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","sources":["Components/KycStepper.js","utils/validationUtils.js","Components/Kyc.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Stepper, Step, StepLabel, Typography, Paper, ThemeProvider, createTheme } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport { styled } from '@mui/material/styles';\nimport StepConnector, { stepConnectorClasses } from '@mui/material/StepConnector';\nimport { readDocument } from '../utils/firebaseUtils';\nimport { STATUSES, COLLECTIONS } from '../constants';\nimport './KycStepper.css';\n\nconst QontoConnector = styled(StepConnector)(({ theme }) => ({\n  [`&.${stepConnectorClasses.alternativeLabel}`]: {\n    top: 10,\n    left: 'calc(-50% + 16px)',\n    right: 'calc(50% + 16px)',\n  },\n  [`&.${stepConnectorClasses.active}`]: {\n    [`& .${stepConnectorClasses.line}`]: {\n      borderColor: 'green',\n    },\n  },\n  [`&.${stepConnectorClasses.completed}`]: {\n    [`& .${stepConnectorClasses.line}`]: {\n      borderColor: 'green',\n    },\n  },\n  [`& .${stepConnectorClasses.line}`]: {\n    borderColor: theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',\n    borderTopWidth: 3,\n    borderRadius: 1,\n  },\n}));\n\nconst stages = [STATUSES.SUBMITTED, STATUSES.UNDER_REVIEW, STATUSES.REVIEWED, STATUSES.VERIFIED];\nconst map = {\n  [STATUSES.SUBMITTED]: 0,\n  [STATUSES.UNDER_REVIEW]: 1,\n  [STATUSES.REVIEWED]: 2,\n  [STATUSES.VERIFIED]: 3,\n  [STATUSES.VERIFICATION_FAILED]: 3\n};\n\nconst KycStepper = ({ kycId, status }) => {\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n  const [kycData, setKycData] = useState({});\n\n  console.log(status)\n\n  const theme = createTheme({\n    palette: {\n      mode: isDarkModeOn ? 'dark' : 'light',\n      primary: {\n        main: isDarkModeOn ? '#90caf9' : '#1976d2',\n      },\n    },\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await readDocument(COLLECTIONS.USER_KYC, kycId);\n        setKycData(data);\n      } catch (error) {\n        console.error(`Error fetching KYC data for KYC ID ${kycId}:`, error);\n      }\n    };\n    fetchData();\n  }, [kycId]);\n\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Paper sx={{ textAlign: 'center', marginBottom: '1rem' }} elevation={2}>\n        <Typography variant=\"h5\" component=\"p\">Application Status: {status}</Typography>\n        <br/>\n        <Stepper activeStep={map[status]} alternativeLabel connector={<QontoConnector />}>\n          {stages.map((stage, index) => (\n            <Step key={index}>\n              <StepLabel error={stage === STATUSES.VERIFIED && status === STATUSES.VERIFICATION_FAILED}>\n                {stage === STATUSES.VERIFIED && status === STATUSES.VERIFICATION_FAILED ? 'Failed Verification' : stage}\n              </StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n        <br/>\n      </Paper>\n    </ThemeProvider>\n  );\n};\n\nexport default KycStepper;\n","export const validateField = (name, value) => {\n  let error = '';\n  console.log(name, value)\n  switch (name) {\n      case 'phone_number':\n          if (!/^\\d{10}$/.test(value)) {\n              error = 'Phone number must be exactly 10 digits.';\n          }\n          break;\n      case 'zip_pin_code':\n          if (!/^\\d{6}$/.test(value)) {\n              error = 'ZIP/Pin code must be exactly 6 digits.';\n          }\n          break;\n      case 'aadhar':\n          if (value && !/^\\d{12}$/.test(value)) {\n              error = 'Aadhar number must be exactly 12 digits.';\n          }\n          break;\n      case 'gstin':\n            if (value && !/^[0-9]{2}[A-Za-z]{5}[0-9]{4}[A-Za-z]{1}[1-9A-Za-z]{1}[Zz]{1}[0-9A-Za-z]{1}$/.test(value)) {\n                error = 'GSTIN must be a valid format (e.g., 22ABCDE0000A1Z5).';\n            }\n            break;\n\n      default:\n          break;\n  }\n  console.log(error)\n\n  return error;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Container } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport { saveDocument, updateDocumentFields, readDocument, uploadImages4, deleteAllImagesInFolder2, getAllFilesFromFolder } from '../utils/firebaseUtils.js';\nimport { STATUSES, COLLECTIONS, STORAGES } from '../constants.js';\nimport KycStepper from './KycStepper.js';\nimport CryptoJS from 'crypto-js';\nimport { validateField } from '../utils/validationUtils';\nimport { postData } from '../utils/common.js';\nimport './Kyc.css';\nimport { LinearProgress, Typography } from '@mui/material';\nimport indianCities from '../cities.json';\nimport indianStates from '../states.json';\n\nconst names_map = new Map([\n  [\"first_name\" , \"First Name\"],\n  [\"middle_last_name\" , \"Middle & Last Name\"],\n  [\"phone_number\" , \"Phone Number\"],\n  [\"street_address\" , \"Street Address\"],\n  [\"city\" , \"City\"],\n  [\"state_province\" , \"State\"],\n  [\"state\" , \"State\"],\n  [\"zip_pin_code\" , \"PIN Code/ZIP\"],\n  [\"aadhar\" , \"Aadhar Number\"],\n  [\"gstin\" , \"GST Number\"],\n  [\"comments\" , \"Remark(s)\"]\n  ])\n\n  const orderedKeys = [\n    ['first_name'],\n    ['middle_last_name'],\n    ['phone_number'],\n    ['street_address'],\n    ['city'],\n    ['state_province', 'state'], // Include this key, either of them is present\n    ['zip_pin_code']\n];\n\nconst locationOptions = indianCities.cities;\nconst stateOptions = indianStates.states;\n\nfunction Kyc() {\n  const [formData, setFormData] = useState({\n    first_name: '',\n    middle_last_name: '',\n    phone_number: '',\n    street_address: '',\n    city: '',\n    state_province: '',\n    zip_pin_code: '',\n    country: 'India',\n    aadhar: '',\n    gstin: '',\n    comments : '',\n    status: STATUSES.SUBMITTED,\n    tncAgreed: false,\n    hash: '',\n  });\n  const [kycData, setKycData] = useState(null);\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n  const [errors, setErrors] = useState({});\n  const user_id = JSON.parse(localStorage.getItem('userInfo'))?.UserId;\n  const kycId = `${user_id}_Kyc`;\n  const [filesAadhar, setFilesAadhar] = useState(null);\n  const [filesGst, setFilesGst] = useState(null);\n  const [newFilesAadhar, setNewFilesAadhar] = useState([]);\n  const [newFilesGst, setNewFilesGst] = useState([]);\n  const [hasTextChanged, setHasTextChanged] = useState(false);\n  const [progressAadhar, setProgressAadhar] = useState(-1);\n  const [progressGst, setProgressGst] = useState(-1);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const currentUserEmail = JSON.parse(localStorage.getItem(\"userInfo\"))?.email;\n  const currentName = JSON.parse(localStorage.getItem(\"userInfo\"))?.displayName;\n\n\n  const calculateHash = (data) => {\n    const filteredData = Object.keys(data).filter(key => key !== 'hash' && key !== 'status');\n    const sortedData = filteredData.sort().map(key => `${key}:${data[key]}`).join('|');\n  // Calculate hash using SHA-256\n    return CryptoJS.SHA256(sortedData).toString();\n  };\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n  \n    // Perform field validation as the user types\n    const error = validateField(name, value);\n  \n    setErrors((prevErrors) => ({\n      ...prevErrors,\n      [name]: error,\n    }));\n  \n    // Update form data\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      [name]: value,\n    }));\n  };\n\n  const handleAadharUpload = (e) => {\n    setNewFilesAadhar(e.target.files[0]);  // Store the new files\n    setHasTextChanged(true);            // Mark that a change has occurred\n  };\n  \n  const handleGstUpload = (e) => {\n    setNewFilesGst(e.target.files[0]);  // Store the new files\n    setHasTextChanged(true);         // Mark that a change has occurred\n  };\n\n  const handleTnCAgreement = (e) => {\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      tncAgreed: e.target.checked,\n    }));\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setIsSubmitting(true);\n    try {\n\n      const formFields = Object.keys(formData).filter(\n          (key) => !['hash', 'status', 'country', 'comments', 'UserId'].includes(key)\n      );\n\n      let isValid = true;\n      let errorMessages = [];\n      let errorNum = 0;\n\n      formFields.forEach((field) => {\n          const error = validateField(field, formData[field]);\n          if (error) {\n              isValid = false;\n              errorNum = errorNum + 1;\n              errorMessages.push(`${errorNum}: ${error}`);\n              setErrors((prevErrors) => ({\n                  ...prevErrors,\n                  [field]: error,\n              }));\n          }\n      });\n\n      // If there are errors, prompt the user and stop the submission\n      if (!isValid) {\n          alert(`Please correct the following errors before submitting:\\n\\n${errorMessages.join('\\n')}`);\n          return;\n      }\n\n\n      const kycDoc = await readDocument(COLLECTIONS.USER_KYC, kycId);\n      const newHash = calculateHash(formData);\n      console.log(newHash,kycDoc?.hash)\n      const notifyEmails = currentUserEmail;\n      const metaData = {\n        user_name:currentName,\n        user_id: user_id,\n      }; \n      if (kycDoc) {\n        if (kycDoc.hash !== newHash) {\n          const dbPayload = {...formData,hash: newHash,}\n          const response = await postData(dbPayload, COLLECTIONS.USER_KYC, notifyEmails,metaData);\n          //alert(\"KYC updated successfully\");\n        } else {\n          //alert(\"No changes detected\");\n        }\n      } else {\n        // If no KYC record exists, create a new one\n        const dbPayload = {...formData,hash: newHash,}\n        const response = await postData(dbPayload, COLLECTIONS.USER_KYC, notifyEmails,metaData);\n        //alert(\"KYC added successfully\");\n      }\n      /*\n      if (newFilesAadhar) {\n        // Delete old files in the folder and upload the new files for Aadhar\n        console.log(newFilesAadhar)\n        await uploadImages3(STORAGES.CREATORS_KYC_DOCUMENTS, newFilesAadhar, user_id, \"Aadhar\");\n        alert(\"Aadhar files uploaded successfully\");\n      }\n  \n      if (newFilesGst) {\n        // Delete old files in the folder and upload the new files for GST\n        await uploadImages3(STORAGES.CREATORS_KYC_DOCUMENTS, newFilesGst, user_id, \"Gst\");\n        alert(\"GST files uploaded successfully\");\n      }\n        */\n      if (newFilesAadhar) {\n        console.log(newFilesAadhar)\n        await deleteAllImagesInFolder2(STORAGES.CREATORS_KYC_DOCUMENTS,user_id,\"Aadhar\");\n        setProgressAadhar(0)\n        await uploadImages4(\n          STORAGES.CREATORS_KYC_DOCUMENTS,\n          newFilesAadhar,\n          user_id,\n          \"Aadhar\",\n          (progress) => setProgressAadhar(progress), // Update Aadhar progress state\n          (url) => {\n            setFilesAadhar(url); // Reset or update state if necessary\n            console.log(url);\n          }\n        );\n        //alert(\"Aadhar files uploaded successfully\");\n      }\n  \n      if (newFilesGst) {\n        console.log(newFilesGst)\n        await deleteAllImagesInFolder2(STORAGES.CREATORS_KYC_DOCUMENTS,user_id,\"Gst\");\n        setProgressGst(0);\n        await uploadImages4(\n          STORAGES.CREATORS_KYC_DOCUMENTS,\n          newFilesGst,\n          user_id,\n          \"Gst\",\n          (progress) => setProgressGst(progress), // Update GST progress state\n          (url) => {\n            setFilesGst(url); // Collect download URLs\n            console.log(url);\n            //setNewFilesGst(null); // Reset or update state if necessary\n          }\n        );\n        //alert(\"GST files uploaded successfully\");\n      }\n  \n  \n\n      await updateDocumentFields(COLLECTIONS.USER, user_id, {\n        KycIdList: { [kycId]: formData.status },\n      });\n\n      event.target.reset();\n    } catch (error) {\n      console.error(\"Error processing KYC: \", error);\n    } finally{\n      setIsSubmitting(false);\n    }\n  };\n\n  useEffect(() => {\n    const fetchKycData = async () => {\n      const kycDoc = await readDocument(COLLECTIONS.USER_KYC, kycId);\n      if (kycDoc) {\n        setKycData(kycDoc);\n        setFormData({ ...kycDoc, status: kycDoc.status || STATUSES.SUBMITTED });\n      } else {\n        setKycData(null);\n      }\n    };\n    const fetchKycImages = async () => {\n      const folder_path = `${STORAGES.CREATORS_KYC_DOCUMENTS}/${user_id}`\n      try {\n        // Fetch both Aadhar and GST files concurrently\n        const [aadharFiles, gstFiles] = await Promise.all([\n                  getAllFilesFromFolder(`${folder_path}/Aadhar/`),\n                  getAllFilesFromFolder(`${folder_path}/Gst/`)\n        ]);\n\n        // Check if files are fetched successfully\n        if (aadharFiles && aadharFiles.length > 0) {\n            setFilesAadhar(aadharFiles);\n        } else {\n            setFilesAadhar(null); // Set to empty if no files found\n            console.warn(\"No Aadhar documents found.\");\n        }\n\n        if (gstFiles && gstFiles.length > 0) {\n            setFilesGst(gstFiles);\n        } else {\n            setFilesGst(null); // Set to empty if no files found\n            console.warn(\"No GST documents found.\");\n        }\n      } catch (error) {\n          console.error(\"Error fetching KYC documents:\", error);\n      }\n\n    }\n\n    fetchKycData();\n    fetchKycImages();\n  }, [kycId]);\n  const excludedKeys = ['status', 'hash', 'country', 'tncAgreed', 'comments', 'UserId', 'gstin', 'aadhar'];\n  return (\n    <div style={{ color: isDarkModeOn ? 'white' : 'black' }}>\n      <Container className=\"glassmorphic-container\" style={{ margin: 'auto', border: isDarkModeOn ? '1px solid white' : '1px solid black', borderRadius: '5px', padding: '20px' }}>\n        <Form onSubmit={handleSubmit}>\n          <h1 style={{ color: isDarkModeOn ? 'white' : 'black', textTransform: 'capitalize' }}>Verify yourself</h1>\n          <div className=\"row\">\n          { orderedKeys.map((fields) => {\n              // Check which field is present in formData and not excluded\n              const availableField = fields.find(field => !excludedKeys.includes(field) && formData[field] !== undefined);\n              \n              // If an available field is found, render it\n              return availableField ? (\n                  <div className=\"col-md-6 col-lg-4\" key={availableField}>\n                      <Form.Group controlId={`formBasic${availableField}`}>\n                          <Typography style={{color: isDarkModeOn ? 'white' : 'black'}}>{names_map.get(availableField)}</Typography>\n                          {['city', 'state_province'].includes(availableField) ? <Form.Control\n                              as=\"select\"\n                              placeholder={`Enter ${names_map.get(availableField)}`}\n                              name={availableField}\n                              value={formData[availableField]}\n                              onChange={handleChange}\n                              required\n                              className=\"glassmorphic-input\"\n                              style={{\n                                  backgroundColor: isDarkModeOn ? '#181818' : '#e5e5e5',\n                                  color: isDarkModeOn ? 'white' : 'black',\n                                  paddingTop: 0,\n                                  paddingBottom: 0,\n                              }}\n                          >\n                            <option value=\"\">Select a {names_map.get(availableField)}</option>\n                              {[...(availableField === 'city' ? locationOptions : stateOptions)].map((city, index) => (\n                                  <option key={index} value={city}>\n                                      {city}\n                                  </option>\n                              ))}\n                            </Form.Control> : <Form.Control\n                                  type={availableField === 'age' || availableField === 'phone_number' ? 'number' : 'text'}\n                                  placeholder={`Enter ${names_map.get(availableField)}`}\n                                  name={availableField}\n                                  value={formData[availableField]}\n                                  onChange={handleChange}\n                                  required\n                                  className=\"glassmorphic-input\"\n                                  style={{\n                                      backgroundColor: isDarkModeOn ? '#181818' : '#e5e5e5',\n                                      color: isDarkModeOn ? 'white' : 'black',\n                                  }}\n                              />\n                            }\n                          {errors[availableField] && <span style={{ color: 'red' }}>{errors[availableField]}</span>} {/* Show validation error */}\n                      </Form.Group>\n                  </div>\n              ) : null; // Return null if no field is available\n          })}\n\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-6 col-lg-4\">\n              <Form.Group controlId=\"formBasicAadhar\">\n                <Form.Label style={{color: isDarkModeOn ? 'white' : 'black'}}>Aadhar</Form.Label>\n                <div className=\"d-flex align-items-center\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter Aadhar Number\"\n                    name=\"aadhar\"\n                    className=\"glassmorphic-input\"\n                    value={formData.aadhar}\n                    onChange={handleChange}\n                    style={{\n                      backgroundColor: isDarkModeOn ? '#181818' : '#e5e5e5',\n                      color: isDarkModeOn ? 'white' : 'black',\n                      marginRight: '10px'\n                    }}\n                  />\n                  <Button disable={formData.status === \"Verified\"} variant=\"light\" onClick={() => document.getElementById('aadharUpload').click()} style={{ \n                         \n                        padding: '0.5rem', \n                        backgroundColor: isDarkModeOn ? '#333' : '#f8f9fa', // Dark mode background\n                        color: isDarkModeOn ? 'white' : 'black', // Dark mode text color\n                        cursor: 'pointer'\n                    }}>\n                    Upload\n                  </Button>\n                  <input\n                    type=\"file\"\n                    id=\"aadharUpload\"\n                    accept=\".pdf\"\n                    style={{ display: 'none' }}\n                    onChange={(e) => handleAadharUpload(e)}\n                  />\n                </div>\n                {filesAadhar && filesAadhar.length > 0 && filesAadhar[0].fileURL ? (\n                  <Button \n                      variant=\"link\" \n                      style={{ color: '#007bff', textDecoration: 'none' }} \n                      onClick={() => window.open(filesAadhar[0].fileURL, '_blank')}\n                  >\n                      Download Aadhar Document\n                  </Button>\n              ) : (\n               <p style={{color: isDarkModeOn ? 'white' : 'black'}}>{newFilesAadhar?.name || \"No new Aadhar file uploaded.\"}</p>\n              )}\n              </Form.Group>\n              {errors['aadhar'] && <span style={{ color: 'red' }}>{errors['aadhar']}</span>}\n              <div>\n                {progressAadhar>=0&&<>\n                  <progress value={progressAadhar} max=\"100\" /> \n                  <p>{progressAadhar}% uploaded</p>\n                </>}\n              </div>\n              \n\n            </div>\n          </div>\n          <div className=\"row\">         \n            <div className=\"col-md-6 col-lg-4\">\n              <Form.Group controlId=\"formBasicGst\">\n                <Form.Label style={{color: isDarkModeOn ? 'white' : 'black'}}>GST</Form.Label>\n                <div className=\"d-flex align-items-center\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter GST Number\"\n                    name=\"gstin\"\n                    value={formData.gstin}\n                    onChange={handleChange}\n                    className=\"glassmorphic-input\"\n                    style={{\n                      backgroundColor: isDarkModeOn ? '#181818' : '#e5e5e5',\n                      color: isDarkModeOn ? 'white' : 'black',\n                      marginRight: '10px'\n                    }}\n                  />\n                  <Button disable={formData.status === \"Verified\"} variant=\"light\" onClick={() => document.getElementById('gstUpload').click()}  style={{ \n                         \n                         padding: '0.5rem', \n                        backgroundColor: isDarkModeOn ? '#333' : '#f8f9fa', // Dark mode background\n                        color: isDarkModeOn ? 'white' : 'black', // Dark mode text color\n                        cursor: 'pointer'\n                    }}>\n                    Upload\n                  </Button>\n                  <input\n                    type=\"file\"\n                    id=\"gstUpload\"\n                    accept=\".pdf\"\n                    style={{ display: 'none' }}\n                    onChange={(e) => handleGstUpload(e)}\n                  />\n                </div>\n                {filesGst && filesGst.length > 0 && filesGst[0].fileURL ? (\n                  <Button \n                      variant=\"link\" \n                      style={{ color: '#007bff', textDecoration: 'none' }} \n                      onClick={() => window.open(filesGst[0].fileURL, '_blank')}\n                  >\n                      Download GST Document\n                  </Button>\n              ) : (\n                   <p style={{color: isDarkModeOn ? 'white' : 'black'}}> {newFilesGst?.name || \"No new GST file uploaded.\"}</p>\n              )}\n              </Form.Group>\n              {errors['gstin'] && <span style={{ color: 'red' }}>{errors['gstin']}</span>}\n              <div>\n                {progressGst>=0&&<>\n                  <progress value={progressGst} max=\"100\" /> \n                  <p>{progressGst}% uploaded</p>\n                </>}\n              </div>\n              \n            </div>\n          </div>\n\n          <div class=\"form-check\">\n            <input type=\"checkbox\" class=\"form-check-input\" id=\"tnc-switch\" checked={formData.tncAgreed}\n            onChange={handleTnCAgreement}/>\n            <label class=\"form-check-label\" for=\"exampleCheck1\">\n            <span style={{color: isDarkModeOn ? 'white' : 'black'}}>\n                I agree to the <a href=\"#/npoliciesStudio\" style={{ color: isDarkModeOn ? 'lightblue' : 'blue' }}>Terms and Conditions. Click to read.</a>\n              </span>\n            </label>\n          </div>\n          <br/>\n          {formData.comments && (\n            <div className=\"col-md-12 col-lg-12\">\n              <br/>\n              <Form.Group controlId=\"formBasicComments\">\n                <Form.Label>{names_map.get('comments')}</Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  name=\"comments\"\n                  value={formData.comments}\n                  readOnly\n                  style={{\n                    backgroundColor: isDarkModeOn ? '#181818' : '#e5e5e5',\n                    color: isDarkModeOn ? 'white' : 'black'\n                  }}\n                />\n              </Form.Group>\n            </div>\n          )}\n          <Button variant=\"info\" type=\"submit\" disabled={formData.status === \"Verified\" || !formData.tncAgreed}          >\n            Submit\n          </Button>\n\n        </Form>\n        {isSubmitting && <LinearProgress/>}\n        <br/>\n        <>\n          {formData.hash && <KycStepper kycId={kycId} status={formData.status} />}\n        </>\n      </Container>\n      <br />\n    </div>\n    \n  );\n}\n\nexport default Kyc;\n"],"names":["QontoConnector","styled","StepConnector","_ref","theme","concat","stepConnectorClasses","alternativeLabel","top","left","right","active","line","borderColor","completed","palette","mode","grey","borderTopWidth","borderRadius","stages","STATUSES","SUBMITTED","UNDER_REVIEW","REVIEWED","VERIFIED","map","VERIFICATION_FAILED","_ref2","kycId","status","isDarkModeOn","useSelector","selectDarkModeStatus","kycData","setKycData","useState","console","log","createTheme","primary","main","useEffect","async","data","readDocument","COLLECTIONS","USER_KYC","error","fetchData","_jsx","ThemeProvider","children","_jsxs","Paper","sx","textAlign","marginBottom","elevation","Typography","variant","component","Stepper","activeStep","connector","stage","index","Step","StepLabel","validateField","name","value","test","names_map","Map","orderedKeys","locationOptions","indianCities","stateOptions","indianStates","_JSON$parse","_JSON$parse2","_JSON$parse3","formData","setFormData","first_name","middle_last_name","phone_number","street_address","city","state_province","zip_pin_code","country","aadhar","gstin","comments","tncAgreed","hash","errors","setErrors","user_id","JSON","parse","localStorage","getItem","UserId","filesAadhar","setFilesAadhar","filesGst","setFilesGst","newFilesAadhar","setNewFilesAadhar","newFilesGst","setNewFilesGst","hasTextChanged","setHasTextChanged","progressAadhar","setProgressAadhar","progressGst","setProgressGst","isSubmitting","setIsSubmitting","currentUserEmail","email","currentName","displayName","handleChange","e","target","prevErrors","prevFormData","kycDoc","fetchKycData","folder_path","STORAGES","CREATORS_KYC_DOCUMENTS","aadharFiles","gstFiles","Promise","all","getAllFilesFromFolder","length","warn","fetchKycImages","excludedKeys","style","color","Container","className","margin","border","padding","Form","onSubmit","event","preventDefault","formFields","Object","keys","filter","key","includes","isValid","errorMessages","errorNum","forEach","field","push","alert","join","newHash","sortedData","sort","CryptoJS","toString","calculateHash","notifyEmails","metaData","user_name","dbPayload","postData","deleteAllImagesInFolder2","uploadImages4","progress","url","updateDocumentFields","USER","KycIdList","reset","textTransform","fields","availableField","find","undefined","Group","controlId","get","Control","as","placeholder","onChange","required","backgroundColor","paddingTop","paddingBottom","type","Label","marginRight","Button","disable","onClick","document","getElementById","click","cursor","id","accept","display","files","handleAadharUpload","fileURL","textDecoration","window","open","_Fragment","max","handleGstUpload","class","checked","for","href","readOnly","disabled","LinearProgress","KycStepper"],"sourceRoot":""}