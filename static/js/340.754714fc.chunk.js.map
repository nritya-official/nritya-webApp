{"version":3,"file":"static/js/340.754714fc.chunk.js","mappings":"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","sources":["Components/CardSliderCard.js","Components/ImageUpload.js","Components/NStudioCard.js","Components/TimeRangePicker.js","Components/StudioTable.js","Components/MapsInput.js","Components/SucessPage.js","Components/StudioAdd.js","Components/AlertPopup.js","Components/StudioUpdate.js","Screens/CreatorStudio.js"],"sourcesContent":["import React from 'react';\nimport NStudioCard from './NStudioCard';\n\nconst CardSliderCard = ({ studio }) => {\n  return (\n    <a href={`#/studio/${studio.id}`}>\n    <NStudioCard data={studio} img_src={\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}/>\n    </a>\n\n  );\n};\n\nexport default CardSliderCard;\n","import React, { useState,useEffect } from \"react\";\nimport shortid from \"shortid\";\nimport { ref, getDownloadURL, listAll } from 'firebase/storage';\nimport { storage } from '../config';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { deleteAllImagesInFolder,deleteImages,uploadImages} from '../utils/firebaseUtils'\nimport { Card, CardContent, IconButton } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useSnackbar } from \"../context/SnackbarContext\";\nimport { STORAGES } from \"../constants\";\n\n\nconst ImageUpload = ({entityId,storageFolder,title, maxImageCount=10, updateMode, disable }) => {\n  const showSnackbar = useSnackbar();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [newFiles, setNewFiles] = useState([]); // Track new files to be added\n  const [deletedFiles, setDeletedFiles] = useState([]); // Track deleted files\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  //console.log(\"Received props=> entityId:\", entityId, \"|storageFolder:\", storageFolder);\n  console.log(\"Kyc enitity id \",entityId, disable)\n  const filesizes = (bytes, decimals = 2) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n  };\n\n  useEffect(() => {\n   // console.log(\"Fetching image for\",entityId)\n    if(entityId){\n      fetchStudioImages(entityId); // Fetch images when component mounts\n    }\n  }, [entityId]);\n\n  useEffect(() => {\n   // console.log(\"Selected files:\", selectedFiles);\n    if (maxImageCount && selectedFiles.length > maxImageCount) {\n      const truncatedFiles = selectedFiles.slice(0, maxImageCount);\n      alert(`Exceeded maxImageCount, keeping first ${maxImageCount} files.`);\n      setSelectedFiles(truncatedFiles);\n    }\n  }, [selectedFiles, maxImageCount]);\n  \n\n  const handleInputChange = (e) => {\n    // console.log(\"handleInputChange\")\n    const files = Array.from(e.target.files);\n    const updatedFiles = [];\n    // console.log(\"file array \",files.length)\n    files.forEach((file) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        updatedFiles.push({\n          id: shortid.generate(),\n          filename: file.name,\n          filetype: file.type,\n          fileimage: reader.result,\n          datetime: file.lastModifiedDate.toLocaleString(\"en-IN\"),\n          filesize: filesizes(file.size),\n          file: file, // Store the actual file object\n        });\n\n        if (updatedFiles.length === files.length) {\n          setSelectedFiles((prevFiles) => [...prevFiles, ...updatedFiles]);\n          setNewFiles(updatedFiles);\n          // console.log(\"New files in total\",setNewFiles.length)\n        }\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleDeleteSelectedFile = (id) => {\n    if (window.confirm(\"Are you sure you want to delete this image?\")) {\n      const fileToDelete = selectedFiles.find((file) => file.id === id);\n      setDeletedFiles((prevDeletedFiles) => [...prevDeletedFiles, fileToDelete]);\n      setSelectedFiles((prevFiles) =>\n        prevFiles.filter((file) => file.id !== id)\n      );\n    }\n  };\n\n  const handleUploadSubmit = async () => {\n    if (!entityId) {\n      alert(\"No studio selected\");\n      return;\n    }\n\n    try {\n      if (maxImageCount === 1) {\n        // Delete all previous images in the folder\n        await deleteAllImagesInFolder(storageFolder, entityId);\n        await uploadImages(storageFolder,newFiles, entityId);\n      } else {\n        // Calculate images to delete and add\n        const { imagesToDelete, newImages } = calculateDelta(selectedFiles, uploadedFiles);\n\n        // Delete images if there are any\n        if (imagesToDelete.length > 0) {\n          await deleteImages(storageFolder, imagesToDelete, entityId);\n        }\n\n        // Upload new images if there are any\n        if (newImages.length > 0) {\n          await uploadImages(storageFolder, newImages, entityId);\n        }\n\n      }\n\n      // alert(\"Images Uploaded/Deleted\");\n      showSnackbar(\"Images Uploaded/Deleted\", \"success\");\n    } catch (error) {\n      console.error(\"Error uploading/deleting images:\", error);\n    }\n  };\n\n  // Function to calculate images to delete and new images to upload\n  const calculateDelta = (selectedFiles, uploadedFiles) => {\n    const selectedFileIds = selectedFiles.map(file => file.id);\n    const uploadedFileIds = uploadedFiles.map(file => file.id);\n\n    const imagesToDelete = uploadedFiles.filter(file => !selectedFileIds.includes(file.id));\n    const newImages = selectedFiles.filter(file => !uploadedFileIds.includes(file.id));\n\n    return { imagesToDelete, newImages };\n  };\n\n\n  const fetchStudioImages = async (entityId) => {\n    setSelectedFiles([]);\n    setNewFiles([]);\n    setDeletedFiles([]);\n    try {\n      const folderPath = `${storageFolder}/${entityId}`;\n      console.log(folderPath)\n      const folderRef = ref(storage, folderPath);\n      const fileList = await listAll(folderRef);\n\n      const files = await Promise.all(\n        fileList.items.map(async (fileRef) => {\n          const downloadURL = await getDownloadURL(fileRef);\n\n          return {\n            id: fileRef.name,\n            filename: fileRef.name,\n            fileURL: downloadURL,\n          };\n        })\n      );\n      // console.log('File fetching',files);\n      setUploadedFiles(files); // Update the uploadedFiles state with fetched data\n      setSelectedFiles(files);\n    } catch (error) {\n      console.error('Error fetching user images:', error);\n    }\n  };\n\n  return (\n    <div className=\"fileupload-view\" style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\n      <div className=\"row justify-content-center m-0\" style={{ flex: '1',justifyContent: 'center' }}>\n        <div className=\"col-md-6\" style={{ flex: '1' ,justifyContent: 'center'}}>\n          <div className=\"card mt-5\">\n            <div className=\"card-body\" style={{ backgroundColor: isDarkModeOn ? '#333333' : 'white' }}>\n              <div className=\"kb-data-box\">\n                <div className=\"kb-modal-data-title\">\n                  <div className=\"kb-data-title\" style={{justifyContent:'center',flex: '1'}}>\n                    <h4>{title}</h4>\n                    <p>Max no of image(s):{maxImageCount} {storageFolder === STORAGES.STUDIOIMAGES && <p>Add at least 5 images</p>}</p>\n                  </div>\n                </div>\n                <form style={{  backgroundColor: isDarkModeOn ? '#333333' : 'white'}}>\n                  <div className=\"kb-file-upload\">\n                    <div className=\"file-upload-box\">\n                      <input\n                        type=\"file\"\n                        id=\"fileupload\"\n                        className=\"file-upload-input\"\n                        onChange={handleInputChange}\n                        multiple\n                      />\n\n                    </div>\n                  </div>\n                  <br></br>\n                  <div className=\"kb-attach-box mb-3\">\n                  <div className=\"row\">\n                    {entityId && selectedFiles.length > 0 ? (\n                      selectedFiles.map((file) => (\n                        \n                        <div key={file.id} className=\"col-6 col-md-3 mb-3\" style={{ position: 'relative' }}>\n                          \n                          <Card sx={{ maxWidth: 345 }}>\n                            {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                              <div style={{ position: 'relative' }}>\n                                <img\n                                  src={file.fileimage ? file.fileimage : file.fileURL}\n                                  alt={file.filename}\n                                  className=\"card-img-top\"\n                                  style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                                />\n                                <IconButton\n                                  aria-label=\"delete\"\n                                  disabled={disable}\n                                  onClick={() => handleDeleteSelectedFile(file.id)}\n                                  style={{ position: 'absolute', top: 0, right: 0, backgroundColor: 'rgba(255, 255, 255, 0.5)' }}\n                                >\n                                  <DeleteIcon style={{color:\"ff0000\"}}/>\n                                </IconButton>\n                              </div>\n                            ) : (\n                              <CardContent>\n                                <i className=\"far fa-file-alt\"></i>\n                              </CardContent>\n                            )}\n                          </Card>\n                        </div>\n                        \n                      ))\n                    ) : (\n                      <div className=\"col-12 text-center\">\n                        <p>No images selected</p>\n                      </div>\n                    )}\n                  </div>\n\n                  </div>\n\n                  \n                  <div className=\"kb-buttons-box\">\n                    <button\n                      type=\"button\"\n                      className=\"btn form-submit\"\n                      style={{ backgroundColor: isDarkModeOn ? '#892CDC' : 'black', color:'white'  }}\n                      onClick={handleUploadSubmit}\n                      disabled={disable}\n                    >\n                      Image Upload\n                    </button>\n                  </div>\n                </form>\n                {selectedFiles.length > 0 && (\n                  <div className=\"kb-attach-box\" hidden>\n                    <div className=\"row\">\n                    <hr />\n                    {selectedFiles.map((file) => (\n                      <div key={file.id} className=\"col-6 col-md-3 mb-3\">\n                      <div className=\"card\">\n                        {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                          <img\n                            src={file.fileimage}\n                            alt={file.filename}\n                            className=\"card-img-top\"\n                            style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                          />\n                        ) : (\n                          <div className=\"card-body\">\n                            <i className=\"far fa-file-alt\"></i>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Set default prop values\nImageUpload.defaultProps = {\n  maxImageCount: 5, // Default maximum image count\n  updateMode: false,\n  disable:false,\n};\n\nexport default ImageUpload;","\nimport React from 'react';\nimport AspectRatio from '@mui/joy/AspectRatio';\nimport Card from '@mui/joy/Card';\nimport CardContent from '@mui/joy/CardContent';\nimport Chip from '@mui/joy/Chip';\nimport Link from '@mui/joy/Link';\nimport Typography from '@mui/joy/Typography';\nimport { Stack } from '@mui/material';\nimport { useSelector } from 'react-redux'; // Import useSelector\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport { danceStylesColorChips } from '../constants';\nimport IconButton from '@mui/joy/IconButton';\nimport Favorite from '@mui/icons-material/Favorite';\n\n\nexport default function NStudioCard({img_src,data}) {\n    const isDarkModeOn = useSelector(selectDarkModeStatus);\n    \n    const studioId = data.id?data.id:data.studioId;\n\n    const cardStyle = {\n      backgroundColor: isDarkModeOn ? '#444' : 'white',\n      padding: '0px',\n      color: isDarkModeOn ? 'white' : 'black',\n      marginRight: \"10px\",\n      width: 320,\n      maxWidth: \"100%\",\n      boxShadow: 'lg',\n      transition: 'opacity 0.3s ease',\n    };\n  \n    const cardHoverStyle = {\n      transform: 'scale(1.01)',\n    };\n  \n  return (\n    <Card variant=\"solid\" sx={{\n      ...cardStyle,\n      '&:hover': cardHoverStyle,\n    }}>\n      \n        <AspectRatio ratio=\"1.78\" style={{ position: 'relative'}}>\n          <img\n            src={data && data.iconUrl ? data.iconUrl :\"https://cdn.pixabay.com/photo/2016/12/30/10/03/dance-1940245_960_720.jpg\"}\n            loading=\"lazy\"\n            alt=\"Studio Image\"\n            style={{ maxWidth: '100%', height: 'auto', overflow: 'hidden' }}\n            \n          />\n          <Stack direction=\"row\" spacing={2} style={{ position: 'absolute', bottom: 0, left: 0, padding: '1px' }}>\n        {data && data.danceStyles && typeof data.danceStyles === 'string' ? (data.danceStyles.split(\",\").slice(0, 3).map((form, index) => (\n        <Chip\n            key={index}\n            color={index % 2 === 0 ? \"danger\" : \"success\"}  \n            sx={{ marginBottom: \"10px\", fontSize: '0.8rem',  \n                    bgcolor: danceStylesColorChips[index].backgroundColor,\n                    color: danceStylesColorChips[index].color, \n            }}\n        >\n            {form.trim()}\n        </Chip>\n        ))):(\n            <Chip\n            key={10}\n            color={10 % 2 === 0 ? \"danger\" : \"success\"} \n            style={{ marginBottom: \"10px\", fontSize: '0.8rem' }}\n        >\n            {\"No danceforms\"}\n        </Chip>\n        )}\n\n        </Stack>\n\n        </AspectRatio>\n      <CardContent style={{padding:'10px'}}>\n        <Link\n          href={`#/studio/${studioId}`}\n          fontWeight=\"md\"\n          color=\"neutral\"\n          textColor=\"text.primary\"\n          underline='none'\n          overlay\n          style={{color: isDarkModeOn?'white':'black',extDecoder:\"one\"}}\n        >\n          {data && data.studioName?data.studioName:\"    \"}\n        </Link>\n        <Typography style={{color: isDarkModeOn?'white':'black'}} level=\"body-xs\">{data.street?data.street:\".  \"}</Typography>\n        <IconButton\n          hidden\n          aria-label=\"Like minimal photography\"\n          size=\"md\"\n          variant=\"solid\"\n          color=\"danger\"\n          sx={{\n            position: 'absolute',\n            zIndex: 2,\n            borderRadius: '50%',\n            right: '1rem',\n            bottom: '2rem',\n            transform: 'translateY(50%)',\n          }}\n        >\n          <Favorite />\n        </IconButton>\n        <Typography style={{color: isDarkModeOn?'white':'black'}}>⭐ {data && data.avgRating? data.avgRating.toFixed(1):\" Not rated yet\"}</Typography>\n      </CardContent>\n    </Card>\n  );\n}","import React from 'react';\nimport { Modal, Form, Row, Col, Button } from 'react-bootstrap';\n\nconst TimeRangePicker = ({ show, handleClose, handleSelect, defaultTime }) => {\n  //console.log(\"TimeRangePicker\",defaultTime)\n  const startTime_i = defaultTime.split('-')[0].trim();\n  const endTime_i = defaultTime.split('-')[1]?.trim();\n\n  //console.log(startTime_i,endTime_i,defaultTime)\n\n  const generateTimeOptions = () => {\n    const options = [];\n    let option_AM = [];\n    let option_PM = [];\n    for (let hours = 0; hours < 24; hours++) {\n      for (let minutes = 0; minutes < 60; minutes += 15) {\n        const formattedHours = hours.toString().padStart(2, '0');\n        const formattedMinutes = minutes.toString().padStart(2, '0');\n        const timeString = `${formattedHours}:${formattedMinutes}`;\n  \n        if (hours < 12) {\n          option_AM.push(`${timeString} AM`);\n        } else {\n          const formattedHours12 = (hours - 12).toString().padStart(2, '0');\n          option_PM.push(`${formattedHours12}:${formattedMinutes} PM`);\n        }\n      }\n    }\n\n    for (let i = 0; i < option_AM.length || i < option_PM.length; i++) {\n      if (i < option_AM.length) {\n        options.push(option_AM[i]);\n      }\n      if (i < option_PM.length) {\n        options.push(option_PM[i]);\n      }\n    }\n    \n\n  \n    return options;\n  };\n  \n\n  const renderTimeOptions = (defaultValue) => {\n    console.log(defaultValue);\n    const timeOptions = generateTimeOptions();\n  \n    return (\n      <>\n        <option value={defaultValue}>{defaultValue}</option>\n        {timeOptions.map((option) => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </>\n    );\n  };\n  \n  \n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Select Time</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col>\n          <Form.Group >\n          <Form.Label >\n            Start Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(e.target.value, null)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(startTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n          <Col>\n          <Form.Group>\n          <Form.Label >\n            End Time\n          </Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelect(null, e.target.value)}\n              style={{height: 'auto', // Let it adjust to content\n                lineHeight: '1.5em', // Mimics rows={1}\n                padding: '8px'}}\n            >\n              {renderTimeOptions(endTime_i)}\n            </Form.Control>\n          </Form.Group>\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={handleClose}>Save</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default TimeRangePicker;\n","import React, { useState } from 'react';\nimport { Form, Table, Button } from 'react-bootstrap';\nimport { FaPlus, FaMinus } from 'react-icons/fa';\nimport './StudioTable.css'; // Import the CSS file for styling\nimport  TimeRangePicker from './TimeRangePicker';\nimport danceStyles from '../danceStyles.json';\nimport { Autocomplete, TextField } from '@mui/material';\n\nimport { MultiSelect } from 'primereact/multiselect';\nimport \"primereact/resources/primereact.css\";\nimport \"primereact/resources/themes/saga-blue/theme.css\";\n\nconst daysOfWeek = ['M','T','W','Th','F','St','Sn'];\n\nfunction StudioTable({ tableData = [], setTableData, instructorNamesWithIds }) {\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const danceStylesOptions = danceStyles.danceStyles;\n  const [defaultTime, setDefaultTime] =  useState(\"00:00-00:00\")\n\n  const handleAddRow = () => {\n    setTableData((prevData) => [...prevData, { className: '', danceForms: '', days: '', time: '00:00 - 00:00', instructors: [], fee:'',level:'' ,status: '' }]);\n  };\n\n  const handleRemoveRow = (index) => {\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      newData.splice(index, 1);\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if(field===\"days\"){\n        value = Array.isArray(value) ? value.join(',') : value; \n      }\n      const newData = [...prevData];\n      newData[index][field] = value;\n      return newData;\n    });\n  };\n\n  const handleTimePickerOpen = (index,time) => {\n    setDefaultTime(time)\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null); // Reset selected row index when closing time picker\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = [...prevData];\n      \n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n    \n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(' - ');\n    \n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n      \n      return newData;\n    });\n  \n    setSelectedRow(selectedRowIndex);\n\n  };\n\n  return (\n    <>\n      <Table bordered variant=\"light\">\n        <thead>\n          <tr >\n          <th style={{padding:'0.6rem'}}>Class Name</th>\n            <th style={{padding:'0.6rem'}}>Dance Forms</th>\n            <th style={{padding:'0.6rem'}}>Days</th>\n            <th style={{padding:'0.6rem'}}>Time</th>\n            <th style={{padding:'0.6rem'}}>Instructors</th>\n            <th style={{padding:'0.6rem'}}>Fee</th>\n            <th style={{padding:'0.6rem'}}>Level</th>\n            <th style={{padding:'0.6rem'}}>\n              <Button variant=\"primary\" onClick={handleAddRow}>\n                <FaPlus />\n              </Button>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {tableData.map((row, index) => (\n            <tr key={index} className={selectedRow === index ? 'selected-row' : ''}>\n              <td style={{padding:'0rem'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  type=\"text\"\n                  value={row.className}\n                  onChange={(e) => handleTableChange(index, 'className', e.target.value)}\n                  \n                />\n              </td>\n              <td style={{padding:'0rem'}}>\n              < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.danceForms}\n                  onChange={(e) => handleTableChange(index, 'danceForms', e.target.value)}\n                >\n                  <option value=\"\">Select a dance form</option>\n                  {danceStylesOptions.map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </Form.Control>\n\n              </td>\n              \n              <td style={{ padding: '0rem'}} className=\"m-0 p-0\">\n                <MultiSelect value={row.days && row.days.split(',').filter(day => day !== '') } \n                    onChange={(event) => handleTableChange(index, 'days', event.target.value)}\n                    options={daysOfWeek}\n                    placeholder=\"class days\" maxSelectedLabels={7} className=\"w-full md:w-20rem\"\n                  />\n              </td>\n              <td style={{padding:'0rem'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.time}\n                  //onClick={() => handleTimePickerOpen(index,row.time)}\n                  onClick={() => handleTimePickerOpen(index,row.time)}\n                  \n                />\n                {showTimePicker && (\n                <TimeRangePicker\n                  show={showTimePicker}\n                  handleClose={handleTimePickerClose}\n                  handleSelect={handleTimeSelect}\n                  defaultTime={tableData[selectedRowIndex]?.time || \"00:00-00:00\"}\n                />\n              )}\n\n              </td>\n              <td style={{padding:'0rem', width:'20rem'}}>\n                <Autocomplete\n                  multiple\n                  id=\"tags-standard\"\n                  options={instructorNamesWithIds}\n                  value={row.instructors}\n                  onChange={(_, values) => handleTableChange(index, 'instructors', values)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Instructors\"\n                    />\n                  )}\n                />\n              </td>\n              <td style={{padding:'0rem'}}>\n                < Form.Control style={{backgroundColor:\"white\"}}\n                  type=\"text\"\n                  value={row.fee}\n                  onChange={(e) => handleTableChange(index, 'fee', e.target.value)}\n                />\n              </td>\n              <td style={{padding:'0rem'}}>\n                < Form.Control style={{backgroundColor:\"white\",height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                  as=\"select\"\n                  value={row.level}\n                  onChange={(e) => handleTableChange(index, 'level', e.target.value)}\n                >     <option value=\"\">Select a value</option>\n                      <option value=\"Beginner\">Beginner</option>\n                      <option value=\"Intermediate\">Intermediate</option>\n                      <option value=\"Advanced\">Advanced</option>\n                      <option value=\"Misc\">Misc</option>\n\n                  </Form.Control>\n              </td>\n              \n              <td style={{padding:'0.6rem'}}>\n                <Button variant=\"danger\" onClick={() => handleRemoveRow(index)}>\n                  <FaMinus />\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>      \n    </>\n  );\n}\n\nexport default StudioTable;\n\n/*\n                <Autocomplete\n                  multiple\n                  id={`days-autocomplete-${index}`}\n                  options={daysOfWeekOptions}\n                  getOptionLabel={(option) => option.value}\n                  value={row.days.split(',').filter(day => day !== '').map(day => daysOfWeekOptions.find(option => option.value === day))}\n                  onChange={(event, newValue) => handleTableChange(index, 'days', newValue.map(option => option.value).join(','))}\n                  renderInput={(params) => <TextField sx={{color:\"black\",backgroundColor:\"white\",width:\"100%\"}} {...params} />}\n                />\n              */","import React, { useState, useEffect }from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { LoadScript } from '@react-google-maps/api';\nimport { FaMapMarker, FaMapMarkerAlt } from 'react-icons/fa';\n\nconst libraries = ['places'];\n\nfunction MapsInput({selectedLocation, setSelectedLocation}) {\n    const [center, setCenter] = useState(selectedLocation? selectedLocation:{ lat: 0, lng: 0 });\n    const [address, setAddress] = useState('');\n  \n    const apiKey = \"AIzaSyAAPq5IMotbu90TZAEtyj8qgYyVJoROzsQ\"; // Replace with your API Key\n   //console.log(\"selectedLocation got in MapsInput\",selectedLocation,\"----\",center)\n    const handleSelect = async (selectedAddress) => {\n      const results = await geocodeByAddress(selectedAddress);\n      const latLng = await getLatLng(results[0]);\n  \n      setAddress(selectedAddress);\n      setCenter(latLng);\n      setSelectedLocation(latLng);\n      //console.log(latLng,\"---\",selectedLocation,'---',center,'---',address)\n    };\n\n    useEffect(() => {\n      // Check if selectedLocation is null and set it to Delhi's coordinates\n      //console.log(selectedLocation)\n      if (!selectedLocation) {\n        //console.log(\"Location changing !selectedLocation\",selectedLocation)\n      }else{\n        //console.log(\"Location changing\",selectedLocation)\n        setCenter(selectedLocation)\n        //setSelectedLocation()\n      }\n      //console.log(center,address,selectedLocation)\n    }, [selectedLocation]);\n  \n    return (\n        <LoadScript\n            googleMapsApiKey={apiKey}\n            libraries={libraries}\n            >\n      <div>\n        <div>\n        <br></br>\n        \n        <PlacesAutocomplete\n          value={address}\n          onChange={(newAddress) => setAddress(newAddress)}\n          onSelect={handleSelect}\n          >\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n            <div>\n              <input\n                {...getInputProps({\n                  placeholder: 'Enter address...',\n                  className: 'location-search-input',\n                  style: { // Add inline styles for the input element\n                    height: '40px', // Adjust the height as needed\n                    fontSize: '16px', // Adjust the font size as needed\n                    width: '100%',\n                  },\n                })}\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {loading && <div>Loading...</div>}\n                {suggestions.map((suggestion) => {\n                  const className = suggestion.active\n                    ? 'suggestion-item--active'\n                    : 'suggestion-item';\n                  return (\n                    <div\n                      {...getSuggestionItemProps(suggestion, {\n                        className,\n                      })}\n                    >\n                      <span>{suggestion.description}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </PlacesAutocomplete>\n          <br></br>\n        </div>\n        <div style={{ height: '400px', width: '100%' }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{ key: apiKey }}\n            defaultCenter={center}\n            center={center}\n            defaultZoom={16}\n            onClick={({ lat, lng }) => {\n              setSelectedLocation({ lat, lng });\n            }}\n          >\n            { (\n              <PinMarker\n              lat={selectedLocation && selectedLocation.lat ? selectedLocation.lat: 0}\n              lng={selectedLocation && selectedLocation.lng ? selectedLocation.lng: 0}\n              text=\"Selected Location\"\n            />\n            )}\n          </GoogleMapReact>\n        </div>\n      </div>\n      </LoadScript>\n    );\n}\n\nconst Marker = ({ text }) => (\n    <div style={{ color: 'red', fontWeight: 'bold' }}>\n      {text}\n    </div>\n  );\n\nconst PinMarker = ({ text }) => (\n    <div style={{ position: 'relative', textAlign: 'center' }}>\n      <FaMapMarkerAlt style={{ color: 'green', fontSize: '24px' }} />\n    </div>\n  );\n\nexport default MapsInput\n","import React from 'react';\n\nconst SuccessMessage = ({ StudioId }) => {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-12\"> {/* Change col-md-5 to col-md-12 */}\n          <div className=\"_success message-box\">\n            <i className=\"fa fa-check-circle\" aria-hidden=\"true\"></i>\n            <h3>Your Studio registration was successful</h3>\n            <p>{StudioId} is now registered 🎉</p>\n          </div>\n        </div>\n      </div>\n      <hr />\n\n      <style jsx>{`\n        ._success {\n          padding: 45px;\n          width: 100%;\n          text-align: center;\n          margin: 30px auto;\n        }\n\n        ._success i {\n          font-size: 55px;\n          color: #28a745;\n        }\n\n        ._success h2 {\n          margin-bottom: 12px;\n          font-size: 30px;\n          font-weight: 300;\n          line-height: 1.2;\n          margin-top: 10px;\n        }\n\n        ._success p {\n          margin-bottom: 0px;\n          font-size: 18px;\n          color: #495057;\n          font-weight: 100;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SuccessMessage;\n","import React from 'react'\nimport { Row, Col , Form } from 'react-bootstrap';\nimport {Button as MuiButton} from '@mui/material';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,addDoc,updateDoc,collection,where,getDocs,query, deleteDoc } from \"firebase/firestore\";\nimport { COLLECTIONS, DRAFT_COLLECTIONS } from '../constants';\nimport StudioTable from './StudioTable';\nimport ImageUpload from './ImageUpload';\nimport { STORAGES } from '../constants';\nimport MapsInput from './MapsInput';\nimport { useSelector} from 'react-redux';\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector';\nimport indianCities from '../cities.json';\nimport danceStyles from '../danceStyles.json';\nimport { AMENITIES_ICONS } from '../constants';\nimport {Autocomplete,TextField} from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport {Stepper,Step,StepLabel} from '@mui/material';\nimport SuccessMessage from './SucessPage';\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nconst DRAFT_INTERVAL_TIME = 1000 * 10;\n\nfunction StudioAdd({instructors}) {\n    const [newStudioId, setNewStudioId] = useState(\"\")\n    const [tableData, setTableData] = useState(\n      [{ className: '', danceForms: '', days: '', time: '', instructors: [], fee:'',level:'' ,status: ''}],\n    );\n    const [selectedLocation, setSelectedLocation] = useState(null);\n    const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n    const [selectedInstructors, setSelectedInstructors] = useState([]);\n    const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n    const [selectedAmenities, setSelectedAmenities] = useState([]);\n    const instructorNamesWithIds = instructors.map((instructor) => `${instructor.name} - ${instructor.id}`);\n    const [isReady, setIsReady] = useState(false);\n\n\n    //const [dropdownVisible, setDropdownVisible] = useState(false);\n    const locationOptions = indianCities.cities;\n    const danceStylesOptions = danceStyles.danceStyles;\n    const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n    const [activeStep, setActiveStep] = useState(0);\n\n    const handleNext = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n\n    const darkTheme = createTheme({\n      palette: {\n        mode: isDarkModeOn?'dark':'light',\n      },\n    });\n\n    const handleDanceStylesChange = (event, value) => {\n      setSelectedDanceStyles(value);\n    };  \n\n    const handleAmentiesChange = (event, value) => {\n      setSelectedAmenities(value);\n    };\n\n    const handleInstructorChange = (event, value) => {\n      setSelectedInstructors(value);\n    };\n\n    const resetDraft = async () => {\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n\n          await deleteDoc(studioRef);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n      const handleAddStudio = async (event) => {\n        event.preventDefault();\n        const title = event.target.studioName.value;\n        if (!title) {\n          return;\n        }\n        let isPremium=true\n        const newData = tableData.reduce((accumulator, current, index) => {\n          accumulator[index] = current;\n          return accumulator;\n        }, {});\n\n        try {\n            const studioRef = await addDoc(collection(db, COLLECTIONS.STUDIO), {\n              studioName: event.target.studioName.value,\n              aboutStudio: event.target.aboutStudio.value,\n              founderName: event.target.founderName.value,\n              aboutFounder: event.target.aboutFounder.value,\n              mobileNumber: event.target.mobileNumber.value,\n              whatsappNumber: event.target.whatsappNumber.value,\n              mailAddress: event.target.mailAddress.value,\n              danceStyles: selectedDanceStyles.join(\",\"),\n              numberOfHalls: event.target.numberOfHalls.value,\n              maximumOccupancy: event.target.maximumOccupancy.value,\n              instructorsNames: selectedInstructors,\n              status: 'OPEN',\n              tableData: newData,\n              buildingName: event.target.buildingName.value,\n              street: event.target.street.value,\n              city: event.target.city.value,\n              landmark: event.target.landmark.value,\n              pincode: event.target.pincode.value,\n              state: event.target.state.value,\n              country: \"India\",\n              geolocation : selectedLocation,\n              aadharNumber: event.target.aadharNumber.value ,\n              gstNumber: event.target.gstNumber.value,\n              enrolledId:[],\n              reviews:[],\n              author: JSON.parse(localStorage.getItem('userInfo')).displayName,\n              UserId: JSON.parse(localStorage.getItem('userInfo')).UserId,\n              isPremium: isPremium,\n              addAmenities: selectedAmenities.join(\",\"),\n              enrollmentProcess: encodeToUnicode(event.target.enrollmentProcess.value),\n              creatorEmail: JSON.parse(localStorage.getItem('userInfo')).email,\n              instagram: event.target.instagram.value,\n              facebook: event.target.facebook.value,\n              youtube: event.target.youtube.value,\n              twitter: event.target.twitter.value,\n              visibilty:1,\n\n            });\n            //console.log(\"Studio added successfully\");\n            setNewStudioId(studioRef.id)\n            const userRef = doc(db, \"User\", JSON.parse(localStorage.getItem('userInfo')).UserId);\n            const userSnap = await getDoc(userRef);\n            if (userSnap.exists()) {\n              //console.log(\"User there\",userSnap.data());\n              if(userSnap.data() != null){\n                await updateDoc(userRef,{\n                  \n                  StudioCreated: [...userSnap.data().StudioCreated,studioRef.id]\n                });\n                //console.log(\"Studio added back successfully\");\n              }else{\n                //console.log(\"userSnap.data() null\")\n              }\n            } else {\n              //console.log(\"User not found but studio created... error\");\n            }\n\n            resetDraft();\n            handleNext();\n\n        } catch (error) {\n          console.error(\"Error adding studio: \", error);\n        }\n      };\n\n  useEffect(() => {\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n\n          form.studioName.value = foundStudio.studioName;\n          form.aboutStudio.value = foundStudio.aboutStudio;\n          form.founderName.value = foundStudio.founderName;\n          form.aboutFounder.value = foundStudio.aboutFounder;\n          form.mobileNumber.value = foundStudio.mobileNumber;\n          form.whatsappNumber.value = foundStudio.whatsappNumber;\n          form.mailAddress.value = foundStudio.mailAddress;\n          setSelectedDanceStyles(\n            foundStudio.danceStyles.length\n              ? foundStudio.danceStyles.split(\",\")\n              : []\n          );\n          form.numberOfHalls.value = foundStudio.numberOfHalls;\n          form.maximumOccupancy.value = foundStudio.maximumOccupancy;\n          setSelectedInstructors(foundStudio.instructorsNames);\n          form.buildingName.value = foundStudio.buildingName;\n          form.street.value = foundStudio.street;\n          form.city.value = foundStudio.city;\n          form.landmark.value = foundStudio.landmark;\n          form.pincode.value = foundStudio.pincode;\n          form.state.value = foundStudio.state;\n          setSelectedLocation(foundStudio.geolocation);\n          form.aadharNumber.value = foundStudio.aadharNumber;\n          form.gstNumber.value = foundStudio.gstNumber;\n          setTableData(Object.values(foundStudio.tableData));\n          setSelectedAmenities(\n            foundStudio.addAmenities.length\n              ? foundStudio.addAmenities.split(\",\")\n              : []\n          );\n          form.enrollmentProcess.value = decodeUnicode(\n            foundStudio.enrollmentProcess\n          );\n          form.instagram.value = foundStudio.instagram;\n          form.facebook.value = foundStudio.facebook;\n          form.youtube.value = foundStudio.youtube;\n          form.twitter.value = foundStudio.twitter;\n        } else {\n          await addDoc(collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS), {\n            studioName: form.studioName.value,\n            aboutStudio: form.aboutStudio.value,\n            founderName: form.founderName.value,\n            aboutFounder: form.aboutFounder.value,\n            mobileNumber: form.mobileNumber.value,\n            whatsappNumber: form.whatsappNumber.value,\n            mailAddress: form.mailAddress.value,\n            danceStyles: selectedDanceStyles.join(\",\"),\n            numberOfHalls: form.numberOfHalls.value,\n            maximumOccupancy: form.maximumOccupancy.value,\n            instructorsNames: selectedInstructors,\n            status: \"OPEN\",\n            tableData: {\n              0: {\n                className: \"\",\n                danceForms: \"\",\n                days: \"\",\n                time: \"\",\n                instructors: [],\n                fee: \"\",\n                level: \"\",\n              },\n            },\n            buildingName: form.buildingName.value,\n            street: form.street.value,\n            city: form.city.value,\n            landmark: form.landmark.value,\n            pincode: form.pincode.value,\n            state: form.state.value,\n            country: \"India\",\n            geolocation: selectedLocation,\n            aadharNumber: form.aadharNumber.value,\n            gstNumber: form.gstNumber.value,\n            enrolledId: [],\n            reviews: [],\n            author: JSON.parse(localStorage.getItem(\"userInfo\")).displayName,\n            UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n            isPremium: true,\n            addAmenities: selectedAmenities.join(\",\"),\n            enrollmentProcess: encodeToUnicode(form.enrollmentProcess.value),\n            creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\")).email,\n            instagram: form.instagram.value,\n            facebook: form.facebook.value,\n            youtube: form.youtube.value,\n            twitter: form.twitter.value,\n            visibilty: 1,\n          });\n        }\n\n        setIsReady(true);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    main();\n  }, []);\n\n  useEffect(() => {\n    let intervalId = null;\n\n    async function main() {\n      const form = document.getElementById(\"addStudioForm\");\n\n      try {\n        const q = query(\n          collection(db, DRAFT_COLLECTIONS.DRAFT_STUDIOS),\n          where(\n            \"UserId\",\n            \"==\",\n            JSON.parse(localStorage.getItem(\"userInfo\")).UserId\n          )\n        );\n\n        const querySnapshot = await getDocs(q);\n\n        if (!querySnapshot.empty) {\n          let studios = [];\n\n          querySnapshot.forEach((doc) => {\n            studios.push({ id: doc.id, ...doc.data() });\n          });\n\n          let foundStudio = studios[0];\n          \n          const studioRef = doc(\n            db,\n            DRAFT_COLLECTIONS.DRAFT_STUDIOS,\n            foundStudio.id\n          );\n          \n          intervalId = setInterval(async () => {\n            try {\n              const newData = tableData.reduce((accumulator, current, index) => {\n                accumulator[index] = current;\n                return accumulator;\n              }, {});\n\n              await updateDoc(studioRef, {\n                studioName: form.studioName.value,\n                aboutStudio: form.aboutStudio.value,\n                founderName: form.founderName.value,\n                aboutFounder: form.aboutFounder.value,\n                mobileNumber: form.mobileNumber.value,\n                whatsappNumber: form.whatsappNumber.value,\n                mailAddress: form.mailAddress.value,\n                danceStyles: selectedDanceStyles.join(\",\"),\n                numberOfHalls: form.numberOfHalls.value,\n                maximumOccupancy: form.maximumOccupancy.value,\n                instructorsNames: selectedInstructors,\n                status: \"OPEN\",\n                tableData: newData,\n                buildingName: form.buildingName.value,\n                street: form.street.value,\n                city: form.city.value,\n                landmark: form.landmark.value,\n                pincode: form.pincode.value,\n                state: form.state.value,\n                country: \"India\",\n                geolocation: selectedLocation,\n                aadharNumber: form.aadharNumber.value,\n                gstNumber: form.gstNumber.value,\n                enrolledId: [],\n                reviews: [],\n                author: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .displayName,\n                UserId: JSON.parse(localStorage.getItem(\"userInfo\")).UserId,\n                isPremium: true,\n                addAmenities: selectedAmenities.join(\",\"),\n                enrollmentProcess: encodeToUnicode(\n                  form.enrollmentProcess.value\n                ),\n                creatorEmail: JSON.parse(localStorage.getItem(\"userInfo\"))\n                  .email,\n                instagram: form.instagram.value,\n                facebook: form.facebook.value,\n                youtube: form.youtube.value,\n                twitter: form.twitter.value,\n                visibilty: 1,\n              });\n            } catch (error) {\n              console.error(error);\n            }\n          }, DRAFT_INTERVAL_TIME);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    if (isReady) main();\n\n    return () => clearInterval(intervalId);\n  }, [\n    isReady,\n    selectedDanceStyles,\n    selectedInstructors,\n    tableData,\n    selectedLocation,\n    selectedAmenities,\n  ]);\n\n  return (\n    <div >\n          <Stepper activeStep={activeStep} alternativeLabel>\n            {['Basic Studio & Owner details', 'Instructors, Classes & Social Media', 'Address & Registration', 'Studio Icon', 'Studio & Class Images'].map((label) => (\n              <Step key={label}>\n                <StepLabel ><p style={{color:isDarkModeOn?\"white\":\"black\"}}>{label}</p></StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          \n            < div hidden={activeStep > 2} >\n            <Form id=\"addStudioForm\" onSubmit={handleAddStudio} style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n              <Form.Group controlId=\"formBasicAdd\">\n             \n                  <div hidden={activeStep !== 0}>\n                  <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Basic Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Studio Name</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"studioName\" />\n                \n                <Form.Label>About Studio</Form.Label>\n                <Form.Control rows={6} style={{  minHeight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio's details\" name=\"aboutStudio\" />\n                \n                </Col>\n                <Col md={6}>\n                <Form.Label>Founder's Name</Form.Label>\n                <Form.Control rows={1} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter founder name\" name=\"founderName\" />\n                \n                <Form.Label>About Founder</Form.Label>\n                <Form.Control rows={6} style={{  minheight: '10rem', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter founder's details\" name=\"aboutFounder\" />\n                \n                </Col>\n                </Row>\n                <hr></hr>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Contact Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Mobile Number</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter mobile number\" name=\"mobileNumber\" type=\"number\"  />\n\n                <Form.Label>WhatsApp Number</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter whatsapp number\" name=\"whatsappNumber\" type=\"number\"  />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Mail Address</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"email\" rows={1} placeholder=\"Enter mail address\" name=\"mailAddress\" />\n                \n                  </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Details</h3>\n                <Row>\n                  <Col md={6}>\n                <Form.Label >Dance Styles</Form.Label>\n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                <Form.Label>Number of Hall(s)</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Number of Hall(s)\" name=\"numberOfHalls\" type=\"number\" />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Maximum Occupancy</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}  rows={1} placeholder=\"Maximum Occupancy\" name=\"maximumOccupancy\" type=\"number\"   />\n                </Col>\n                </Row>\n                <br></br>\n                <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}} disabled >\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                  \n                  </div>\n\n\n               \n              \n                <div hidden={activeStep !== 1}>\n\n\n                \n            <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Instructor Details</h3>\n                <Form.Label>Names of Instructors</Form.Label>\n                <Row>\n                  <ThemeProvider theme={darkTheme}>\n                    <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={instructorNamesWithIds}\n                      value={selectedInstructors}\n                      onChange={handleInstructorChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Instructors\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                  </ThemeProvider>\n                </Row> \n                <a href=\"#/modifyInstructors\" rel=\"noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', color: isDarkModeOn ? 'cyan' : 'blue' }}>\n                      Go to Instrcutors' Add/update Page? \n                    </a>\n                <hr></hr>   \n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Class Schedule</h3>\n                <span>Time Table Of dance classes</span>\n                <StudioTable\n                  tableData={tableData}\n                  setTableData={setTableData}\n                  instructorNamesWithIds={instructorNamesWithIds}\n                />\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Additional Details</h3>\n                <Row>\n                <Col md={4}>\n                  <Form.Label>Owner's Aadhar Number</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"number\" rows={1} placeholder=\"Enter aadhar Number\" name=\"aadharNumber\" />\n                  \n                \n                </Col>\n                <Col md={4}>\n                  <Form.Label>GST Number</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"GST Number\" name=\"gstNumber\" />\n                  \n                  \n                </Col>\n                <Col md={4}>\n                <Form.Label>Add Amenities</Form.Label>\n                  \n                  <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={amenityKeys}\n                  value={selectedAmenities}\n                  onChange={handleAmentiesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Amenities\"\n                      style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>\n                </Col>\n                </Row>\n                <Row>\n                <Form.Label>Enrollment Process</Form.Label>\n                  <Form.Control rows={12} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enrollment Process\" name=\"enrollmentProcess\" />\n          \n                </Row>\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Social Media Links</h3>\n               <Row>\n               <Col md={4}>\n                  <Form.Label>Instagram</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Instagram Link\" name=\"instagram\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Facebook</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Facebook Link\" name=\"facebook\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>YouTube</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"YouTube Link\" name=\"youtube\" />\n                </Col>\n                <Col md={4}>\n                  <Form.Label>Twitter</Form.Label>\n                  <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Twitter Link\" name=\"twitter\" />\n                </Col>\n\n               </Row>\n\n               <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end\">\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                      Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n              </div>\n\n               \n                <div hidden={activeStep !== 2}>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Address Details</h3>\n                <Row>\n                  <Col md={6}>\n                  <Form.Label>Building Name</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter building name\" name=\"buildingName\" />\n\n                <Form.Label>Street</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter street\" name=\"street\" />\n                <Form.Label>City</Form.Label>\n                <Form.Control as=\"select\" style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black', height: 'auto', // Let it adjust to content\n                    lineHeight: '1.5em', // Mimics rows={1}\n                    padding: '8px', }} name=\"city\">\n                    <option value=\"\">Select a city</option>\n                    {locationOptions.map((city, index) => (\n                        <option key={index} value={city}>\n                            {city}\n                        </option>\n                    ))}\n                </Form.Control>\n\n                </Col>\n                <Col md={6}>\n                  <Form.Label>Landmark</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter landmark\" name=\"landmark\" />\n\n                <Form.Label>Pincode</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter pincode\" name=\"pincode\" type=\"number\"  />\n               \n                <Form.Label>State</Form.Label>\n                <Form.Control style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter state\" name=\"state\" />\n               \n                </Col>\n\n                <Form.Label>Save exact Address</Form.Label>\n                <MapsInput selectedLocation={selectedLocation} setSelectedLocation={setSelectedLocation}></MapsInput>\n                \n                </Row>\n                \n\n                \n              <br></br>\n\n              <Row>\n                  <Col xs={6}>\n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleBack()}>\n                      Prev\n                    </MuiButton>\n                  </Col>\n                  <Col xs={6} className=\"d-flex justify-content-end\">\n                    \n                    <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\", color:'white'}} type=\"submit\">\n                      Add Studio & Next\n                    </MuiButton>\n                  </Col>\n                </Row>\n                \n                </div>\n\n                \n                </Form.Group>\n            </Form>\n            \n            {\n              newStudioId === \"\"?(\"\"):(<p>New Studio Created with id {newStudioId}. Now u can upload images regarding them</p>)\n            }\n            \n            </div>\n          \n             \n             \n            <div hidden={activeStep !== 3}>\n              \n              <ImageUpload entityId={newStudioId} title={\"Studio Icon\"} storageFolder={STORAGES.STUDIOICON} maxImageCount={1}></ImageUpload>\n              <Row>\n                \n                <Col xs={12} className=\"d-flex justify-content-end\">\n                  <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                    Next\n                  </MuiButton>\n                </Col>\n              </Row>\n\n              </div>\n             \n            \n             <div hidden={activeStep !== 4}>\n              <ImageUpload entityId={newStudioId} title={\"Studio Images\"}  storageFolder={STORAGES.STUDIOIMAGES} ></ImageUpload>\n              <Row>\n                \n                <Col xs={12} className=\"d-flex justify-content-end\">\n                  <MuiButton variant=\"contained\" style={{backgroundColor:isDarkModeOn?\"#892cdc\":\"black\"}}onClick={() => handleNext()}>\n                    Next\n                  </MuiButton>\n                </Col>\n              </Row>\n            </div>\n\n            <div  hidden={activeStep !== 5} style={{ display: 'flex',  alignItems: 'center', height: 'auto'}}>\n          \n                <SuccessMessage StudioId={newStudioId} />\n                <br></br>\n              \n            </div>\n        \n      <br></br>\n      \n    </div>\n  )\n}\n\n\nexport default StudioAdd\n","import React, { useState, useEffect } from 'react';\nimport { Alert, Container } from 'react-bootstrap';\n\nconst AlertPopup = ({\n  type = 'info',\n  message = 'Default message',\n  timeOfDisplay = 5000,\n  fontSize = '16px',\n  fontWeight = 'normal',\n  fontStyle = 'normal',\n}) => {\n  const [showAlert, setShowAlert] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowAlert(false);\n    }, timeOfDisplay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [timeOfDisplay]);\n\n  return (\n    <Container>\n      {showAlert && (\n        <Alert\n          variant={type}\n          style={{\n            fontSize,\n            fontWeight,\n            fontStyle,\n            textAlign: 'center',\n            marginTop: '10px',\n            marginBottom: '0',\n          }}\n          onClose={() => setShowAlert(false)}\n          dismissible\n        >\n          {message}\n        </Alert>\n      )}\n    </Container>\n  );\n};\n\nexport default AlertPopup;\n","import React, { useState, useEffect } from 'react';\nimport {Button, Row, Col, Form, Table} from 'react-bootstrap';\nimport { db } from '../config';\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { COLLECTIONS } from '../constants';\nimport AlertPopup from './AlertPopup';\nimport ImageUpload from './ImageUpload';\nimport { STORAGES } from '../constants';\nimport MapsInput from './MapsInput';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport TimeRangePicker from './TimeRangePicker';\nimport indianCities from '../cities.json';\nimport danceStyles from '../danceStyles.json';\nimport { AMENITIES_ICONS } from '../constants';\nimport {Autocomplete,TextField} from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { FaMinus, FaPlus } from 'react-icons/fa';\nimport { MultiSelect } from 'primereact/multiselect';\n\nconst daysOfWeek = ['M','T','W','Th','F','St','Sn'];\n\nconst encodeToUnicode = (text) => {\n  const textEncoder = new TextEncoder();\n  const utf8Encoded = textEncoder.encode(text);\n  return String.fromCharCode(...utf8Encoded);\n};\n\nconst decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nfunction StudioUpdate({ studio, setStudio, studioId, setStudioId, instructors }) {\n  const [selectedStudio, setSelectedStudio] = useState(null);\n  const [selectedStudioId, setSelectedStudioId] = useState(null);\n  const [selectedInstructors, setSelectedInstructors] = useState([]);\n  const [selectedStudioFrozenClassRows, setSelectedStudioFrozenClassRows] = useState(-1);\n  const [selectedAmenities,setSelectedAmenities] = useState([]);\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [defaultTime, setDefaultTime] =  useState(\"00:00-00:00\");\n\n  const locationOptions = indianCities.cities;\n  const danceStylesOptions = danceStyles.danceStyles;\n  const amenityKeys = Object.keys(AMENITIES_ICONS).map(String);\n  const [showUpdateSuccessAlert, setShowUpdateSuccessAlert] = useState(false);\n  const [showUpdateErrorAlert, setShowUpdateErrorAlert] = useState(false);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [selectedDanceStyles, setSelectedDanceStyles] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n\n  const instructorNamesWithIds = instructors.map((instructor) => `${instructor.name} - ${instructor.id}`);\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: isDarkModeOn?'dark':'light',\n    },\n  });\n\n  const handleDanceStylesChange = (event, value) => {\n    setSelectedDanceStyles(value);\n  };\n  \n  \n  const handleAmenitiesChange = (event, value) => {\n    setSelectedAmenities(value);\n  };\n\n  const [tableData, setTableData] = useState({\n    0:{\n      className: '',\n      danceForms: '',\n      days: '',\n      time: '',\n      instructors: [],\n      fee:'',\n      level:''\n    }\n});\n\n  const handleTimePickerOpen = (index,time) => {\n    //console.log(\"handleTimePickerOpen\",time,index)\n    setDefaultTime(time)\n    setSelectedRowIndex(index);\n    setShowTimePicker(true);\n  };\n\n  const handleTimePickerClose = () => {\n    setShowTimePicker(false);\n    setSelectedRowIndex(null); \n    //console.log(\"---------\")\n  };\n\n  const handleTimeSelect = (startTime, endTime) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n  \n      if (selectedRowIndex !== null && newData[selectedRowIndex]) {\n        const currentTime = newData[selectedRowIndex].time;\n  \n        if (currentTime !== undefined) {\n          const [currentStartTime, currentEndTime] = currentTime.split(' - ');\n  \n          if (startTime !== null) {\n            newData[selectedRowIndex].time = `${startTime} - ${currentEndTime}`;\n          }\n          if (endTime !== null) {\n            newData[selectedRowIndex].time = `${currentStartTime} - ${endTime}`;\n          }\n        }\n      }\n  \n      return newData;\n    });\n  \n    setSelectedRow(selectedRowIndex);\n  };\n  \n  useEffect(() => {\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser = JSON.parse(localStorage.getItem('StudioCreated')) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map((studio) => `${studio.studioName} : ${studio.id}`);\n    setStudioId(studioIdList);\n\n    //console.log(\"studio:\", studio);\n    //console.log(\"studioId\", studioId);\n  }, []);\n\n  useEffect(() => {\n    // Fetch data for the selected studio when studioId changes\n    if (selectedStudio) {\n      //console.log(\"Studio Instructors Names\",selectedStudio.instructorsNames)\n      setSelectedInstructors((selectedStudio.instructorsNames));\n      if (selectedStudio && selectedStudio.danceStyles) {\n        setSelectedDanceStyles(selectedStudio.danceStyles.split(','));\n      }\n      if (selectedStudio && selectedStudio.addAmenities) {\n        setSelectedAmenities(selectedStudio.addAmenities.split(','));\n      }    \n      if(selectedStudio && selectedStudio.tableData){\n        const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n        setSelectedStudioFrozenClassRows(maxIndex);\n      }\n    }\n  }, [selectedStudio]);\n\n  const handleSelectStudio = async (event) => {\n    event.preventDefault();\n    const selected = event.target.value;\n    const selectedId = selected.split(\":\").pop().trim();\n    setSelectedStudioId(selectedId);\n    try {\n      const studioDoc = await getDoc(doc(db, COLLECTIONS.STUDIO, selectedId));\n      if (studioDoc.exists) {\n        setSelectedStudio(studioDoc.data());\n        if(studioDoc.data().geolocation){\n          const  loc = studioDoc.data().geolocation;\n          setSelectedLocation(loc);\n          //console.log(\"StudioUpdate Selected location\",selectedLocation,loc)\n        }\n        \n        if (studioDoc.data().tableData) {\n          setTableData(studioDoc.data().tableData);\n          //selectedStudioFrozenClassRows()\n          const maxIndex = Math.max(...Object.keys(tableData).map(Number));\n          selectedStudioFrozenClassRows(maxIndex)\n          //console.log(\"Yo We got...\",tableData,Array.isArray(tableData),isMapOfMaps(tableData),maxIndex)\n\n        } else {\n          setTableData({\n            0:{\n              className: '',\n              danceForms: '',\n              days: '',\n              time: '',\n              instructors: [],\n              fee: '',\n              level:'',\n            }\n        });\n        }\n      } else {\n        setSelectedStudio(null); // No matching studio found\n      }\n    } catch (error) {\n      console.error(\"Error fetching studio data:\", error, selectedId);\n    }\n  };\n\n\n  const handleInstructorChange = (event, value) => {\n    setSelectedInstructors(value);\n  };\n\n\n  const handleUpdateStudio = async (event) => {\n    event.preventDefault();\n    const nameIdLocal = event.target.nameId.value;\n    const indexOfColon = nameIdLocal.lastIndexOf(\":\");\n    const studioId = nameIdLocal.substring(indexOfColon + 1).trim();\n    //console.log(studioId)\n\n    if (!studioId) {\n      //console.log(\"Invalid or empty studio id\")\n      return;\n    }\n\n    //const description = encodeToUnicode(event.target.description.value);\n    //const geolocation = selectedLocation;\n\n    try {\n      // Update the studio document with the new values\n      ////console.log(description,geolocation)\n      const studioRef = doc(db, COLLECTIONS.STUDIO, studioId);\n      await updateDoc(studioRef, {\n              studioName: event.target.studioName.value,\n              aboutStudio: event.target.aboutStudio.value,\n              founderName: event.target.founderName.value,\n              aboutFounder: event.target.aboutFounder.value,\n              mobileNumber: event.target.mobileNumber.value,\n              whatsappNumber: event.target.whatsappNumber.value,\n              mailAddress: event.target.mailAddress.value,\n              danceStyles: selectedDanceStyles.join(\",\"),\n              numberOfHalls: event.target.numberOfHalls.value,\n              maximumOccupancy: event.target.maximumOccupancy.value,\n              instructorsNames: selectedInstructors,\n              status: 'OPEN',\n              tableData: tableData,\n              buildingName: event.target.buildingName.value,\n              street: event.target.street.value,\n              city: event.target.city.value,\n              landmark: event.target.landmark.value,\n              pincode: event.target.pincode.value,\n              state: event.target.state.value,\n              country: \"India\",\n              geolocation : selectedLocation,\n              aadharNumber: event.target.aadharNumber.value ,\n              gstNumber: event.target.gstNumber.value,\n              enrolledId:[],\n              reviews:[],\n              author: JSON.parse(localStorage.getItem('userInfo')).displayName,\n              UserId: JSON.parse(localStorage.getItem('userInfo')).UserId,\n              addAmenities: selectedAmenities.join(\",\"),\n              enrollmentProcess: encodeToUnicode(event.target.enrollmentProcess.value),\n              instagram: event.target.instagram.value,\n              facebook: event.target.facebook.value,\n              youtube: event.target.youtube.value,\n              twitter: event.target.twitter.value,\n      });\n\n      //console.log(\"Studio updated successfully\");\n      alert(\"Studio Update successfully\")\n      setShowUpdateSuccessAlert(true);\n      setShowUpdateErrorAlert(false);\n    } catch (error) {\n      console.error(\"Error updating studio: \", error);\n      setShowUpdateSuccessAlert(false);\n      setShowUpdateErrorAlert(true);\n    }\n    // Reset input fields to their initial values when a new studio is selected\n    document.getElementById(\"updateStudioForm\").reset();\n  };\n\n  const handleAddColumn = () => {\n    setTableData((prevData) => {\n      const newData = prevData.map((row) => ({\n        ...row,\n        [Object.keys(row).length]: ''\n      }));\n      return newData;\n    });\n  };\n\n  const handleAddRow = () => {\n    setTableData((prevData) => {\n      const newRowKey = Object.keys(prevData).length; // Use the current number of rows as the new row key\n      return { ...prevData, [newRowKey]: { ...tableData[0] } };\n    });\n  };\n\n  const handleRemoveRow = (index) => {\n    setTableData((prevData) => {\n      const newData = { ...prevData };\n      delete newData[index];\n      return newData;\n    });\n  };\n\n  const handleTableChange = (index, field, value) => {\n    setTableData((prevData) => {\n      if(field===\"days\"){\n        value = Array.isArray(value) ? value.join(',') : value; \n      }\n\n      return {\n        ...prevData,\n        [index]: {\n          ...prevData[index],\n          [field]: value\n        }\n      };\n    });\n  };\n\n  return (\n    <div style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n      <br></br>\n            <Form id=\"updateStudioForm\" onSubmit={handleUpdateStudio}>\n              <Form.Group controlId=\"formBasicUpdate\">\n                <Form.Label>Id</Form.Label>\n                <Form.Control as=\"select\" name=\"nameId\" style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black', height: 'auto', // Let it adjust to content\n                                                        lineHeight: '1.5em', \n                                                        padding: '8px' }}  \n                  onChange={handleSelectStudio}>\n                  <option value=\"\">Select a studio...</option>\n                  {studioId && studioId.length > 0 ? (\n                    studioId.map((studioItem) => (\n                      <option key={studioItem} value={studioItem}>\n                        {studioItem}\n                      </option>\n                    ))\n                  ) : (\n                    <option value=\"\">No studio yet!</option>\n                  )}\n                </Form.Control>\n              </Form.Group>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Basic Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Studio Name</Form.Label>\n                <Form.Control rows={1} defaultValue={selectedStudio ? selectedStudio.studioName : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"studioName\" />\n                \n                <Form.Label>About Studio</Form.Label>\n                <Form.Control rows={6} defaultValue={selectedStudio ? selectedStudio.aboutStudio : ''} style={{  minHeight: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio details\" name=\"aboutStudio\" />\n                \n                </Col>\n                <Col md={6}>\n                <Form.Label>Founder's Name</Form.Label>\n                <Form.Control rows={1} defaultValue={selectedStudio ? selectedStudio.founderName : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" placeholder=\"Enter studio name\" name=\"founderName\" />\n                \n                <Form.Label>About Founder</Form.Label>\n                <Form.Control rows={6} defaultValue={selectedStudio ? selectedStudio.aboutFounder : ''} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enter studio details\" name=\"aboutFounder\" />\n                \n                </Col>\n                </Row>\n                <hr></hr>\n\n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Contact Details</h3>\n                <Row>\n                <Col md={6}>\n\n                <Form.Label>Mobile Number</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.mobileNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter studio details\" name=\"mobileNumber\" type=\"number\"  />\n\n                <Form.Label>WhatsApp Number</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.whatsappNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Enter studio details\" name=\"whatsappNumber\" type=\"number\"  />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Mail Address</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.mailAddress : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"textarea\" rows={1} placeholder=\"Enter studio details\" name=\"mailAddress\" />\n                \n                  </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Studio Details</h3>\n                <Row>\n                  <Col md={6}>\n                <Form.Label>Dance Styles</Form.Label>\n                \n                <ThemeProvider theme={darkTheme}>\n                  <CssBaseline />\n\n                 <Autocomplete\n                  style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                  multiple\n                  id=\"tags-standard\"\n                  options={danceStylesOptions}\n                  value={selectedDanceStyles}\n                  onChange={handleDanceStylesChange}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"standard\"\n                      placeholder=\"Select Dance Styles\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                    />\n                  )}\n                />\n                </ThemeProvider>      \n                \n                <Form.Label>Number of Hall(s)</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.numberOfHalls : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} rows={1} placeholder=\"Number of Hall(s)\" name=\"numberOfHalls\" type=\"number\" />\n                </Col>\n                <Col md={6}>\n                <Form.Label>Maximum Occupancy</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.maximumOccupancy : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}  rows={1} placeholder=\"Maximum Occupancy\" name=\"maximumOccupancy\" type=\"number\"   />\n                </Col>\n                </Row>\n                <hr></hr>\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Instructor Details</h3>\n                <Form.Label>Names of Instructors</Form.Label>\n                <Row >\n      \n                  <Col xs={6}>\n                  <div style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>\n                  <Row>\n                  <ThemeProvider theme={darkTheme}>\n                    <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={instructorNamesWithIds}\n                      value={selectedInstructors}\n                      onChange={handleInstructorChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Dance Styles\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                  </ThemeProvider>\n                  <a href=\"#/modifyInstructors\" rel=\"noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', color: isDarkModeOn ? 'cyan' : 'blue' }}>\n                      Go to Instrcutors' Add/update Page? \n                    </a>\n                </Row> \n                  </div>\n                  </Col>\n                </Row>  \n                <hr></hr>\n                   \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Address Details</h3>\n                <Row>\n                  <Col md={6}>\n                  <Form.Label>Building Name</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.buildingName : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter building name\" name=\"buildingName\" />\n\n                <Form.Label>Street</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.street : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter street\" name=\"street\" />\n                <Form.Label>City</Form.Label>\n                  <Form.Control\n                      as=\"select\"\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black',height: 'auto', // Let it adjust to content\n                        lineHeight: '1.5em', // Mimics rows={1}\n                        padding: '8px', }}\n                      name=\"city\"\n                      value={selectedStudio ? selectedStudio.city : ''}\n                      onChange={(e) => {\n                          const newCity = e.target.value;\n                          setSelectedStudio(prevState => ({\n                              ...prevState,\n                              city: newCity\n                          }));\n                      }}\n                  >\n                      <option value=\"\">Select a city</option>\n                      {locationOptions.map((city, index) => (\n                          <option key={index} value={city}>\n                              {city}\n                          </option>\n                      ))}\n                  </Form.Control>\n                  \n\n                </Col>\n                <Col md={6}>\n                  <Form.Label>Landmark</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.landmark : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter landmark\" name=\"landmark\" />\n\n                <Form.Label>Pincode</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.pincode : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter pincode\" name=\"pincode\" type=\"number\"  />\n               \n                <Form.Label>State</Form.Label>\n                <Form.Control defaultValue={selectedStudio ? selectedStudio.state : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" rows={1} placeholder=\"Enter state\" name=\"state\" />\n               \n                </Col>\n                \n                <Form.Label>Save exact Address</Form.Label>\n                <MapsInput selectedLocation={selectedStudio && selectedStudio.geolocation ? selectedStudio.geolocation : selectedLocation}\n                            setSelectedLocation={setSelectedLocation} />\n\n                </Row>\n                <hr></hr>\n\n                \n                <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : 'white', color: isDarkModeOn ? 'white' : 'black' }}>Additional Details</h3>\n                <Row>\n                  <Col md={4}>\n                    <Form.Label>Owner's Aadhar Number</Form.Label>\n                    <Form.Control defaultValue={selectedStudio ? selectedStudio.aadharNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"number\" rows={1} placeholder=\"Enter aadhar Number\" name=\"aadharNumber\" />\n                  </Col>\n                  <Col md={4}>\n                      <Form.Label>GST Number</Form.Label>\n                      <Form.Control defaultValue={selectedStudio ? selectedStudio.gstNumber : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"number\" rows={1} placeholder=\"GST Number\" name=\"gstNumber\" />\n                  </Col>\n                  <Col md={4}>\n                      <Form.Label>Add Amenities</Form.Label>\n                  \n                      <ThemeProvider theme={darkTheme}>\n                      <CssBaseline />\n\n                    <Autocomplete\n                      style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                      multiple\n                      id=\"tags-standard\"\n                      options={amenityKeys}\n                      value={selectedAmenities}\n                      onChange={handleAmenitiesChange}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"standard\"\n                          placeholder=\"Select Amenities\"\n                          style={{backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }}\n                        />\n                      )}\n                    />\n                      </ThemeProvider>\n                </Col>\n                </Row>\n                <Row>\n                  \n                  <Col>\n                    <Form.Label>Enrollment Process</Form.Label>\n                    <Form.Control defaultValue={selectedStudio ? decodeUnicode(selectedStudio.enrollmentProcess) : ''} rows={6} style={{  height: '150px', backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} as=\"textarea\" placeholder=\"Enrollment Process\" name=\"enrollmentProcess\" />\n              \n                  </Col>\n                </Row>\n\n              <br></br>\n            <span>Time Table Of dance classes</span>\n            <Table bordered variant=\"light\">\n              <thead>\n                <tr>\n                  <th>Class Name</th>\n                  <th>Dance Forms</th>\n                  <th>Days</th>\n                  <th>Time</th>\n                  <th>Instructors</th>\n                  <th>Fee</th>\n                  <th>Level</th>\n                  <th style={{ paddingLeft: 0, paddingRight: 0 }}>\n                    <Button variant=\"primary\" onClick={handleAddRow}>\n                      <FaPlus/>\n                    </Button>\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.keys(tableData).map((rowKey, index) => (\n                  <tr key={rowKey}\n                  >\n                    <td style={{padding:'0rem'}}>\n                      <Form.Control\n                        type=\"text\"\n                        value={tableData[rowKey].className}\n                        onChange={(e) => handleTableChange(rowKey, 'className', e.target.value)}\n                        style={{height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                      />\n                    </td>\n                    <td style={{padding:'0rem'}}>\n                      <Form.Control\n                        as=\"select\"\n                        value={tableData[rowKey].danceForms}\n                        onChange={(e) => handleTableChange(rowKey, 'danceForms', e.target.value)}\n                        style={{height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                      >\n                        <option value=\"\">Select a dance form</option>\n                        {danceStylesOptions.map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                        </Form.Control>\n                    </td>\n                    <td style={{padding:'0rem'}}>\n                      <MultiSelect value={tableData[rowKey] && tableData[rowKey].days && tableData[rowKey].days.split(',').filter(day => day !== '')}\n                        onChange={(event) => handleTableChange(rowKey, 'days', event.target.value)}\n                        options={daysOfWeek}\n                        placeholder=\"class days\" maxSelectedLabels={7} className=\"w-full md:w-20rem\"\n                        style={{color: '#000', width: '100%'}}\n                      />\n                    </td>\n                    <td style={{padding:'0rem'}}>\n                      <Form.Control\n                        type=\"text\"\n                        value={tableData[rowKey].time}\n                        //onChange={(e) => handleTableChange(rowKey, 'time', e.target.value)}\n                        onClick={() => handleTimePickerOpen(rowKey,tableData[rowKey].time)}\n                      />\n                      {showTimePicker && (\n                      <TimeRangePicker\n                        show={showTimePicker}\n                        handleClose={handleTimePickerClose}\n                        handleSelect={handleTimeSelect}\n                        defaultTime={tableData[selectedRowIndex]?.time || \"00:00-00:00\"} // selectedRowIndex\n                      />\n                    )}\n                    </td>\n                    <td style={{padding:'0rem', width:'20rem'}}>\n                      <Autocomplete\n                        multiple\n                        options={instructorNamesWithIds}\n                        value={tableData[rowKey] && tableData[rowKey].instructors ? tableData[rowKey].instructors : []}\n                        onChange={(_, values) => handleTableChange(rowKey, 'instructors', values)}\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            variant=\"standard\"\n                            placeholder=\"Select Instructors\"\n                          />\n                        )}\n                      />\n                    </td>\n                    <td style={{padding:'0rem'}}>\n                      <Form.Control\n                        type=\"text\"\n                        value={tableData[rowKey].fee?tableData[rowKey].fee:\"\"}\n                        onChange={(e) => handleTableChange(rowKey, 'fee', e.target.value)}\n                        style={{height: 'auto',lineHeight: '1.5em',padding: '8px'}}\n                      />\n                    </td>\n                    <td style={{padding:'0rem'}}>\n                      <Form.Control\n                        as=\"select\"\n                        value={tableData[rowKey].level?tableData[rowKey].level:\"\"}\n                        onChange={(e) => handleTableChange(rowKey, 'level', e.target.value)}\n                        style={{height: 'auto', lineHeight: '1.5em',padding: '8px'}}\n                      >\n                        <option value=\"\">Select a Level</option>\n                         <option value=\"Beginner\">Beginner</option>\n                      <option value=\"Intermediate\">Intermediate</option>\n                      <option value=\"Advanced\">Advanced</option>\n                      <option value=\"Misc\">Misc</option>\n\n                        </Form.Control>\n                    </td>\n                    <td style={{padding:'0rem'}}>\n                      <Button variant=\"danger\" onClick={() => handleRemoveRow(rowKey)}>\n                        <FaMinus/>\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n\n            </Table>\n            <br></br>\n            <h3 style={{ backgroundColor: isDarkModeOn ? '#202020' : '', color: isDarkModeOn ? 'white' : 'black' }}>Social Media Links</h3>\n               <Row>\n            <Col md={4}>\n                          <Form.Label>Instagram</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.instagram : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Instagram Link\" name=\"instagram\" />\n                        </Col>\n                        <Col md={4}>\n                          <Form.Label>Facebook</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.facebook : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Facebook Link\" name=\"facebook\" />\n                        </Col>\n                        <Col md={4}>\n                          <Form.Label>YouTube</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.youtube : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"YouTube Link\" name=\"youtube\" />\n                        </Col>\n                        <Col md={4}>\n                          <Form.Label>Twitter</Form.Label>\n                          <Form.Control defaultValue={selectedStudio ? selectedStudio.twitter : ''} style={{ backgroundColor: isDarkModeOn ? '#333333' : '', color: isDarkModeOn ? 'white' : 'black' }} type=\"text\" rows={1} placeholder=\"Twitter Link\" name=\"twitter\" />\n                        </Col>\n                        </Row>\n\n            <br></br>\n            <Button style={{ backgroundColor: isDarkModeOn ? '#892CDC' : 'black', color:'white'  }} type=\"submit\">\n              Update Studio\n            </Button>\n            </Form>\n            {studioId && studioId.length > 0 && selectedStudioId && (\n              <>\n                <div>\n                  <ImageUpload entityId={selectedStudioId} title={\"Studio Images\"} storageFolder={STORAGES.STUDIOIMAGES} maxImageCount={10} />\n                </div>\n                <br />\n                <div>\n                  <ImageUpload entityId={selectedStudioId} title={\"Studio Icon\"} storageFolder={STORAGES.STUDIOICON} maxImageCount={1} />\n                </div>\n                <div>\n                  <ImageUpload entityId={selectedStudioId} title={\"Studio Announcement Images\"} storageFolder={STORAGES.STUDIOANNOUNCEMENTS} maxImageCount={10}/>\n                </div>\n                <br />\n              </>\n            )}\n      {showUpdateSuccessAlert && (\n        <AlertPopup\n          type=\"info\"\n          message=\"Studio Updated successfully\"\n          timeOfDisplay={3000}\n          fontSize=\"10px\"\n          fontWeight=\"bold\"\n        />\n      )}\n      {showUpdateErrorAlert && (\n        <AlertPopup\n          type=\"warning\"\n          message=\"Studio Update failed\"\n          timeOfDisplay={3000}\n          fontSize=\"10px\"\n          fontWeight=\"bold\"\n        />\n      )}\n    </div>\n  );\n}\n\nexport default StudioUpdate;\n","import React from 'react';\nimport { Row, Col  } from 'react-bootstrap';\nimport { useState, useEffect } from 'react';\nimport { db } from '../config';\nimport { doc, getDoc,collection,where,getDocs,query } from \"firebase/firestore\";\nimport { COLLECTIONS } from '../constants';\nimport StudioAdd from '../Components/StudioAdd';\nimport StudioUpdate from '../Components/StudioUpdate';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { useAuth } from '../context/AuthContext';\nimport CardSliderCard from '../Components/CardSliderCard';\nimport Tab from '@mui/material/Tab';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\nimport { Box } from '@mui/material';\n\n\n\nfunction CreatorStudio() {\n  const [studio, setStudio] = useState([]);\n  const [studioId, setStudioId] = useState([]);\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  const [instructors, setInstructors] = useState([]);\n  const [isCreator, setIsCreator] = useState(false);\n  const [premiumTill, setPremiumTill] = useState(-1);\n  const { currentUser } = useAuth();\n  const [value, setValue] = React.useState('1');\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n\n  useEffect(() => {\n    console.log(\"Creator Studio getCreatorMode\")\n    const getCreatorMode = async (event) => {\n      try{\n      const userRef = doc(db, \"User\", currentUser.uid);\n      const userSnap = await getDoc(userRef);\n      if (userSnap.exists()) {\n        console.log(\"User there\",userSnap.data(),userSnap.data().CreatorMode,JSON.parse(localStorage.getItem('userInfoFull')));\n        if(userSnap.data() != null){\n          \n          setIsCreator(userSnap.data().CreatorMode)\n          setPremiumTill(userSnap.data().isPremium)\n          console.log(\"Premium Till\",premiumTill,userSnap.data())\n        }else{\n          console.log(\"userSnap.data() null\")\n        }\n      } else {\n        console.log(\"User not found but workshop created... error\");\n      }\n      }catch(error){\n        console.log(\" error\");\n      }\n    }\n  \n    getCreatorMode();\n  }, [isCreator]); // Run once on mount\n\n    // Fetch instructors for the current user\n  useEffect(() => {\n    console.log(\"Creator Studio fetchInstructors\")\n  const fetchInstructors = async () => {\n    let userId = null;\n    if (\n      JSON.parse(localStorage.getItem('userInfo')) &&\n      JSON.parse(localStorage.getItem('userInfo')).UserId\n    ) {\n      userId = JSON.parse(localStorage.getItem('userInfo')).UserId;\n    }\n    if (!userId) {\n      console.log('User not found');\n      alert('User not found');\n      return;\n    }\n\n    const instructorRef = collection(db, COLLECTIONS.INSTRUCTORS);\n    const q = query(instructorRef, where('createdBy', '==', userId));\n    const querySnapshot = await getDocs(q);\n    \n    const instructorsList = [];\n    querySnapshot.forEach((doc) => {\n      instructorsList.push({\n        id: doc.id,\n        name: doc.data().name,      \n      });\n    });\n    console.log(\"Hiii\", instructorsList)\n    setInstructors(instructorsList);\n  };\n\n  fetchInstructors();\n  }, []);\n\n \n  useEffect(() => {\n    console.log(\"Creator Studio getStudioCreated\")\n    const getStudioCreated = async ()=>{\n      const q = query(collection(db, COLLECTIONS.STUDIO), where(\"UserId\", \"==\", JSON.parse(localStorage.getItem('userInfo')).UserId)    );\n      console.log(\"Hiiii\",JSON.parse(localStorage.getItem('userInfo')).UserId)\n      const querySnapshot = await getDocs(q);\n      console.log(\"Studios : \",querySnapshot)\n      const studiosOfUser = querySnapshot.docs.filter(doc => doc.data().studioName).map(doc => \n        { const data = doc.data();\n          return {\n            id: doc.id, // Include the document ID in the data\n            ...data\n          };\n      });\n      localStorage.setItem(\"StudioCreated\", JSON.stringify(studiosOfUser));\n      setStudio(studiosOfUser);\n      setStudioId(studiosOfUser.map((studio) => (String(studio.studioName) + \" :\" + String(studio.id))));\n      console.log(studio)\n      console.log(\"studioId\",studioId)\n    };\n      \n      getStudioCreated();\n    },[setStudio]);\n \n  useEffect(() => {\n    console.log(\"Creator Studio setStudioId\")\n    // Fetch the list of studios created by the user from localStorage\n    const studiosOfUser = JSON.parse(localStorage.getItem('StudioCreated')) || [];\n    setStudio(studiosOfUser);\n\n    // Create the list of studio IDs with the format \"studioName: studioId\"\n    const studioIdList = studiosOfUser.map((studio) => `${studio.studioName} : ${studio.id}`);\n    setStudioId(studioIdList);\n\n    console.log(\"studio:\", studio);\n    console.log(\"studioId\", studioId);\n  }, [setStudioId]);\n\n  console.log(\"studio :\",studio)\n  return (\n    <div>\n      <br></br>\n      {isCreator?(\n        \n       <>\n       <Box sx={{ width: '100%', typography: 'body1' }}>\n      <TabContext value={value}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <TabList style={{color: isDarkModeOn ? 'white' : 'black'}} onChange={handleChange} aria-label=\"lab API tabs example\">\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Add Studio\" value=\"1\" />\n            <Tab style={{color: isDarkModeOn ? 'white' : 'black'}} label=\"Update Studio\" value=\"2\" />\n          \n          </TabList>\n        </Box>\n        <TabPanel value=\"1\">\n\n        <StudioAdd instructors={instructors} />\n        </TabPanel>\n        <TabPanel value=\"2\">\n        <>\n        <StudioUpdate\n                  studio={studio}\n                  setStudio={setStudio}\n                  instructors={instructors}\n                  studioId={studioId}\n                  setStudioId={setStudioId}\n                />\n        </>\n    \n        </TabPanel>\n        \n      </TabContext>\n    </Box>\n      </>\n      ):\"\"}\n \n      <h3 style={{color: isDarkModeOn ? 'white' : 'black'}}>Your Studios:</h3>\n       <ul>\n      <Row xs={1} md={3} lg={4} className=\"g-4\">\n        {studio.length > 0 ? (\n          studio.map((studio, index) => (\n            <Col key={index}>\n              <a href={`#/studio/${studio.studioId}`} style={{ textDecoration: \"none\" }}>\n                <CardSliderCard studio={studio}/>\n              </a>\n          </Col>\n          ))\n        ) : (\n          <p style={{color: isDarkModeOn ? 'white' : 'black'}}>No studio yet!</p>\n        )}\n      </Row>\n      <br/>\n      </ul>\n    </div>\n  )\n}\nexport default CreatorStudio"],"names":["_ref","studio","_jsx","href","id","children","NStudioCard","data","img_src","ImageUpload","entityId","storageFolder","title","maxImageCount","updateMode","disable","showSnackbar","useSnackbar","selectedFiles","setSelectedFiles","useState","uploadedFiles","setUploadedFiles","newFiles","setNewFiles","deletedFiles","setDeletedFiles","isDarkModeOn","useSelector","selectDarkModeStatus","console","log","filesizes","bytes","decimals","arguments","length","undefined","dm","i","Math","floor","parseFloat","pow","toFixed","useEffect","fetchStudioImages","truncatedFiles","slice","alert","calculateDelta","selectedFileIds","map","file","uploadedFileIds","imagesToDelete","filter","includes","newImages","async","folderPath","folderRef","ref","storage","fileList","listAll","files","Promise","all","items","downloadURL","getDownloadURL","fileRef","name","filename","fileURL","error","className","style","display","width","justifyContent","flex","backgroundColor","_jsxs","STORAGES","STUDIOIMAGES","type","onChange","e","Array","from","target","updatedFiles","forEach","reader","FileReader","onloadend","push","shortid","filetype","fileimage","result","datetime","lastModifiedDate","toLocaleString","filesize","size","prevFiles","readAsDataURL","multiple","position","Card","sx","maxWidth","match","src","alt","maxHeight","objectFit","IconButton","disabled","onClick","window","confirm","fileToDelete","find","prevDeletedFiles","handleDeleteSelectedFile","top","right","DeleteIcon","color","CardContent","deleteAllImagesInFolder","uploadImages","deleteImages","hidden","defaultProps","studioId","cardStyle","padding","marginRight","boxShadow","transition","variant","transform","AspectRatio","ratio","iconUrl","loading","height","overflow","Stack","direction","spacing","bottom","left","danceStyles","split","form","index","Chip","marginBottom","fontSize","bgcolor","danceStylesColorChips","trim","Link","fontWeight","textColor","underline","overlay","extDecoder","studioName","Typography","level","street","zIndex","borderRadius","Favorite","avgRating","_defaultTime$split$","show","handleClose","handleSelect","defaultTime","startTime_i","endTime_i","renderTimeOptions","defaultValue","timeOptions","generateTimeOptions","options","option_AM","option_PM","hours","minutes","formattedHours","toString","padStart","formattedMinutes","timeString","formattedHours12","_Fragment","value","option","Modal","onHide","Header","closeButton","Title","Body","Row","Col","Form","Group","Label","Control","as","lineHeight","Footer","Button","daysOfWeek","tableData","setTableData","instructorNamesWithIds","showTimePicker","setShowTimePicker","selectedRowIndex","setSelectedRowIndex","selectedRow","setSelectedRow","danceStylesOptions","setDefaultTime","handleTableChange","field","prevData","isArray","join","newData","handleTimePickerClose","handleTimeSelect","startTime","endTime","currentTime","time","currentStartTime","currentEndTime","Table","bordered","handleAddRow","danceForms","days","instructors","fee","status","FaPlus","row","_tableData$selectedRo","MultiSelect","day","event","placeholder","maxSelectedLabels","handleTimePickerOpen","TimeRangePicker","Autocomplete","_","values","renderInput","params","TextField","splice","handleRemoveRow","FaMinus","libraries","PinMarker","_ref5","text","textAlign","FaMapMarkerAlt","selectedLocation","setSelectedLocation","center","setCenter","lat","lng","address","setAddress","apiKey","LoadScript","googleMapsApiKey","PlacesAutocomplete","newAddress","onSelect","results","geocodeByAddress","selectedAddress","latLng","getLatLng","_ref2","getInputProps","suggestions","getSuggestionItemProps","suggestion","active","description","GoogleMapReact","bootstrapURLKeys","key","defaultCenter","defaultZoom","_ref3","StudioId","jsx","encodeToUnicode","utf8Encoded","TextEncoder","encode","String","fromCharCode","newStudioId","setNewStudioId","selectedInstructors","setSelectedInstructors","selectedDanceStyles","setSelectedDanceStyles","selectedAmenities","setSelectedAmenities","instructor","isReady","setIsReady","locationOptions","indianCities","amenityKeys","Object","keys","AMENITIES_ICONS","activeStep","setActiveStep","handleNext","prevActiveStep","handleBack","darkTheme","createTheme","palette","mode","document","getElementById","q","query","collection","db","DRAFT_COLLECTIONS","DRAFT_STUDIOS","where","JSON","parse","localStorage","getItem","UserId","querySnapshot","getDocs","empty","addDoc","aboutStudio","founderName","aboutFounder","mobileNumber","whatsappNumber","mailAddress","numberOfHalls","maximumOccupancy","instructorsNames","buildingName","city","landmark","pincode","state","country","geolocation","aadharNumber","gstNumber","enrolledId","reviews","author","displayName","isPremium","addAmenities","enrollmentProcess","creatorEmail","email","instagram","facebook","youtube","twitter","visibilty","studios","doc","foundStudio","unicodeString","c","charCodeAt","TextDecoder","decode","Uint8Array","decodeUnicode","main","intervalId","studioRef","setInterval","reduce","accumulator","current","updateDoc","err","clearInterval","Stepper","alternativeLabel","label","Step","StepLabel","onSubmit","preventDefault","COLLECTIONS","STUDIO","userRef","userSnap","getDoc","exists","StudioCreated","deleteDoc","resetDraft","controlId","md","rows","minHeight","minheight","ThemeProvider","theme","CssBaseline","handleDanceStylesChange","xs","MuiButton","handleInstructorChange","rel","textDecoration","StudioTable","handleAmentiesChange","MapsInput","STUDIOICON","alignItems","SuccessMessage","message","timeOfDisplay","fontStyle","showAlert","setShowAlert","timer","setTimeout","clearTimeout","Container","Alert","marginTop","onClose","dismissible","setStudio","setStudioId","selectedStudio","setSelectedStudio","selectedStudioId","setSelectedStudioId","selectedStudioFrozenClassRows","setSelectedStudioFrozenClassRows","showUpdateSuccessAlert","setShowUpdateSuccessAlert","showUpdateErrorAlert","setShowUpdateErrorAlert","studiosOfUser","studioIdList","maxIndex","max","Number","nameIdLocal","nameId","indexOfColon","lastIndexOf","substring","reset","selectedId","pop","studioDoc","loc","studioItem","newCity","prevState","handleAmenitiesChange","paddingLeft","paddingRight","newRowKey","rowKey","STUDIOANNOUNCEMENTS","AlertPopup","setInstructors","isCreator","setIsCreator","premiumTill","setPremiumTill","currentUser","useAuth","setValue","React","uid","CreatorMode","getCreatorMode","userId","instructorRef","INSTRUCTORS","instructorsList","fetchInstructors","docs","setItem","stringify","getStudioCreated","Box","typography","TabContext","borderBottom","borderColor","TabList","handleChange","newValue","Tab","TabPanel","StudioAdd","StudioUpdate","lg","CardSliderCard"],"sourceRoot":""}