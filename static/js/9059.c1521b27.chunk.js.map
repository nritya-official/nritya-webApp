{"version":3,"file":"static/js/9059.c1521b27.chunk.js","mappings":"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","sources":["Components/ImageUpload.js","Components/TimeRange.js","utils/common.js"],"sourcesContent":["import React, { useState, useEffect, forwardRef, useImperativeHandle, useRef } from \"react\";\nimport shortid from \"shortid\";\nimport { ref as firebaseRef, getDownloadURL, listAll } from 'firebase/storage';\nimport { storage } from '../config';\nimport { useSelector } from 'react-redux'; // Import useSelector and useDispatch\nimport { selectDarkModeStatus } from '../redux/selectors/darkModeSelector'; \nimport { deleteAllImagesInFolder,deleteImages,uploadImages} from '../utils/firebaseUtils'\nimport { Card, CardContent, IconButton } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useSnackbar } from \"../context/SnackbarContext\";\nimport { STORAGES } from \"../constants\";\n\n\nconst ImageUpload = forwardRef(({entityId,storageFolder,title, maxImageCount=10, minImageCount, updateMode, disable }, ref) => {\n  const showSnackbar = useSnackbar();\n  const imageInputRef = useRef(null);\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [newFiles, setNewFiles] = useState([]); // Track new files to be added\n  const isDarkModeOn = useSelector(selectDarkModeStatus); // Use useSelector to access isDarkModeOn\n  //console.log(\"Received props=> entityId:\", entityId, \"|storageFolder:\", storageFolder);\n  const [progressDelete, setProgressDelete] = useState(-1);\n  const [progressUpdate, setProgressUpdate] = useState(-1);\n  const [isUploadSuccessful, setIsUploadSuccessful] = useState(false);\n\n  console.log(\"Kyc enitity id \",entityId, disable)\n  const filesizes = (bytes, decimals = 2) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n  };\n\n  useEffect(() => {\n   // console.log(\"Fetching image for\",entityId)\n    if(entityId){\n      fetchStudioImages(entityId); // Fetch images when component mounts\n    }\n  }, [entityId]);\n\n  useEffect(() => {\n   // console.log(\"Selected files:\", selectedFiles);\n    if (maxImageCount && selectedFiles.length > maxImageCount) {\n      const truncatedFiles = selectedFiles.slice(0, maxImageCount);\n      alert(`Exceeded maxImageCount, keeping first ${maxImageCount} files.`);\n      imageInputRef.current.value = null;\n      setSelectedFiles(truncatedFiles);\n    }\n  }, [selectedFiles, maxImageCount]);\n  \n\n  const handleInputChange = (e) => {\n    // console.log(\"handleInputChange\")\n    const files = Array.from(e.target.files);\n    const updatedFiles = [];\n    // console.log(\"file array \",files.length)\n    files.forEach((file) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        updatedFiles.push({\n          id: shortid.generate(),\n          filename: file.name,\n          filetype: file.type,\n          fileimage: reader.result,\n          datetime: file.lastModifiedDate.toLocaleString(\"en-IN\"),\n          filesize: filesizes(file.size),\n          file: file, // Store the actual file object\n        });\n\n        if (updatedFiles.length === files.length) {\n          setSelectedFiles((prevFiles) => [...prevFiles, ...updatedFiles]);\n          setNewFiles(updatedFiles);\n          imageInputRef.current.value = null;\n          // console.log(\"New files in total\",setNewFiles.length)\n        }\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleDeleteSelectedFile = (id) => {\n    if (window.confirm(\"Are you sure you want to delete this image?\")) {\n      setSelectedFiles((prevFiles) =>\n        prevFiles.filter((file) => file.id !== id)\n      );\n    }\n  };\n\n  const handleUploadSubmit = async () => {\n    if (!entityId) {\n      alert(\"No studio selected\");\n      return;\n    }\n\n    setProgressDelete(-1);\n    setProgressUpdate(-1);\n\n    try {\n      if (maxImageCount === 1 && selectedFiles.length >= minImageCount) {\n        // Delete all previous images in the folder\n        await deleteAllImagesInFolder(storageFolder, entityId);\n        await uploadImages(storageFolder,newFiles, entityId, setProgressUpdate);\n        showSnackbar(\"Image uploaded successfully\", \"success\");\n        setIsUploadSuccessful(true);\n      } else {\n        // Calculate images to delete and add\n        const { imagesToDelete, newImages } = calculateDelta(selectedFiles, uploadedFiles);\n\n        if (minImageCount && newImages.length < minImageCount) {\n          showSnackbar(`Minimum ${minImageCount} image(s) are required`, \"error\");\n          return;\n        }\n\n        // Delete images if there are any\n        if (imagesToDelete.length > 0) {\n          await deleteImages(storageFolder, imagesToDelete, entityId, setProgressDelete);\n          showSnackbar(\"Image(s) deleted successfully\", \"success\");\n        }\n\n        // Upload new images if there are any\n        if (newImages.length > 0) {\n          await uploadImages(storageFolder, newImages, entityId, setProgressUpdate);\n          showSnackbar(\"Image(s) uploaded successfully\", \"success\");\n        }\n        setIsUploadSuccessful(true);\n      }\n\n      imageInputRef.current.value = null;\n      // alert(\"Images Uploaded/Deleted\");\n    } catch (error) {\n      setIsUploadSuccessful(false);\n      console.error(\"Error uploading/deleting images:\", error);\n    }\n  };\n\n  // Function to calculate images to delete and new images to upload\n  const calculateDelta = (selectedFiles, uploadedFiles) => {\n    const selectedFileIds = selectedFiles.map(file => file.id);\n    const uploadedFileIds = uploadedFiles.map(file => file.id);\n\n    const imagesToDelete = uploadedFiles.filter(file => !selectedFileIds.includes(file.id));\n    const newImages = selectedFiles.filter(file => !uploadedFileIds.includes(file.id));\n\n    return { imagesToDelete, newImages };\n  };\n\n\n  const fetchStudioImages = async (entityId) => {\n    setSelectedFiles([]);\n    setNewFiles([]);\n    try {\n      const folderPath = `${storageFolder}/${entityId}`;\n      console.log(folderPath)\n      const folderRef = firebaseRef(storage, folderPath);\n      const fileList = await listAll(folderRef);\n\n      const files = await Promise.all(\n        fileList.items.map(async (fileRef) => {\n          const downloadURL = await getDownloadURL(fileRef);\n\n          return {\n            id: fileRef.name,\n            filename: fileRef.name,\n            fileURL: downloadURL,\n          };\n        })\n      );\n      // console.log('File fetching',files);\n      setUploadedFiles(files); // Update the uploadedFiles state with fetched data\n      setSelectedFiles(files);\n    } catch (error) {\n      console.error('Error fetching user images:', error);\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    isValid: () => {\n      if (minImageCount === 0) return true;\n      return isUploadSuccessful\n    },\n  }));\n\n  return (\n    <div className=\"fileupload-view\" style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\n      <div className=\"row justify-content-center m-0\" style={{ flex: '1',justifyContent: 'center' }}>\n        <div className=\"col-md-6\" style={{ flex: '1' ,justifyContent: 'center'}}>\n          <div className=\"card mt-5\">\n            <div className=\"card-body\" style={{ backgroundColor: isDarkModeOn ? '#333333' : 'white' }}>\n              <div className=\"kb-data-box\">\n                <div className=\"kb-modal-data-title\">\n                  <div className=\"kb-data-title\" style={{justifyContent:'center',flex: '1'}}>\n                    <h4>{title}</h4>\n                    <p>Max no of image(s):{maxImageCount} {storageFolder === STORAGES.STUDIOIMAGES && <p>Add at least 5 images</p>}</p>\n                  </div>\n                </div>\n                <div style={{  backgroundColor: isDarkModeOn ? '#333333' : 'white'}}>\n                  <div className=\"kb-file-upload\">\n                    <div className=\"file-upload-box\">\n                      <input\n                        ref={imageInputRef}\n                        type=\"file\"\n                        id=\"fileupload\"\n                        className=\"file-upload-input\"\n                        onChange={handleInputChange}\n                        multiple\n                      />\n\n                    </div>\n                  </div>\n                  <br></br>\n                  <div className=\"kb-attach-box mb-3\">\n                  <div className=\"row\">\n                    {entityId && selectedFiles.length > 0 ? (\n                      selectedFiles.map((file) => (\n                        \n                        <div key={file.id} className=\"col-6 col-md-3 mb-3\" style={{ position: 'relative' }}>\n                          \n                          <Card sx={{ maxWidth: 345 }}>\n                            {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                              <div style={{ position: 'relative' }}>\n                                <img\n                                  src={file.fileimage ? file.fileimage : file.fileURL}\n                                  alt={file.filename}\n                                  className=\"card-img-top\"\n                                  style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                                />\n                                <IconButton\n                                  aria-label=\"delete\"\n                                  disabled={disable}\n                                  onClick={() => handleDeleteSelectedFile(file.id)}\n                                  style={{ position: 'absolute', top: 0, right: 0, backgroundColor: 'rgba(255, 255, 255, 0.5)' }}\n                                >\n                                  <DeleteIcon style={{color:\"ff0000\"}}/>\n                                </IconButton>\n                              </div>\n                            ) : (\n                              <CardContent>\n                                <i className=\"far fa-file-alt\"></i>\n                              </CardContent>\n                            )}\n                          </Card>\n                        </div>\n                        \n                      ))\n                    ) : (\n                      <div className=\"col-12 text-center\">\n                        <p>No images selected</p>\n                      </div>\n                    )}\n                  </div>\n\n                  </div>\n\n                  \n                  <div className=\"kb-buttons-box\">\n                    <button\n                      type=\"button\"\n                      className=\"btn div-submit\"\n                      style={{ backgroundColor: isDarkModeOn ? '#892CDC' : 'black', color:'white'  }}\n                      onClick={handleUploadSubmit}\n                      disabled={disable}\n                    >\n                      Image Upload\n                    </button>\n                  </div>\n                </div>\n                {selectedFiles.length > 0 && (\n                  <div className=\"kb-attach-box\" hidden>\n                    <div className=\"row\">\n                    <hr />\n                    {selectedFiles.map((file) => (\n                      <div key={file.id} className=\"col-6 col-md-3 mb-3\">\n                      <div className=\"card\">\n                        {file.filename.match(/\\.(jpg|jpeg|png|gif|svg)$/i) ? (\n                          <img\n                            src={file.fileimage}\n                            alt={file.filename}\n                            className=\"card-img-top\"\n                            style={{ maxHeight: \"150px\", objectFit: \"cover\" }}\n                          />\n                        ) : (\n                          <div className=\"card-body\">\n                            <i className=\"far fa-file-alt\"></i>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n              { progressDelete >= 0 && (\n                    <div>\n                        <p style={{ color: isDarkModeOn ? '#fff' : '#000' }}>\n                            Deleting images... {progressDelete.toFixed(2)}%\n                        </p>\n                        <progress \n                            value={progressDelete} \n                            max=\"100\" \n                            style={{\n                                color: isDarkModeOn ? '#fff' : '#000'\n                            }}\n                        >\n                            {progressDelete.toFixed(2)}%\n                        </progress>\n                    </div>\n                )}\n\n                { progressUpdate >= 0 && (\n                    <div>\n                        <p style={{ color: isDarkModeOn ? '#fff' : '#000' }}>\n                            Uploading images... {progressUpdate.toFixed(2)}%\n                        </p>\n                        <progress \n                            value={progressUpdate} \n                            max=\"100\" \n                            style={{\n                                color: isDarkModeOn ? '#fff' : '#000'\n                            }}\n                        >\n                            {progressUpdate.toFixed(2)}%\n                        </progress>\n                    </div>\n                )}\n\n                            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\n// Set default prop values\nImageUpload.defaultProps = {\n  maxImageCount: 5, // Default maximum image count\n  updateMode: false,\n  disable:false,\n};\n\nexport default ImageUpload;","import React from \"react\";\nimport { Row, Col, Form } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { selectDarkModeStatus } from \"../redux/selectors/darkModeSelector\";\n\nconst TimeRange = ({ defaultTime, handleSelect }) => {\n  const startTime_i = defaultTime.split(\"-\")[0].trim();\n  const endTime_i = defaultTime.split(\"-\")[1]?.trim();\n\n  const isDarkModeOn = useSelector(selectDarkModeStatus);\n\n  const generateTimeOptions = () => {\n    const options = [];\n    let option_AM = [];\n    let option_PM = [];\n    \n    for (let hours = 0; hours < 24; hours++) {\n        for (let minutes = 0; minutes < 60; minutes += 30) {\n            const formattedMinutes = minutes.toString().padStart(2, \"0\");\n            \n            if (hours < 12) {\n                // Handle 12-hour format for AM, converting 0 hours to 12 for midnight\n                const formattedHours = hours === 0 ? 12 : hours;\n                option_AM.push(`${formattedHours}:${formattedMinutes} AM`);\n            } else {\n                // Handle 12-hour format for PM, converting 12-23 hours to 1-12 format\n                const formattedHours = hours === 12 ? 12 : hours % 12;\n                option_PM.push(`${formattedHours}:${formattedMinutes} PM`);\n            }\n        }\n    }\n\n    // Interleave AM and PM options to build the full list\n    for (let i = 0; i < option_AM.length || i < option_PM.length; i++) {\n        if (i < option_AM.length) {\n            options.push(option_AM[i]);\n        }\n        if (i < option_PM.length) {\n            options.push(option_PM[i]);\n        }\n    }\n\n    return options;\n};\n\n  const renderTimeOptions = (defaultValue) => {\n    const timeOptions = generateTimeOptions();\n\n    return (\n      <>\n        <option value={defaultValue}>{defaultValue}</option>\n        {timeOptions.map((option) => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </>\n    );\n  };\n\n  return (\n    <Row>\n      <Col>\n        <Form.Group>\n          <Form.Label>Start Time</Form.Label>\n          <Form.Control\n            as=\"select\"\n            onChange={(e) => handleSelect(e.target.value, null)}\n            style={{\n              background: \"transparent\",\n              borderWidth: 1,\n              borderColor: isDarkModeOn ? \"white\" : \"black\",\n              height: 'auto',\n            }}\n          >\n            {renderTimeOptions(startTime_i)}\n          </Form.Control>\n        </Form.Group>\n      </Col>\n      <Col>\n        <Form.Group>\n          <Form.Label>End Time</Form.Label>\n          <Form.Control\n            as=\"select\"\n            onChange={(e) => handleSelect(null, e.target.value)}\n            style={{\n              background: \"transparent\",\n              borderWidth: 1,\n              borderColor: isDarkModeOn ? \"white\" : \"black\",\n              height: 'auto',\n            }}\n          >\n            {renderTimeOptions(endTime_i)}\n          </Form.Control>\n        </Form.Group>\n      </Col>\n    </Row>\n  );\n};\n\nexport default TimeRange;\n","import { COLORS, SERVER_URLS,BASEURL_DEV,BASEURL_PROD } from \"../constants\";\n\nexport async function postData(dbPayload, collection_name, notify, metadata) {\n  const BASEURL = BASEURL_PROD;\n  const endpoint = 'crud/newEntity/'; // Define your endpoint here\n  const authToken = localStorage.getItem(\"authToken\");\n  try {\n    const response = await fetch(BASEURL + endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        data: dbPayload,\n        collection_name: collection_name,\n        notify: notify,\n        metadata : metadata,\n      }),\n    });\n\n    if (!response.ok) {\n      console.log('Error in postData:', response);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response;\n  } catch (error) {\n    console.error('Error in postData:', error);\n    throw error;\n  }\n}\n\nexport async function putData(dbPayload, collection_name, entity_id, notify = null, metadata = null) {\n  const BASEURL = BASEURL_PROD;\n  const endpoint = `crud/updateEntity/${entity_id}`;\n  const authToken = localStorage.getItem(\"authToken\");\n  try {\n    const response = await fetch(BASEURL + endpoint, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        data: dbPayload,\n        collection_name: collection_name,\n        notify: notify,\n        metadata : metadata,\n      }),\n    });\n\n    if (!response.ok) {\n      console.log('Error in postData:', response);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response;\n  } catch (error) {\n    console.error('Error in postData:', error);\n    throw error;\n  }\n}\n\nexport const getRandomColor = () => {\n  const colorKeys = Object.keys(COLORS);\n  const randomKey = colorKeys[Math.floor(Math.random() * colorKeys.length)];\n  return COLORS[randomKey];\n};\n\nexport const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const bookEntity = async (bookingData) => {\n  const url = `${SERVER_URLS.CLOUD}bookings/bookEntity/`; \n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        userId: bookingData.userId,\n        entityType: bookingData.entityType,\n        entityId: bookingData.entityId,\n        associatedStudioId: bookingData.associatedStudioId,\n        emailLearner: bookingData.emailLearner,\n        personsAllowed: bookingData.personsAllowed,\n        pricePerPerson: bookingData.pricePerPerson,\n      })\n    });\n\n    const result = await response.json();\n    \n    if (response.ok) {\n      console.log('Booking successful:', result);\n      return result;  // Return the successful result\n    } else {\n      console.error('Booking failed:', result);\n      return result;  // Return null or an error message\n    }\n    \n  } catch (error) {\n    console.error('Error occurred while booking:', error);\n    return null;  // Return null or an error message\n  }\n};\n\n\n// Function to decode a Unicode (UTF-8) encoded string back to the original text\nexport const decodeUnicode = (unicodeString) => {\n  const utf8Encoded = unicodeString.split('').map((c) => c.charCodeAt(0));\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(new Uint8Array(utf8Encoded));\n};\n\nexport const convertToHtmlEntities= (text) =>{\n  return text.replace(/[\\u00A0-\\u9999<>\\&]/gim, function(i) {\n      return '&#' + i.charCodeAt(0) + ';';\n  });\n}\n\nexport const getYoutubeVideoId = (link)=> {\n  console.log(\"MediaDisplay\", link)\n  if (!link){\n    return null\n  }\n  const text = link.trim();\n  const youtubeRegExp = /(?:https?:\\/\\/)?(?:www\\.|m\\.)?(?:youtube\\.com\\/(?:watch\\?v=|embed\\/|v\\/|shorts\\/)|youtu\\.be\\/)([\\w\\-]+)/;\n  const match = text.match(youtubeRegExp);\n  let videoId = null;\n\n  if (match) {\n    videoId = match[1];\n  }\n  console.log(\"MediaDisplay\", videoId)\n  return videoId\n}\n\nexport const formatDateString = (dateString = \"\") => {\n  // Split the input date string\n  const [year, month, day] = dateString.split('-');\n\n  // Create an array of month names\n  const monthNames = [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n  ];\n\n  // Determine the ordinal suffix for the day\n  const daySuffix = (day) => {\n      const lastDigit = day % 10;\n      const suffix = (lastDigit === 1 && day !== '11') ? 'st' :\n                     (lastDigit === 2 && day !== '12') ? 'nd' :\n                     (lastDigit === 3 && day !== '13') ? 'rd' : 'th';\n      return `${day}${suffix}`;\n  };\n\n  // Format and return the final date string\n  return `${daySuffix(day)} ${monthNames[parseInt(month) - 1]}, ${year}`;\n}\n\nexport const gradientStyles = [\n  { background: 'linear-gradient(to bottom right, #FFD700, #FFA500)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #00BFFF, #1E90FF)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #32CD32, #008000)', color: 'white' },\n  { background: 'linear-gradient(to bottom right, #FFA500, #FF4500)', color: 'black' },\n  { background: 'linear-gradient(to bottom right, #DC143C, #8B0000)', color: 'white' },\n  { background: 'linear-gradient(to bottom right, #000000, #2F4F4F)', color: 'white' },\n];"],"names":["ImageUpload","forwardRef","_ref","ref","entityId","storageFolder","title","maxImageCount","minImageCount","updateMode","disable","showSnackbar","useSnackbar","imageInputRef","useRef","selectedFiles","setSelectedFiles","useState","uploadedFiles","setUploadedFiles","newFiles","setNewFiles","isDarkModeOn","useSelector","selectDarkModeStatus","progressDelete","setProgressDelete","progressUpdate","setProgressUpdate","isUploadSuccessful","setIsUploadSuccessful","console","log","filesizes","bytes","decimals","arguments","length","undefined","dm","i","Math","floor","parseFloat","pow","toFixed","useEffect","fetchStudioImages","truncatedFiles","slice","alert","concat","current","value","calculateDelta","selectedFileIds","map","file","id","uploadedFileIds","imagesToDelete","filter","includes","newImages","async","folderPath","folderRef","firebaseRef","storage","fileList","listAll","files","Promise","all","items","downloadURL","getDownloadURL","fileRef","name","filename","fileURL","error","useImperativeHandle","isValid","_jsx","className","style","display","width","justifyContent","children","flex","_jsxs","backgroundColor","STORAGES","STUDIOIMAGES","type","onChange","e","Array","from","target","updatedFiles","forEach","reader","FileReader","onloadend","push","shortid","filetype","fileimage","result","datetime","lastModifiedDate","toLocaleString","filesize","size","prevFiles","readAsDataURL","multiple","position","Card","sx","maxWidth","match","src","alt","maxHeight","objectFit","IconButton","disabled","onClick","handleDeleteSelectedFile","window","confirm","top","right","DeleteIcon","color","CardContent","deleteAllImagesInFolder","uploadImages","deleteImages","hidden","max","defaultProps","_defaultTime$split$","defaultTime","handleSelect","startTime_i","split","trim","endTime_i","renderTimeOptions","defaultValue","timeOptions","generateTimeOptions","options","option_AM","option_PM","hours","minutes","formattedMinutes","toString","padStart","formattedHours","_Fragment","option","Row","Col","Form","Group","Label","Control","as","background","borderWidth","borderColor","height","postData","dbPayload","collection_name","notify","metadata","BASEURL","BASEURL_PROD","authToken","localStorage","getItem","response","fetch","method","headers","body","JSON","stringify","data","ok","Error","status","putData","entity_id","endpoint","bookEntity","url","SERVER_URLS","CLOUD","userId","bookingData","entityType","associatedStudioId","emailLearner","personsAllowed","pricePerPerson","json","getYoutubeVideoId","link","videoId","formatDateString","dateString","year","month","day","lastDigit","suffix","daySuffix","parseInt"],"sourceRoot":""}